# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractTransactionStatus -> public void setCompleted();1328020251;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1356735495;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1357119239;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1368482696;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1411399750;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1495868221;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1496259743;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1496837955;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1498780456;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> public void setCompleted();1516617801;Mark this transaction as completed, that is, committed or rolled back.;public void setCompleted() {_		this.completed = true__	};mark,this,transaction,as,completed,that,is,committed,or,rolled,back;public,void,set,completed,this,completed,true
AbstractTransactionStatus -> protected void setSavepoint(@Nullable Object savepoint);1496259743;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(@Nullable Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,nullable,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> protected void setSavepoint(@Nullable Object savepoint);1496837955;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(@Nullable Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,nullable,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> protected void setSavepoint(@Nullable Object savepoint);1498780456;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(@Nullable Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,nullable,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> protected void setSavepoint(@Nullable Object savepoint);1516617801;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(@Nullable Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,nullable,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void releaseSavepoint(Object savepoint) throws TransactionException;1356735495;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void releaseSavepoint(Object savepoint) throws TransactionException;1368482696;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void releaseSavepoint(Object savepoint) throws TransactionException;1411399750;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void releaseSavepoint(Object savepoint) throws TransactionException;1495868221;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void releaseSavepoint(Object savepoint) throws TransactionException;1496259743;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void releaseSavepoint(Object savepoint) throws TransactionException;1496837955;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void releaseSavepoint(Object savepoint) throws TransactionException;1498780456;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void releaseSavepoint(Object savepoint) throws TransactionException;1516617801;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see SavepointManager#releaseSavepoint(Object);@Override_	public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,savepoint,manager,release,savepoint,object;override,public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> public void releaseSavepoint(Object savepoint) throws TransactionException;1328020251;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> public void releaseSavepoint(Object savepoint) throws TransactionException;1357119239;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;public void releaseSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().releaseSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;public,void,release,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,release,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public boolean isRollbackOnly();1356735495;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();@Override_	public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;override,public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> @Override 	public boolean isRollbackOnly();1368482696;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();@Override_	public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;override,public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> @Override 	public boolean isRollbackOnly();1411399750;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();@Override_	public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;override,public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> @Override 	public boolean isRollbackOnly();1495868221;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();@Override_	public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;override,public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> @Override 	public boolean isRollbackOnly();1496259743;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();@Override_	public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;override,public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> @Override 	public boolean isRollbackOnly();1496837955;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();@Override_	public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;override,public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> @Override 	public boolean isRollbackOnly();1498780456;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();@Override_	public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;override,public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> @Override 	public boolean isRollbackOnly();1516617801;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();@Override_	public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;override,public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> @Override 	public void flush();1356735495;This implementations is empty, considering flush as a no-op.;@Override_	public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;override,public,void,flush
AbstractTransactionStatus -> @Override 	public void flush();1368482696;This implementations is empty, considering flush as a no-op.;@Override_	public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;override,public,void,flush
AbstractTransactionStatus -> @Override 	public void flush();1411399750;This implementations is empty, considering flush as a no-op.;@Override_	public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;override,public,void,flush
AbstractTransactionStatus -> @Override 	public void flush();1495868221;This implementations is empty, considering flush as a no-op.;@Override_	public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;override,public,void,flush
AbstractTransactionStatus -> @Override 	public void flush();1496259743;This implementations is empty, considering flush as a no-op.;@Override_	public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;override,public,void,flush
AbstractTransactionStatus -> @Override 	public void flush();1496837955;This implementations is empty, considering flush as a no-op.;@Override_	public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;override,public,void,flush
AbstractTransactionStatus -> @Override 	public void flush();1498780456;This implementations is empty, considering flush as a no-op.;@Override_	public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;override,public,void,flush
AbstractTransactionStatus -> @Override 	public void flush();1516617801;This implementations is empty, considering flush as a no-op.;@Override_	public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;override,public,void,flush
AbstractTransactionStatus -> @Override 	public Object createSavepoint() throws TransactionException;1356735495;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> @Override 	public Object createSavepoint() throws TransactionException;1368482696;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> @Override 	public Object createSavepoint() throws TransactionException;1411399750;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> @Override 	public Object createSavepoint() throws TransactionException;1495868221;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> @Override 	public Object createSavepoint() throws TransactionException;1496259743;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> @Override 	public Object createSavepoint() throws TransactionException;1496837955;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> @Override 	public Object createSavepoint() throws TransactionException;1498780456;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> @Override 	public Object createSavepoint() throws TransactionException;1516617801;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see SavepointManager#createSavepoint();@Override_	public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,savepoint,manager,create,savepoint;override,public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1328020251;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1356735495;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1357119239;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1368482696;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1411399750;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1495868221;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1496259743;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1496837955;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1498780456;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void createAndHoldSavepoint() throws TransactionException;1516617801;Create a savepoint and hold it for the transaction._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;public void createAndHoldSavepoint() throws TransactionException {_		setSavepoint(getSavepointManager().createSavepoint())__	};create,a,savepoint,and,hold,it,for,the,transaction,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;public,void,create,and,hold,savepoint,throws,transaction,exception,set,savepoint,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> protected Object getSavepoint();1328020251;Get the savepoint for this transaction, if any.;protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> protected Object getSavepoint();1356735495;Get the savepoint for this transaction, if any.;protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> protected Object getSavepoint();1357119239;Get the savepoint for this transaction, if any.;protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> protected Object getSavepoint();1368482696;Get the savepoint for this transaction, if any.;protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> protected Object getSavepoint();1411399750;Get the savepoint for this transaction, if any.;protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> @Nullable 	protected Object getSavepoint();1495868221;Get the savepoint for this transaction, if any.;@Nullable_	protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;nullable,protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> @Nullable 	protected Object getSavepoint();1496259743;Get the savepoint for this transaction, if any.;@Nullable_	protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;nullable,protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> @Nullable 	protected Object getSavepoint();1496837955;Get the savepoint for this transaction, if any.;@Nullable_	protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;nullable,protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> @Nullable 	protected Object getSavepoint();1498780456;Get the savepoint for this transaction, if any.;@Nullable_	protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;nullable,protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> @Nullable 	protected Object getSavepoint();1516617801;Get the savepoint for this transaction, if any.;@Nullable_	protected Object getSavepoint() {_		return this.savepoint__	};get,the,savepoint,for,this,transaction,if,any;nullable,protected,object,get,savepoint,return,this,savepoint
AbstractTransactionStatus -> public boolean isRollbackOnly();1328020251;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> public boolean isRollbackOnly();1357119239;Determine the rollback-only flag via checking both the local rollback-only flag_of this TransactionStatus and the global rollback-only flag of the underlying_transaction, if any._@see #isLocalRollbackOnly()_@see #isGlobalRollbackOnly();public boolean isRollbackOnly() {_		return (isLocalRollbackOnly() || isGlobalRollbackOnly())__	};determine,the,rollback,only,flag,via,checking,both,the,local,rollback,only,flag,of,this,transaction,status,and,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,see,is,local,rollback,only,see,is,global,rollback,only;public,boolean,is,rollback,only,return,is,local,rollback,only,is,global,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1328020251;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called <code>setRollbackOnly</code>_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,code,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1356735495;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1357119239;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1368482696;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1411399750;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1495868221;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1496259743;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1496837955;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1498780456;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> public boolean isLocalRollbackOnly();1516617801;Determine the rollback-only flag via checking this TransactionStatus._<p>Will only return "true" if the application called {@code setRollbackOnly}_on this TransactionStatus object.;public boolean isLocalRollbackOnly() {_		return this.rollbackOnly__	};determine,the,rollback,only,flag,via,checking,this,transaction,status,p,will,only,return,true,if,the,application,called,code,set,rollback,only,on,this,transaction,status,object;public,boolean,is,local,rollback,only,return,this,rollback,only
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1328020251;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1356735495;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1357119239;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1368482696;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1411399750;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1495868221;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1496259743;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1496837955;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1498780456;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> protected SavepointManager getSavepointManager();1516617801;Return a SavepointManager for the underlying transaction, if possible._<p>Default implementation always throws a NestedTransactionNotSupportedException._@throws org.springframework.transaction.NestedTransactionNotSupportedException_if the underlying transaction does not support savepoints;protected SavepointManager getSavepointManager() {_		throw new NestedTransactionNotSupportedException("This transaction does not support savepoints")__	};return,a,savepoint,manager,for,the,underlying,transaction,if,possible,p,default,implementation,always,throws,a,nested,transaction,not,supported,exception,throws,org,springframework,transaction,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints;protected,savepoint,manager,get,savepoint,manager,throw,new,nested,transaction,not,supported,exception,this,transaction,does,not,support,savepoints
AbstractTransactionStatus -> public void rollbackToSavepoint(Object savepoint) throws TransactionException;1328020251;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> public void rollbackToSavepoint(Object savepoint) throws TransactionException;1357119239;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1328020251;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns <code>false</code>.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false,code;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1356735495;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1357119239;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1368482696;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1411399750;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1495868221;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1496259743;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1496837955;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1498780456;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> public boolean isGlobalRollbackOnly();1516617801;Template method for determining the global rollback-only flag of the_underlying transaction, if any._<p>This implementation always returns {@code false}.;public boolean isGlobalRollbackOnly() {_		return false__	};template,method,for,determining,the,global,rollback,only,flag,of,the,underlying,transaction,if,any,p,this,implementation,always,returns,code,false;public,boolean,is,global,rollback,only,return,false
AbstractTransactionStatus -> protected void setSavepoint(Object savepoint);1328020251;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> protected void setSavepoint(Object savepoint);1356735495;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> protected void setSavepoint(Object savepoint);1357119239;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> protected void setSavepoint(Object savepoint);1368482696;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> protected void setSavepoint(Object savepoint);1411399750;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> protected void setSavepoint(Object savepoint);1495868221;Set a savepoint for this transaction. Useful for PROPAGATION_NESTED._@see org.springframework.transaction.TransactionDefinition#PROPAGATION_NESTED;protected void setSavepoint(Object savepoint) {_		this.savepoint = savepoint__	};set,a,savepoint,for,this,transaction,useful,for,see,org,springframework,transaction,transaction,definition;protected,void,set,savepoint,object,savepoint,this,savepoint,savepoint
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1328020251;Roll back to the savepoint that is held for the transaction.;public void rollbackToHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException("No savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(getSavepoint())__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction;public,void,rollback,to,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1356735495;Roll back to the savepoint that is held for the transaction.;public void rollbackToHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException("No savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(getSavepoint())__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction;public,void,rollback,to,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1357119239;Roll back to the savepoint that is held for the transaction.;public void rollbackToHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException("No savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(getSavepoint())__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction;public,void,rollback,to,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1368482696;Roll back to the savepoint that is held for the transaction.;public void rollbackToHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException("No savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(getSavepoint())__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction;public,void,rollback,to,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1411399750;Roll back to the savepoint that is held for the transaction_and release the savepoint right afterwards.;public void rollbackToHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException(_					"Cannot roll back to savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(getSavepoint())__		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction,and,release,the,savepoint,right,afterwards;public,void,rollback,to,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,cannot,roll,back,to,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,get,savepoint,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1495868221;Roll back to the savepoint that is held for the transaction_and release the savepoint right afterwards.;public void rollbackToHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException(_					"Cannot roll back to savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(getSavepoint())__		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction,and,release,the,savepoint,right,afterwards;public,void,rollback,to,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,cannot,roll,back,to,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,get,savepoint,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1496259743;Roll back to the savepoint that is held for the transaction_and release the savepoint right afterwards.;public void rollbackToHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException(_					"Cannot roll back to savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(getSavepoint())__		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction,and,release,the,savepoint,right,afterwards;public,void,rollback,to,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,cannot,roll,back,to,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,get,savepoint,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1496837955;Roll back to the savepoint that is held for the transaction_and release the savepoint right afterwards.;public void rollbackToHeldSavepoint() throws TransactionException {_		Object savepoint = getSavepoint()__		if (savepoint == null) {_			throw new TransactionUsageException(_					"Cannot roll back to savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(savepoint)__		getSavepointManager().releaseSavepoint(savepoint)__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction,and,release,the,savepoint,right,afterwards;public,void,rollback,to,held,savepoint,throws,transaction,exception,object,savepoint,get,savepoint,if,savepoint,null,throw,new,transaction,usage,exception,cannot,roll,back,to,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,savepoint,get,savepoint,manager,release,savepoint,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1498780456;Roll back to the savepoint that is held for the transaction_and release the savepoint right afterwards.;public void rollbackToHeldSavepoint() throws TransactionException {_		Object savepoint = getSavepoint()__		if (savepoint == null) {_			throw new TransactionUsageException(_					"Cannot roll back to savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(savepoint)__		getSavepointManager().releaseSavepoint(savepoint)__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction,and,release,the,savepoint,right,afterwards;public,void,rollback,to,held,savepoint,throws,transaction,exception,object,savepoint,get,savepoint,if,savepoint,null,throw,new,transaction,usage,exception,cannot,roll,back,to,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,savepoint,get,savepoint,manager,release,savepoint,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void rollbackToHeldSavepoint() throws TransactionException;1516617801;Roll back to the savepoint that is held for the transaction_and release the savepoint right afterwards.;public void rollbackToHeldSavepoint() throws TransactionException {_		Object savepoint = getSavepoint()__		if (savepoint == null) {_			throw new TransactionUsageException(_					"Cannot roll back to savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().rollbackToSavepoint(savepoint)__		getSavepointManager().releaseSavepoint(savepoint)__		setSavepoint(null)__	};roll,back,to,the,savepoint,that,is,held,for,the,transaction,and,release,the,savepoint,right,afterwards;public,void,rollback,to,held,savepoint,throws,transaction,exception,object,savepoint,get,savepoint,if,savepoint,null,throw,new,transaction,usage,exception,cannot,roll,back,to,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,rollback,to,savepoint,savepoint,get,savepoint,manager,release,savepoint,savepoint,set,savepoint,null
AbstractTransactionStatus -> @Override 	public void rollbackToSavepoint(Object savepoint) throws TransactionException;1356735495;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void rollbackToSavepoint(Object savepoint) throws TransactionException;1368482696;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void rollbackToSavepoint(Object savepoint) throws TransactionException;1411399750;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void rollbackToSavepoint(Object savepoint) throws TransactionException;1495868221;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void rollbackToSavepoint(Object savepoint) throws TransactionException;1496259743;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void rollbackToSavepoint(Object savepoint) throws TransactionException;1496837955;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void rollbackToSavepoint(Object savepoint) throws TransactionException;1498780456;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@throws org.springframework.transaction.NestedTransactionNotSupportedException_@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;@Override_	public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,throws,org,springframework,transaction,nested,transaction,not,supported,exception,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;override,public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> @Override 	public void rollbackToSavepoint(Object savepoint) throws TransactionException;1516617801;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see SavepointManager#rollbackToSavepoint(Object);@Override_	public void rollbackToSavepoint(Object savepoint) throws TransactionException {_		getSavepointManager().rollbackToSavepoint(savepoint)__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,savepoint,manager,rollback,to,savepoint,object;override,public,void,rollback,to,savepoint,object,savepoint,throws,transaction,exception,get,savepoint,manager,rollback,to,savepoint,savepoint
AbstractTransactionStatus -> public void flush();1328020251;This implementations is empty, considering flush as a no-op.;public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;public,void,flush
AbstractTransactionStatus -> public void flush();1357119239;This implementations is empty, considering flush as a no-op.;public void flush() {_	};this,implementations,is,empty,considering,flush,as,a,no,op;public,void,flush
AbstractTransactionStatus -> public Object createSavepoint() throws TransactionException;1328020251;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public Object createSavepoint() throws TransactionException;1357119239;This implementation delegates to a SavepointManager for the_underlying transaction, if possible._@see #getSavepointManager()_@see org.springframework.transaction.SavepointManager;public Object createSavepoint() throws TransactionException {_		return getSavepointManager().createSavepoint()__	};this,implementation,delegates,to,a,savepoint,manager,for,the,underlying,transaction,if,possible,see,get,savepoint,manager,see,org,springframework,transaction,savepoint,manager;public,object,create,savepoint,throws,transaction,exception,return,get,savepoint,manager,create,savepoint
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1328020251;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException("No savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1356735495;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException("No savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1357119239;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException("No savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1368482696;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException("No savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1411399750;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException(_					"Cannot release savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,cannot,release,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1495868221;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException(_					"Cannot release savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,cannot,release,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1496259743;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		if (!hasSavepoint()) {_			throw new TransactionUsageException(_					"Cannot release savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(getSavepoint())__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,if,has,savepoint,throw,new,transaction,usage,exception,cannot,release,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,get,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1496837955;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		Object savepoint = getSavepoint()__		if (savepoint == null) {_			throw new TransactionUsageException(_					"Cannot release savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(savepoint)__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,object,savepoint,get,savepoint,if,savepoint,null,throw,new,transaction,usage,exception,cannot,release,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1498780456;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		Object savepoint = getSavepoint()__		if (savepoint == null) {_			throw new TransactionUsageException(_					"Cannot release savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(savepoint)__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,object,savepoint,get,savepoint,if,savepoint,null,throw,new,transaction,usage,exception,cannot,release,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,savepoint,set,savepoint,null
AbstractTransactionStatus -> public void releaseHeldSavepoint() throws TransactionException;1516617801;Release the savepoint that is held for the transaction.;public void releaseHeldSavepoint() throws TransactionException {_		Object savepoint = getSavepoint()__		if (savepoint == null) {_			throw new TransactionUsageException(_					"Cannot release savepoint - no savepoint associated with current transaction")__		}_		getSavepointManager().releaseSavepoint(savepoint)__		setSavepoint(null)__	};release,the,savepoint,that,is,held,for,the,transaction;public,void,release,held,savepoint,throws,transaction,exception,object,savepoint,get,savepoint,if,savepoint,null,throw,new,transaction,usage,exception,cannot,release,savepoint,no,savepoint,associated,with,current,transaction,get,savepoint,manager,release,savepoint,savepoint,set,savepoint,null
