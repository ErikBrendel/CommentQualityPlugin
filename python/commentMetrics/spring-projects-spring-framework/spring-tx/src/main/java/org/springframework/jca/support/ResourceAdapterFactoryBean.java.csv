commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the target JCA ResourceAdapter as class, to be instantiated  * with its default configuration.  * <p>Alternatively, specify a pre-configured ResourceAdapter instance  * through the "resourceAdapter" property.  * @see #setResourceAdapter  */ ;/**  * Specify the target JCA ResourceAdapter as class, to be instantiated  * with its default configuration.  * <p>Alternatively, specify a pre-configured ResourceAdapter instance  * through the "resourceAdapter" property.  * @see #setResourceAdapter  */ public void setResourceAdapterClass(Class<? extends ResourceAdapter> resourceAdapterClass) {     this.resourceAdapter = BeanUtils.instantiateClass(resourceAdapterClass). }
true;public;1;3;/**  * Specify the target JCA ResourceAdapter, passed in as configured instance  * which hasn't been started yet. This will typically happen as an  * inner bean definition, configuring the ResourceAdapter instance  * through its vendor-specific bean properties.  */ ;/**  * Specify the target JCA ResourceAdapter, passed in as configured instance  * which hasn't been started yet. This will typically happen as an  * inner bean definition, configuring the ResourceAdapter instance  * through its vendor-specific bean properties.  */ public void setResourceAdapter(ResourceAdapter resourceAdapter) {     this.resourceAdapter = resourceAdapter. }
true;public;1;3;/**  * Specify the JCA BootstrapContext to use for starting the ResourceAdapter.  * <p>Alternatively, you can specify the individual parts (such as the  * JCA WorkManager) as individual references.  * @see #setWorkManager  * @see #setXaTerminator  */ ;/**  * Specify the JCA BootstrapContext to use for starting the ResourceAdapter.  * <p>Alternatively, you can specify the individual parts (such as the  * JCA WorkManager) as individual references.  * @see #setWorkManager  * @see #setXaTerminator  */ public void setBootstrapContext(BootstrapContext bootstrapContext) {     this.bootstrapContext = bootstrapContext. }
true;public;1;3;/**  * Specify the JCA WorkManager to use for bootstrapping the ResourceAdapter.  * @see #setBootstrapContext  */ ;/**  * Specify the JCA WorkManager to use for bootstrapping the ResourceAdapter.  * @see #setBootstrapContext  */ public void setWorkManager(WorkManager workManager) {     this.workManager = workManager. }
true;public;1;3;/**  * Specify the JCA XATerminator to use for bootstrapping the ResourceAdapter.  * @see #setBootstrapContext  */ ;/**  * Specify the JCA XATerminator to use for bootstrapping the ResourceAdapter.  * @see #setBootstrapContext  */ public void setXaTerminator(XATerminator xaTerminator) {     this.xaTerminator = xaTerminator. }
true;public;0;10;/**  * Builds the BootstrapContext and starts the ResourceAdapter with it.  * @see javax.resource.spi.ResourceAdapter#start(javax.resource.spi.BootstrapContext)  */ ;/**  * Builds the BootstrapContext and starts the ResourceAdapter with it.  * @see javax.resource.spi.ResourceAdapter#start(javax.resource.spi.BootstrapContext)  */ @Override public void afterPropertiesSet() throws ResourceException {     if (this.resourceAdapter == null) {         throw new IllegalArgumentException("'resourceAdapter' or 'resourceAdapterClass' is required").     }     if (this.bootstrapContext == null) {         this.bootstrapContext = new SimpleBootstrapContext(this.workManager, this.xaTerminator).     }     this.resourceAdapter.start(this.bootstrapContext). }
false;public;0;5;;@Override @Nullable public ResourceAdapter getObject() {     return this.resourceAdapter. }
false;public;0;4;;@Override public Class<? extends ResourceAdapter> getObjectType() {     return (this.resourceAdapter != null ? this.resourceAdapter.getClass() : ResourceAdapter.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
true;public;0;6;/**  * Stops the ResourceAdapter.  * @see javax.resource.spi.ResourceAdapter#stop()  */ ;/**  * Stops the ResourceAdapter.  * @see javax.resource.spi.ResourceAdapter#stop()  */ @Override public void destroy() {     if (this.resourceAdapter != null) {         this.resourceAdapter.stop().     } }
