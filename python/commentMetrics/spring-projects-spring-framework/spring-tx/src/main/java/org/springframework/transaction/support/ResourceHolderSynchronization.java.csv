commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void suspend() {     if (this.holderActive) {         TransactionSynchronizationManager.unbindResource(this.resourceKey).     } }
false;public;0;6;;@Override public void resume() {     if (this.holderActive) {         TransactionSynchronizationManager.bindResource(this.resourceKey, this.resourceHolder).     } }
false;public;0;4;;@Override public void flush() {     flushResource(this.resourceHolder). }
false;public;1;3;;@Override public void beforeCommit(boolean readOnly) { }
false;public;0;10;;@Override public void beforeCompletion() {     if (shouldUnbindAtCompletion()) {         TransactionSynchronizationManager.unbindResource(this.resourceKey).         this.holderActive = false.         if (shouldReleaseBeforeCompletion()) {             releaseResource(this.resourceHolder, this.resourceKey).         }     } }
false;public;0;6;;@Override public void afterCommit() {     if (!shouldReleaseBeforeCompletion()) {         processResourceAfterCommit(this.resourceHolder).     } }
false;public;1;25;;@Override public void afterCompletion(int status) {     if (shouldUnbindAtCompletion()) {         boolean releaseNecessary = false.         if (this.holderActive) {             // The thread-bound resource holder might not be available anymore,             // since afterCompletion might get called from a different thread.             this.holderActive = false.             TransactionSynchronizationManager.unbindResourceIfPossible(this.resourceKey).             this.resourceHolder.unbound().             releaseNecessary = true.         } else {             releaseNecessary = shouldReleaseAfterCompletion(this.resourceHolder).         }         if (releaseNecessary) {             releaseResource(this.resourceHolder, this.resourceKey).         }     } else {         // Probably a pre-bound resource...         cleanupResource(this.resourceHolder, this.resourceKey, (status == STATUS_COMMITTED)).     }     this.resourceHolder.reset(). }
true;protected;0;3;/**  * Return whether this holder should be unbound at completion  * (or should rather be left bound to the thread after the transaction).  * <p>The default implementation returns {@code true}.  */ ;/**  * Return whether this holder should be unbound at completion  * (or should rather be left bound to the thread after the transaction).  * <p>The default implementation returns {@code true}.  */ protected boolean shouldUnbindAtCompletion() {     return true. }
true;protected;0;3;/**  * Return whether this holder's resource should be released before  * transaction completion ({@code true}) or rather after  * transaction completion ({@code false}).  * <p>Note that resources will only be released when they are  * unbound from the thread ({@link #shouldUnbindAtCompletion()}).  * <p>The default implementation returns {@code true}.  * @see #releaseResource  */ ;/**  * Return whether this holder's resource should be released before  * transaction completion ({@code true}) or rather after  * transaction completion ({@code false}).  * <p>Note that resources will only be released when they are  * unbound from the thread ({@link #shouldUnbindAtCompletion()}).  * <p>The default implementation returns {@code true}.  * @see #releaseResource  */ protected boolean shouldReleaseBeforeCompletion() {     return true. }
true;protected;1;3;/**  * Return whether this holder's resource should be released after  * transaction completion ({@code true}).  * <p>The default implementation returns {@code !shouldReleaseBeforeCompletion()},  * releasing after completion if no attempt was made before completion.  * @see #releaseResource  */ ;/**  * Return whether this holder's resource should be released after  * transaction completion ({@code true}).  * <p>The default implementation returns {@code !shouldReleaseBeforeCompletion()},  * releasing after completion if no attempt was made before completion.  * @see #releaseResource  */ protected boolean shouldReleaseAfterCompletion(H resourceHolder) {     return !shouldReleaseBeforeCompletion(). }
true;protected;1;2;/**  * Flush callback for the given resource holder.  * @param resourceHolder the resource holder to flush  */ ;/**  * Flush callback for the given resource holder.  * @param resourceHolder the resource holder to flush  */ protected void flushResource(H resourceHolder) { }
true;protected;1;2;/**  * After-commit callback for the given resource holder.  * Only called when the resource hasn't been released yet  * ({@link #shouldReleaseBeforeCompletion()}).  * @param resourceHolder the resource holder to process  */ ;/**  * After-commit callback for the given resource holder.  * Only called when the resource hasn't been released yet  * ({@link #shouldReleaseBeforeCompletion()}).  * @param resourceHolder the resource holder to process  */ protected void processResourceAfterCommit(H resourceHolder) { }
true;protected;2;2;/**  * Release the given resource (after it has been unbound from the thread).  * @param resourceHolder the resource holder to process  * @param resourceKey the key that the ResourceHolder was bound for  */ ;/**  * Release the given resource (after it has been unbound from the thread).  * @param resourceHolder the resource holder to process  * @param resourceKey the key that the ResourceHolder was bound for  */ protected void releaseResource(H resourceHolder, K resourceKey) { }
true;protected;3;2;/**  * Perform a cleanup on the given resource (which is left bound to the thread).  * @param resourceHolder the resource holder to process  * @param resourceKey the key that the ResourceHolder was bound for  * @param committed whether the transaction has committed ({@code true})  * or rolled back ({@code false})  */ ;/**  * Perform a cleanup on the given resource (which is left bound to the thread).  * @param resourceHolder the resource holder to process  * @param resourceKey the key that the ResourceHolder was bound for  * @param committed whether the transaction has committed ({@code true})  * or rolled back ({@code false})  */ protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed) { }
