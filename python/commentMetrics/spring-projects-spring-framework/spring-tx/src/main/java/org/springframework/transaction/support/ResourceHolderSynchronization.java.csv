# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceHolderSynchronization -> protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed);1328020251;Perform a cleanup on the given resource (which is left bound to the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for_@param committed whether the transaction has committed (<code>true</code>)_or rolled back (<code>false</code>);protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed) {_	};perform,a,cleanup,on,the,given,resource,which,is,left,bound,to,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for,param,committed,whether,the,transaction,has,committed,code,true,code,or,rolled,back,code,false,code;protected,void,cleanup,resource,h,resource,holder,k,resource,key,boolean,committed
ResourceHolderSynchronization -> protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed);1356735495;Perform a cleanup on the given resource (which is left bound to the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for_@param committed whether the transaction has committed ({@code true})_or rolled back ({@code false});protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed) {_	};perform,a,cleanup,on,the,given,resource,which,is,left,bound,to,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for,param,committed,whether,the,transaction,has,committed,code,true,or,rolled,back,code,false;protected,void,cleanup,resource,h,resource,holder,k,resource,key,boolean,committed
ResourceHolderSynchronization -> protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed);1357119239;Perform a cleanup on the given resource (which is left bound to the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for_@param committed whether the transaction has committed ({@code true})_or rolled back ({@code false});protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed) {_	};perform,a,cleanup,on,the,given,resource,which,is,left,bound,to,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for,param,committed,whether,the,transaction,has,committed,code,true,or,rolled,back,code,false;protected,void,cleanup,resource,h,resource,holder,k,resource,key,boolean,committed
ResourceHolderSynchronization -> protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed);1368482696;Perform a cleanup on the given resource (which is left bound to the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for_@param committed whether the transaction has committed ({@code true})_or rolled back ({@code false});protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed) {_	};perform,a,cleanup,on,the,given,resource,which,is,left,bound,to,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for,param,committed,whether,the,transaction,has,committed,code,true,or,rolled,back,code,false;protected,void,cleanup,resource,h,resource,holder,k,resource,key,boolean,committed
ResourceHolderSynchronization -> protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed);1530174524;Perform a cleanup on the given resource (which is left bound to the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for_@param committed whether the transaction has committed ({@code true})_or rolled back ({@code false});protected void cleanupResource(H resourceHolder, K resourceKey, boolean committed) {_	};perform,a,cleanup,on,the,given,resource,which,is,left,bound,to,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for,param,committed,whether,the,transaction,has,committed,code,true,or,rolled,back,code,false;protected,void,cleanup,resource,h,resource,holder,k,resource,key,boolean,committed
ResourceHolderSynchronization -> protected void processResourceAfterCommit(H resourceHolder);1328020251;After-commit callback for the given resource holder._Only called when the resource hasn't been released yet_({@link #shouldReleaseBeforeCompletion()})._@param resourceHolder the resource holder to process;protected void processResourceAfterCommit(H resourceHolder) {_	};after,commit,callback,for,the,given,resource,holder,only,called,when,the,resource,hasn,t,been,released,yet,link,should,release,before,completion,param,resource,holder,the,resource,holder,to,process;protected,void,process,resource,after,commit,h,resource,holder
ResourceHolderSynchronization -> protected void processResourceAfterCommit(H resourceHolder);1356735495;After-commit callback for the given resource holder._Only called when the resource hasn't been released yet_({@link #shouldReleaseBeforeCompletion()})._@param resourceHolder the resource holder to process;protected void processResourceAfterCommit(H resourceHolder) {_	};after,commit,callback,for,the,given,resource,holder,only,called,when,the,resource,hasn,t,been,released,yet,link,should,release,before,completion,param,resource,holder,the,resource,holder,to,process;protected,void,process,resource,after,commit,h,resource,holder
ResourceHolderSynchronization -> protected void processResourceAfterCommit(H resourceHolder);1357119239;After-commit callback for the given resource holder._Only called when the resource hasn't been released yet_({@link #shouldReleaseBeforeCompletion()})._@param resourceHolder the resource holder to process;protected void processResourceAfterCommit(H resourceHolder) {_	};after,commit,callback,for,the,given,resource,holder,only,called,when,the,resource,hasn,t,been,released,yet,link,should,release,before,completion,param,resource,holder,the,resource,holder,to,process;protected,void,process,resource,after,commit,h,resource,holder
ResourceHolderSynchronization -> protected void processResourceAfterCommit(H resourceHolder);1368482696;After-commit callback for the given resource holder._Only called when the resource hasn't been released yet_({@link #shouldReleaseBeforeCompletion()})._@param resourceHolder the resource holder to process;protected void processResourceAfterCommit(H resourceHolder) {_	};after,commit,callback,for,the,given,resource,holder,only,called,when,the,resource,hasn,t,been,released,yet,link,should,release,before,completion,param,resource,holder,the,resource,holder,to,process;protected,void,process,resource,after,commit,h,resource,holder
ResourceHolderSynchronization -> protected void processResourceAfterCommit(H resourceHolder);1530174524;After-commit callback for the given resource holder._Only called when the resource hasn't been released yet_({@link #shouldReleaseBeforeCompletion()})._@param resourceHolder the resource holder to process;protected void processResourceAfterCommit(H resourceHolder) {_	};after,commit,callback,for,the,given,resource,holder,only,called,when,the,resource,hasn,t,been,released,yet,link,should,release,before,completion,param,resource,holder,the,resource,holder,to,process;protected,void,process,resource,after,commit,h,resource,holder
ResourceHolderSynchronization -> public ResourceHolderSynchronization(H resourceHolder, K resourceKey);1328020251;Create a new ResourceHolderSynchronization for the given holder._@param resourceHolder the ResourceHolder to manage_@param resourceKey the key to bind the ResourceHolder for_@see TransactionSynchronizationManager#bindResource;public ResourceHolderSynchronization(H resourceHolder, K resourceKey) {_		this.resourceHolder = resourceHolder__		this.resourceKey = resourceKey__	};create,a,new,resource,holder,synchronization,for,the,given,holder,param,resource,holder,the,resource,holder,to,manage,param,resource,key,the,key,to,bind,the,resource,holder,for,see,transaction,synchronization,manager,bind,resource;public,resource,holder,synchronization,h,resource,holder,k,resource,key,this,resource,holder,resource,holder,this,resource,key,resource,key
ResourceHolderSynchronization -> public ResourceHolderSynchronization(H resourceHolder, K resourceKey);1356735495;Create a new ResourceHolderSynchronization for the given holder._@param resourceHolder the ResourceHolder to manage_@param resourceKey the key to bind the ResourceHolder for_@see TransactionSynchronizationManager#bindResource;public ResourceHolderSynchronization(H resourceHolder, K resourceKey) {_		this.resourceHolder = resourceHolder__		this.resourceKey = resourceKey__	};create,a,new,resource,holder,synchronization,for,the,given,holder,param,resource,holder,the,resource,holder,to,manage,param,resource,key,the,key,to,bind,the,resource,holder,for,see,transaction,synchronization,manager,bind,resource;public,resource,holder,synchronization,h,resource,holder,k,resource,key,this,resource,holder,resource,holder,this,resource,key,resource,key
ResourceHolderSynchronization -> public ResourceHolderSynchronization(H resourceHolder, K resourceKey);1357119239;Create a new ResourceHolderSynchronization for the given holder._@param resourceHolder the ResourceHolder to manage_@param resourceKey the key to bind the ResourceHolder for_@see TransactionSynchronizationManager#bindResource;public ResourceHolderSynchronization(H resourceHolder, K resourceKey) {_		this.resourceHolder = resourceHolder__		this.resourceKey = resourceKey__	};create,a,new,resource,holder,synchronization,for,the,given,holder,param,resource,holder,the,resource,holder,to,manage,param,resource,key,the,key,to,bind,the,resource,holder,for,see,transaction,synchronization,manager,bind,resource;public,resource,holder,synchronization,h,resource,holder,k,resource,key,this,resource,holder,resource,holder,this,resource,key,resource,key
ResourceHolderSynchronization -> public ResourceHolderSynchronization(H resourceHolder, K resourceKey);1368482696;Create a new ResourceHolderSynchronization for the given holder._@param resourceHolder the ResourceHolder to manage_@param resourceKey the key to bind the ResourceHolder for_@see TransactionSynchronizationManager#bindResource;public ResourceHolderSynchronization(H resourceHolder, K resourceKey) {_		this.resourceHolder = resourceHolder__		this.resourceKey = resourceKey__	};create,a,new,resource,holder,synchronization,for,the,given,holder,param,resource,holder,the,resource,holder,to,manage,param,resource,key,the,key,to,bind,the,resource,holder,for,see,transaction,synchronization,manager,bind,resource;public,resource,holder,synchronization,h,resource,holder,k,resource,key,this,resource,holder,resource,holder,this,resource,key,resource,key
ResourceHolderSynchronization -> public ResourceHolderSynchronization(H resourceHolder, K resourceKey);1530174524;Create a new ResourceHolderSynchronization for the given holder._@param resourceHolder the ResourceHolder to manage_@param resourceKey the key to bind the ResourceHolder for_@see TransactionSynchronizationManager#bindResource;public ResourceHolderSynchronization(H resourceHolder, K resourceKey) {_		this.resourceHolder = resourceHolder__		this.resourceKey = resourceKey__	};create,a,new,resource,holder,synchronization,for,the,given,holder,param,resource,holder,the,resource,holder,to,manage,param,resource,key,the,key,to,bind,the,resource,holder,for,see,transaction,synchronization,manager,bind,resource;public,resource,holder,synchronization,h,resource,holder,k,resource,key,this,resource,holder,resource,holder,this,resource,key,resource,key
ResourceHolderSynchronization -> protected void releaseResource(H resourceHolder, K resourceKey);1328020251;Release the given resource (after it has been unbound from the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for;protected void releaseResource(H resourceHolder, K resourceKey) {_	};release,the,given,resource,after,it,has,been,unbound,from,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for;protected,void,release,resource,h,resource,holder,k,resource,key
ResourceHolderSynchronization -> protected void releaseResource(H resourceHolder, K resourceKey);1356735495;Release the given resource (after it has been unbound from the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for;protected void releaseResource(H resourceHolder, K resourceKey) {_	};release,the,given,resource,after,it,has,been,unbound,from,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for;protected,void,release,resource,h,resource,holder,k,resource,key
ResourceHolderSynchronization -> protected void releaseResource(H resourceHolder, K resourceKey);1357119239;Release the given resource (after it has been unbound from the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for;protected void releaseResource(H resourceHolder, K resourceKey) {_	};release,the,given,resource,after,it,has,been,unbound,from,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for;protected,void,release,resource,h,resource,holder,k,resource,key
ResourceHolderSynchronization -> protected void releaseResource(H resourceHolder, K resourceKey);1368482696;Release the given resource (after it has been unbound from the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for;protected void releaseResource(H resourceHolder, K resourceKey) {_	};release,the,given,resource,after,it,has,been,unbound,from,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for;protected,void,release,resource,h,resource,holder,k,resource,key
ResourceHolderSynchronization -> protected void releaseResource(H resourceHolder, K resourceKey);1530174524;Release the given resource (after it has been unbound from the thread)._@param resourceHolder the resource holder to process_@param resourceKey the key that the ResourceHolder was bound for;protected void releaseResource(H resourceHolder, K resourceKey) {_	};release,the,given,resource,after,it,has,been,unbound,from,the,thread,param,resource,holder,the,resource,holder,to,process,param,resource,key,the,key,that,the,resource,holder,was,bound,for;protected,void,release,resource,h,resource,holder,k,resource,key
ResourceHolderSynchronization -> protected boolean shouldReleaseAfterCompletion(H resourceHolder);1328020251;Return whether this holder's resource should be released after_transaction completion (<code>true</code>)._<p>The default implementation returns <code>!shouldReleaseBeforeCompletion()</code>,_releasing after completion if no attempt was made before completion._@see #releaseResource;protected boolean shouldReleaseAfterCompletion(H resourceHolder) {_		return !shouldReleaseBeforeCompletion()__	};return,whether,this,holder,s,resource,should,be,released,after,transaction,completion,code,true,code,p,the,default,implementation,returns,code,should,release,before,completion,code,releasing,after,completion,if,no,attempt,was,made,before,completion,see,release,resource;protected,boolean,should,release,after,completion,h,resource,holder,return,should,release,before,completion
ResourceHolderSynchronization -> protected boolean shouldReleaseAfterCompletion(H resourceHolder);1356735495;Return whether this holder's resource should be released after_transaction completion ({@code true})._<p>The default implementation returns {@code !shouldReleaseBeforeCompletion()},_releasing after completion if no attempt was made before completion._@see #releaseResource;protected boolean shouldReleaseAfterCompletion(H resourceHolder) {_		return !shouldReleaseBeforeCompletion()__	};return,whether,this,holder,s,resource,should,be,released,after,transaction,completion,code,true,p,the,default,implementation,returns,code,should,release,before,completion,releasing,after,completion,if,no,attempt,was,made,before,completion,see,release,resource;protected,boolean,should,release,after,completion,h,resource,holder,return,should,release,before,completion
ResourceHolderSynchronization -> protected boolean shouldReleaseAfterCompletion(H resourceHolder);1357119239;Return whether this holder's resource should be released after_transaction completion ({@code true})._<p>The default implementation returns {@code !shouldReleaseBeforeCompletion()},_releasing after completion if no attempt was made before completion._@see #releaseResource;protected boolean shouldReleaseAfterCompletion(H resourceHolder) {_		return !shouldReleaseBeforeCompletion()__	};return,whether,this,holder,s,resource,should,be,released,after,transaction,completion,code,true,p,the,default,implementation,returns,code,should,release,before,completion,releasing,after,completion,if,no,attempt,was,made,before,completion,see,release,resource;protected,boolean,should,release,after,completion,h,resource,holder,return,should,release,before,completion
ResourceHolderSynchronization -> protected boolean shouldReleaseAfterCompletion(H resourceHolder);1368482696;Return whether this holder's resource should be released after_transaction completion ({@code true})._<p>The default implementation returns {@code !shouldReleaseBeforeCompletion()},_releasing after completion if no attempt was made before completion._@see #releaseResource;protected boolean shouldReleaseAfterCompletion(H resourceHolder) {_		return !shouldReleaseBeforeCompletion()__	};return,whether,this,holder,s,resource,should,be,released,after,transaction,completion,code,true,p,the,default,implementation,returns,code,should,release,before,completion,releasing,after,completion,if,no,attempt,was,made,before,completion,see,release,resource;protected,boolean,should,release,after,completion,h,resource,holder,return,should,release,before,completion
ResourceHolderSynchronization -> protected boolean shouldReleaseAfterCompletion(H resourceHolder);1530174524;Return whether this holder's resource should be released after_transaction completion ({@code true})._<p>The default implementation returns {@code !shouldReleaseBeforeCompletion()},_releasing after completion if no attempt was made before completion._@see #releaseResource;protected boolean shouldReleaseAfterCompletion(H resourceHolder) {_		return !shouldReleaseBeforeCompletion()__	};return,whether,this,holder,s,resource,should,be,released,after,transaction,completion,code,true,p,the,default,implementation,returns,code,should,release,before,completion,releasing,after,completion,if,no,attempt,was,made,before,completion,see,release,resource;protected,boolean,should,release,after,completion,h,resource,holder,return,should,release,before,completion
ResourceHolderSynchronization -> protected boolean shouldReleaseBeforeCompletion();1328020251;Return whether this holder's resource should be released before_transaction completion (<code>true</code>) or rather after_transaction completion (<code>false</code>)._<p>Note that resources will only be released when they are_unbound from the thread ({@link #shouldUnbindAtCompletion()})._<p>The default implementation returns <code>true</code>._@see #releaseResource;protected boolean shouldReleaseBeforeCompletion() {_		return true__	};return,whether,this,holder,s,resource,should,be,released,before,transaction,completion,code,true,code,or,rather,after,transaction,completion,code,false,code,p,note,that,resources,will,only,be,released,when,they,are,unbound,from,the,thread,link,should,unbind,at,completion,p,the,default,implementation,returns,code,true,code,see,release,resource;protected,boolean,should,release,before,completion,return,true
ResourceHolderSynchronization -> protected boolean shouldReleaseBeforeCompletion();1356735495;Return whether this holder's resource should be released before_transaction completion ({@code true}) or rather after_transaction completion ({@code false})._<p>Note that resources will only be released when they are_unbound from the thread ({@link #shouldUnbindAtCompletion()})._<p>The default implementation returns {@code true}._@see #releaseResource;protected boolean shouldReleaseBeforeCompletion() {_		return true__	};return,whether,this,holder,s,resource,should,be,released,before,transaction,completion,code,true,or,rather,after,transaction,completion,code,false,p,note,that,resources,will,only,be,released,when,they,are,unbound,from,the,thread,link,should,unbind,at,completion,p,the,default,implementation,returns,code,true,see,release,resource;protected,boolean,should,release,before,completion,return,true
ResourceHolderSynchronization -> protected boolean shouldReleaseBeforeCompletion();1357119239;Return whether this holder's resource should be released before_transaction completion ({@code true}) or rather after_transaction completion ({@code false})._<p>Note that resources will only be released when they are_unbound from the thread ({@link #shouldUnbindAtCompletion()})._<p>The default implementation returns {@code true}._@see #releaseResource;protected boolean shouldReleaseBeforeCompletion() {_		return true__	};return,whether,this,holder,s,resource,should,be,released,before,transaction,completion,code,true,or,rather,after,transaction,completion,code,false,p,note,that,resources,will,only,be,released,when,they,are,unbound,from,the,thread,link,should,unbind,at,completion,p,the,default,implementation,returns,code,true,see,release,resource;protected,boolean,should,release,before,completion,return,true
ResourceHolderSynchronization -> protected boolean shouldReleaseBeforeCompletion();1368482696;Return whether this holder's resource should be released before_transaction completion ({@code true}) or rather after_transaction completion ({@code false})._<p>Note that resources will only be released when they are_unbound from the thread ({@link #shouldUnbindAtCompletion()})._<p>The default implementation returns {@code true}._@see #releaseResource;protected boolean shouldReleaseBeforeCompletion() {_		return true__	};return,whether,this,holder,s,resource,should,be,released,before,transaction,completion,code,true,or,rather,after,transaction,completion,code,false,p,note,that,resources,will,only,be,released,when,they,are,unbound,from,the,thread,link,should,unbind,at,completion,p,the,default,implementation,returns,code,true,see,release,resource;protected,boolean,should,release,before,completion,return,true
ResourceHolderSynchronization -> protected boolean shouldReleaseBeforeCompletion();1530174524;Return whether this holder's resource should be released before_transaction completion ({@code true}) or rather after_transaction completion ({@code false})._<p>Note that resources will only be released when they are_unbound from the thread ({@link #shouldUnbindAtCompletion()})._<p>The default implementation returns {@code true}._@see #releaseResource;protected boolean shouldReleaseBeforeCompletion() {_		return true__	};return,whether,this,holder,s,resource,should,be,released,before,transaction,completion,code,true,or,rather,after,transaction,completion,code,false,p,note,that,resources,will,only,be,released,when,they,are,unbound,from,the,thread,link,should,unbind,at,completion,p,the,default,implementation,returns,code,true,see,release,resource;protected,boolean,should,release,before,completion,return,true
ResourceHolderSynchronization -> protected void flushResource(H resourceHolder);1328020251;Flush callback for the given resource holder._@param resourceHolder the resource holder to flush;protected void flushResource(H resourceHolder) {_	};flush,callback,for,the,given,resource,holder,param,resource,holder,the,resource,holder,to,flush;protected,void,flush,resource,h,resource,holder
ResourceHolderSynchronization -> protected void flushResource(H resourceHolder);1356735495;Flush callback for the given resource holder._@param resourceHolder the resource holder to flush;protected void flushResource(H resourceHolder) {_	};flush,callback,for,the,given,resource,holder,param,resource,holder,the,resource,holder,to,flush;protected,void,flush,resource,h,resource,holder
ResourceHolderSynchronization -> protected void flushResource(H resourceHolder);1357119239;Flush callback for the given resource holder._@param resourceHolder the resource holder to flush;protected void flushResource(H resourceHolder) {_	};flush,callback,for,the,given,resource,holder,param,resource,holder,the,resource,holder,to,flush;protected,void,flush,resource,h,resource,holder
ResourceHolderSynchronization -> protected void flushResource(H resourceHolder);1368482696;Flush callback for the given resource holder._@param resourceHolder the resource holder to flush;protected void flushResource(H resourceHolder) {_	};flush,callback,for,the,given,resource,holder,param,resource,holder,the,resource,holder,to,flush;protected,void,flush,resource,h,resource,holder
ResourceHolderSynchronization -> protected void flushResource(H resourceHolder);1530174524;Flush callback for the given resource holder._@param resourceHolder the resource holder to flush;protected void flushResource(H resourceHolder) {_	};flush,callback,for,the,given,resource,holder,param,resource,holder,the,resource,holder,to,flush;protected,void,flush,resource,h,resource,holder
ResourceHolderSynchronization -> protected boolean shouldUnbindAtCompletion();1328020251;Return whether this holder should be unbound at completion_(or should rather be left bound to the thread after the transaction)._<p>The default implementation returns <code>true</code>.;protected boolean shouldUnbindAtCompletion() {_		return true__	};return,whether,this,holder,should,be,unbound,at,completion,or,should,rather,be,left,bound,to,the,thread,after,the,transaction,p,the,default,implementation,returns,code,true,code;protected,boolean,should,unbind,at,completion,return,true
ResourceHolderSynchronization -> protected boolean shouldUnbindAtCompletion();1356735495;Return whether this holder should be unbound at completion_(or should rather be left bound to the thread after the transaction)._<p>The default implementation returns {@code true}.;protected boolean shouldUnbindAtCompletion() {_		return true__	};return,whether,this,holder,should,be,unbound,at,completion,or,should,rather,be,left,bound,to,the,thread,after,the,transaction,p,the,default,implementation,returns,code,true;protected,boolean,should,unbind,at,completion,return,true
ResourceHolderSynchronization -> protected boolean shouldUnbindAtCompletion();1357119239;Return whether this holder should be unbound at completion_(or should rather be left bound to the thread after the transaction)._<p>The default implementation returns {@code true}.;protected boolean shouldUnbindAtCompletion() {_		return true__	};return,whether,this,holder,should,be,unbound,at,completion,or,should,rather,be,left,bound,to,the,thread,after,the,transaction,p,the,default,implementation,returns,code,true;protected,boolean,should,unbind,at,completion,return,true
ResourceHolderSynchronization -> protected boolean shouldUnbindAtCompletion();1368482696;Return whether this holder should be unbound at completion_(or should rather be left bound to the thread after the transaction)._<p>The default implementation returns {@code true}.;protected boolean shouldUnbindAtCompletion() {_		return true__	};return,whether,this,holder,should,be,unbound,at,completion,or,should,rather,be,left,bound,to,the,thread,after,the,transaction,p,the,default,implementation,returns,code,true;protected,boolean,should,unbind,at,completion,return,true
ResourceHolderSynchronization -> protected boolean shouldUnbindAtCompletion();1530174524;Return whether this holder should be unbound at completion_(or should rather be left bound to the thread after the transaction)._<p>The default implementation returns {@code true}.;protected boolean shouldUnbindAtCompletion() {_		return true__	};return,whether,this,holder,should,be,unbound,at,completion,or,should,rather,be,left,bound,to,the,thread,after,the,transaction,p,the,default,implementation,returns,code,true;protected,boolean,should,unbind,at,completion,return,true
