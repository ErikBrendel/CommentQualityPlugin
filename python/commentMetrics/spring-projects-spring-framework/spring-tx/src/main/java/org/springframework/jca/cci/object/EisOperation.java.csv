commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the CciTemplate to be used by this operation.  * Alternatively, specify a CCI ConnectionFactory.  * @see #setConnectionFactory  */ ;/**  * Set the CciTemplate to be used by this operation.  * Alternatively, specify a CCI ConnectionFactory.  * @see #setConnectionFactory  */ public void setCciTemplate(CciTemplate cciTemplate) {     Assert.notNull(cciTemplate, "CciTemplate must not be null").     this.cciTemplate = cciTemplate. }
true;public;0;3;/**  * Return the CciTemplate used by this operation.  */ ;/**  * Return the CciTemplate used by this operation.  */ public CciTemplate getCciTemplate() {     return this.cciTemplate. }
true;public;1;3;/**  * Set the CCI ConnectionFactory to be used by this operation.  */ ;/**  * Set the CCI ConnectionFactory to be used by this operation.  */ public void setConnectionFactory(ConnectionFactory connectionFactory) {     this.cciTemplate.setConnectionFactory(connectionFactory). }
true;public;1;3;/**  * Set the CCI InteractionSpec for this operation.  */ ;/**  * Set the CCI InteractionSpec for this operation.  */ public void setInteractionSpec(@Nullable InteractionSpec interactionSpec) {     this.interactionSpec = interactionSpec. }
true;public;0;4;/**  * Return the CCI InteractionSpec for this operation.  */ ;/**  * Return the CCI InteractionSpec for this operation.  */ @Nullable public InteractionSpec getInteractionSpec() {     return this.interactionSpec. }
false;public;0;8;;@Override public void afterPropertiesSet() {     this.cciTemplate.afterPropertiesSet().     if (this.interactionSpec == null) {         throw new IllegalArgumentException("InteractionSpec is required").     } }
