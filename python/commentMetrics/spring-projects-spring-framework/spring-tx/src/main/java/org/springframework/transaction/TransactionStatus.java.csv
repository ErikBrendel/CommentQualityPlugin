# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionStatus -> boolean isNewTransaction()_;1328020251;Return whether the present transaction is new (else participating_in an existing transaction, or potentially not running in an_actual transaction in the first place).;boolean isNewTransaction()_;return,whether,the,present,transaction,is,new,else,participating,in,an,existing,transaction,or,potentially,not,running,in,an,actual,transaction,in,the,first,place;boolean,is,new,transaction
TransactionStatus -> boolean isNewTransaction()_;1381787551;Return whether the present transaction is new (else participating_in an existing transaction, or potentially not running in an_actual transaction in the first place).;boolean isNewTransaction()_;return,whether,the,present,transaction,is,new,else,participating,in,an,existing,transaction,or,potentially,not,running,in,an,actual,transaction,in,the,first,place;boolean,is,new,transaction
TransactionStatus -> boolean isNewTransaction()_;1477661037;Return whether the present transaction is new (else participating_in an existing transaction, or potentially not running in an_actual transaction in the first place).;boolean isNewTransaction()_;return,whether,the,present,transaction,is,new,else,participating,in,an,existing,transaction,or,potentially,not,running,in,an,actual,transaction,in,the,first,place;boolean,is,new,transaction
TransactionStatus -> boolean isNewTransaction()_;1533921824;Return whether the present transaction is new_ otherwise participating_in an existing transaction, or potentially not running in an actual_transaction in the first place.;boolean isNewTransaction()_;return,whether,the,present,transaction,is,new,otherwise,participating,in,an,existing,transaction,or,potentially,not,running,in,an,actual,transaction,in,the,first,place;boolean,is,new,transaction
TransactionStatus -> boolean hasSavepoint()_;1328020251;Return whether this transaction internally carries a savepoint,_that is, has been created as nested transaction based on a savepoint._<p>This method is mainly here for diagnostic purposes, alongside_{@link #isNewTransaction()}. For programmatic handling of custom_savepoints, use SavepointManager's operations._@see #isNewTransaction()_@see #createSavepoint_@see #rollbackToSavepoint(Object)_@see #releaseSavepoint(Object);boolean hasSavepoint()_;return,whether,this,transaction,internally,carries,a,savepoint,that,is,has,been,created,as,nested,transaction,based,on,a,savepoint,p,this,method,is,mainly,here,for,diagnostic,purposes,alongside,link,is,new,transaction,for,programmatic,handling,of,custom,savepoints,use,savepoint,manager,s,operations,see,is,new,transaction,see,create,savepoint,see,rollback,to,savepoint,object,see,release,savepoint,object;boolean,has,savepoint
TransactionStatus -> boolean hasSavepoint()_;1381787551;Return whether this transaction internally carries a savepoint,_that is, has been created as nested transaction based on a savepoint._<p>This method is mainly here for diagnostic purposes, alongside_{@link #isNewTransaction()}. For programmatic handling of custom_savepoints, use SavepointManager's operations._@see #isNewTransaction()_@see #createSavepoint_@see #rollbackToSavepoint(Object)_@see #releaseSavepoint(Object);boolean hasSavepoint()_;return,whether,this,transaction,internally,carries,a,savepoint,that,is,has,been,created,as,nested,transaction,based,on,a,savepoint,p,this,method,is,mainly,here,for,diagnostic,purposes,alongside,link,is,new,transaction,for,programmatic,handling,of,custom,savepoints,use,savepoint,manager,s,operations,see,is,new,transaction,see,create,savepoint,see,rollback,to,savepoint,object,see,release,savepoint,object;boolean,has,savepoint
TransactionStatus -> boolean hasSavepoint()_;1477661037;Return whether this transaction internally carries a savepoint,_that is, has been created as nested transaction based on a savepoint._<p>This method is mainly here for diagnostic purposes, alongside_{@link #isNewTransaction()}. For programmatic handling of custom_savepoints, use SavepointManager's operations._@see #isNewTransaction()_@see #createSavepoint_@see #rollbackToSavepoint(Object)_@see #releaseSavepoint(Object);boolean hasSavepoint()_;return,whether,this,transaction,internally,carries,a,savepoint,that,is,has,been,created,as,nested,transaction,based,on,a,savepoint,p,this,method,is,mainly,here,for,diagnostic,purposes,alongside,link,is,new,transaction,for,programmatic,handling,of,custom,savepoints,use,savepoint,manager,s,operations,see,is,new,transaction,see,create,savepoint,see,rollback,to,savepoint,object,see,release,savepoint,object;boolean,has,savepoint
TransactionStatus -> boolean hasSavepoint()_;1533921824;Return whether this transaction internally carries a savepoint,_that is, has been created as nested transaction based on a savepoint._<p>This method is mainly here for diagnostic purposes, alongside_{@link #isNewTransaction()}. For programmatic handling of custom_savepoints, use the operations provided by {@link SavepointManager}._@see #isNewTransaction()_@see #createSavepoint()_@see #rollbackToSavepoint(Object)_@see #releaseSavepoint(Object);boolean hasSavepoint()_;return,whether,this,transaction,internally,carries,a,savepoint,that,is,has,been,created,as,nested,transaction,based,on,a,savepoint,p,this,method,is,mainly,here,for,diagnostic,purposes,alongside,link,is,new,transaction,for,programmatic,handling,of,custom,savepoints,use,the,operations,provided,by,link,savepoint,manager,see,is,new,transaction,see,create,savepoint,see,rollback,to,savepoint,object,see,release,savepoint,object;boolean,has,savepoint
TransactionStatus -> boolean isCompleted()_;1328020251;Return whether this transaction is completed, that is,_whether it has already been committed or rolled back._@see PlatformTransactionManager#commit_@see PlatformTransactionManager#rollback;boolean isCompleted()_;return,whether,this,transaction,is,completed,that,is,whether,it,has,already,been,committed,or,rolled,back,see,platform,transaction,manager,commit,see,platform,transaction,manager,rollback;boolean,is,completed
TransactionStatus -> boolean isCompleted()_;1381787551;Return whether this transaction is completed, that is,_whether it has already been committed or rolled back._@see PlatformTransactionManager#commit_@see PlatformTransactionManager#rollback;boolean isCompleted()_;return,whether,this,transaction,is,completed,that,is,whether,it,has,already,been,committed,or,rolled,back,see,platform,transaction,manager,commit,see,platform,transaction,manager,rollback;boolean,is,completed
TransactionStatus -> boolean isCompleted()_;1477661037;Return whether this transaction is completed, that is,_whether it has already been committed or rolled back._@see PlatformTransactionManager#commit_@see PlatformTransactionManager#rollback;boolean isCompleted()_;return,whether,this,transaction,is,completed,that,is,whether,it,has,already,been,committed,or,rolled,back,see,platform,transaction,manager,commit,see,platform,transaction,manager,rollback;boolean,is,completed
TransactionStatus -> boolean isCompleted()_;1533921824;Return whether this transaction is completed, that is,_whether it has already been committed or rolled back._@see PlatformTransactionManager#commit_@see PlatformTransactionManager#rollback;boolean isCompleted()_;return,whether,this,transaction,is,completed,that,is,whether,it,has,already,been,committed,or,rolled,back,see,platform,transaction,manager,commit,see,platform,transaction,manager,rollback;boolean,is,completed
TransactionStatus -> void setRollbackOnly()_;1328020251;Set the transaction rollback-only. This instructs the transaction manager_that the only possible outcome of the transaction may be a rollback, as_alternative to throwing an exception which would in turn trigger a rollback._<p>This is mainly intended for transactions managed by_{@link org.springframework.transaction.support.TransactionTemplate} or_{@link org.springframework.transaction.interceptor.TransactionInterceptor},_where the actual commit/rollback decision is made by the container._@see org.springframework.transaction.support.TransactionCallback#doInTransaction_@see org.springframework.transaction.interceptor.TransactionAttribute#rollbackOn;void setRollbackOnly()_;set,the,transaction,rollback,only,this,instructs,the,transaction,manager,that,the,only,possible,outcome,of,the,transaction,may,be,a,rollback,as,alternative,to,throwing,an,exception,which,would,in,turn,trigger,a,rollback,p,this,is,mainly,intended,for,transactions,managed,by,link,org,springframework,transaction,support,transaction,template,or,link,org,springframework,transaction,interceptor,transaction,interceptor,where,the,actual,commit,rollback,decision,is,made,by,the,container,see,org,springframework,transaction,support,transaction,callback,do,in,transaction,see,org,springframework,transaction,interceptor,transaction,attribute,rollback,on;void,set,rollback,only
TransactionStatus -> void setRollbackOnly()_;1381787551;Set the transaction rollback-only. This instructs the transaction manager_that the only possible outcome of the transaction may be a rollback, as_alternative to throwing an exception which would in turn trigger a rollback._<p>This is mainly intended for transactions managed by_{@link org.springframework.transaction.support.TransactionTemplate} or_{@link org.springframework.transaction.interceptor.TransactionInterceptor},_where the actual commit/rollback decision is made by the container._@see org.springframework.transaction.support.TransactionCallback#doInTransaction_@see org.springframework.transaction.interceptor.TransactionAttribute#rollbackOn;void setRollbackOnly()_;set,the,transaction,rollback,only,this,instructs,the,transaction,manager,that,the,only,possible,outcome,of,the,transaction,may,be,a,rollback,as,alternative,to,throwing,an,exception,which,would,in,turn,trigger,a,rollback,p,this,is,mainly,intended,for,transactions,managed,by,link,org,springframework,transaction,support,transaction,template,or,link,org,springframework,transaction,interceptor,transaction,interceptor,where,the,actual,commit,rollback,decision,is,made,by,the,container,see,org,springframework,transaction,support,transaction,callback,do,in,transaction,see,org,springframework,transaction,interceptor,transaction,attribute,rollback,on;void,set,rollback,only
TransactionStatus -> void setRollbackOnly()_;1477661037;Set the transaction rollback-only. This instructs the transaction manager_that the only possible outcome of the transaction may be a rollback, as_alternative to throwing an exception which would in turn trigger a rollback._<p>This is mainly intended for transactions managed by_{@link org.springframework.transaction.support.TransactionTemplate} or_{@link org.springframework.transaction.interceptor.TransactionInterceptor},_where the actual commit/rollback decision is made by the container._@see org.springframework.transaction.support.TransactionCallback#doInTransaction_@see org.springframework.transaction.interceptor.TransactionAttribute#rollbackOn;void setRollbackOnly()_;set,the,transaction,rollback,only,this,instructs,the,transaction,manager,that,the,only,possible,outcome,of,the,transaction,may,be,a,rollback,as,alternative,to,throwing,an,exception,which,would,in,turn,trigger,a,rollback,p,this,is,mainly,intended,for,transactions,managed,by,link,org,springframework,transaction,support,transaction,template,or,link,org,springframework,transaction,interceptor,transaction,interceptor,where,the,actual,commit,rollback,decision,is,made,by,the,container,see,org,springframework,transaction,support,transaction,callback,do,in,transaction,see,org,springframework,transaction,interceptor,transaction,attribute,rollback,on;void,set,rollback,only
TransactionStatus -> void setRollbackOnly()_;1533921824;Set the transaction rollback-only. This instructs the transaction manager_that the only possible outcome of the transaction may be a rollback, as_alternative to throwing an exception which would in turn trigger a rollback._<p>This is mainly intended for transactions managed by_{@link org.springframework.transaction.support.TransactionTemplate} or_{@link org.springframework.transaction.interceptor.TransactionInterceptor},_where the actual commit/rollback decision is made by the container._@see org.springframework.transaction.support.TransactionCallback#doInTransaction_@see org.springframework.transaction.interceptor.TransactionAttribute#rollbackOn;void setRollbackOnly()_;set,the,transaction,rollback,only,this,instructs,the,transaction,manager,that,the,only,possible,outcome,of,the,transaction,may,be,a,rollback,as,alternative,to,throwing,an,exception,which,would,in,turn,trigger,a,rollback,p,this,is,mainly,intended,for,transactions,managed,by,link,org,springframework,transaction,support,transaction,template,or,link,org,springframework,transaction,interceptor,transaction,interceptor,where,the,actual,commit,rollback,decision,is,made,by,the,container,see,org,springframework,transaction,support,transaction,callback,do,in,transaction,see,org,springframework,transaction,interceptor,transaction,attribute,rollback,on;void,set,rollback,only
TransactionStatus -> boolean isRollbackOnly()_;1328020251;Return whether the transaction has been marked as rollback-only_(either by the application or by the transaction infrastructure).;boolean isRollbackOnly()_;return,whether,the,transaction,has,been,marked,as,rollback,only,either,by,the,application,or,by,the,transaction,infrastructure;boolean,is,rollback,only
TransactionStatus -> boolean isRollbackOnly()_;1381787551;Return whether the transaction has been marked as rollback-only_(either by the application or by the transaction infrastructure).;boolean isRollbackOnly()_;return,whether,the,transaction,has,been,marked,as,rollback,only,either,by,the,application,or,by,the,transaction,infrastructure;boolean,is,rollback,only
TransactionStatus -> boolean isRollbackOnly()_;1477661037;Return whether the transaction has been marked as rollback-only_(either by the application or by the transaction infrastructure).;boolean isRollbackOnly()_;return,whether,the,transaction,has,been,marked,as,rollback,only,either,by,the,application,or,by,the,transaction,infrastructure;boolean,is,rollback,only
TransactionStatus -> boolean isRollbackOnly()_;1533921824;Return whether the transaction has been marked as rollback-only_(either by the application or by the transaction infrastructure).;boolean isRollbackOnly()_;return,whether,the,transaction,has,been,marked,as,rollback,only,either,by,the,application,or,by,the,transaction,infrastructure;boolean,is,rollback,only
TransactionStatus -> @Override 	void flush()_;1381787551;Flush the underlying session to the datastore, if applicable:_for example, all affected Hibernate/JPA sessions.;@Override_	void flush()_;flush,the,underlying,session,to,the,datastore,if,applicable,for,example,all,affected,hibernate,jpa,sessions;override,void,flush
TransactionStatus -> @Override 	void flush()_;1477661037;Flush the underlying session to the datastore, if applicable:_for example, all affected Hibernate/JPA sessions._<p>This is effectively just a hint and may be a no-op if the underlying_transaction manager does not have a flush concept. A flush signal may_get applied to the primary resource or to transaction synchronizations,_depending on the underlying resource.;@Override_	void flush()_;flush,the,underlying,session,to,the,datastore,if,applicable,for,example,all,affected,hibernate,jpa,sessions,p,this,is,effectively,just,a,hint,and,may,be,a,no,op,if,the,underlying,transaction,manager,does,not,have,a,flush,concept,a,flush,signal,may,get,applied,to,the,primary,resource,or,to,transaction,synchronizations,depending,on,the,underlying,resource;override,void,flush
TransactionStatus -> @Override 	void flush()_;1533921824;Flush the underlying session to the datastore, if applicable:_for example, all affected Hibernate/JPA sessions._<p>This is effectively just a hint and may be a no-op if the underlying_transaction manager does not have a flush concept. A flush signal may_get applied to the primary resource or to transaction synchronizations,_depending on the underlying resource.;@Override_	void flush()_;flush,the,underlying,session,to,the,datastore,if,applicable,for,example,all,affected,hibernate,jpa,sessions,p,this,is,effectively,just,a,hint,and,may,be,a,no,op,if,the,underlying,transaction,manager,does,not,have,a,flush,concept,a,flush,signal,may,get,applied,to,the,primary,resource,or,to,transaction,synchronizations,depending,on,the,underlying,resource;override,void,flush
