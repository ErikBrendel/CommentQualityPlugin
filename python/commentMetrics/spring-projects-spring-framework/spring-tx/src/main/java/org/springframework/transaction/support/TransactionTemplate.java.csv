commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the transaction management strategy to be used.  */ ;/**  * Set the transaction management strategy to be used.  */ public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {     this.transactionManager = transactionManager. }
true;public;0;4;/**  * Return the transaction management strategy to be used.  */ ;/**  * Return the transaction management strategy to be used.  */ @Nullable public PlatformTransactionManager getTransactionManager() {     return this.transactionManager. }
false;public;0;6;;@Override public void afterPropertiesSet() {     if (this.transactionManager == null) {         throw new IllegalArgumentException("Property 'transactionManager' is required").     } }
false;public;1;28;;@Override @Nullable public <T> T execute(TransactionCallback<T> action) throws TransactionException {     Assert.state(this.transactionManager != null, "No PlatformTransactionManager set").     if (this.transactionManager instanceof CallbackPreferringPlatformTransactionManager) {         return ((CallbackPreferringPlatformTransactionManager) this.transactionManager).execute(this, action).     } else {         TransactionStatus status = this.transactionManager.getTransaction(this).         T result.         try {             result = action.doInTransaction(status).         } catch (RuntimeException | Error ex) {             // Transactional code threw application exception -> rollback             rollbackOnException(status, ex).             throw ex.         } catch (Throwable ex) {             // Transactional code threw unexpected exception -> rollback             rollbackOnException(status, ex).             throw new UndeclaredThrowableException(ex, "TransactionCallback threw undeclared checked exception").         }         this.transactionManager.commit(status).         return result.     } }
true;private;2;17;/**  * Perform a rollback, handling rollback exceptions properly.  * @param status object representing the transaction  * @param ex the thrown application exception or error  * @throws TransactionException in case of a rollback error  */ ;/**  * Perform a rollback, handling rollback exceptions properly.  * @param status object representing the transaction  * @param ex the thrown application exception or error  * @throws TransactionException in case of a rollback error  */ private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {     Assert.state(this.transactionManager != null, "No PlatformTransactionManager set").     logger.debug("Initiating transaction rollback on application exception", ex).     try {         this.transactionManager.rollback(status).     } catch (TransactionSystemException ex2) {         logger.error("Application exception overridden by rollback exception", ex).         ex2.initApplicationException(ex).         throw ex2.     } catch (RuntimeException | Error ex2) {         logger.error("Application exception overridden by rollback exception", ex).         throw ex2.     } }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (super.equals(other) && (!(other instanceof TransactionTemplate) || getTransactionManager() == ((TransactionTemplate) other).getTransactionManager()))). }
