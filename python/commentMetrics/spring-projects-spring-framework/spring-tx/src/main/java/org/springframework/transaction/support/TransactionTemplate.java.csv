# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1328020251;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1356735495;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1357119239;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1368482696;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1464992240;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1498780456;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		Assert.state(this.transactionManager != null, "No PlatformTransactionManager set")___		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,assert,state,this,transaction,manager,null,no,platform,transaction,manager,set,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1500448076;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		Assert.state(this.transactionManager != null, "No PlatformTransactionManager set")___		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,assert,state,this,transaction,manager,null,no,platform,transaction,manager,set,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1502974979;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		Assert.state(this.transactionManager != null, "No PlatformTransactionManager set")___		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_		catch (Error err) {_			logger.error("Application exception overridden by rollback error", ex)__			throw err__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,assert,state,this,transaction,manager,null,no,platform,transaction,manager,set,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2,catch,error,err,logger,error,application,exception,overridden,by,rollback,error,ex,throw,err
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1508843662;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		Assert.state(this.transactionManager != null, "No PlatformTransactionManager set")___		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,assert,state,this,transaction,manager,null,no,platform,transaction,manager,set,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1520584785;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		Assert.state(this.transactionManager != null, "No PlatformTransactionManager set")___		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,assert,state,this,transaction,manager,null,no,platform,transaction,manager,set,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2
TransactionTemplate -> private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException;1530174524;Perform a rollback, handling rollback exceptions properly._@param status object representing the transaction_@param ex the thrown application exception or error_@throws TransactionException in case of a rollback error;private void rollbackOnException(TransactionStatus status, Throwable ex) throws TransactionException {_		Assert.state(this.transactionManager != null, "No PlatformTransactionManager set")___		logger.debug("Initiating transaction rollback on application exception", ex)__		try {_			this.transactionManager.rollback(status)__		}_		catch (TransactionSystemException ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			ex2.initApplicationException(ex)__			throw ex2__		}_		catch (RuntimeException | Error ex2) {_			logger.error("Application exception overridden by rollback exception", ex)__			throw ex2__		}_	};perform,a,rollback,handling,rollback,exceptions,properly,param,status,object,representing,the,transaction,param,ex,the,thrown,application,exception,or,error,throws,transaction,exception,in,case,of,a,rollback,error;private,void,rollback,on,exception,transaction,status,status,throwable,ex,throws,transaction,exception,assert,state,this,transaction,manager,null,no,platform,transaction,manager,set,logger,debug,initiating,transaction,rollback,on,application,exception,ex,try,this,transaction,manager,rollback,status,catch,transaction,system,exception,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,ex2,init,application,exception,ex,throw,ex2,catch,runtime,exception,error,ex2,logger,error,application,exception,overridden,by,rollback,exception,ex,throw,ex2
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1328020251;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1356735495;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1357119239;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1368482696;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1464992240;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1498780456;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1500448076;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1502974979;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1508843662;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1520584785;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager);1530174524;Construct a new TransactionTemplate using the given transaction manager._@param transactionManager the transaction management strategy to be used;public TransactionTemplate(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,param,transaction,manager,the,transaction,management,strategy,to,be,used;public,transaction,template,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(PlatformTransactionManager transactionManager);1328020251;Set the transaction management strategy to be used.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(PlatformTransactionManager transactionManager);1356735495;Set the transaction management strategy to be used.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(PlatformTransactionManager transactionManager);1357119239;Set the transaction management strategy to be used.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(PlatformTransactionManager transactionManager);1368482696;Set the transaction management strategy to be used.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(PlatformTransactionManager transactionManager);1464992240;Set the transaction management strategy to be used.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(PlatformTransactionManager transactionManager);1498780456;Set the transaction management strategy to be used.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate();1328020251;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any <code>execute</code> calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,code,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1356735495;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1357119239;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1368482696;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1464992240;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1498780456;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1500448076;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1502974979;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1508843662;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1520584785;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate();1530174524;Construct a new TransactionTemplate for bean usage._<p>Note: The PlatformTransactionManager needs to be set before_any {@code execute} calls._@see #setTransactionManager;public TransactionTemplate() {_	};construct,a,new,transaction,template,for,bean,usage,p,note,the,platform,transaction,manager,needs,to,be,set,before,any,code,execute,calls,see,set,transaction,manager;public,transaction,template
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1328020251;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1356735495;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1357119239;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1368482696;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1464992240;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1498780456;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1500448076;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1502974979;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1508843662;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1520584785;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition);1530174524;Construct a new TransactionTemplate using the given transaction manager,_taking its default settings from the given transaction definition._@param transactionManager the transaction management strategy to be used_@param transactionDefinition the transaction definition to copy the_default settings from. Local properties can still be set to change values.;public TransactionTemplate(PlatformTransactionManager transactionManager, TransactionDefinition transactionDefinition) {_		super(transactionDefinition)__		this.transactionManager = transactionManager__	};construct,a,new,transaction,template,using,the,given,transaction,manager,taking,its,default,settings,from,the,given,transaction,definition,param,transaction,manager,the,transaction,management,strategy,to,be,used,param,transaction,definition,the,transaction,definition,to,copy,the,default,settings,from,local,properties,can,still,be,set,to,change,values;public,transaction,template,platform,transaction,manager,transaction,manager,transaction,definition,transaction,definition,super,transaction,definition,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1500448076;Set the transaction management strategy to be used.;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1502974979;Set the transaction management strategy to be used.;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1508843662;Set the transaction management strategy to be used.;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1520584785;Set the transaction management strategy to be used.;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager);1530174524;Set the transaction management strategy to be used.;public void setTransactionManager(@Nullable PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,management,strategy,to,be,used;public,void,set,transaction,manager,nullable,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
TransactionTemplate -> public PlatformTransactionManager getTransactionManager();1328020251;Return the transaction management strategy to be used.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> public PlatformTransactionManager getTransactionManager();1356735495;Return the transaction management strategy to be used.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> public PlatformTransactionManager getTransactionManager();1357119239;Return the transaction management strategy to be used.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> public PlatformTransactionManager getTransactionManager();1368482696;Return the transaction management strategy to be used.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> public PlatformTransactionManager getTransactionManager();1464992240;Return the transaction management strategy to be used.;public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> @Nullable 	public PlatformTransactionManager getTransactionManager();1498780456;Return the transaction management strategy to be used.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> @Nullable 	public PlatformTransactionManager getTransactionManager();1500448076;Return the transaction management strategy to be used.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> @Nullable 	public PlatformTransactionManager getTransactionManager();1502974979;Return the transaction management strategy to be used.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> @Nullable 	public PlatformTransactionManager getTransactionManager();1508843662;Return the transaction management strategy to be used.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> @Nullable 	public PlatformTransactionManager getTransactionManager();1520584785;Return the transaction management strategy to be used.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
TransactionTemplate -> @Nullable 	public PlatformTransactionManager getTransactionManager();1530174524;Return the transaction management strategy to be used.;@Nullable_	public PlatformTransactionManager getTransactionManager() {_		return this.transactionManager__	};return,the,transaction,management,strategy,to,be,used;nullable,public,platform,transaction,manager,get,transaction,manager,return,this,transaction,manager
