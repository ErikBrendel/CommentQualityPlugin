# id;timestamp;commentText;codeText;commentWords;codeWords
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor();1328020251;Create a new PersistenceExceptionTranslationInterceptor._Needs to be configured with a PersistenceExceptionTranslator afterwards._@see #setPersistenceExceptionTranslator;public PersistenceExceptionTranslationInterceptor() {_	};create,a,new,persistence,exception,translation,interceptor,needs,to,be,configured,with,a,persistence,exception,translator,afterwards,see,set,persistence,exception,translator;public,persistence,exception,translation,interceptor
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor();1356735495;Create a new PersistenceExceptionTranslationInterceptor._Needs to be configured with a PersistenceExceptionTranslator afterwards._@see #setPersistenceExceptionTranslator;public PersistenceExceptionTranslationInterceptor() {_	};create,a,new,persistence,exception,translation,interceptor,needs,to,be,configured,with,a,persistence,exception,translator,afterwards,see,set,persistence,exception,translator;public,persistence,exception,translation,interceptor
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor();1357119239;Create a new PersistenceExceptionTranslationInterceptor._Needs to be configured with a PersistenceExceptionTranslator afterwards._@see #setPersistenceExceptionTranslator;public PersistenceExceptionTranslationInterceptor() {_	};create,a,new,persistence,exception,translation,interceptor,needs,to,be,configured,with,a,persistence,exception,translator,afterwards,see,set,persistence,exception,translator;public,persistence,exception,translation,interceptor
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor();1368482696;Create a new PersistenceExceptionTranslationInterceptor._Needs to be configured with a PersistenceExceptionTranslator afterwards._@see #setPersistenceExceptionTranslator;public PersistenceExceptionTranslationInterceptor() {_	};create,a,new,persistence,exception,translation,interceptor,needs,to,be,configured,with,a,persistence,exception,translator,afterwards,see,set,persistence,exception,translator;public,persistence,exception,translation,interceptor
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor();1378312405;Create a new PersistenceExceptionTranslationInterceptor._Needs to be configured with a PersistenceExceptionTranslator afterwards._@see #setPersistenceExceptionTranslator;public PersistenceExceptionTranslationInterceptor() {_	};create,a,new,persistence,exception,translation,interceptor,needs,to,be,configured,with,a,persistence,exception,translator,afterwards,see,set,persistence,exception,translator;public,persistence,exception,translation,interceptor
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor();1498780456;Create a new PersistenceExceptionTranslationInterceptor._Needs to be configured with a PersistenceExceptionTranslator afterwards._@see #setPersistenceExceptionTranslator;public PersistenceExceptionTranslationInterceptor() {_	};create,a,new,persistence,exception,translation,interceptor,needs,to,be,configured,with,a,persistence,exception,translator,afterwards,see,set,persistence,exception,translator;public,persistence,exception,translation,interceptor
PersistenceExceptionTranslationInterceptor -> protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory);1328020251;Detect all PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from_@return a chained PersistenceExceptionTranslator, combining all_PersistenceExceptionTranslators found in the factory_@see ChainedPersistenceExceptionTranslator;protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory) {_		_		Map<String, PersistenceExceptionTranslator> pets = BeanFactoryUtils.beansOfTypeIncludingAncestors(_				beanFactory, PersistenceExceptionTranslator.class, false, false)__		if (pets.isEmpty()) {_			throw new IllegalStateException(_					"No persistence exception translators found in bean factory. Cannot perform exception translation.")__		}_		ChainedPersistenceExceptionTranslator cpet = new ChainedPersistenceExceptionTranslator()__		for (PersistenceExceptionTranslator pet : pets.values()) {_			cpet.addDelegate(pet)__		}_		return cpet__	};detect,all,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from,return,a,chained,persistence,exception,translator,combining,all,persistence,exception,translators,found,in,the,factory,see,chained,persistence,exception,translator;protected,persistence,exception,translator,detect,persistence,exception,translators,listable,bean,factory,bean,factory,map,string,persistence,exception,translator,pets,bean,factory,utils,beans,of,type,including,ancestors,bean,factory,persistence,exception,translator,class,false,false,if,pets,is,empty,throw,new,illegal,state,exception,no,persistence,exception,translators,found,in,bean,factory,cannot,perform,exception,translation,chained,persistence,exception,translator,cpet,new,chained,persistence,exception,translator,for,persistence,exception,translator,pet,pets,values,cpet,add,delegate,pet,return,cpet
PersistenceExceptionTranslationInterceptor -> protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory);1356735495;Detect all PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from_@return a chained PersistenceExceptionTranslator, combining all_PersistenceExceptionTranslators found in the factory_@see ChainedPersistenceExceptionTranslator;protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory) {_		_		Map<String, PersistenceExceptionTranslator> pets = BeanFactoryUtils.beansOfTypeIncludingAncestors(_				beanFactory, PersistenceExceptionTranslator.class, false, false)__		if (pets.isEmpty()) {_			throw new IllegalStateException(_					"No persistence exception translators found in bean factory. Cannot perform exception translation.")__		}_		ChainedPersistenceExceptionTranslator cpet = new ChainedPersistenceExceptionTranslator()__		for (PersistenceExceptionTranslator pet : pets.values()) {_			cpet.addDelegate(pet)__		}_		return cpet__	};detect,all,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from,return,a,chained,persistence,exception,translator,combining,all,persistence,exception,translators,found,in,the,factory,see,chained,persistence,exception,translator;protected,persistence,exception,translator,detect,persistence,exception,translators,listable,bean,factory,bean,factory,map,string,persistence,exception,translator,pets,bean,factory,utils,beans,of,type,including,ancestors,bean,factory,persistence,exception,translator,class,false,false,if,pets,is,empty,throw,new,illegal,state,exception,no,persistence,exception,translators,found,in,bean,factory,cannot,perform,exception,translation,chained,persistence,exception,translator,cpet,new,chained,persistence,exception,translator,for,persistence,exception,translator,pet,pets,values,cpet,add,delegate,pet,return,cpet
PersistenceExceptionTranslationInterceptor -> protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory);1357119239;Detect all PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from_@return a chained PersistenceExceptionTranslator, combining all_PersistenceExceptionTranslators found in the factory_@see ChainedPersistenceExceptionTranslator;protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory) {_		_		Map<String, PersistenceExceptionTranslator> pets = BeanFactoryUtils.beansOfTypeIncludingAncestors(_				beanFactory, PersistenceExceptionTranslator.class, false, false)__		if (pets.isEmpty()) {_			throw new IllegalStateException(_					"No persistence exception translators found in bean factory. Cannot perform exception translation.")__		}_		ChainedPersistenceExceptionTranslator cpet = new ChainedPersistenceExceptionTranslator()__		for (PersistenceExceptionTranslator pet : pets.values()) {_			cpet.addDelegate(pet)__		}_		return cpet__	};detect,all,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from,return,a,chained,persistence,exception,translator,combining,all,persistence,exception,translators,found,in,the,factory,see,chained,persistence,exception,translator;protected,persistence,exception,translator,detect,persistence,exception,translators,listable,bean,factory,bean,factory,map,string,persistence,exception,translator,pets,bean,factory,utils,beans,of,type,including,ancestors,bean,factory,persistence,exception,translator,class,false,false,if,pets,is,empty,throw,new,illegal,state,exception,no,persistence,exception,translators,found,in,bean,factory,cannot,perform,exception,translation,chained,persistence,exception,translator,cpet,new,chained,persistence,exception,translator,for,persistence,exception,translator,pet,pets,values,cpet,add,delegate,pet,return,cpet
PersistenceExceptionTranslationInterceptor -> protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory);1368482696;Detect all PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from_@return a chained PersistenceExceptionTranslator, combining all_PersistenceExceptionTranslators found in the factory_@see ChainedPersistenceExceptionTranslator;protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory) {_		_		Map<String, PersistenceExceptionTranslator> pets = BeanFactoryUtils.beansOfTypeIncludingAncestors(_				beanFactory, PersistenceExceptionTranslator.class, false, false)__		if (pets.isEmpty()) {_			throw new IllegalStateException(_					"No persistence exception translators found in bean factory. Cannot perform exception translation.")__		}_		ChainedPersistenceExceptionTranslator cpet = new ChainedPersistenceExceptionTranslator()__		for (PersistenceExceptionTranslator pet : pets.values()) {_			cpet.addDelegate(pet)__		}_		return cpet__	};detect,all,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from,return,a,chained,persistence,exception,translator,combining,all,persistence,exception,translators,found,in,the,factory,see,chained,persistence,exception,translator;protected,persistence,exception,translator,detect,persistence,exception,translators,listable,bean,factory,bean,factory,map,string,persistence,exception,translator,pets,bean,factory,utils,beans,of,type,including,ancestors,bean,factory,persistence,exception,translator,class,false,false,if,pets,is,empty,throw,new,illegal,state,exception,no,persistence,exception,translators,found,in,bean,factory,cannot,perform,exception,translation,chained,persistence,exception,translator,cpet,new,chained,persistence,exception,translator,for,persistence,exception,translator,pet,pets,values,cpet,add,delegate,pet,return,cpet
PersistenceExceptionTranslationInterceptor -> protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory);1378312405;Detect all PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from_@return a chained PersistenceExceptionTranslator, combining all_PersistenceExceptionTranslators found in the factory_@see ChainedPersistenceExceptionTranslator;protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory) {_		_		Map<String, PersistenceExceptionTranslator> pets = BeanFactoryUtils.beansOfTypeIncludingAncestors(_				beanFactory, PersistenceExceptionTranslator.class, false, false)__		ChainedPersistenceExceptionTranslator cpet = new ChainedPersistenceExceptionTranslator()__		for (PersistenceExceptionTranslator pet : pets.values()) {_			cpet.addDelegate(pet)__		}_		return cpet__	};detect,all,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from,return,a,chained,persistence,exception,translator,combining,all,persistence,exception,translators,found,in,the,factory,see,chained,persistence,exception,translator;protected,persistence,exception,translator,detect,persistence,exception,translators,listable,bean,factory,bean,factory,map,string,persistence,exception,translator,pets,bean,factory,utils,beans,of,type,including,ancestors,bean,factory,persistence,exception,translator,class,false,false,chained,persistence,exception,translator,cpet,new,chained,persistence,exception,translator,for,persistence,exception,translator,pet,pets,values,cpet,add,delegate,pet,return,cpet
PersistenceExceptionTranslationInterceptor -> protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory);1498780456;Detect all PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from_@return a chained PersistenceExceptionTranslator, combining all_PersistenceExceptionTranslators found in the factory_@see ChainedPersistenceExceptionTranslator;protected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(ListableBeanFactory beanFactory) {_		_		Map<String, PersistenceExceptionTranslator> pets = BeanFactoryUtils.beansOfTypeIncludingAncestors(_				beanFactory, PersistenceExceptionTranslator.class, false, false)__		ChainedPersistenceExceptionTranslator cpet = new ChainedPersistenceExceptionTranslator()__		for (PersistenceExceptionTranslator pet : pets.values()) {_			cpet.addDelegate(pet)__		}_		return cpet__	};detect,all,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from,return,a,chained,persistence,exception,translator,combining,all,persistence,exception,translators,found,in,the,factory,see,chained,persistence,exception,translator;protected,persistence,exception,translator,detect,persistence,exception,translators,listable,bean,factory,bean,factory,map,string,persistence,exception,translator,pets,bean,factory,utils,beans,of,type,including,ancestors,bean,factory,persistence,exception,translator,class,false,false,chained,persistence,exception,translator,cpet,new,chained,persistence,exception,translator,for,persistence,exception,translator,pet,pets,values,cpet,add,delegate,pet,return,cpet
PersistenceExceptionTranslationInterceptor -> public void setAlwaysTranslate(boolean alwaysTranslate);1328020251;Specify whether to always translate the exception ("true"), or whether throw the_raw exception when declared, i.e. when the originating method signature's exception_declarations allow for the raw exception to be thrown ("false")._<p>Default is "false". Switch this flag to "true" in order to always translate_applicable exceptions, independent from the originating method signature._<p>Note that the originating method does not have to declare the specific exception._Any base class will do as well, even <code>throws Exception</code>: As long as the_originating method does explicitly declare compatible exceptions, the raw exception_will be rethrown. If you would like to avoid throwing raw exceptions in any case,_switch this flag to "true".;public void setAlwaysTranslate(boolean alwaysTranslate) {_		this.alwaysTranslate = alwaysTranslate__	};specify,whether,to,always,translate,the,exception,true,or,whether,throw,the,raw,exception,when,declared,i,e,when,the,originating,method,signature,s,exception,declarations,allow,for,the,raw,exception,to,be,thrown,false,p,default,is,false,switch,this,flag,to,true,in,order,to,always,translate,applicable,exceptions,independent,from,the,originating,method,signature,p,note,that,the,originating,method,does,not,have,to,declare,the,specific,exception,any,base,class,will,do,as,well,even,code,throws,exception,code,as,long,as,the,originating,method,does,explicitly,declare,compatible,exceptions,the,raw,exception,will,be,rethrown,if,you,would,like,to,avoid,throwing,raw,exceptions,in,any,case,switch,this,flag,to,true;public,void,set,always,translate,boolean,always,translate,this,always,translate,always,translate
PersistenceExceptionTranslationInterceptor -> public void setAlwaysTranslate(boolean alwaysTranslate);1356735495;Specify whether to always translate the exception ("true"), or whether throw the_raw exception when declared, i.e. when the originating method signature's exception_declarations allow for the raw exception to be thrown ("false")._<p>Default is "false". Switch this flag to "true" in order to always translate_applicable exceptions, independent from the originating method signature._<p>Note that the originating method does not have to declare the specific exception._Any base class will do as well, even {@code throws Exception}: As long as the_originating method does explicitly declare compatible exceptions, the raw exception_will be rethrown. If you would like to avoid throwing raw exceptions in any case,_switch this flag to "true".;public void setAlwaysTranslate(boolean alwaysTranslate) {_		this.alwaysTranslate = alwaysTranslate__	};specify,whether,to,always,translate,the,exception,true,or,whether,throw,the,raw,exception,when,declared,i,e,when,the,originating,method,signature,s,exception,declarations,allow,for,the,raw,exception,to,be,thrown,false,p,default,is,false,switch,this,flag,to,true,in,order,to,always,translate,applicable,exceptions,independent,from,the,originating,method,signature,p,note,that,the,originating,method,does,not,have,to,declare,the,specific,exception,any,base,class,will,do,as,well,even,code,throws,exception,as,long,as,the,originating,method,does,explicitly,declare,compatible,exceptions,the,raw,exception,will,be,rethrown,if,you,would,like,to,avoid,throwing,raw,exceptions,in,any,case,switch,this,flag,to,true;public,void,set,always,translate,boolean,always,translate,this,always,translate,always,translate
PersistenceExceptionTranslationInterceptor -> public void setAlwaysTranslate(boolean alwaysTranslate);1357119239;Specify whether to always translate the exception ("true"), or whether throw the_raw exception when declared, i.e. when the originating method signature's exception_declarations allow for the raw exception to be thrown ("false")._<p>Default is "false". Switch this flag to "true" in order to always translate_applicable exceptions, independent from the originating method signature._<p>Note that the originating method does not have to declare the specific exception._Any base class will do as well, even {@code throws Exception}: As long as the_originating method does explicitly declare compatible exceptions, the raw exception_will be rethrown. If you would like to avoid throwing raw exceptions in any case,_switch this flag to "true".;public void setAlwaysTranslate(boolean alwaysTranslate) {_		this.alwaysTranslate = alwaysTranslate__	};specify,whether,to,always,translate,the,exception,true,or,whether,throw,the,raw,exception,when,declared,i,e,when,the,originating,method,signature,s,exception,declarations,allow,for,the,raw,exception,to,be,thrown,false,p,default,is,false,switch,this,flag,to,true,in,order,to,always,translate,applicable,exceptions,independent,from,the,originating,method,signature,p,note,that,the,originating,method,does,not,have,to,declare,the,specific,exception,any,base,class,will,do,as,well,even,code,throws,exception,as,long,as,the,originating,method,does,explicitly,declare,compatible,exceptions,the,raw,exception,will,be,rethrown,if,you,would,like,to,avoid,throwing,raw,exceptions,in,any,case,switch,this,flag,to,true;public,void,set,always,translate,boolean,always,translate,this,always,translate,always,translate
PersistenceExceptionTranslationInterceptor -> public void setAlwaysTranslate(boolean alwaysTranslate);1368482696;Specify whether to always translate the exception ("true"), or whether throw the_raw exception when declared, i.e. when the originating method signature's exception_declarations allow for the raw exception to be thrown ("false")._<p>Default is "false". Switch this flag to "true" in order to always translate_applicable exceptions, independent from the originating method signature._<p>Note that the originating method does not have to declare the specific exception._Any base class will do as well, even {@code throws Exception}: As long as the_originating method does explicitly declare compatible exceptions, the raw exception_will be rethrown. If you would like to avoid throwing raw exceptions in any case,_switch this flag to "true".;public void setAlwaysTranslate(boolean alwaysTranslate) {_		this.alwaysTranslate = alwaysTranslate__	};specify,whether,to,always,translate,the,exception,true,or,whether,throw,the,raw,exception,when,declared,i,e,when,the,originating,method,signature,s,exception,declarations,allow,for,the,raw,exception,to,be,thrown,false,p,default,is,false,switch,this,flag,to,true,in,order,to,always,translate,applicable,exceptions,independent,from,the,originating,method,signature,p,note,that,the,originating,method,does,not,have,to,declare,the,specific,exception,any,base,class,will,do,as,well,even,code,throws,exception,as,long,as,the,originating,method,does,explicitly,declare,compatible,exceptions,the,raw,exception,will,be,rethrown,if,you,would,like,to,avoid,throwing,raw,exceptions,in,any,case,switch,this,flag,to,true;public,void,set,always,translate,boolean,always,translate,this,always,translate,always,translate
PersistenceExceptionTranslationInterceptor -> public void setAlwaysTranslate(boolean alwaysTranslate);1378312405;Specify whether to always translate the exception ("true"), or whether throw the_raw exception when declared, i.e. when the originating method signature's exception_declarations allow for the raw exception to be thrown ("false")._<p>Default is "false". Switch this flag to "true" in order to always translate_applicable exceptions, independent from the originating method signature._<p>Note that the originating method does not have to declare the specific exception._Any base class will do as well, even {@code throws Exception}: As long as the_originating method does explicitly declare compatible exceptions, the raw exception_will be rethrown. If you would like to avoid throwing raw exceptions in any case,_switch this flag to "true".;public void setAlwaysTranslate(boolean alwaysTranslate) {_		this.alwaysTranslate = alwaysTranslate__	};specify,whether,to,always,translate,the,exception,true,or,whether,throw,the,raw,exception,when,declared,i,e,when,the,originating,method,signature,s,exception,declarations,allow,for,the,raw,exception,to,be,thrown,false,p,default,is,false,switch,this,flag,to,true,in,order,to,always,translate,applicable,exceptions,independent,from,the,originating,method,signature,p,note,that,the,originating,method,does,not,have,to,declare,the,specific,exception,any,base,class,will,do,as,well,even,code,throws,exception,as,long,as,the,originating,method,does,explicitly,declare,compatible,exceptions,the,raw,exception,will,be,rethrown,if,you,would,like,to,avoid,throwing,raw,exceptions,in,any,case,switch,this,flag,to,true;public,void,set,always,translate,boolean,always,translate,this,always,translate,always,translate
PersistenceExceptionTranslationInterceptor -> public void setAlwaysTranslate(boolean alwaysTranslate);1498780456;Specify whether to always translate the exception ("true"), or whether throw the_raw exception when declared, i.e. when the originating method signature's exception_declarations allow for the raw exception to be thrown ("false")._<p>Default is "false". Switch this flag to "true" in order to always translate_applicable exceptions, independent from the originating method signature._<p>Note that the originating method does not have to declare the specific exception._Any base class will do as well, even {@code throws Exception}: As long as the_originating method does explicitly declare compatible exceptions, the raw exception_will be rethrown. If you would like to avoid throwing raw exceptions in any case,_switch this flag to "true".;public void setAlwaysTranslate(boolean alwaysTranslate) {_		this.alwaysTranslate = alwaysTranslate__	};specify,whether,to,always,translate,the,exception,true,or,whether,throw,the,raw,exception,when,declared,i,e,when,the,originating,method,signature,s,exception,declarations,allow,for,the,raw,exception,to,be,thrown,false,p,default,is,false,switch,this,flag,to,true,in,order,to,always,translate,applicable,exceptions,independent,from,the,originating,method,signature,p,note,that,the,originating,method,does,not,have,to,declare,the,specific,exception,any,base,class,will,do,as,well,even,code,throws,exception,as,long,as,the,originating,method,does,explicitly,declare,compatible,exceptions,the,raw,exception,will,be,rethrown,if,you,would,like,to,avoid,throwing,raw,exceptions,in,any,case,switch,this,flag,to,true;public,void,set,always,translate,boolean,always,translate,this,always,translate,always,translate
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator pet);1378312405;Create a new PersistenceExceptionTranslationInterceptor_for the given PersistenceExceptionTranslator._@param pet the PersistenceExceptionTranslator to use;public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator pet) {_		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		this.persistenceExceptionTranslator = pet__	};create,a,new,persistence,exception,translation,interceptor,for,the,given,persistence,exception,translator,param,pet,the,persistence,exception,translator,to,use;public,persistence,exception,translation,interceptor,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,this,persistence,exception,translator,pet
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator pet);1498780456;Create a new PersistenceExceptionTranslationInterceptor_for the given PersistenceExceptionTranslator._@param pet the PersistenceExceptionTranslator to use;public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator pet) {_		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		this.persistenceExceptionTranslator = pet__	};create,a,new,persistence,exception,translation,interceptor,for,the,given,persistence,exception,translator,param,pet,the,persistence,exception,translator,to,use;public,persistence,exception,translation,interceptor,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,this,persistence,exception,translator,pet
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory);1328020251;Create a new PersistenceExceptionTranslationInterceptor, autodetecting_PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from;public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory) {_		this.persistenceExceptionTranslator = detectPersistenceExceptionTranslators(beanFactory)__	};create,a,new,persistence,exception,translation,interceptor,autodetecting,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from;public,persistence,exception,translation,interceptor,listable,bean,factory,bean,factory,this,persistence,exception,translator,detect,persistence,exception,translators,bean,factory
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory);1356735495;Create a new PersistenceExceptionTranslationInterceptor, autodetecting_PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from;public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory) {_		this.persistenceExceptionTranslator = detectPersistenceExceptionTranslators(beanFactory)__	};create,a,new,persistence,exception,translation,interceptor,autodetecting,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from;public,persistence,exception,translation,interceptor,listable,bean,factory,bean,factory,this,persistence,exception,translator,detect,persistence,exception,translators,bean,factory
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory);1357119239;Create a new PersistenceExceptionTranslationInterceptor, autodetecting_PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from;public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory) {_		this.persistenceExceptionTranslator = detectPersistenceExceptionTranslators(beanFactory)__	};create,a,new,persistence,exception,translation,interceptor,autodetecting,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from;public,persistence,exception,translation,interceptor,listable,bean,factory,bean,factory,this,persistence,exception,translator,detect,persistence,exception,translators,bean,factory
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory);1368482696;Create a new PersistenceExceptionTranslationInterceptor, autodetecting_PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from;public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory) {_		this.persistenceExceptionTranslator = detectPersistenceExceptionTranslators(beanFactory)__	};create,a,new,persistence,exception,translation,interceptor,autodetecting,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from;public,persistence,exception,translation,interceptor,listable,bean,factory,bean,factory,this,persistence,exception,translator,detect,persistence,exception,translators,bean,factory
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory);1378312405;Create a new PersistenceExceptionTranslationInterceptor, autodetecting_PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from;public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,persistence,exception,translation,interceptor,autodetecting,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from;public,persistence,exception,translation,interceptor,listable,bean,factory,bean,factory,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,this,bean,factory,bean,factory
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory);1498780456;Create a new PersistenceExceptionTranslationInterceptor, autodetecting_PersistenceExceptionTranslators in the given BeanFactory._@param beanFactory the ListableBeanFactory to obtaining all_PersistenceExceptionTranslators from;public PersistenceExceptionTranslationInterceptor(ListableBeanFactory beanFactory) {_		Assert.notNull(beanFactory, "ListableBeanFactory must not be null")__		this.beanFactory = beanFactory__	};create,a,new,persistence,exception,translation,interceptor,autodetecting,persistence,exception,translators,in,the,given,bean,factory,param,bean,factory,the,listable,bean,factory,to,obtaining,all,persistence,exception,translators,from;public,persistence,exception,translation,interceptor,listable,bean,factory,bean,factory,assert,not,null,bean,factory,listable,bean,factory,must,not,be,null,this,bean,factory,bean,factory
PersistenceExceptionTranslationInterceptor -> public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet);1328020251;Specify the PersistenceExceptionTranslator to use._<p>Default is to autodetect all PersistenceExceptionTranslators_in the containing BeanFactory, using them in a chain._@see #detectPersistenceExceptionTranslators;public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet) {_		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		this.persistenceExceptionTranslator = pet__	};specify,the,persistence,exception,translator,to,use,p,default,is,to,autodetect,all,persistence,exception,translators,in,the,containing,bean,factory,using,them,in,a,chain,see,detect,persistence,exception,translators;public,void,set,persistence,exception,translator,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,this,persistence,exception,translator,pet
PersistenceExceptionTranslationInterceptor -> public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet);1356735495;Specify the PersistenceExceptionTranslator to use._<p>Default is to autodetect all PersistenceExceptionTranslators_in the containing BeanFactory, using them in a chain._@see #detectPersistenceExceptionTranslators;public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet) {_		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		this.persistenceExceptionTranslator = pet__	};specify,the,persistence,exception,translator,to,use,p,default,is,to,autodetect,all,persistence,exception,translators,in,the,containing,bean,factory,using,them,in,a,chain,see,detect,persistence,exception,translators;public,void,set,persistence,exception,translator,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,this,persistence,exception,translator,pet
PersistenceExceptionTranslationInterceptor -> public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet);1357119239;Specify the PersistenceExceptionTranslator to use._<p>Default is to autodetect all PersistenceExceptionTranslators_in the containing BeanFactory, using them in a chain._@see #detectPersistenceExceptionTranslators;public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet) {_		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		this.persistenceExceptionTranslator = pet__	};specify,the,persistence,exception,translator,to,use,p,default,is,to,autodetect,all,persistence,exception,translators,in,the,containing,bean,factory,using,them,in,a,chain,see,detect,persistence,exception,translators;public,void,set,persistence,exception,translator,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,this,persistence,exception,translator,pet
PersistenceExceptionTranslationInterceptor -> public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet);1368482696;Specify the PersistenceExceptionTranslator to use._<p>Default is to autodetect all PersistenceExceptionTranslators_in the containing BeanFactory, using them in a chain._@see #detectPersistenceExceptionTranslators;public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet) {_		Assert.notNull(pet, "PersistenceExceptionTranslator must not be null")__		this.persistenceExceptionTranslator = pet__	};specify,the,persistence,exception,translator,to,use,p,default,is,to,autodetect,all,persistence,exception,translators,in,the,containing,bean,factory,using,them,in,a,chain,see,detect,persistence,exception,translators;public,void,set,persistence,exception,translator,persistence,exception,translator,pet,assert,not,null,pet,persistence,exception,translator,must,not,be,null,this,persistence,exception,translator,pet
PersistenceExceptionTranslationInterceptor -> public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet);1378312405;Specify the PersistenceExceptionTranslator to use._<p>Default is to autodetect all PersistenceExceptionTranslators_in the containing BeanFactory, using them in a chain._@see #detectPersistenceExceptionTranslators;public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet) {_		this.persistenceExceptionTranslator = pet__	};specify,the,persistence,exception,translator,to,use,p,default,is,to,autodetect,all,persistence,exception,translators,in,the,containing,bean,factory,using,them,in,a,chain,see,detect,persistence,exception,translators;public,void,set,persistence,exception,translator,persistence,exception,translator,pet,this,persistence,exception,translator,pet
PersistenceExceptionTranslationInterceptor -> public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet);1498780456;Specify the PersistenceExceptionTranslator to use._<p>Default is to autodetect all PersistenceExceptionTranslators_in the containing BeanFactory, using them in a chain._@see #detectPersistenceExceptionTranslators;public void setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet) {_		this.persistenceExceptionTranslator = pet__	};specify,the,persistence,exception,translator,to,use,p,default,is,to,autodetect,all,persistence,exception,translators,in,the,containing,bean,factory,using,them,in,a,chain,see,detect,persistence,exception,translators;public,void,set,persistence,exception,translator,persistence,exception,translator,pet,this,persistence,exception,translator,pet
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator persistenceExceptionTranslator);1328020251;Create a new PersistenceExceptionTranslationInterceptor_for the given PersistenceExceptionTranslator._@param persistenceExceptionTranslator the PersistenceExceptionTranslator to use;public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator persistenceExceptionTranslator) {_		setPersistenceExceptionTranslator(persistenceExceptionTranslator)__	};create,a,new,persistence,exception,translation,interceptor,for,the,given,persistence,exception,translator,param,persistence,exception,translator,the,persistence,exception,translator,to,use;public,persistence,exception,translation,interceptor,persistence,exception,translator,persistence,exception,translator,set,persistence,exception,translator,persistence,exception,translator
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator persistenceExceptionTranslator);1356735495;Create a new PersistenceExceptionTranslationInterceptor_for the given PersistenceExceptionTranslator._@param persistenceExceptionTranslator the PersistenceExceptionTranslator to use;public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator persistenceExceptionTranslator) {_		setPersistenceExceptionTranslator(persistenceExceptionTranslator)__	};create,a,new,persistence,exception,translation,interceptor,for,the,given,persistence,exception,translator,param,persistence,exception,translator,the,persistence,exception,translator,to,use;public,persistence,exception,translation,interceptor,persistence,exception,translator,persistence,exception,translator,set,persistence,exception,translator,persistence,exception,translator
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator persistenceExceptionTranslator);1357119239;Create a new PersistenceExceptionTranslationInterceptor_for the given PersistenceExceptionTranslator._@param persistenceExceptionTranslator the PersistenceExceptionTranslator to use;public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator persistenceExceptionTranslator) {_		setPersistenceExceptionTranslator(persistenceExceptionTranslator)__	};create,a,new,persistence,exception,translation,interceptor,for,the,given,persistence,exception,translator,param,persistence,exception,translator,the,persistence,exception,translator,to,use;public,persistence,exception,translation,interceptor,persistence,exception,translator,persistence,exception,translator,set,persistence,exception,translator,persistence,exception,translator
PersistenceExceptionTranslationInterceptor -> public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator persistenceExceptionTranslator);1368482696;Create a new PersistenceExceptionTranslationInterceptor_for the given PersistenceExceptionTranslator._@param persistenceExceptionTranslator the PersistenceExceptionTranslator to use;public PersistenceExceptionTranslationInterceptor(PersistenceExceptionTranslator persistenceExceptionTranslator) {_		setPersistenceExceptionTranslator(persistenceExceptionTranslator)__	};create,a,new,persistence,exception,translation,interceptor,for,the,given,persistence,exception,translator,param,persistence,exception,translator,the,persistence,exception,translator,to,use;public,persistence,exception,translation,interceptor,persistence,exception,translator,persistence,exception,translator,set,persistence,exception,translator,persistence,exception,translator
