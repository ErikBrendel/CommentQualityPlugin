# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionSynchronizationManager -> public static String getCurrentTransactionName();1328020251;Return the name of the current transaction, or <code>null</code> if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,code,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> public static String getCurrentTransactionName();1356735495;Return the name of the current transaction, or {@code null} if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> public static String getCurrentTransactionName();1392160372;Return the name of the current transaction, or {@code null} if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> public static String getCurrentTransactionName();1426267113;Return the name of the current transaction, or {@code null} if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> public static String getCurrentTransactionName();1467730834;Return the name of the current transaction, or {@code null} if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> public static String getCurrentTransactionName();1486719573;Return the name of the current transaction, or {@code null} if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> @Nullable 	public static Object getResource(Object key);1495868221;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or {@code null} if none_@see ResourceTransactionManager#getResourceFactory();@Nullable_	public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,if,none,see,resource,transaction,manager,get,resource,factory;nullable,public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> @Nullable 	public static Object getResource(Object key);1497346685;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or {@code null} if none_@see ResourceTransactionManager#getResourceFactory();@Nullable_	public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,if,none,see,resource,transaction,manager,get,resource,factory;nullable,public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> @Nullable 	public static Object getResource(Object key);1506842603;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or {@code null} if none_@see ResourceTransactionManager#getResourceFactory();@Nullable_	public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,if,none,see,resource,transaction,manager,get,resource,factory;nullable,public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1328020251;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1356735495;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1392160372;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1426267113;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1467730834;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1486719573;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1495868221;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1497346685;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object unbindResource(Object key) throws IllegalStateException;1506842603;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value (usually the active resource object)_@throws IllegalStateException if there is no value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static Object unbindResource(Object key) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doUnbindResource(actualKey)__		if (value == null) {_			throw new IllegalStateException(_					"No value for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		return value__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,no,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,object,unbind,resource,object,key,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,unbind,resource,actual,key,if,value,null,throw,new,illegal,state,exception,no,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object getResource(Object key);1328020251;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or <code>null</code> if none_@see ResourceTransactionManager#getResourceFactory();public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,code,if,none,see,resource,transaction,manager,get,resource,factory;public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object getResource(Object key);1356735495;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or {@code null} if none_@see ResourceTransactionManager#getResourceFactory();public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,if,none,see,resource,transaction,manager,get,resource,factory;public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object getResource(Object key);1392160372;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or {@code null} if none_@see ResourceTransactionManager#getResourceFactory();public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,if,none,see,resource,transaction,manager,get,resource,factory;public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object getResource(Object key);1426267113;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or {@code null} if none_@see ResourceTransactionManager#getResourceFactory();public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,if,none,see,resource,transaction,manager,get,resource,factory;public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object getResource(Object key);1467730834;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or {@code null} if none_@see ResourceTransactionManager#getResourceFactory();public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,if,none,see,resource,transaction,manager,get,resource,factory;public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static Object getResource(Object key);1486719573;Retrieve a resource for the given key that is bound to the current thread._@param key the key to check (usually the resource factory)_@return a value bound to the current thread (usually the active_resource object), or {@code null} if none_@see ResourceTransactionManager#getResourceFactory();public static Object getResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};retrieve,a,resource,for,the,given,key,that,is,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,a,value,bound,to,the,current,thread,usually,the,active,resource,object,or,code,null,if,none,see,resource,transaction,manager,get,resource,factory;public,static,object,get,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,if,value,null,logger,is,trace,enabled,logger,trace,retrieved,value,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> private static Object doUnbindResource(Object actualKey);1328020251;Actually remove the value of the resource that is bound for the given key.;private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> private static Object doUnbindResource(Object actualKey);1356735495;Actually remove the value of the resource that is bound for the given key.;private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> private static Object doUnbindResource(Object actualKey);1392160372;Actually remove the value of the resource that is bound for the given key.;private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> private static Object doUnbindResource(Object actualKey);1426267113;Actually remove the value of the resource that is bound for the given key.;private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> private static Object doUnbindResource(Object actualKey);1467730834;Actually remove the value of the resource that is bound for the given key.;private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> private static Object doUnbindResource(Object actualKey);1486719573;Actually remove the value of the resource that is bound for the given key.;private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1328020251;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the <code>beforeCommit</code> callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,code,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1356735495;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the {@code beforeCommit} callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1392160372;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the {@code beforeCommit} callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1426267113;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the {@code beforeCommit} callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1467730834;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the {@code beforeCommit} callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1486719573;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the {@code beforeCommit} callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1495868221;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the {@code beforeCommit} callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1497346685;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the {@code beforeCommit} callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> public static boolean isCurrentTransactionReadOnly();1506842603;Return whether the current transaction is marked as read-only._To be called by resource management code when preparing a newly_created resource (for example, a Hibernate Session)._<p>Note that transaction synchronizations receive the read-only flag_as argument for the {@code beforeCommit} callback, to be able_to suppress change detection on commit. The present method is meant_to be used for earlier read-only checks, for example to set the_flush mode of a Hibernate Session to "FlushMode.NEVER" upfront._@see org.springframework.transaction.TransactionDefinition#isReadOnly()_@see TransactionSynchronization#beforeCommit(boolean);public static boolean isCurrentTransactionReadOnly() {_		return (currentTransactionReadOnly.get() != null)__	};return,whether,the,current,transaction,is,marked,as,read,only,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,hibernate,session,p,note,that,transaction,synchronizations,receive,the,read,only,flag,as,argument,for,the,code,before,commit,callback,to,be,able,to,suppress,change,detection,on,commit,the,present,method,is,meant,to,be,used,for,earlier,read,only,checks,for,example,to,set,the,flush,mode,of,a,hibernate,session,to,flush,mode,never,upfront,see,org,springframework,transaction,transaction,definition,is,read,only,see,transaction,synchronization,before,commit,boolean;public,static,boolean,is,current,transaction,read,only,return,current,transaction,read,only,get,null
TransactionSynchronizationManager -> @Nullable 	public static Object unbindResourceIfPossible(Object key);1495868221;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or {@code null} if none bound;@Nullable_	public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,if,none,bound;nullable,public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> @Nullable 	public static Object unbindResourceIfPossible(Object key);1497346685;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or {@code null} if none bound;@Nullable_	public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,if,none,bound;nullable,public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> @Nullable 	public static Object unbindResourceIfPossible(Object key);1506842603;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or {@code null} if none bound;@Nullable_	public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,if,none,bound;nullable,public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1328020251;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<TransactionSynchronization>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set,transaction,synchronization
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1356735495;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<TransactionSynchronization>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set,transaction,synchronization
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1392160372;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<TransactionSynchronization>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set,transaction,synchronization
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1426267113;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<TransactionSynchronization>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set,transaction,synchronization
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1467730834;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1486719573;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1495868221;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1497346685;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set
TransactionSynchronizationManager -> public static void initSynchronization() throws IllegalStateException;1506842603;Activate transaction synchronization for the current thread._Called by a transaction manager on transaction begin._@throws IllegalStateException if synchronization is already active;public static void initSynchronization() throws IllegalStateException {_		if (isSynchronizationActive()) {_			throw new IllegalStateException("Cannot activate transaction synchronization - already active")__		}_		logger.trace("Initializing transaction synchronization")__		synchronizations.set(new LinkedHashSet<>())__	};activate,transaction,synchronization,for,the,current,thread,called,by,a,transaction,manager,on,transaction,begin,throws,illegal,state,exception,if,synchronization,is,already,active;public,static,void,init,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,activate,transaction,synchronization,already,active,logger,trace,initializing,transaction,synchronization,synchronizations,set,new,linked,hash,set
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(Integer isolationLevel);1328020251;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or <code>null</code> to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,code,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(Integer isolationLevel);1356735495;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(Integer isolationLevel);1392160372;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(Integer isolationLevel);1426267113;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(Integer isolationLevel);1467730834;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(Integer isolationLevel);1486719573;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1328020251;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1356735495;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1392160372;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1426267113;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1467730834;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1486719573;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1495868221;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1497346685;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void clearSynchronization() throws IllegalStateException;1506842603;Deactivate transaction synchronization for the current thread._Called by the transaction manager on transaction cleanup._@throws IllegalStateException if synchronization is not active;public static void clearSynchronization() throws IllegalStateException {_		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Cannot deactivate transaction synchronization - not active")__		}_		logger.trace("Clearing transaction synchronization")__		synchronizations.remove()__	};deactivate,transaction,synchronization,for,the,current,thread,called,by,the,transaction,manager,on,transaction,cleanup,throws,illegal,state,exception,if,synchronization,is,not,active;public,static,void,clear,synchronization,throws,illegal,state,exception,if,is,synchronization,active,throw,new,illegal,state,exception,cannot,deactivate,transaction,synchronization,not,active,logger,trace,clearing,transaction,synchronization,synchronizations,remove
TransactionSynchronizationManager -> public static void setCurrentTransactionName(String name);1328020251;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or <code>null</code> to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,code,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static void setCurrentTransactionName(String name);1356735495;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or {@code null} to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static void setCurrentTransactionName(String name);1392160372;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or {@code null} to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static void setCurrentTransactionName(String name);1426267113;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or {@code null} to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static void setCurrentTransactionName(String name);1467730834;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or {@code null} to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static void setCurrentTransactionName(String name);1486719573;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or {@code null} to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1328020251;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly <code>true</code> to mark the current transaction_as read-only_ <code>false</code> to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,code,to,mark,the,current,transaction,as,read,only,code,false,code,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1356735495;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly {@code true} to mark the current transaction_as read-only_ {@code false} to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,to,mark,the,current,transaction,as,read,only,code,false,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1392160372;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly {@code true} to mark the current transaction_as read-only_ {@code false} to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,to,mark,the,current,transaction,as,read,only,code,false,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1426267113;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly {@code true} to mark the current transaction_as read-only_ {@code false} to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,to,mark,the,current,transaction,as,read,only,code,false,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1467730834;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly {@code true} to mark the current transaction_as read-only_ {@code false} to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,to,mark,the,current,transaction,as,read,only,code,false,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1486719573;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly {@code true} to mark the current transaction_as read-only_ {@code false} to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,to,mark,the,current,transaction,as,read,only,code,false,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1495868221;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly {@code true} to mark the current transaction_as read-only_ {@code false} to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,to,mark,the,current,transaction,as,read,only,code,false,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1497346685;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly {@code true} to mark the current transaction_as read-only_ {@code false} to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,to,mark,the,current,transaction,as,read,only,code,false,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void setCurrentTransactionReadOnly(boolean readOnly);1506842603;Expose a read-only flag for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param readOnly {@code true} to mark the current transaction_as read-only_ {@code false} to reset such a read-only marker_@see org.springframework.transaction.TransactionDefinition#isReadOnly();public static void setCurrentTransactionReadOnly(boolean readOnly) {_		currentTransactionReadOnly.set(readOnly ? Boolean.TRUE : null)__	};expose,a,read,only,flag,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,read,only,code,true,to,mark,the,current,transaction,as,read,only,code,false,to,reset,such,a,read,only,marker,see,org,springframework,transaction,transaction,definition,is,read,only;public,static,void,set,current,transaction,read,only,boolean,read,only,current,transaction,read,only,set,read,only,boolean,true,null
TransactionSynchronizationManager -> public static void clear();1328020251;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		clearSynchronization()__		setCurrentTransactionName(null)__		setCurrentTransactionReadOnly(false)__		setCurrentTransactionIsolationLevel(null)__		setActualTransactionActive(false)__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,clear,synchronization,set,current,transaction,name,null,set,current,transaction,read,only,false,set,current,transaction,isolation,level,null,set,actual,transaction,active,false
TransactionSynchronizationManager -> public static void clear();1356735495;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		clearSynchronization()__		setCurrentTransactionName(null)__		setCurrentTransactionReadOnly(false)__		setCurrentTransactionIsolationLevel(null)__		setActualTransactionActive(false)__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,clear,synchronization,set,current,transaction,name,null,set,current,transaction,read,only,false,set,current,transaction,isolation,level,null,set,actual,transaction,active,false
TransactionSynchronizationManager -> public static void clear();1392160372;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		clearSynchronization()__		setCurrentTransactionName(null)__		setCurrentTransactionReadOnly(false)__		setCurrentTransactionIsolationLevel(null)__		setActualTransactionActive(false)__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,clear,synchronization,set,current,transaction,name,null,set,current,transaction,read,only,false,set,current,transaction,isolation,level,null,set,actual,transaction,active,false
TransactionSynchronizationManager -> public static void clear();1426267113;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		clearSynchronization()__		setCurrentTransactionName(null)__		setCurrentTransactionReadOnly(false)__		setCurrentTransactionIsolationLevel(null)__		setActualTransactionActive(false)__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,clear,synchronization,set,current,transaction,name,null,set,current,transaction,read,only,false,set,current,transaction,isolation,level,null,set,actual,transaction,active,false
TransactionSynchronizationManager -> public static void clear();1467730834;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		clearSynchronization()__		setCurrentTransactionName(null)__		setCurrentTransactionReadOnly(false)__		setCurrentTransactionIsolationLevel(null)__		setActualTransactionActive(false)__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,clear,synchronization,set,current,transaction,name,null,set,current,transaction,read,only,false,set,current,transaction,isolation,level,null,set,actual,transaction,active,false
TransactionSynchronizationManager -> public static void clear();1486719573;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		synchronizations.remove()__		currentTransactionName.remove()__		currentTransactionReadOnly.remove()___		currentTransactionIsolationLevel.remove()___		actualTransactionActive.remove()__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,synchronizations,remove,current,transaction,name,remove,current,transaction,read,only,remove,current,transaction,isolation,level,remove,actual,transaction,active,remove
TransactionSynchronizationManager -> public static void clear();1495868221;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		synchronizations.remove()__		currentTransactionName.remove()__		currentTransactionReadOnly.remove()___		currentTransactionIsolationLevel.remove()___		actualTransactionActive.remove()__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,synchronizations,remove,current,transaction,name,remove,current,transaction,read,only,remove,current,transaction,isolation,level,remove,actual,transaction,active,remove
TransactionSynchronizationManager -> public static void clear();1497346685;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		synchronizations.remove()__		currentTransactionName.remove()__		currentTransactionReadOnly.remove()__		currentTransactionIsolationLevel.remove()__		actualTransactionActive.remove()__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,synchronizations,remove,current,transaction,name,remove,current,transaction,read,only,remove,current,transaction,isolation,level,remove,actual,transaction,active,remove
TransactionSynchronizationManager -> public static void clear();1506842603;Clear the entire transaction synchronization state for the current thread:_registered synchronizations as well as the various transaction characteristics._@see #clearSynchronization()_@see #setCurrentTransactionName_@see #setCurrentTransactionReadOnly_@see #setCurrentTransactionIsolationLevel_@see #setActualTransactionActive;public static void clear() {_		synchronizations.remove()__		currentTransactionName.remove()__		currentTransactionReadOnly.remove()__		currentTransactionIsolationLevel.remove()__		actualTransactionActive.remove()__	};clear,the,entire,transaction,synchronization,state,for,the,current,thread,registered,synchronizations,as,well,as,the,various,transaction,characteristics,see,clear,synchronization,see,set,current,transaction,name,see,set,current,transaction,read,only,see,set,current,transaction,isolation,level,see,set,actual,transaction,active;public,static,void,clear,synchronizations,remove,current,transaction,name,remove,current,transaction,read,only,remove,current,transaction,isolation,level,remove,actual,transaction,active,remove
TransactionSynchronizationManager -> public static void setCurrentTransactionName(@Nullable String name);1495868221;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or {@code null} to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(@Nullable String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,nullable,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static void setCurrentTransactionName(@Nullable String name);1497346685;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or {@code null} to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(@Nullable String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,nullable,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static void setCurrentTransactionName(@Nullable String name);1506842603;Expose the name of the current transaction, if any._Called by the transaction manager on transaction begin and on cleanup._@param name the name of the transaction, or {@code null} to reset it_@see org.springframework.transaction.TransactionDefinition#getName();public static void setCurrentTransactionName(@Nullable String name) {_		currentTransactionName.set(name)__	};expose,the,name,of,the,current,transaction,if,any,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,name,the,name,of,the,transaction,or,code,null,to,reset,it,see,org,springframework,transaction,transaction,definition,get,name;public,static,void,set,current,transaction,name,nullable,string,name,current,transaction,name,set,name
TransactionSynchronizationManager -> public static Integer getCurrentTransactionIsolationLevel();1328020251;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or <code>null</code> if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,code,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> public static Integer getCurrentTransactionIsolationLevel();1356735495;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> public static Integer getCurrentTransactionIsolationLevel();1392160372;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> public static Integer getCurrentTransactionIsolationLevel();1426267113;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> public static Integer getCurrentTransactionIsolationLevel();1467730834;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> public static Integer getCurrentTransactionIsolationLevel();1486719573;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> @Nullable 	public static String getCurrentTransactionName();1495868221;Return the name of the current transaction, or {@code null} if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();@Nullable_	public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;nullable,public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> @Nullable 	public static String getCurrentTransactionName();1497346685;Return the name of the current transaction, or {@code null} if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();@Nullable_	public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;nullable,public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> @Nullable 	public static String getCurrentTransactionName();1506842603;Return the name of the current transaction, or {@code null} if none set._To be called by resource management code for optimizations per use case,_for example to optimize fetch strategies for specific named transactions._@see org.springframework.transaction.TransactionDefinition#getName();@Nullable_	public static String getCurrentTransactionName() {_		return currentTransactionName.get()__	};return,the,name,of,the,current,transaction,or,code,null,if,none,set,to,be,called,by,resource,management,code,for,optimizations,per,use,case,for,example,to,optimize,fetch,strategies,for,specific,named,transactions,see,org,springframework,transaction,transaction,definition,get,name;nullable,public,static,string,get,current,transaction,name,return,current,transaction,name,get
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1328020251;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<TransactionSynchronization>(synchs)__			OrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,transaction,synchronization,synchs,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1356735495;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<TransactionSynchronization>(synchs)__			OrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,transaction,synchronization,synchs,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1392160372;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<TransactionSynchronization>(synchs)__			OrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,transaction,synchronization,synchs,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1426267113;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<TransactionSynchronization>(synchs)__			AnnotationAwareOrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,transaction,synchronization,synchs,annotation,aware,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1467730834;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<>(synchs)__			AnnotationAwareOrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,synchs,annotation,aware,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1486719573;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<>(synchs)__			AnnotationAwareOrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,synchs,annotation,aware,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1495868221;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<>(synchs)__			AnnotationAwareOrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,synchs,annotation,aware,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1497346685;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<>(synchs)__			AnnotationAwareOrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,synchs,annotation,aware,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException;1506842603;Return an unmodifiable snapshot list of all registered synchronizations_for the current thread._@return unmodifiable List of TransactionSynchronization instances_@throws IllegalStateException if synchronization is not active_@see TransactionSynchronization;public static List<TransactionSynchronization> getSynchronizations() throws IllegalStateException {_		Set<TransactionSynchronization> synchs = synchronizations.get()__		if (synchs == null) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		_		_		_		if (synchs.isEmpty()) {_			return Collections.emptyList()__		}_		else {_			_			List<TransactionSynchronization> sortedSynchs = new ArrayList<>(synchs)__			AnnotationAwareOrderComparator.sort(sortedSynchs)__			return Collections.unmodifiableList(sortedSynchs)__		}_	};return,an,unmodifiable,snapshot,list,of,all,registered,synchronizations,for,the,current,thread,return,unmodifiable,list,of,transaction,synchronization,instances,throws,illegal,state,exception,if,synchronization,is,not,active,see,transaction,synchronization;public,static,list,transaction,synchronization,get,synchronizations,throws,illegal,state,exception,set,transaction,synchronization,synchs,synchronizations,get,if,synchs,null,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,if,synchs,is,empty,return,collections,empty,list,else,list,transaction,synchronization,sorted,synchs,new,array,list,synchs,annotation,aware,order,comparator,sort,sorted,synchs,return,collections,unmodifiable,list,sorted,synchs
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(@Nullable Integer isolationLevel);1495868221;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(@Nullable Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,nullable,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(@Nullable Integer isolationLevel);1497346685;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(@Nullable Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,nullable,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static void setCurrentTransactionIsolationLevel(@Nullable Integer isolationLevel);1506842603;Expose an isolation level for the current transaction._Called by the transaction manager on transaction begin and on cleanup._@param isolationLevel the isolation level to expose, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} to reset it_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();public static void setCurrentTransactionIsolationLevel(@Nullable Integer isolationLevel) {_		currentTransactionIsolationLevel.set(isolationLevel)__	};expose,an,isolation,level,for,the,current,transaction,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,isolation,level,the,isolation,level,to,expose,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,to,reset,it,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;public,static,void,set,current,transaction,isolation,level,nullable,integer,isolation,level,current,transaction,isolation,level,set,isolation,level
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1328020251;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1356735495;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1392160372;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1426267113;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1467730834;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1486719573;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1495868221;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1497346685;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static boolean isSynchronizationActive();1506842603;Return if transaction synchronization is active for the current thread._Can be called before register to avoid unnecessary instance creation._@see #registerSynchronization;public static boolean isSynchronizationActive() {_		return (synchronizations.get() != null)__	};return,if,transaction,synchronization,is,active,for,the,current,thread,can,be,called,before,register,to,avoid,unnecessary,instance,creation,see,register,synchronization;public,static,boolean,is,synchronization,active,return,synchronizations,get,null
TransactionSynchronizationManager -> public static Object unbindResourceIfPossible(Object key);1328020251;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or <code>null</code> if none bound;public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,code,if,none,bound;public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> public static Object unbindResourceIfPossible(Object key);1356735495;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or {@code null} if none bound;public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,if,none,bound;public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> public static Object unbindResourceIfPossible(Object key);1392160372;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or {@code null} if none bound;public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,if,none,bound;public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> public static Object unbindResourceIfPossible(Object key);1426267113;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or {@code null} if none bound;public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,if,none,bound;public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> public static Object unbindResourceIfPossible(Object key);1467730834;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or {@code null} if none bound;public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,if,none,bound;public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> public static Object unbindResourceIfPossible(Object key);1486719573;Unbind a resource for the given key from the current thread._@param key the key to unbind (usually the resource factory)_@return the previously bound value, or {@code null} if none bound;public static Object unbindResourceIfPossible(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		return doUnbindResource(actualKey)__	};unbind,a,resource,for,the,given,key,from,the,current,thread,param,key,the,key,to,unbind,usually,the,resource,factory,return,the,previously,bound,value,or,code,null,if,none,bound;public,static,object,unbind,resource,if,possible,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,return,do,unbind,resource,actual,key
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1328020251;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_<code>hasResource</code> for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,code,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1356735495;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_{@code hasResource} for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1392160372;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_{@code hasResource} for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1426267113;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_{@code hasResource} for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1467730834;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_{@code hasResource} for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1486719573;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_{@code hasResource} for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1495868221;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_{@code hasResource} for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1497346685;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_{@code hasResource} for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> public static Map<Object, Object> getResourceMap();1506842603;Return all resources that are bound to the current thread._<p>Mainly for debugging purposes. Resource managers should always invoke_{@code hasResource} for a specific resource key that they are interested in._@return a Map with resource keys (usually the resource factory) and resource_values (usually the active resource object), or an empty Map if there are_currently no resources bound_@see #hasResource;public static Map<Object, Object> getResourceMap() {_		Map<Object, Object> map = resources.get()__		return (map != null ? Collections.unmodifiableMap(map) : Collections.emptyMap())__	};return,all,resources,that,are,bound,to,the,current,thread,p,mainly,for,debugging,purposes,resource,managers,should,always,invoke,code,has,resource,for,a,specific,resource,key,that,they,are,interested,in,return,a,map,with,resource,keys,usually,the,resource,factory,and,resource,values,usually,the,active,resource,object,or,an,empty,map,if,there,are,currently,no,resources,bound,see,has,resource;public,static,map,object,object,get,resource,map,map,object,object,map,resources,get,return,map,null,collections,unmodifiable,map,map,collections,empty,map
TransactionSynchronizationManager -> @Nullable 	public static Integer getCurrentTransactionIsolationLevel();1495868221;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();@Nullable_	public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;nullable,public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> @Nullable 	public static Integer getCurrentTransactionIsolationLevel();1497346685;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();@Nullable_	public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;nullable,public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> @Nullable 	public static Integer getCurrentTransactionIsolationLevel();1506842603;Return the isolation level for the current transaction, if any._To be called by resource management code when preparing a newly_created resource (for example, a JDBC Connection)._@return the currently exposed isolation level, according to the_JDBC Connection constants (equivalent to the corresponding Spring_TransactionDefinition constants), or {@code null} if none_@see java.sql.Connection#TRANSACTION_READ_UNCOMMITTED_@see java.sql.Connection#TRANSACTION_READ_COMMITTED_@see java.sql.Connection#TRANSACTION_REPEATABLE_READ_@see java.sql.Connection#TRANSACTION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_UNCOMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_READ_COMMITTED_@see org.springframework.transaction.TransactionDefinition#ISOLATION_REPEATABLE_READ_@see org.springframework.transaction.TransactionDefinition#ISOLATION_SERIALIZABLE_@see org.springframework.transaction.TransactionDefinition#getIsolationLevel();@Nullable_	public static Integer getCurrentTransactionIsolationLevel() {_		return currentTransactionIsolationLevel.get()__	};return,the,isolation,level,for,the,current,transaction,if,any,to,be,called,by,resource,management,code,when,preparing,a,newly,created,resource,for,example,a,jdbc,connection,return,the,currently,exposed,isolation,level,according,to,the,jdbc,connection,constants,equivalent,to,the,corresponding,spring,transaction,definition,constants,or,code,null,if,none,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,java,sql,connection,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,see,org,springframework,transaction,transaction,definition,get,isolation,level;nullable,public,static,integer,get,current,transaction,isolation,level,return,current,transaction,isolation,level,get
TransactionSynchronizationManager -> private static Object doGetResource(Object actualKey);1328020251;Actually check the value of the resource that is bound for the given key.;private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> private static Object doGetResource(Object actualKey);1356735495;Actually check the value of the resource that is bound for the given key.;private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> private static Object doGetResource(Object actualKey);1392160372;Actually check the value of the resource that is bound for the given key.;private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> private static Object doGetResource(Object actualKey);1426267113;Actually check the value of the resource that is bound for the given key.;private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> private static Object doGetResource(Object actualKey);1467730834;Actually check the value of the resource that is bound for the given key.;private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> private static Object doGetResource(Object actualKey);1486719573;Actually check the value of the resource that is bound for the given key.;private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1328020251;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<Object, Object>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,object,object,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1356735495;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<Object, Object>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,object,object,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1392160372;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<Object, Object>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,object,object,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1426267113;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<Object, Object>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,object,object,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1467730834;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1486719573;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1495868221;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1497346685;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void bindResource(Object key, Object value) throws IllegalStateException;1506842603;Bind the given resource for the given key to the current thread._@param key the key to bind the value to (usually the resource factory)_@param value the value to bind (usually the active resource object)_@throws IllegalStateException if there is already a value bound to the thread_@see ResourceTransactionManager#getResourceFactory();public static void bindResource(Object key, Object value) throws IllegalStateException {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Assert.notNull(value, "Value must not be null")__		Map<Object, Object> map = resources.get()__		_		if (map == null) {_			map = new HashMap<>()__			resources.set(map)__		}_		Object oldValue = map.put(actualKey, value)__		_		if (oldValue instanceof ResourceHolder && ((ResourceHolder) oldValue).isVoid()) {_			oldValue = null__		}_		if (oldValue != null) {_			throw new IllegalStateException("Already value [" + oldValue + "] for key [" +_					actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]")__		}_		if (logger.isTraceEnabled()) {_			logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" +_					Thread.currentThread().getName() + "]")__		}_	};bind,the,given,resource,for,the,given,key,to,the,current,thread,param,key,the,key,to,bind,the,value,to,usually,the,resource,factory,param,value,the,value,to,bind,usually,the,active,resource,object,throws,illegal,state,exception,if,there,is,already,a,value,bound,to,the,thread,see,resource,transaction,manager,get,resource,factory;public,static,void,bind,resource,object,key,object,value,throws,illegal,state,exception,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,assert,not,null,value,value,must,not,be,null,map,object,object,map,resources,get,if,map,null,map,new,hash,map,resources,set,map,object,old,value,map,put,actual,key,value,if,old,value,instanceof,resource,holder,resource,holder,old,value,is,void,old,value,null,if,old,value,null,throw,new,illegal,state,exception,already,value,old,value,for,key,actual,key,bound,to,thread,thread,current,thread,get,name,if,logger,is,trace,enabled,logger,trace,bound,value,value,for,key,actual,key,to,thread,thread,current,thread,get,name
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1328020251;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active <code>true</code> to mark the current thread as being associated_with an actual transaction_ <code>false</code> to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,code,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,code,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1356735495;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active {@code true} to mark the current thread as being associated_with an actual transaction_ {@code false} to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1392160372;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active {@code true} to mark the current thread as being associated_with an actual transaction_ {@code false} to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1426267113;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active {@code true} to mark the current thread as being associated_with an actual transaction_ {@code false} to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1467730834;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active {@code true} to mark the current thread as being associated_with an actual transaction_ {@code false} to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1486719573;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active {@code true} to mark the current thread as being associated_with an actual transaction_ {@code false} to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1495868221;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active {@code true} to mark the current thread as being associated_with an actual transaction_ {@code false} to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1497346685;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active {@code true} to mark the current thread as being associated_with an actual transaction_ {@code false} to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void setActualTransactionActive(boolean active);1506842603;Expose whether there currently is an actual transaction active._Called by the transaction manager on transaction begin and on cleanup._@param active {@code true} to mark the current thread as being associated_with an actual transaction_ {@code false} to reset that marker;public static void setActualTransactionActive(boolean active) {_		actualTransactionActive.set(active ? Boolean.TRUE : null)__	};expose,whether,there,currently,is,an,actual,transaction,active,called,by,the,transaction,manager,on,transaction,begin,and,on,cleanup,param,active,code,true,to,mark,the,current,thread,as,being,associated,with,an,actual,transaction,code,false,to,reset,that,marker;public,static,void,set,actual,transaction,active,boolean,active,actual,transaction,active,set,active,boolean,true,null
TransactionSynchronizationManager -> public static void registerSynchronization(TransactionSynchronization synchronization) 			throws IllegalStateException;1392160372;Register a new transaction synchronization for the current thread._Typically called by resource management code._<p>Note that synchronizations can implement the_{@link org.springframework.core.Ordered} interface._They will be executed in an order according to their order value (if any)._@param synchronization the synchronization object to register_@throws IllegalStateException if transaction synchronization is not active_@see org.springframework.core.Ordered;public static void registerSynchronization(TransactionSynchronization synchronization)_			throws IllegalStateException {__		Assert.notNull(synchronization, "TransactionSynchronization must not be null")__		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		synchronizations.get().add(synchronization)__	};register,a,new,transaction,synchronization,for,the,current,thread,typically,called,by,resource,management,code,p,note,that,synchronizations,can,implement,the,link,org,springframework,core,ordered,interface,they,will,be,executed,in,an,order,according,to,their,order,value,if,any,param,synchronization,the,synchronization,object,to,register,throws,illegal,state,exception,if,transaction,synchronization,is,not,active,see,org,springframework,core,ordered;public,static,void,register,synchronization,transaction,synchronization,synchronization,throws,illegal,state,exception,assert,not,null,synchronization,transaction,synchronization,must,not,be,null,if,is,synchronization,active,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,synchronizations,get,add,synchronization
TransactionSynchronizationManager -> public static void registerSynchronization(TransactionSynchronization synchronization) 			throws IllegalStateException;1426267113;Register a new transaction synchronization for the current thread._Typically called by resource management code._<p>Note that synchronizations can implement the_{@link org.springframework.core.Ordered} interface._They will be executed in an order according to their order value (if any)._@param synchronization the synchronization object to register_@throws IllegalStateException if transaction synchronization is not active_@see org.springframework.core.Ordered;public static void registerSynchronization(TransactionSynchronization synchronization)_			throws IllegalStateException {__		Assert.notNull(synchronization, "TransactionSynchronization must not be null")__		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		synchronizations.get().add(synchronization)__	};register,a,new,transaction,synchronization,for,the,current,thread,typically,called,by,resource,management,code,p,note,that,synchronizations,can,implement,the,link,org,springframework,core,ordered,interface,they,will,be,executed,in,an,order,according,to,their,order,value,if,any,param,synchronization,the,synchronization,object,to,register,throws,illegal,state,exception,if,transaction,synchronization,is,not,active,see,org,springframework,core,ordered;public,static,void,register,synchronization,transaction,synchronization,synchronization,throws,illegal,state,exception,assert,not,null,synchronization,transaction,synchronization,must,not,be,null,if,is,synchronization,active,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,synchronizations,get,add,synchronization
TransactionSynchronizationManager -> public static void registerSynchronization(TransactionSynchronization synchronization) 			throws IllegalStateException;1467730834;Register a new transaction synchronization for the current thread._Typically called by resource management code._<p>Note that synchronizations can implement the_{@link org.springframework.core.Ordered} interface._They will be executed in an order according to their order value (if any)._@param synchronization the synchronization object to register_@throws IllegalStateException if transaction synchronization is not active_@see org.springframework.core.Ordered;public static void registerSynchronization(TransactionSynchronization synchronization)_			throws IllegalStateException {__		Assert.notNull(synchronization, "TransactionSynchronization must not be null")__		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		synchronizations.get().add(synchronization)__	};register,a,new,transaction,synchronization,for,the,current,thread,typically,called,by,resource,management,code,p,note,that,synchronizations,can,implement,the,link,org,springframework,core,ordered,interface,they,will,be,executed,in,an,order,according,to,their,order,value,if,any,param,synchronization,the,synchronization,object,to,register,throws,illegal,state,exception,if,transaction,synchronization,is,not,active,see,org,springframework,core,ordered;public,static,void,register,synchronization,transaction,synchronization,synchronization,throws,illegal,state,exception,assert,not,null,synchronization,transaction,synchronization,must,not,be,null,if,is,synchronization,active,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,synchronizations,get,add,synchronization
TransactionSynchronizationManager -> public static void registerSynchronization(TransactionSynchronization synchronization) 			throws IllegalStateException;1486719573;Register a new transaction synchronization for the current thread._Typically called by resource management code._<p>Note that synchronizations can implement the_{@link org.springframework.core.Ordered} interface._They will be executed in an order according to their order value (if any)._@param synchronization the synchronization object to register_@throws IllegalStateException if transaction synchronization is not active_@see org.springframework.core.Ordered;public static void registerSynchronization(TransactionSynchronization synchronization)_			throws IllegalStateException {__		Assert.notNull(synchronization, "TransactionSynchronization must not be null")__		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		synchronizations.get().add(synchronization)__	};register,a,new,transaction,synchronization,for,the,current,thread,typically,called,by,resource,management,code,p,note,that,synchronizations,can,implement,the,link,org,springframework,core,ordered,interface,they,will,be,executed,in,an,order,according,to,their,order,value,if,any,param,synchronization,the,synchronization,object,to,register,throws,illegal,state,exception,if,transaction,synchronization,is,not,active,see,org,springframework,core,ordered;public,static,void,register,synchronization,transaction,synchronization,synchronization,throws,illegal,state,exception,assert,not,null,synchronization,transaction,synchronization,must,not,be,null,if,is,synchronization,active,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,synchronizations,get,add,synchronization
TransactionSynchronizationManager -> public static void registerSynchronization(TransactionSynchronization synchronization) 			throws IllegalStateException;1495868221;Register a new transaction synchronization for the current thread._Typically called by resource management code._<p>Note that synchronizations can implement the_{@link org.springframework.core.Ordered} interface._They will be executed in an order according to their order value (if any)._@param synchronization the synchronization object to register_@throws IllegalStateException if transaction synchronization is not active_@see org.springframework.core.Ordered;public static void registerSynchronization(TransactionSynchronization synchronization)_			throws IllegalStateException {__		Assert.notNull(synchronization, "TransactionSynchronization must not be null")__		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		synchronizations.get().add(synchronization)__	};register,a,new,transaction,synchronization,for,the,current,thread,typically,called,by,resource,management,code,p,note,that,synchronizations,can,implement,the,link,org,springframework,core,ordered,interface,they,will,be,executed,in,an,order,according,to,their,order,value,if,any,param,synchronization,the,synchronization,object,to,register,throws,illegal,state,exception,if,transaction,synchronization,is,not,active,see,org,springframework,core,ordered;public,static,void,register,synchronization,transaction,synchronization,synchronization,throws,illegal,state,exception,assert,not,null,synchronization,transaction,synchronization,must,not,be,null,if,is,synchronization,active,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,synchronizations,get,add,synchronization
TransactionSynchronizationManager -> public static void registerSynchronization(TransactionSynchronization synchronization) 			throws IllegalStateException;1497346685;Register a new transaction synchronization for the current thread._Typically called by resource management code._<p>Note that synchronizations can implement the_{@link org.springframework.core.Ordered} interface._They will be executed in an order according to their order value (if any)._@param synchronization the synchronization object to register_@throws IllegalStateException if transaction synchronization is not active_@see org.springframework.core.Ordered;public static void registerSynchronization(TransactionSynchronization synchronization)_			throws IllegalStateException {__		Assert.notNull(synchronization, "TransactionSynchronization must not be null")__		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		synchronizations.get().add(synchronization)__	};register,a,new,transaction,synchronization,for,the,current,thread,typically,called,by,resource,management,code,p,note,that,synchronizations,can,implement,the,link,org,springframework,core,ordered,interface,they,will,be,executed,in,an,order,according,to,their,order,value,if,any,param,synchronization,the,synchronization,object,to,register,throws,illegal,state,exception,if,transaction,synchronization,is,not,active,see,org,springframework,core,ordered;public,static,void,register,synchronization,transaction,synchronization,synchronization,throws,illegal,state,exception,assert,not,null,synchronization,transaction,synchronization,must,not,be,null,if,is,synchronization,active,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,synchronizations,get,add,synchronization
TransactionSynchronizationManager -> public static void registerSynchronization(TransactionSynchronization synchronization) 			throws IllegalStateException;1506842603;Register a new transaction synchronization for the current thread._Typically called by resource management code._<p>Note that synchronizations can implement the_{@link org.springframework.core.Ordered} interface._They will be executed in an order according to their order value (if any)._@param synchronization the synchronization object to register_@throws IllegalStateException if transaction synchronization is not active_@see org.springframework.core.Ordered;public static void registerSynchronization(TransactionSynchronization synchronization)_			throws IllegalStateException {__		Assert.notNull(synchronization, "TransactionSynchronization must not be null")__		if (!isSynchronizationActive()) {_			throw new IllegalStateException("Transaction synchronization is not active")__		}_		synchronizations.get().add(synchronization)__	};register,a,new,transaction,synchronization,for,the,current,thread,typically,called,by,resource,management,code,p,note,that,synchronizations,can,implement,the,link,org,springframework,core,ordered,interface,they,will,be,executed,in,an,order,according,to,their,order,value,if,any,param,synchronization,the,synchronization,object,to,register,throws,illegal,state,exception,if,transaction,synchronization,is,not,active,see,org,springframework,core,ordered;public,static,void,register,synchronization,transaction,synchronization,synchronization,throws,illegal,state,exception,assert,not,null,synchronization,transaction,synchronization,must,not,be,null,if,is,synchronization,active,throw,new,illegal,state,exception,transaction,synchronization,is,not,active,synchronizations,get,add,synchronization
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1328020251;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1356735495;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1392160372;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1426267113;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1467730834;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1486719573;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1495868221;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1497346685;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRES, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> public static boolean isActualTransactionActive();1506842603;Return whether there currently is an actual transaction active._This indicates whether the current thread is associated with an actual_transaction rather than just with active transaction synchronization._<p>To be called by resource management code that wants to discriminate_between active transaction synchronization (with or without backing_resource transaction_ also on PROPAGATION_SUPPORTS) and an actual_transaction being active (with backing resource transaction__on PROPAGATION_REQUIRED, PROPAGATION_REQUIRES_NEW, etc)._@see #isSynchronizationActive();public static boolean isActualTransactionActive() {_		return (actualTransactionActive.get() != null)__	};return,whether,there,currently,is,an,actual,transaction,active,this,indicates,whether,the,current,thread,is,associated,with,an,actual,transaction,rather,than,just,with,active,transaction,synchronization,p,to,be,called,by,resource,management,code,that,wants,to,discriminate,between,active,transaction,synchronization,with,or,without,backing,resource,transaction,also,on,and,an,actual,transaction,being,active,with,backing,resource,transaction,on,etc,see,is,synchronization,active;public,static,boolean,is,actual,transaction,active,return,actual,transaction,active,get,null
TransactionSynchronizationManager -> @Nullable 	private static Object doGetResource(Object actualKey);1495868221;Actually check the value of the resource that is bound for the given key.;@Nullable_	private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;nullable,private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> @Nullable 	private static Object doGetResource(Object actualKey);1497346685;Actually check the value of the resource that is bound for the given key.;@Nullable_	private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;nullable,private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> @Nullable 	private static Object doGetResource(Object actualKey);1506842603;Actually check the value of the resource that is bound for the given key.;@Nullable_	private static Object doGetResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.get(actualKey)__		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			map.remove(actualKey)__			_			if (map.isEmpty()) {_				resources.remove()__			}_			value = null__		}_		return value__	};actually,check,the,value,of,the,resource,that,is,bound,for,the,given,key;nullable,private,static,object,do,get,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,get,actual,key,if,value,instanceof,resource,holder,resource,holder,value,is,void,map,remove,actual,key,if,map,is,empty,resources,remove,value,null,return,value
TransactionSynchronizationManager -> @Nullable 	private static Object doUnbindResource(Object actualKey);1495868221;Actually remove the value of the resource that is bound for the given key.;@Nullable_	private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;nullable,private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> @Nullable 	private static Object doUnbindResource(Object actualKey);1497346685;Actually remove the value of the resource that is bound for the given key.;@Nullable_	private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;nullable,private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> @Nullable 	private static Object doUnbindResource(Object actualKey);1506842603;Actually remove the value of the resource that is bound for the given key.;@Nullable_	private static Object doUnbindResource(Object actualKey) {_		Map<Object, Object> map = resources.get()__		if (map == null) {_			return null__		}_		Object value = map.remove(actualKey)__		_		if (map.isEmpty()) {_			resources.remove()__		}_		_		if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {_			value = null__		}_		if (value != null && logger.isTraceEnabled()) {_			logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" +_					Thread.currentThread().getName() + "]")__		}_		return value__	};actually,remove,the,value,of,the,resource,that,is,bound,for,the,given,key;nullable,private,static,object,do,unbind,resource,object,actual,key,map,object,object,map,resources,get,if,map,null,return,null,object,value,map,remove,actual,key,if,map,is,empty,resources,remove,if,value,instanceof,resource,holder,resource,holder,value,is,void,value,null,if,value,null,logger,is,trace,enabled,logger,trace,removed,value,value,for,key,actual,key,from,thread,thread,current,thread,get,name,return,value
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1328020251;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1356735495;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1392160372;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1426267113;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1467730834;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1486719573;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1495868221;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1497346685;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
TransactionSynchronizationManager -> public static boolean hasResource(Object key);1506842603;Check if there is a resource for the given key bound to the current thread._@param key the key to check (usually the resource factory)_@return if there is a value bound to the current thread_@see ResourceTransactionManager#getResourceFactory();public static boolean hasResource(Object key) {_		Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key)__		Object value = doGetResource(actualKey)__		return (value != null)__	};check,if,there,is,a,resource,for,the,given,key,bound,to,the,current,thread,param,key,the,key,to,check,usually,the,resource,factory,return,if,there,is,a,value,bound,to,the,current,thread,see,resource,transaction,manager,get,resource,factory;public,static,boolean,has,resource,object,key,object,actual,key,transaction,synchronization,utils,unwrap,resource,if,necessary,key,object,value,do,get,resource,actual,key,return,value,null
