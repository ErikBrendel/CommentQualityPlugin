# id;timestamp;commentText;codeText;commentWords;codeWords
PlatformTransactionManager -> TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException_;1495868221;Return a currently active transaction or create a new one, according to_the specified propagation behavior._<p>Note that parameters like isolation level or timeout will only be applied_to new transactions, and thus be ignored when participating in active ones._<p>Furthermore, not all transaction definition settings will be supported_by every transaction manager: A proper transaction manager implementation_should throw an exception when unsupported settings are encountered._<p>An exception to the above rule is the read-only flag, which should be_ignored if no explicit read-only mode is supported. Essentially, the_read-only flag is just a hint for potential optimization._@param definition TransactionDefinition instance (can be {@code null} for defaults),_describing propagation behavior, isolation level, timeout etc._@return transaction status object representing the new or current transaction_@throws TransactionException in case of lookup, creation, or system errors_@throws IllegalTransactionStateException if the given transaction definition_cannot be executed (for example, if a currently active transaction is in_conflict with the specified propagation behavior)_@see TransactionDefinition#getPropagationBehavior_@see TransactionDefinition#getIsolationLevel_@see TransactionDefinition#getTimeout_@see TransactionDefinition#isReadOnly;TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException_;return,a,currently,active,transaction,or,create,a,new,one,according,to,the,specified,propagation,behavior,p,note,that,parameters,like,isolation,level,or,timeout,will,only,be,applied,to,new,transactions,and,thus,be,ignored,when,participating,in,active,ones,p,furthermore,not,all,transaction,definition,settings,will,be,supported,by,every,transaction,manager,a,proper,transaction,manager,implementation,should,throw,an,exception,when,unsupported,settings,are,encountered,p,an,exception,to,the,above,rule,is,the,read,only,flag,which,should,be,ignored,if,no,explicit,read,only,mode,is,supported,essentially,the,read,only,flag,is,just,a,hint,for,potential,optimization,param,definition,transaction,definition,instance,can,be,code,null,for,defaults,describing,propagation,behavior,isolation,level,timeout,etc,return,transaction,status,object,representing,the,new,or,current,transaction,throws,transaction,exception,in,case,of,lookup,creation,or,system,errors,throws,illegal,transaction,state,exception,if,the,given,transaction,definition,cannot,be,executed,for,example,if,a,currently,active,transaction,is,in,conflict,with,the,specified,propagation,behavior,see,transaction,definition,get,propagation,behavior,see,transaction,definition,get,isolation,level,see,transaction,definition,get,timeout,see,transaction,definition,is,read,only;transaction,status,get,transaction,nullable,transaction,definition,definition,throws,transaction,exception
PlatformTransactionManager -> TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException_;1530174524;Return a currently active transaction or create a new one, according to_the specified propagation behavior._<p>Note that parameters like isolation level or timeout will only be applied_to new transactions, and thus be ignored when participating in active ones._<p>Furthermore, not all transaction definition settings will be supported_by every transaction manager: A proper transaction manager implementation_should throw an exception when unsupported settings are encountered._<p>An exception to the above rule is the read-only flag, which should be_ignored if no explicit read-only mode is supported. Essentially, the_read-only flag is just a hint for potential optimization._@param definition the TransactionDefinition instance (can be {@code null} for defaults),_describing propagation behavior, isolation level, timeout etc._@return transaction status object representing the new or current transaction_@throws TransactionException in case of lookup, creation, or system errors_@throws IllegalTransactionStateException if the given transaction definition_cannot be executed (for example, if a currently active transaction is in_conflict with the specified propagation behavior)_@see TransactionDefinition#getPropagationBehavior_@see TransactionDefinition#getIsolationLevel_@see TransactionDefinition#getTimeout_@see TransactionDefinition#isReadOnly;TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException_;return,a,currently,active,transaction,or,create,a,new,one,according,to,the,specified,propagation,behavior,p,note,that,parameters,like,isolation,level,or,timeout,will,only,be,applied,to,new,transactions,and,thus,be,ignored,when,participating,in,active,ones,p,furthermore,not,all,transaction,definition,settings,will,be,supported,by,every,transaction,manager,a,proper,transaction,manager,implementation,should,throw,an,exception,when,unsupported,settings,are,encountered,p,an,exception,to,the,above,rule,is,the,read,only,flag,which,should,be,ignored,if,no,explicit,read,only,mode,is,supported,essentially,the,read,only,flag,is,just,a,hint,for,potential,optimization,param,definition,the,transaction,definition,instance,can,be,code,null,for,defaults,describing,propagation,behavior,isolation,level,timeout,etc,return,transaction,status,object,representing,the,new,or,current,transaction,throws,transaction,exception,in,case,of,lookup,creation,or,system,errors,throws,illegal,transaction,state,exception,if,the,given,transaction,definition,cannot,be,executed,for,example,if,a,currently,active,transaction,is,in,conflict,with,the,specified,propagation,behavior,see,transaction,definition,get,propagation,behavior,see,transaction,definition,get,isolation,level,see,transaction,definition,get,timeout,see,transaction,definition,is,read,only;transaction,status,get,transaction,nullable,transaction,definition,definition,throws,transaction,exception
PlatformTransactionManager -> void commit(TransactionStatus status) throws TransactionException_;1328020251;Commit the given transaction, with regard to its status. If the transaction_has been marked rollback-only programmatically, perform a rollback._<p>If the transaction wasn't a new one, omit the commit for proper_participation in the surrounding transaction. If a previous transaction_has been suspended to be able to create a new one, resume the previous_transaction after committing the new one._<p>Note that when the commit call completes, no matter if normally or_throwing an exception, the transaction must be fully completed and_cleaned up. No rollback call should be expected in such a case._<p>If this method throws an exception other than a TransactionException,_then some before-commit error caused the commit attempt to fail. For_example, an O/R Mapping tool might have tried to flush changes to the_database right before commit, with the resulting DataAccessException_causing the transaction to fail. The original exception will be_propagated to the caller of this commit method in such a case._@param status object returned by the <code>getTransaction</code> method_@throws UnexpectedRollbackException in case of an unexpected rollback_that the transaction coordinator initiated_@throws HeuristicCompletionException in case of a transaction failure_caused by a heuristic decision on the side of the transaction coordinator_@throws TransactionSystemException in case of commit or system errors_(typically caused by fundamental resource failures)_@throws IllegalTransactionStateException if the given transaction_is already completed (that is, committed or rolled back)_@see TransactionStatus#setRollbackOnly;void commit(TransactionStatus status) throws TransactionException_;commit,the,given,transaction,with,regard,to,its,status,if,the,transaction,has,been,marked,rollback,only,programmatically,perform,a,rollback,p,if,the,transaction,wasn,t,a,new,one,omit,the,commit,for,proper,participation,in,the,surrounding,transaction,if,a,previous,transaction,has,been,suspended,to,be,able,to,create,a,new,one,resume,the,previous,transaction,after,committing,the,new,one,p,note,that,when,the,commit,call,completes,no,matter,if,normally,or,throwing,an,exception,the,transaction,must,be,fully,completed,and,cleaned,up,no,rollback,call,should,be,expected,in,such,a,case,p,if,this,method,throws,an,exception,other,than,a,transaction,exception,then,some,before,commit,error,caused,the,commit,attempt,to,fail,for,example,an,o,r,mapping,tool,might,have,tried,to,flush,changes,to,the,database,right,before,commit,with,the,resulting,data,access,exception,causing,the,transaction,to,fail,the,original,exception,will,be,propagated,to,the,caller,of,this,commit,method,in,such,a,case,param,status,object,returned,by,the,code,get,transaction,code,method,throws,unexpected,rollback,exception,in,case,of,an,unexpected,rollback,that,the,transaction,coordinator,initiated,throws,heuristic,completion,exception,in,case,of,a,transaction,failure,caused,by,a,heuristic,decision,on,the,side,of,the,transaction,coordinator,throws,transaction,system,exception,in,case,of,commit,or,system,errors,typically,caused,by,fundamental,resource,failures,throws,illegal,transaction,state,exception,if,the,given,transaction,is,already,completed,that,is,committed,or,rolled,back,see,transaction,status,set,rollback,only;void,commit,transaction,status,status,throws,transaction,exception
PlatformTransactionManager -> void commit(TransactionStatus status) throws TransactionException_;1356735495;Commit the given transaction, with regard to its status. If the transaction_has been marked rollback-only programmatically, perform a rollback._<p>If the transaction wasn't a new one, omit the commit for proper_participation in the surrounding transaction. If a previous transaction_has been suspended to be able to create a new one, resume the previous_transaction after committing the new one._<p>Note that when the commit call completes, no matter if normally or_throwing an exception, the transaction must be fully completed and_cleaned up. No rollback call should be expected in such a case._<p>If this method throws an exception other than a TransactionException,_then some before-commit error caused the commit attempt to fail. For_example, an O/R Mapping tool might have tried to flush changes to the_database right before commit, with the resulting DataAccessException_causing the transaction to fail. The original exception will be_propagated to the caller of this commit method in such a case._@param status object returned by the {@code getTransaction} method_@throws UnexpectedRollbackException in case of an unexpected rollback_that the transaction coordinator initiated_@throws HeuristicCompletionException in case of a transaction failure_caused by a heuristic decision on the side of the transaction coordinator_@throws TransactionSystemException in case of commit or system errors_(typically caused by fundamental resource failures)_@throws IllegalTransactionStateException if the given transaction_is already completed (that is, committed or rolled back)_@see TransactionStatus#setRollbackOnly;void commit(TransactionStatus status) throws TransactionException_;commit,the,given,transaction,with,regard,to,its,status,if,the,transaction,has,been,marked,rollback,only,programmatically,perform,a,rollback,p,if,the,transaction,wasn,t,a,new,one,omit,the,commit,for,proper,participation,in,the,surrounding,transaction,if,a,previous,transaction,has,been,suspended,to,be,able,to,create,a,new,one,resume,the,previous,transaction,after,committing,the,new,one,p,note,that,when,the,commit,call,completes,no,matter,if,normally,or,throwing,an,exception,the,transaction,must,be,fully,completed,and,cleaned,up,no,rollback,call,should,be,expected,in,such,a,case,p,if,this,method,throws,an,exception,other,than,a,transaction,exception,then,some,before,commit,error,caused,the,commit,attempt,to,fail,for,example,an,o,r,mapping,tool,might,have,tried,to,flush,changes,to,the,database,right,before,commit,with,the,resulting,data,access,exception,causing,the,transaction,to,fail,the,original,exception,will,be,propagated,to,the,caller,of,this,commit,method,in,such,a,case,param,status,object,returned,by,the,code,get,transaction,method,throws,unexpected,rollback,exception,in,case,of,an,unexpected,rollback,that,the,transaction,coordinator,initiated,throws,heuristic,completion,exception,in,case,of,a,transaction,failure,caused,by,a,heuristic,decision,on,the,side,of,the,transaction,coordinator,throws,transaction,system,exception,in,case,of,commit,or,system,errors,typically,caused,by,fundamental,resource,failures,throws,illegal,transaction,state,exception,if,the,given,transaction,is,already,completed,that,is,committed,or,rolled,back,see,transaction,status,set,rollback,only;void,commit,transaction,status,status,throws,transaction,exception
PlatformTransactionManager -> void commit(TransactionStatus status) throws TransactionException_;1495868221;Commit the given transaction, with regard to its status. If the transaction_has been marked rollback-only programmatically, perform a rollback._<p>If the transaction wasn't a new one, omit the commit for proper_participation in the surrounding transaction. If a previous transaction_has been suspended to be able to create a new one, resume the previous_transaction after committing the new one._<p>Note that when the commit call completes, no matter if normally or_throwing an exception, the transaction must be fully completed and_cleaned up. No rollback call should be expected in such a case._<p>If this method throws an exception other than a TransactionException,_then some before-commit error caused the commit attempt to fail. For_example, an O/R Mapping tool might have tried to flush changes to the_database right before commit, with the resulting DataAccessException_causing the transaction to fail. The original exception will be_propagated to the caller of this commit method in such a case._@param status object returned by the {@code getTransaction} method_@throws UnexpectedRollbackException in case of an unexpected rollback_that the transaction coordinator initiated_@throws HeuristicCompletionException in case of a transaction failure_caused by a heuristic decision on the side of the transaction coordinator_@throws TransactionSystemException in case of commit or system errors_(typically caused by fundamental resource failures)_@throws IllegalTransactionStateException if the given transaction_is already completed (that is, committed or rolled back)_@see TransactionStatus#setRollbackOnly;void commit(TransactionStatus status) throws TransactionException_;commit,the,given,transaction,with,regard,to,its,status,if,the,transaction,has,been,marked,rollback,only,programmatically,perform,a,rollback,p,if,the,transaction,wasn,t,a,new,one,omit,the,commit,for,proper,participation,in,the,surrounding,transaction,if,a,previous,transaction,has,been,suspended,to,be,able,to,create,a,new,one,resume,the,previous,transaction,after,committing,the,new,one,p,note,that,when,the,commit,call,completes,no,matter,if,normally,or,throwing,an,exception,the,transaction,must,be,fully,completed,and,cleaned,up,no,rollback,call,should,be,expected,in,such,a,case,p,if,this,method,throws,an,exception,other,than,a,transaction,exception,then,some,before,commit,error,caused,the,commit,attempt,to,fail,for,example,an,o,r,mapping,tool,might,have,tried,to,flush,changes,to,the,database,right,before,commit,with,the,resulting,data,access,exception,causing,the,transaction,to,fail,the,original,exception,will,be,propagated,to,the,caller,of,this,commit,method,in,such,a,case,param,status,object,returned,by,the,code,get,transaction,method,throws,unexpected,rollback,exception,in,case,of,an,unexpected,rollback,that,the,transaction,coordinator,initiated,throws,heuristic,completion,exception,in,case,of,a,transaction,failure,caused,by,a,heuristic,decision,on,the,side,of,the,transaction,coordinator,throws,transaction,system,exception,in,case,of,commit,or,system,errors,typically,caused,by,fundamental,resource,failures,throws,illegal,transaction,state,exception,if,the,given,transaction,is,already,completed,that,is,committed,or,rolled,back,see,transaction,status,set,rollback,only;void,commit,transaction,status,status,throws,transaction,exception
PlatformTransactionManager -> void commit(TransactionStatus status) throws TransactionException_;1530174524;Commit the given transaction, with regard to its status. If the transaction_has been marked rollback-only programmatically, perform a rollback._<p>If the transaction wasn't a new one, omit the commit for proper_participation in the surrounding transaction. If a previous transaction_has been suspended to be able to create a new one, resume the previous_transaction after committing the new one._<p>Note that when the commit call completes, no matter if normally or_throwing an exception, the transaction must be fully completed and_cleaned up. No rollback call should be expected in such a case._<p>If this method throws an exception other than a TransactionException,_then some before-commit error caused the commit attempt to fail. For_example, an O/R Mapping tool might have tried to flush changes to the_database right before commit, with the resulting DataAccessException_causing the transaction to fail. The original exception will be_propagated to the caller of this commit method in such a case._@param status object returned by the {@code getTransaction} method_@throws UnexpectedRollbackException in case of an unexpected rollback_that the transaction coordinator initiated_@throws HeuristicCompletionException in case of a transaction failure_caused by a heuristic decision on the side of the transaction coordinator_@throws TransactionSystemException in case of commit or system errors_(typically caused by fundamental resource failures)_@throws IllegalTransactionStateException if the given transaction_is already completed (that is, committed or rolled back)_@see TransactionStatus#setRollbackOnly;void commit(TransactionStatus status) throws TransactionException_;commit,the,given,transaction,with,regard,to,its,status,if,the,transaction,has,been,marked,rollback,only,programmatically,perform,a,rollback,p,if,the,transaction,wasn,t,a,new,one,omit,the,commit,for,proper,participation,in,the,surrounding,transaction,if,a,previous,transaction,has,been,suspended,to,be,able,to,create,a,new,one,resume,the,previous,transaction,after,committing,the,new,one,p,note,that,when,the,commit,call,completes,no,matter,if,normally,or,throwing,an,exception,the,transaction,must,be,fully,completed,and,cleaned,up,no,rollback,call,should,be,expected,in,such,a,case,p,if,this,method,throws,an,exception,other,than,a,transaction,exception,then,some,before,commit,error,caused,the,commit,attempt,to,fail,for,example,an,o,r,mapping,tool,might,have,tried,to,flush,changes,to,the,database,right,before,commit,with,the,resulting,data,access,exception,causing,the,transaction,to,fail,the,original,exception,will,be,propagated,to,the,caller,of,this,commit,method,in,such,a,case,param,status,object,returned,by,the,code,get,transaction,method,throws,unexpected,rollback,exception,in,case,of,an,unexpected,rollback,that,the,transaction,coordinator,initiated,throws,heuristic,completion,exception,in,case,of,a,transaction,failure,caused,by,a,heuristic,decision,on,the,side,of,the,transaction,coordinator,throws,transaction,system,exception,in,case,of,commit,or,system,errors,typically,caused,by,fundamental,resource,failures,throws,illegal,transaction,state,exception,if,the,given,transaction,is,already,completed,that,is,committed,or,rolled,back,see,transaction,status,set,rollback,only;void,commit,transaction,status,status,throws,transaction,exception
PlatformTransactionManager -> void rollback(TransactionStatus status) throws TransactionException_;1328020251;Perform a rollback of the given transaction._<p>If the transaction wasn't a new one, just set it rollback-only for proper_participation in the surrounding transaction. If a previous transaction_has been suspended to be able to create a new one, resume the previous_transaction after rolling back the new one._<p><b>Do not call rollback on a transaction if commit threw an exception.</b>_The transaction will already have been completed and cleaned up when commit_returns, even in case of a commit exception. Consequently, a rollback call_after commit failure will lead to an IllegalTransactionStateException._@param status object returned by the <code>getTransaction</code> method_@throws TransactionSystemException in case of rollback or system errors_(typically caused by fundamental resource failures)_@throws IllegalTransactionStateException if the given transaction_is already completed (that is, committed or rolled back);void rollback(TransactionStatus status) throws TransactionException_;perform,a,rollback,of,the,given,transaction,p,if,the,transaction,wasn,t,a,new,one,just,set,it,rollback,only,for,proper,participation,in,the,surrounding,transaction,if,a,previous,transaction,has,been,suspended,to,be,able,to,create,a,new,one,resume,the,previous,transaction,after,rolling,back,the,new,one,p,b,do,not,call,rollback,on,a,transaction,if,commit,threw,an,exception,b,the,transaction,will,already,have,been,completed,and,cleaned,up,when,commit,returns,even,in,case,of,a,commit,exception,consequently,a,rollback,call,after,commit,failure,will,lead,to,an,illegal,transaction,state,exception,param,status,object,returned,by,the,code,get,transaction,code,method,throws,transaction,system,exception,in,case,of,rollback,or,system,errors,typically,caused,by,fundamental,resource,failures,throws,illegal,transaction,state,exception,if,the,given,transaction,is,already,completed,that,is,committed,or,rolled,back;void,rollback,transaction,status,status,throws,transaction,exception
PlatformTransactionManager -> void rollback(TransactionStatus status) throws TransactionException_;1356735495;Perform a rollback of the given transaction._<p>If the transaction wasn't a new one, just set it rollback-only for proper_participation in the surrounding transaction. If a previous transaction_has been suspended to be able to create a new one, resume the previous_transaction after rolling back the new one._<p><b>Do not call rollback on a transaction if commit threw an exception.</b>_The transaction will already have been completed and cleaned up when commit_returns, even in case of a commit exception. Consequently, a rollback call_after commit failure will lead to an IllegalTransactionStateException._@param status object returned by the {@code getTransaction} method_@throws TransactionSystemException in case of rollback or system errors_(typically caused by fundamental resource failures)_@throws IllegalTransactionStateException if the given transaction_is already completed (that is, committed or rolled back);void rollback(TransactionStatus status) throws TransactionException_;perform,a,rollback,of,the,given,transaction,p,if,the,transaction,wasn,t,a,new,one,just,set,it,rollback,only,for,proper,participation,in,the,surrounding,transaction,if,a,previous,transaction,has,been,suspended,to,be,able,to,create,a,new,one,resume,the,previous,transaction,after,rolling,back,the,new,one,p,b,do,not,call,rollback,on,a,transaction,if,commit,threw,an,exception,b,the,transaction,will,already,have,been,completed,and,cleaned,up,when,commit,returns,even,in,case,of,a,commit,exception,consequently,a,rollback,call,after,commit,failure,will,lead,to,an,illegal,transaction,state,exception,param,status,object,returned,by,the,code,get,transaction,method,throws,transaction,system,exception,in,case,of,rollback,or,system,errors,typically,caused,by,fundamental,resource,failures,throws,illegal,transaction,state,exception,if,the,given,transaction,is,already,completed,that,is,committed,or,rolled,back;void,rollback,transaction,status,status,throws,transaction,exception
PlatformTransactionManager -> void rollback(TransactionStatus status) throws TransactionException_;1495868221;Perform a rollback of the given transaction._<p>If the transaction wasn't a new one, just set it rollback-only for proper_participation in the surrounding transaction. If a previous transaction_has been suspended to be able to create a new one, resume the previous_transaction after rolling back the new one._<p><b>Do not call rollback on a transaction if commit threw an exception.</b>_The transaction will already have been completed and cleaned up when commit_returns, even in case of a commit exception. Consequently, a rollback call_after commit failure will lead to an IllegalTransactionStateException._@param status object returned by the {@code getTransaction} method_@throws TransactionSystemException in case of rollback or system errors_(typically caused by fundamental resource failures)_@throws IllegalTransactionStateException if the given transaction_is already completed (that is, committed or rolled back);void rollback(TransactionStatus status) throws TransactionException_;perform,a,rollback,of,the,given,transaction,p,if,the,transaction,wasn,t,a,new,one,just,set,it,rollback,only,for,proper,participation,in,the,surrounding,transaction,if,a,previous,transaction,has,been,suspended,to,be,able,to,create,a,new,one,resume,the,previous,transaction,after,rolling,back,the,new,one,p,b,do,not,call,rollback,on,a,transaction,if,commit,threw,an,exception,b,the,transaction,will,already,have,been,completed,and,cleaned,up,when,commit,returns,even,in,case,of,a,commit,exception,consequently,a,rollback,call,after,commit,failure,will,lead,to,an,illegal,transaction,state,exception,param,status,object,returned,by,the,code,get,transaction,method,throws,transaction,system,exception,in,case,of,rollback,or,system,errors,typically,caused,by,fundamental,resource,failures,throws,illegal,transaction,state,exception,if,the,given,transaction,is,already,completed,that,is,committed,or,rolled,back;void,rollback,transaction,status,status,throws,transaction,exception
PlatformTransactionManager -> void rollback(TransactionStatus status) throws TransactionException_;1530174524;Perform a rollback of the given transaction._<p>If the transaction wasn't a new one, just set it rollback-only for proper_participation in the surrounding transaction. If a previous transaction_has been suspended to be able to create a new one, resume the previous_transaction after rolling back the new one._<p><b>Do not call rollback on a transaction if commit threw an exception.</b>_The transaction will already have been completed and cleaned up when commit_returns, even in case of a commit exception. Consequently, a rollback call_after commit failure will lead to an IllegalTransactionStateException._@param status object returned by the {@code getTransaction} method_@throws TransactionSystemException in case of rollback or system errors_(typically caused by fundamental resource failures)_@throws IllegalTransactionStateException if the given transaction_is already completed (that is, committed or rolled back);void rollback(TransactionStatus status) throws TransactionException_;perform,a,rollback,of,the,given,transaction,p,if,the,transaction,wasn,t,a,new,one,just,set,it,rollback,only,for,proper,participation,in,the,surrounding,transaction,if,a,previous,transaction,has,been,suspended,to,be,able,to,create,a,new,one,resume,the,previous,transaction,after,rolling,back,the,new,one,p,b,do,not,call,rollback,on,a,transaction,if,commit,threw,an,exception,b,the,transaction,will,already,have,been,completed,and,cleaned,up,when,commit,returns,even,in,case,of,a,commit,exception,consequently,a,rollback,call,after,commit,failure,will,lead,to,an,illegal,transaction,state,exception,param,status,object,returned,by,the,code,get,transaction,method,throws,transaction,system,exception,in,case,of,rollback,or,system,errors,typically,caused,by,fundamental,resource,failures,throws,illegal,transaction,state,exception,if,the,given,transaction,is,already,completed,that,is,committed,or,rolled,back;void,rollback,transaction,status,status,throws,transaction,exception
PlatformTransactionManager -> TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException_;1328020251;Return a currently active transaction or create a new one, according to_the specified propagation behavior._<p>Note that parameters like isolation level or timeout will only be applied_to new transactions, and thus be ignored when participating in active ones._<p>Furthermore, not all transaction definition settings will be supported_by every transaction manager: A proper transaction manager implementation_should throw an exception when unsupported settings are encountered._<p>An exception to the above rule is the read-only flag, which should be_ignored if no explicit read-only mode is supported. Essentially, the_read-only flag is just a hint for potential optimization._@param definition TransactionDefinition instance (can be <code>null</code> for defaults),_describing propagation behavior, isolation level, timeout etc._@return transaction status object representing the new or current transaction_@throws TransactionException in case of lookup, creation, or system errors_@throws IllegalTransactionStateException if the given transaction definition_cannot be executed (for example, if a currently active transaction is in_conflict with the specified propagation behavior)_@see TransactionDefinition#getPropagationBehavior_@see TransactionDefinition#getIsolationLevel_@see TransactionDefinition#getTimeout_@see TransactionDefinition#isReadOnly;TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException_;return,a,currently,active,transaction,or,create,a,new,one,according,to,the,specified,propagation,behavior,p,note,that,parameters,like,isolation,level,or,timeout,will,only,be,applied,to,new,transactions,and,thus,be,ignored,when,participating,in,active,ones,p,furthermore,not,all,transaction,definition,settings,will,be,supported,by,every,transaction,manager,a,proper,transaction,manager,implementation,should,throw,an,exception,when,unsupported,settings,are,encountered,p,an,exception,to,the,above,rule,is,the,read,only,flag,which,should,be,ignored,if,no,explicit,read,only,mode,is,supported,essentially,the,read,only,flag,is,just,a,hint,for,potential,optimization,param,definition,transaction,definition,instance,can,be,code,null,code,for,defaults,describing,propagation,behavior,isolation,level,timeout,etc,return,transaction,status,object,representing,the,new,or,current,transaction,throws,transaction,exception,in,case,of,lookup,creation,or,system,errors,throws,illegal,transaction,state,exception,if,the,given,transaction,definition,cannot,be,executed,for,example,if,a,currently,active,transaction,is,in,conflict,with,the,specified,propagation,behavior,see,transaction,definition,get,propagation,behavior,see,transaction,definition,get,isolation,level,see,transaction,definition,get,timeout,see,transaction,definition,is,read,only;transaction,status,get,transaction,transaction,definition,definition,throws,transaction,exception
PlatformTransactionManager -> TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException_;1356735495;Return a currently active transaction or create a new one, according to_the specified propagation behavior._<p>Note that parameters like isolation level or timeout will only be applied_to new transactions, and thus be ignored when participating in active ones._<p>Furthermore, not all transaction definition settings will be supported_by every transaction manager: A proper transaction manager implementation_should throw an exception when unsupported settings are encountered._<p>An exception to the above rule is the read-only flag, which should be_ignored if no explicit read-only mode is supported. Essentially, the_read-only flag is just a hint for potential optimization._@param definition TransactionDefinition instance (can be {@code null} for defaults),_describing propagation behavior, isolation level, timeout etc._@return transaction status object representing the new or current transaction_@throws TransactionException in case of lookup, creation, or system errors_@throws IllegalTransactionStateException if the given transaction definition_cannot be executed (for example, if a currently active transaction is in_conflict with the specified propagation behavior)_@see TransactionDefinition#getPropagationBehavior_@see TransactionDefinition#getIsolationLevel_@see TransactionDefinition#getTimeout_@see TransactionDefinition#isReadOnly;TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException_;return,a,currently,active,transaction,or,create,a,new,one,according,to,the,specified,propagation,behavior,p,note,that,parameters,like,isolation,level,or,timeout,will,only,be,applied,to,new,transactions,and,thus,be,ignored,when,participating,in,active,ones,p,furthermore,not,all,transaction,definition,settings,will,be,supported,by,every,transaction,manager,a,proper,transaction,manager,implementation,should,throw,an,exception,when,unsupported,settings,are,encountered,p,an,exception,to,the,above,rule,is,the,read,only,flag,which,should,be,ignored,if,no,explicit,read,only,mode,is,supported,essentially,the,read,only,flag,is,just,a,hint,for,potential,optimization,param,definition,transaction,definition,instance,can,be,code,null,for,defaults,describing,propagation,behavior,isolation,level,timeout,etc,return,transaction,status,object,representing,the,new,or,current,transaction,throws,transaction,exception,in,case,of,lookup,creation,or,system,errors,throws,illegal,transaction,state,exception,if,the,given,transaction,definition,cannot,be,executed,for,example,if,a,currently,active,transaction,is,in,conflict,with,the,specified,propagation,behavior,see,transaction,definition,get,propagation,behavior,see,transaction,definition,get,isolation,level,see,transaction,definition,get,timeout,see,transaction,definition,is,read,only;transaction,status,get,transaction,transaction,definition,definition,throws,transaction,exception
