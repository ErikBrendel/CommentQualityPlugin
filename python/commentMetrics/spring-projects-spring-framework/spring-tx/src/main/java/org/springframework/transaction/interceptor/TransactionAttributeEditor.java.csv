# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionAttributeEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1328020251;Format is PROPAGATION_NAME,ISOLATION_NAME,readOnly,timeout_NNNN,+Exception1,-Exception2._Null or the empty string means that the method is non transactional._@see java.beans.PropertyEditor#setAsText(java.lang.String);@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (StringUtils.hasLength(text)) {_			_			String[] tokens = StringUtils.commaDelimitedListToStringArray(text)__			RuleBasedTransactionAttribute attr = new RuleBasedTransactionAttribute()__			for (int i = 0_ i < tokens.length_ i++) {_				_				String token = StringUtils.trimWhitespace(tokens[i].trim())__				_				if (StringUtils.containsWhitespace(token)) {_					throw new IllegalArgumentException(_							"Transaction attribute token contains illegal whitespace: [" + token + "]")__				}_				_				if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {_					attr.setPropagationBehaviorName(token)__				}_				else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {_					attr.setIsolationLevelName(token)__				}_				else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {_					String value = token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length())__					attr.setTimeout(Integer.parseInt(value))__				}_				else if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {_					attr.setReadOnly(true)__				}_				else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {_					attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)))__				}_				else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {_					attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)))__				}_				else {_					throw new IllegalArgumentException("Invalid transaction attribute token: [" + token + "]")__				}_			}_			setValue(attr)__		}_		else {_			setValue(null)__		}_	};format,is,read,only,exception1,exception2,null,or,the,empty,string,means,that,the,method,is,non,transactional,see,java,beans,property,editor,set,as,text,java,lang,string;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,string,utils,has,length,text,string,tokens,string,utils,comma,delimited,list,to,string,array,text,rule,based,transaction,attribute,attr,new,rule,based,transaction,attribute,for,int,i,0,i,tokens,length,i,string,token,string,utils,trim,whitespace,tokens,i,trim,if,string,utils,contains,whitespace,token,throw,new,illegal,argument,exception,transaction,attribute,token,contains,illegal,whitespace,token,if,token,starts,with,rule,based,transaction,attribute,attr,set,propagation,behavior,name,token,else,if,token,starts,with,rule,based,transaction,attribute,attr,set,isolation,level,name,token,else,if,token,starts,with,rule,based,transaction,attribute,string,value,token,substring,default,transaction,attribute,length,attr,set,timeout,integer,parse,int,value,else,if,token,equals,rule,based,transaction,attribute,attr,set,read,only,true,else,if,token,starts,with,rule,based,transaction,attribute,attr,get,rollback,rules,add,new,no,rollback,rule,attribute,token,substring,1,else,if,token,starts,with,rule,based,transaction,attribute,attr,get,rollback,rules,add,new,rollback,rule,attribute,token,substring,1,else,throw,new,illegal,argument,exception,invalid,transaction,attribute,token,token,set,value,attr,else,set,value,null
TransactionAttributeEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1356735495;Format is PROPAGATION_NAME,ISOLATION_NAME,readOnly,timeout_NNNN,+Exception1,-Exception2._Null or the empty string means that the method is non transactional._@see java.beans.PropertyEditor#setAsText(java.lang.String);@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (StringUtils.hasLength(text)) {_			_			String[] tokens = StringUtils.commaDelimitedListToStringArray(text)__			RuleBasedTransactionAttribute attr = new RuleBasedTransactionAttribute()__			for (int i = 0_ i < tokens.length_ i++) {_				_				String token = StringUtils.trimWhitespace(tokens[i].trim())__				_				if (StringUtils.containsWhitespace(token)) {_					throw new IllegalArgumentException(_							"Transaction attribute token contains illegal whitespace: [" + token + "]")__				}_				_				if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {_					attr.setPropagationBehaviorName(token)__				}_				else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {_					attr.setIsolationLevelName(token)__				}_				else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {_					String value = token.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length())__					attr.setTimeout(Integer.parseInt(value))__				}_				else if (token.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {_					attr.setReadOnly(true)__				}_				else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {_					attr.getRollbackRules().add(new NoRollbackRuleAttribute(token.substring(1)))__				}_				else if (token.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {_					attr.getRollbackRules().add(new RollbackRuleAttribute(token.substring(1)))__				}_				else {_					throw new IllegalArgumentException("Invalid transaction attribute token: [" + token + "]")__				}_			}_			setValue(attr)__		}_		else {_			setValue(null)__		}_	};format,is,read,only,exception1,exception2,null,or,the,empty,string,means,that,the,method,is,non,transactional,see,java,beans,property,editor,set,as,text,java,lang,string;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,string,utils,has,length,text,string,tokens,string,utils,comma,delimited,list,to,string,array,text,rule,based,transaction,attribute,attr,new,rule,based,transaction,attribute,for,int,i,0,i,tokens,length,i,string,token,string,utils,trim,whitespace,tokens,i,trim,if,string,utils,contains,whitespace,token,throw,new,illegal,argument,exception,transaction,attribute,token,contains,illegal,whitespace,token,if,token,starts,with,rule,based,transaction,attribute,attr,set,propagation,behavior,name,token,else,if,token,starts,with,rule,based,transaction,attribute,attr,set,isolation,level,name,token,else,if,token,starts,with,rule,based,transaction,attribute,string,value,token,substring,default,transaction,attribute,length,attr,set,timeout,integer,parse,int,value,else,if,token,equals,rule,based,transaction,attribute,attr,set,read,only,true,else,if,token,starts,with,rule,based,transaction,attribute,attr,get,rollback,rules,add,new,no,rollback,rule,attribute,token,substring,1,else,if,token,starts,with,rule,based,transaction,attribute,attr,get,rollback,rules,add,new,rollback,rule,attribute,token,substring,1,else,throw,new,illegal,argument,exception,invalid,transaction,attribute,token,token,set,value,attr,else,set,value,null
TransactionAttributeEditor -> @Override 	public void setAsText(String text) throws IllegalArgumentException;1550247388;Format is PROPAGATION_NAME,ISOLATION_NAME,readOnly,timeout_NNNN,+Exception1,-Exception2._Null or the empty string means that the method is non transactional.;@Override_	public void setAsText(String text) throws IllegalArgumentException {_		if (StringUtils.hasLength(text)) {_			_			String[] tokens = StringUtils.commaDelimitedListToStringArray(text)__			RuleBasedTransactionAttribute attr = new RuleBasedTransactionAttribute()__			for (String token : tokens) {_				_				String trimmedToken = StringUtils.trimWhitespace(token.trim())__				_				if (StringUtils.containsWhitespace(trimmedToken)) {_					throw new IllegalArgumentException(_							"Transaction attribute token contains illegal whitespace: [" + trimmedToken + "]")__				}_				_				if (trimmedToken.startsWith(RuleBasedTransactionAttribute.PREFIX_PROPAGATION)) {_					attr.setPropagationBehaviorName(trimmedToken)__				}_				else if (trimmedToken.startsWith(RuleBasedTransactionAttribute.PREFIX_ISOLATION)) {_					attr.setIsolationLevelName(trimmedToken)__				}_				else if (trimmedToken.startsWith(RuleBasedTransactionAttribute.PREFIX_TIMEOUT)) {_					String value = trimmedToken.substring(DefaultTransactionAttribute.PREFIX_TIMEOUT.length())__					attr.setTimeout(Integer.parseInt(value))__				}_				else if (trimmedToken.equals(RuleBasedTransactionAttribute.READ_ONLY_MARKER)) {_					attr.setReadOnly(true)__				}_				else if (trimmedToken.startsWith(RuleBasedTransactionAttribute.PREFIX_COMMIT_RULE)) {_					attr.getRollbackRules().add(new NoRollbackRuleAttribute(trimmedToken.substring(1)))__				}_				else if (trimmedToken.startsWith(RuleBasedTransactionAttribute.PREFIX_ROLLBACK_RULE)) {_					attr.getRollbackRules().add(new RollbackRuleAttribute(trimmedToken.substring(1)))__				}_				else {_					throw new IllegalArgumentException("Invalid transaction attribute token: [" + trimmedToken + "]")__				}_			}_			setValue(attr)__		}_		else {_			setValue(null)__		}_	};format,is,read,only,exception1,exception2,null,or,the,empty,string,means,that,the,method,is,non,transactional;override,public,void,set,as,text,string,text,throws,illegal,argument,exception,if,string,utils,has,length,text,string,tokens,string,utils,comma,delimited,list,to,string,array,text,rule,based,transaction,attribute,attr,new,rule,based,transaction,attribute,for,string,token,tokens,string,trimmed,token,string,utils,trim,whitespace,token,trim,if,string,utils,contains,whitespace,trimmed,token,throw,new,illegal,argument,exception,transaction,attribute,token,contains,illegal,whitespace,trimmed,token,if,trimmed,token,starts,with,rule,based,transaction,attribute,attr,set,propagation,behavior,name,trimmed,token,else,if,trimmed,token,starts,with,rule,based,transaction,attribute,attr,set,isolation,level,name,trimmed,token,else,if,trimmed,token,starts,with,rule,based,transaction,attribute,string,value,trimmed,token,substring,default,transaction,attribute,length,attr,set,timeout,integer,parse,int,value,else,if,trimmed,token,equals,rule,based,transaction,attribute,attr,set,read,only,true,else,if,trimmed,token,starts,with,rule,based,transaction,attribute,attr,get,rollback,rules,add,new,no,rollback,rule,attribute,trimmed,token,substring,1,else,if,trimmed,token,starts,with,rule,based,transaction,attribute,attr,get,rollback,rules,add,new,rollback,rule,attribute,trimmed,token,substring,1,else,throw,new,illegal,argument,exception,invalid,transaction,attribute,token,trimmed,token,set,value,attr,else,set,value,null
