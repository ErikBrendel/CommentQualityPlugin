commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set a name/attribute map, consisting of method names  * (e.g. "myMethod") and TransactionAttribute instances  * (or Strings to be converted to TransactionAttribute instances).  * @see TransactionAttribute  * @see TransactionAttributeEditor  */ ;/**  * Set a name/attribute map, consisting of method names  * (e.g. "myMethod") and TransactionAttribute instances  * (or Strings to be converted to TransactionAttribute instances).  * @see TransactionAttribute  * @see TransactionAttributeEditor  */ public void setNameMap(Map<String, TransactionAttribute> nameMap) {     nameMap.forEach(this::addTransactionalMethod). }
true;public;1;11;/**  * Parses the given properties into a name/attribute map.  * Expects method names as keys and String attributes definitions as values,  * parsable into TransactionAttribute instances via TransactionAttributeEditor.  * @see #setNameMap  * @see TransactionAttributeEditor  */ ;/**  * Parses the given properties into a name/attribute map.  * Expects method names as keys and String attributes definitions as values,  * parsable into TransactionAttribute instances via TransactionAttributeEditor.  * @see #setNameMap  * @see TransactionAttributeEditor  */ public void setProperties(Properties transactionAttributes) {     TransactionAttributeEditor tae = new TransactionAttributeEditor().     Enumeration<?> propNames = transactionAttributes.propertyNames().     while (propNames.hasMoreElements()) {         String methodName = (String) propNames.nextElement().         String value = transactionAttributes.getProperty(methodName).         tae.setAsText(value).         TransactionAttribute attr = (TransactionAttribute) tae.getValue().         addTransactionalMethod(methodName, attr).     } }
true;public;2;6;/**  * Add an attribute for a transactional method.  * <p>Method names can be exact matches, or of the pattern "xxx*",  * "*xxx" or "*xxx*" for matching multiple methods.  * @param methodName the name of the method  * @param attr attribute associated with the method  */ ;/**  * Add an attribute for a transactional method.  * <p>Method names can be exact matches, or of the pattern "xxx*",  * "*xxx" or "*xxx*" for matching multiple methods.  * @param methodName the name of the method  * @param attr attribute associated with the method  */ public void addTransactionalMethod(String methodName, TransactionAttribute attr) {     if (logger.isDebugEnabled()) {         logger.debug("Adding transactional method [" + methodName + "] with attribute [" + attr + "]").     }     this.nameMap.put(methodName, attr). }
false;public;2;25;;@Override @Nullable public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {     if (!ClassUtils.isUserLevelMethod(method)) {         return null.     }     // Look for direct name match.     String methodName = method.getName().     TransactionAttribute attr = this.nameMap.get(methodName).     if (attr == null) {         // Look for most specific name match.         String bestNameMatch = null.         for (String mappedName : this.nameMap.keySet()) {             if (isMatch(methodName, mappedName) && (bestNameMatch == null || bestNameMatch.length() <= mappedName.length())) {                 attr = this.nameMap.get(mappedName).                 bestNameMatch = mappedName.             }         }     }     return attr. }
true;protected;2;3;/**  * Return if the given method name matches the mapped name.  * <p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,  * as well as direct equality. Can be overridden in subclasses.  * @param methodName the method name of the class  * @param mappedName the name in the descriptor  * @return if the names match  * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String)  */ ;/**  * Return if the given method name matches the mapped name.  * <p>The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,  * as well as direct equality. Can be overridden in subclasses.  * @param methodName the method name of the class  * @param mappedName the name in the descriptor  * @return if the names match  * @see org.springframework.util.PatternMatchUtils#simpleMatch(String, String)  */ protected boolean isMatch(String methodName, String mappedName) {     return PatternMatchUtils.simpleMatch(mappedName, methodName). }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof NameMatchTransactionAttributeSource)) {         return false.     }     NameMatchTransactionAttributeSource otherTas = (NameMatchTransactionAttributeSource) other.     return ObjectUtils.nullSafeEquals(this.nameMap, otherTas.nameMap). }
false;public;0;4;;@Override public int hashCode() {     return NameMatchTransactionAttributeSource.class.hashCode(). }
false;public;0;4;;@Override public String toString() {     return getClass().getName() + ": " + this.nameMap. }
