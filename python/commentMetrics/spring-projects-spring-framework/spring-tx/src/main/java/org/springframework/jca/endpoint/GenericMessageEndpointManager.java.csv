commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the JCA ResourceAdapter to manage endpoints for.  */ ;/**  * Set the JCA ResourceAdapter to manage endpoints for.  */ public void setResourceAdapter(@Nullable ResourceAdapter resourceAdapter) {     this.resourceAdapter = resourceAdapter. }
true;public;0;4;/**  * Return the JCA ResourceAdapter to manage endpoints for.  */ ;/**  * Return the JCA ResourceAdapter to manage endpoints for.  */ @Nullable public ResourceAdapter getResourceAdapter() {     return this.resourceAdapter. }
true;public;1;3;/**  * Set the JCA MessageEndpointFactory to activate, pointing to a  * MessageListener object that the endpoints will delegate to.  * <p>A MessageEndpointFactory instance may be shared across multiple  * endpoints (i.e. multiple GenericMessageEndpointManager instances),  * with different {@link #setActivationSpec ActivationSpec} objects applied.  * @see GenericMessageEndpointFactory#setMessageListener  */ ;/**  * Set the JCA MessageEndpointFactory to activate, pointing to a  * MessageListener object that the endpoints will delegate to.  * <p>A MessageEndpointFactory instance may be shared across multiple  * endpoints (i.e. multiple GenericMessageEndpointManager instances),  * with different {@link #setActivationSpec ActivationSpec} objects applied.  * @see GenericMessageEndpointFactory#setMessageListener  */ public void setMessageEndpointFactory(@Nullable MessageEndpointFactory messageEndpointFactory) {     this.messageEndpointFactory = messageEndpointFactory. }
true;public;0;4;/**  * Return the JCA MessageEndpointFactory to activate.  */ ;/**  * Return the JCA MessageEndpointFactory to activate.  */ @Nullable public MessageEndpointFactory getMessageEndpointFactory() {     return this.messageEndpointFactory. }
true;public;1;3;/**  * Set the JCA ActivationSpec to use for activating the endpoint.  * <p>Note that this ActivationSpec instance should not be shared  * across multiple ResourceAdapter instances.  */ ;/**  * Set the JCA ActivationSpec to use for activating the endpoint.  * <p>Note that this ActivationSpec instance should not be shared  * across multiple ResourceAdapter instances.  */ public void setActivationSpec(@Nullable ActivationSpec activationSpec) {     this.activationSpec = activationSpec. }
true;public;0;4;/**  * Return the JCA ActivationSpec to use for activating the endpoint.  */ ;/**  * Return the JCA ActivationSpec to use for activating the endpoint.  */ @Nullable public ActivationSpec getActivationSpec() {     return this.activationSpec. }
true;public;1;3;/**  * Set whether to auto-start the endpoint activation after this endpoint  * manager has been initialized and the context has been refreshed.  * <p>Default is "true". Turn this flag off to defer the endpoint  * activation until an explicit {@link #start()} call.  */ ;/**  * Set whether to auto-start the endpoint activation after this endpoint  * manager has been initialized and the context has been refreshed.  * <p>Default is "true". Turn this flag off to defer the endpoint  * activation until an explicit {@link #start()} call.  */ public void setAutoStartup(boolean autoStartup) {     this.autoStartup = autoStartup. }
true;public;0;4;/**  * Return the value for the 'autoStartup' property.	If "true", this  * endpoint manager will start upon a ContextRefreshedEvent.  */ ;/**  * Return the value for the 'autoStartup' property.	If "true", this  * endpoint manager will start upon a ContextRefreshedEvent.  */ @Override public boolean isAutoStartup() {     return this.autoStartup. }
true;public;1;3;/**  * Specify the phase in which this endpoint manager should be started  * and stopped. The startup order proceeds from lowest to highest, and  * the shutdown order is the reverse of that. By default this value is  * Integer.MAX_VALUE meaning that this endpoint manager starts as late  * as possible and stops as soon as possible.  */ ;/**  * Specify the phase in which this endpoint manager should be started  * and stopped. The startup order proceeds from lowest to highest, and  * the shutdown order is the reverse of that. By default this value is  * Integer.MAX_VALUE meaning that this endpoint manager starts as late  * as possible and stops as soon as possible.  */ public void setPhase(int phase) {     this.phase = phase. }
true;public;0;4;/**  * Return the phase in which this endpoint manager will be started and stopped.  */ ;/**  * Return the phase in which this endpoint manager will be started and stopped.  */ @Override public int getPhase() {     return this.phase. }
true;public;0;21;/**  * Prepares the message endpoint, and automatically activates it  * if the "autoStartup" flag is set to "true".  */ ;/**  * Prepares the message endpoint, and automatically activates it  * if the "autoStartup" flag is set to "true".  */ @Override public void afterPropertiesSet() throws ResourceException {     if (getResourceAdapter() == null) {         throw new IllegalArgumentException("Property 'resourceAdapter' is required").     }     if (getMessageEndpointFactory() == null) {         throw new IllegalArgumentException("Property 'messageEndpointFactory' is required").     }     ActivationSpec activationSpec = getActivationSpec().     if (activationSpec == null) {         throw new IllegalArgumentException("Property 'activationSpec' is required").     }     if (activationSpec.getResourceAdapter() == null) {         activationSpec.setResourceAdapter(getResourceAdapter()).     } else if (activationSpec.getResourceAdapter() != getResourceAdapter()) {         throw new IllegalArgumentException("ActivationSpec [" + activationSpec + "] is associated with a different ResourceAdapter: " + activationSpec.getResourceAdapter()).     } }
true;public;0;16;/**  * Activates the configured message endpoint.  */ ;/**  * Activates the configured message endpoint.  */ @Override public void start() {     synchronized (this.lifecycleMonitor) {         if (!this.running) {             ResourceAdapter resourceAdapter = getResourceAdapter().             Assert.state(resourceAdapter != null, "No ResourceAdapter set").             try {                 resourceAdapter.endpointActivation(getMessageEndpointFactory(), getActivationSpec()).             } catch (ResourceException ex) {                 throw new IllegalStateException("Could not activate message endpoint", ex).             }             this.running = true.         }     } }
true;public;0;11;/**  * Deactivates the configured message endpoint.  */ ;/**  * Deactivates the configured message endpoint.  */ @Override public void stop() {     synchronized (this.lifecycleMonitor) {         if (this.running) {             ResourceAdapter resourceAdapter = getResourceAdapter().             Assert.state(resourceAdapter != null, "No ResourceAdapter set").             resourceAdapter.endpointDeactivation(getMessageEndpointFactory(), getActivationSpec()).             this.running = false.         }     } }
false;public;1;7;;@Override public void stop(Runnable callback) {     synchronized (this.lifecycleMonitor) {         stop().         callback.run().     } }
true;public;0;4;/**  * Return whether the configured message endpoint is currently active.  */ ;/**  * Return whether the configured message endpoint is currently active.  */ @Override public boolean isRunning() {     return this.running. }
true;public;0;4;/**  * Deactivates the message endpoint, preparing it for shutdown.  */ ;/**  * Deactivates the message endpoint, preparing it for shutdown.  */ @Override public void destroy() {     stop(). }
