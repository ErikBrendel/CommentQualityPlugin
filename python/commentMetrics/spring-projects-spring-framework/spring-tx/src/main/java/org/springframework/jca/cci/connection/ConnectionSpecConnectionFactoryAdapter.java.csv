commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the ConnectionSpec that this adapter should use for retrieving Connections.  * Default is none.  */ ;/**  * Set the ConnectionSpec that this adapter should use for retrieving Connections.  * Default is none.  */ public void setConnectionSpec(ConnectionSpec connectionSpec) {     this.connectionSpec = connectionSpec. }
true;public;1;3;/**  * Set a ConnectionSpec for this proxy and the current thread.  * The given ConnectionSpec will be applied to all subsequent  * {@code getConnection()} calls on this ConnectionFactory proxy.  * <p>This will override any statically specified "connectionSpec" property.  * @param spec the ConnectionSpec to apply  * @see #removeConnectionSpecFromCurrentThread  */ ;/**  * Set a ConnectionSpec for this proxy and the current thread.  * The given ConnectionSpec will be applied to all subsequent  * {@code getConnection()} calls on this ConnectionFactory proxy.  * <p>This will override any statically specified "connectionSpec" property.  * @param spec the ConnectionSpec to apply  * @see #removeConnectionSpecFromCurrentThread  */ public void setConnectionSpecForCurrentThread(ConnectionSpec spec) {     this.threadBoundSpec.set(spec). }
true;public;0;3;/**  * Remove any ConnectionSpec for this proxy from the current thread.  * A statically specified ConnectionSpec applies again afterwards.  * @see #setConnectionSpecForCurrentThread  */ ;/**  * Remove any ConnectionSpec for this proxy from the current thread.  * A statically specified ConnectionSpec applies again afterwards.  * @see #setConnectionSpecForCurrentThread  */ public void removeConnectionSpecFromCurrentThread() {     this.threadBoundSpec.remove(). }
true;public,final;0;10;/**  * Determine whether there is currently a thread-bound ConnectionSpec,  * using it if available, falling back to the statically specified  * "connectionSpec" property else.  * @see #doGetConnection  */ ;/**  * Determine whether there is currently a thread-bound ConnectionSpec,  * using it if available, falling back to the statically specified  * "connectionSpec" property else.  * @see #doGetConnection  */ @Override public final Connection getConnection() throws ResourceException {     ConnectionSpec threadSpec = this.threadBoundSpec.get().     if (threadSpec != null) {         return doGetConnection(threadSpec).     } else {         return doGetConnection(this.connectionSpec).     } }
true;protected;1;5;/**  * This implementation delegates to the {@code getConnection(ConnectionSpec)}  * method of the target ConnectionFactory, passing in the specified user credentials.  * If the specified username is empty, it will simply delegate to the standard  * {@code getConnection()} method of the target ConnectionFactory.  * @param spec the ConnectionSpec to apply  * @return the Connection  * @see javax.resource.cci.ConnectionFactory#getConnection(javax.resource.cci.ConnectionSpec)  * @see javax.resource.cci.ConnectionFactory#getConnection()  */ ;/**  * This implementation delegates to the {@code getConnection(ConnectionSpec)}  * method of the target ConnectionFactory, passing in the specified user credentials.  * If the specified username is empty, it will simply delegate to the standard  * {@code getConnection()} method of the target ConnectionFactory.  * @param spec the ConnectionSpec to apply  * @return the Connection  * @see javax.resource.cci.ConnectionFactory#getConnection(javax.resource.cci.ConnectionSpec)  * @see javax.resource.cci.ConnectionFactory#getConnection()  */ protected Connection doGetConnection(@Nullable ConnectionSpec spec) throws ResourceException {     ConnectionFactory connectionFactory = getTargetConnectionFactory().     Assert.state(connectionFactory != null, "No 'targetConnectionFactory' set").     return (spec != null ? connectionFactory.getConnection(spec) : connectionFactory.getConnection()). }
