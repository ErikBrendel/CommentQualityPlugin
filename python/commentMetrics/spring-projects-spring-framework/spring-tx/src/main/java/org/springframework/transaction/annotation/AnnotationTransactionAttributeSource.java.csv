commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;5;;@Override @Nullable protected TransactionAttribute findTransactionAttribute(Class<?> clazz) {     return determineTransactionAttribute(clazz). }
false;protected;1;5;;@Override @Nullable protected TransactionAttribute findTransactionAttribute(Method method) {     return determineTransactionAttribute(method). }
true;protected;1;10;/**  * Determine the transaction attribute for the given method or class.  * <p>This implementation delegates to configured  * {@link TransactionAnnotationParser TransactionAnnotationParsers}  * for parsing known annotations into Spring's metadata attribute class.  * Returns {@code null} if it's not transactional.  * <p>Can be overridden to support custom annotations that carry transaction metadata.  * @param element the annotated method or class  * @return the configured transaction attribute, or {@code null} if none was found  */ ;/**  * Determine the transaction attribute for the given method or class.  * <p>This implementation delegates to configured  * {@link TransactionAnnotationParser TransactionAnnotationParsers}  * for parsing known annotations into Spring's metadata attribute class.  * Returns {@code null} if it's not transactional.  * <p>Can be overridden to support custom annotations that carry transaction metadata.  * @param element the annotated method or class  * @return the configured transaction attribute, or {@code null} if none was found  */ @Nullable protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element) {     for (TransactionAnnotationParser annotationParser : this.annotationParsers) {         TransactionAttribute attr = annotationParser.parseTransactionAnnotation(element).         if (attr != null) {             return attr.         }     }     return null. }
true;protected;0;4;/**  * By default, only public methods can be made transactional.  */ ;/**  * By default, only public methods can be made transactional.  */ @Override protected boolean allowPublicMethodsOnly() {     return this.publicMethodsOnly. }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof AnnotationTransactionAttributeSource)) {         return false.     }     AnnotationTransactionAttributeSource otherTas = (AnnotationTransactionAttributeSource) other.     return (this.annotationParsers.equals(otherTas.annotationParsers) && this.publicMethodsOnly == otherTas.publicMethodsOnly). }
false;public;0;4;;@Override public int hashCode() {     return this.annotationParsers.hashCode(). }
