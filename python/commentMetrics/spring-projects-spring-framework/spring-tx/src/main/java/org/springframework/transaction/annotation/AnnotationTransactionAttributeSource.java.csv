# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationTransactionAttributeSource -> @Nullable 	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1495868221;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or {@code null} if none was found;@Nullable_	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,if,none,was,found;nullable,protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> @Nullable 	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1502974979;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or {@code null} if none was found;@Nullable_	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,if,none,was,found;nullable,protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> @Nullable 	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1530174524;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return the configured transaction attribute,_or {@code null} if none was found;@Nullable_	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,the,configured,transaction,attribute,or,code,null,if,none,was,found;nullable,protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> @Nullable 	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1532509782;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return the configured transaction attribute,_or {@code null} if none was found;@Nullable_	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,the,configured,transaction,attribute,or,code,null,if,none,was,found;nullable,protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> @Nullable 	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1533598557;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return the configured transaction attribute,_or {@code null} if none was found;@Nullable_	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,the,configured,transaction,attribute,or,code,null,if,none,was,found;nullable,protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1328020251;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the <code>Transactional</code> annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,code,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1355279383;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the <code>Transactional</code> annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,code,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1356735495;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1364419997;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1446722814;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1467730834;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1493223391;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1495868221;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1502974979;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1530174524;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1532509782;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1533598557;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1533602820;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource();1533808755;Create a default AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation.;public AnnotationTransactionAttributeSource() {_		this(true)__	};create,a,default,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation;public,annotation,transaction,attribute,source,this,true
AnnotationTransactionAttributeSource -> protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1328020251;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns <code>null</code> if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or <code>null</code> if none was found;protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,code,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,code,if,none,was,found;protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1355279383;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns <code>null</code> if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or <code>null</code> if none was found;protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,code,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,code,if,none,was,found;protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1356735495;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or {@code null} if none was found;protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,if,none,was,found;protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1364419997;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or {@code null} if none was found;protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,if,none,was,found;protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1446722814;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or {@code null} if none was found;protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		if (ae.getAnnotations().length > 0) {_			for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_				TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__				if (attr != null) {_					return attr__				}_			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,if,none,was,found;protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,if,ae,get,annotations,length,0,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1467730834;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or {@code null} if none was found;protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		if (ae.getAnnotations().length > 0) {_			for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_				TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__				if (attr != null) {_					return attr__				}_			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,if,none,was,found;protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,if,ae,get,annotations,length,0,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae);1493223391;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param ae the annotated method or class_@return TransactionAttribute the configured transaction attribute,_or {@code null} if none was found;protected TransactionAttribute determineTransactionAttribute(AnnotatedElement ae) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(ae)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,ae,the,annotated,method,or,class,return,transaction,attribute,the,configured,transaction,attribute,or,code,null,if,none,was,found;protected,transaction,attribute,determine,transaction,attribute,annotated,element,ae,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,ae,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1328020251;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1355279383;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1356735495;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1364419997;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1446722814;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1467730834;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1493223391;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1495868221;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1502974979;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1530174524;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1532509782;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1533598557;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1533602820;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers);1533808755;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(Set<TransactionAnnotationParser> annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = annotationParsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,set,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1355279383;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<TransactionAnnotationParser>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,transaction,annotation,parser,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1356735495;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<TransactionAnnotationParser>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,transaction,annotation,parser,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1364419997;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<TransactionAnnotationParser>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,transaction,annotation,parser,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1446722814;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<TransactionAnnotationParser>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,transaction,annotation,parser,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1467730834;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1493223391;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1495868221;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1502974979;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1530174524;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1532509782;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		Set<TransactionAnnotationParser> parsers = new LinkedHashSet<>(annotationParsers.length)__		Collections.addAll(parsers, annotationParsers)__		this.annotationParsers = parsers__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,set,transaction,annotation,parser,parsers,new,linked,hash,set,annotation,parsers,length,collections,add,all,parsers,annotation,parsers,this,annotation,parsers,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1533598557;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = new LinkedHashSet<>(Arrays.asList(annotationParsers))__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,new,linked,hash,set,arrays,as,list,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1533602820;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = new LinkedHashSet<>(Arrays.asList(annotationParsers))__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,new,linked,hash,set,arrays,as,list,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers);1533808755;Create a custom AnnotationTransactionAttributeSource._@param annotationParsers the TransactionAnnotationParsers to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser... annotationParsers) {_		this.publicMethodsOnly = true__		Assert.notEmpty(annotationParsers, "At least one TransactionAnnotationParser needs to be specified")__		this.annotationParsers = new LinkedHashSet<>(Arrays.asList(annotationParsers))__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parsers,the,transaction,annotation,parsers,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parsers,this,public,methods,only,true,assert,not,empty,annotation,parsers,at,least,one,transaction,annotation,parser,needs,to,be,specified,this,annotation,parsers,new,linked,hash,set,arrays,as,list,annotation,parsers
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1328020251;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1355279383;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1356735495;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1364419997;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1446722814;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1467730834;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1493223391;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1495868221;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1502974979;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1530174524;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1532509782;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1533598557;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1533602820;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser);1533808755;Create a custom AnnotationTransactionAttributeSource._@param annotationParser the TransactionAnnotationParser to use;public AnnotationTransactionAttributeSource(TransactionAnnotationParser annotationParser) {_		this.publicMethodsOnly = true__		Assert.notNull(annotationParser, "TransactionAnnotationParser must not be null")__		this.annotationParsers = Collections.singleton(annotationParser)__	};create,a,custom,annotation,transaction,attribute,source,param,annotation,parser,the,transaction,annotation,parser,to,use;public,annotation,transaction,attribute,source,transaction,annotation,parser,annotation,parser,this,public,methods,only,true,assert,not,null,annotation,parser,transaction,annotation,parser,must,not,be,null,this,annotation,parsers,collections,singleton,annotation,parser
AnnotationTransactionAttributeSource -> @Nullable 	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element);1533602820;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param element the annotated method or class_@return the configured transaction attribute, or {@code null} if none was found;@Nullable_	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(element)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,element,the,annotated,method,or,class,return,the,configured,transaction,attribute,or,code,null,if,none,was,found;nullable,protected,transaction,attribute,determine,transaction,attribute,annotated,element,element,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,element,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> @Nullable 	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element);1533808755;Determine the transaction attribute for the given method or class._<p>This implementation delegates to configured_{@link TransactionAnnotationParser TransactionAnnotationParsers}_for parsing known annotations into Spring's metadata attribute class._Returns {@code null} if it's not transactional._<p>Can be overridden to support custom annotations that carry transaction metadata._@param element the annotated method or class_@return the configured transaction attribute, or {@code null} if none was found;@Nullable_	protected TransactionAttribute determineTransactionAttribute(AnnotatedElement element) {_		for (TransactionAnnotationParser annotationParser : this.annotationParsers) {_			TransactionAttribute attr = annotationParser.parseTransactionAnnotation(element)__			if (attr != null) {_				return attr__			}_		}_		return null__	};determine,the,transaction,attribute,for,the,given,method,or,class,p,this,implementation,delegates,to,configured,link,transaction,annotation,parser,transaction,annotation,parsers,for,parsing,known,annotations,into,spring,s,metadata,attribute,class,returns,code,null,if,it,s,not,transactional,p,can,be,overridden,to,support,custom,annotations,that,carry,transaction,metadata,param,element,the,annotated,method,or,class,return,the,configured,transaction,attribute,or,code,null,if,none,was,found;nullable,protected,transaction,attribute,determine,transaction,attribute,annotated,element,element,for,transaction,annotation,parser,annotation,parser,this,annotation,parsers,transaction,attribute,attr,annotation,parser,parse,transaction,annotation,element,if,attr,null,return,attr,return,null
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1328020251;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the <code>Transactional</code> annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the <code>Transactional</code> annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<TransactionAnnotationParser>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,code,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,code,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,transaction,annotation,parser,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1355279383;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the <code>Transactional</code> annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the <code>Transactional</code> annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<TransactionAnnotationParser>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,code,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,code,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,transaction,annotation,parser,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1356735495;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<TransactionAnnotationParser>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,transaction,annotation,parser,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1364419997;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<TransactionAnnotationParser>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (jta12Present) {_			this.annotationParsers.add(new JtaTransactionAnnotationParser())__		}_		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,transaction,annotation,parser,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1446722814;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<TransactionAnnotationParser>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (jta12Present) {_			this.annotationParsers.add(new JtaTransactionAnnotationParser())__		}_		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,transaction,annotation,parser,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1467730834;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (jta12Present) {_			this.annotationParsers.add(new JtaTransactionAnnotationParser())__		}_		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1493223391;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (jta12Present) {_			this.annotationParsers.add(new JtaTransactionAnnotationParser())__		}_		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1495868221;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (jta12Present) {_			this.annotationParsers.add(new JtaTransactionAnnotationParser())__		}_		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1502974979;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (jta12Present) {_			this.annotationParsers.add(new JtaTransactionAnnotationParser())__		}_		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1530174524;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (jta12Present) {_			this.annotationParsers.add(new JtaTransactionAnnotationParser())__		}_		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1532509782;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		this.annotationParsers = new LinkedHashSet<>(2)__		this.annotationParsers.add(new SpringTransactionAnnotationParser())__		if (jta12Present) {_			this.annotationParsers.add(new JtaTransactionAnnotationParser())__		}_		if (ejb3Present) {_			this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,this,annotation,parsers,new,linked,hash,set,2,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1533598557;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		if (jta12Present || ejb3Present) {_			this.annotationParsers = new LinkedHashSet<>(4)__			this.annotationParsers.add(new SpringTransactionAnnotationParser())__			if (jta12Present) {_				this.annotationParsers.add(new JtaTransactionAnnotationParser())__			}_			if (ejb3Present) {_				this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__			}_		}_		else {_			this.annotationParsers = Collections.singleton(new SpringTransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,if,jta12present,ejb3present,this,annotation,parsers,new,linked,hash,set,4,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser,else,this,annotation,parsers,collections,singleton,new,spring,transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1533602820;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		if (jta12Present || ejb3Present) {_			this.annotationParsers = new LinkedHashSet<>(4)__			this.annotationParsers.add(new SpringTransactionAnnotationParser())__			if (jta12Present) {_				this.annotationParsers.add(new JtaTransactionAnnotationParser())__			}_			if (ejb3Present) {_				this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__			}_		}_		else {_			this.annotationParsers = Collections.singleton(new SpringTransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,if,jta12present,ejb3present,this,annotation,parsers,new,linked,hash,set,4,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser,else,this,annotation,parsers,collections,singleton,new,spring,transaction,annotation,parser
AnnotationTransactionAttributeSource -> public AnnotationTransactionAttributeSource(boolean publicMethodsOnly);1533808755;Create a custom AnnotationTransactionAttributeSource, supporting_public methods that carry the {@code Transactional} annotation_or the EJB3 {@link javax.ejb.TransactionAttribute} annotation._@param publicMethodsOnly whether to support public methods that carry_the {@code Transactional} annotation only (typically for use_with proxy-based AOP), or protected/private methods as well_(typically used with AspectJ class weaving);public AnnotationTransactionAttributeSource(boolean publicMethodsOnly) {_		this.publicMethodsOnly = publicMethodsOnly__		if (jta12Present || ejb3Present) {_			this.annotationParsers = new LinkedHashSet<>(4)__			this.annotationParsers.add(new SpringTransactionAnnotationParser())__			if (jta12Present) {_				this.annotationParsers.add(new JtaTransactionAnnotationParser())__			}_			if (ejb3Present) {_				this.annotationParsers.add(new Ejb3TransactionAnnotationParser())__			}_		}_		else {_			this.annotationParsers = Collections.singleton(new SpringTransactionAnnotationParser())__		}_	};create,a,custom,annotation,transaction,attribute,source,supporting,public,methods,that,carry,the,code,transactional,annotation,or,the,ejb3,link,javax,ejb,transaction,attribute,annotation,param,public,methods,only,whether,to,support,public,methods,that,carry,the,code,transactional,annotation,only,typically,for,use,with,proxy,based,aop,or,protected,private,methods,as,well,typically,used,with,aspect,j,class,weaving;public,annotation,transaction,attribute,source,boolean,public,methods,only,this,public,methods,only,public,methods,only,if,jta12present,ejb3present,this,annotation,parsers,new,linked,hash,set,4,this,annotation,parsers,add,new,spring,transaction,annotation,parser,if,jta12present,this,annotation,parsers,add,new,jta,transaction,annotation,parser,if,ejb3present,this,annotation,parsers,add,new,ejb3transaction,annotation,parser,else,this,annotation,parsers,collections,singleton,new,spring,transaction,annotation,parser
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1328020251;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1355279383;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1356735495;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1364419997;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1446722814;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1467730834;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1493223391;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1495868221;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1502974979;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1530174524;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1532509782;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1533598557;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1533602820;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
AnnotationTransactionAttributeSource -> @Override 	protected boolean allowPublicMethodsOnly();1533808755;By default, only public methods can be made transactional.;@Override_	protected boolean allowPublicMethodsOnly() {_		return this.publicMethodsOnly__	};by,default,only,public,methods,can,be,made,transactional;override,protected,boolean,allow,public,methods,only,return,this,public,methods,only
