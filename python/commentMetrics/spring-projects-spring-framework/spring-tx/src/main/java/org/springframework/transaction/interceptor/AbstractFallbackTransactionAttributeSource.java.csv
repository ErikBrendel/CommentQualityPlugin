# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractFallbackTransactionAttributeSource -> private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1328020251;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;private,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1355352386;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;private,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1356735495;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;private,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1357119239;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;private,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1368482696;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;private,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1385412762;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;private,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1388597808;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;private,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1419270367;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;private TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;private,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1356735495;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1368482696;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1385412762;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1388597808;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					Class<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass())__					logger.debug("Adding transactional method '" + classToLog.getSimpleName() + "." +_							method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,class,class,to,log,target,class,null,target,class,method,get,declaring,class,logger,debug,adding,transactional,method,class,to,log,get,simple,name,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1419270367;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					Class<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass())__					logger.debug("Adding transactional method '" + classToLog.getSimpleName() + "." +_							method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,class,class,to,log,target,class,null,target,class,method,get,declaring,class,logger,debug,adding,transactional,method,class,to,log,get,simple,name,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1437139464;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					Class<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass())__					logger.debug("Adding transactional method '" + classToLog.getSimpleName() + "." +_							method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,class,class,to,log,target,class,null,target,class,method,get,declaring,class,logger,debug,adding,transactional,method,class,to,log,get,simple,name,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1443047594;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					Class<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass())__					logger.debug("Adding transactional method '" + classToLog.getSimpleName() + "." +_							method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,class,class,to,log,target,class,null,target,class,method,get,declaring,class,logger,debug,adding,transactional,method,class,to,log,get,simple,name,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1458999130;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					Class<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass())__					logger.debug("Adding transactional method '" + classToLog.getSimpleName() + "." +_							method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,class,class,to,log,target,class,null,target,class,method,get,declaring,class,logger,debug,adding,transactional,method,class,to,log,get,simple,name,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1459326082;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					Class<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass())__					logger.debug("Adding transactional method '" + classToLog.getSimpleName() + "." +_							method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,class,class,to,log,target,class,null,target,class,method,get,declaring,class,logger,debug,adding,transactional,method,class,to,log,get,simple,name,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1459339984;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					Class<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass())__					logger.debug("Adding transactional method '" + classToLog.getSimpleName() + "." +_							method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,class,class,to,log,target,class,null,target,class,method,get,declaring,class,logger,debug,adding,transactional,method,class,to,log,get,simple,name,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1467730834;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					Class<?> classToLog = (targetClass != null ? targetClass : method.getDeclaringClass())__					logger.debug("Adding transactional method '" + classToLog.getSimpleName() + "." +_							method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,class,class,to,log,target,class,null,target,class,method,get,declaring,class,logger,debug,adding,transactional,method,class,to,log,get,simple,name,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1477045393;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1488283735;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1488303453;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1437139464;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1443047594;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1458999130;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			return findTransactionAttribute(method.getDeclaringClass())__		}_		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,return,find,transaction,attribute,method,get,declaring,class,return,null
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1459326082;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null && ClassUtils.isUserLevelMethod(method)) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			txAtt = findTransactionAttribute(method.getDeclaringClass())__			if (txAtt != null && ClassUtils.isUserLevelMethod(method)) {_				return txAtt__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,class,utils,is,user,level,method,method,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,method,get,declaring,class,if,tx,att,null,class,utils,is,user,level,method,method,return,tx,att,return,null
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1459339984;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null && ClassUtils.isUserLevelMethod(method)) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			txAtt = findTransactionAttribute(method.getDeclaringClass())__			if (txAtt != null && ClassUtils.isUserLevelMethod(method)) {_				return txAtt__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,class,utils,is,user,level,method,method,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,method,get,declaring,class,if,tx,att,null,class,utils,is,user,level,method,method,return,tx,att,return,null
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1467730834;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAtt = findTransactionAttribute(specificMethod)__		if (txAtt != null) {_			return txAtt__		}__		_		txAtt = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAtt != null && ClassUtils.isUserLevelMethod(method)) {_			return txAtt__		}__		if (specificMethod != method) {_			_			txAtt = findTransactionAttribute(method)__			if (txAtt != null) {_				return txAtt__			}_			_			txAtt = findTransactionAttribute(method.getDeclaringClass())__			if (txAtt != null && ClassUtils.isUserLevelMethod(method)) {_				return txAtt__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,att,find,transaction,attribute,specific,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,specific,method,get,declaring,class,if,tx,att,null,class,utils,is,user,level,method,method,return,tx,att,if,specific,method,method,tx,att,find,transaction,attribute,method,if,tx,att,null,return,tx,att,tx,att,find,transaction,attribute,method,get,declaring,class,if,tx,att,null,class,utils,is,user,level,method,method,return,tx,att,return,null
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1477045393;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1488283735;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass);1488303453;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;protected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = ClassUtils.getUserClass(targetClass)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;protected,transaction,attribute,compute,transaction,attribute,method,method,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,class,utils,get,user,class,target,class,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1495868221;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1496837955;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1502974979;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1520528267;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1522716161;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1530174524;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1533808755;Subclasses need to implement this to return the transaction attribute for the_given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method, or {@code null} if none;@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1533908746;Subclasses need to implement this to return the transaction attribute for the_given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method, or {@code null} if none;@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1328020251;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never <code>null</code>)_@param targetClass the target class for this invocation (may be <code>null</code>)_@return TransactionAttribute for this method, or <code>null</code> if the method_is not transactional;public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,code,param,target,class,the,target,class,for,this,invocation,may,be,code,null,code,return,transaction,attribute,for,this,method,or,code,null,code,if,the,method,is,not,transactional;public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1355352386;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never <code>null</code>)_@param targetClass the target class for this invocation (may be <code>null</code>)_@return TransactionAttribute for this method, or <code>null</code> if the method_is not transactional;public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,code,param,target,class,the,target,class,for,this,invocation,may,be,code,null,code,return,transaction,attribute,for,this,method,or,code,null,code,if,the,method,is,not,transactional;public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass);1357119239;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;public TransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass) {_		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAtt = computeTransactionAttribute(method, targetClass)__			_			if (txAtt == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + method.getName() + "' with attribute: " + txAtt)__				}_				this.attributeCache.put(cacheKey, txAtt)__			}_			return txAtt__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;public,transaction,attribute,get,transaction,attribute,method,method,class,target,class,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,att,compute,transaction,attribute,method,target,class,if,tx,att,null,this,attribute,cache,put,cache,key,else,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,get,name,with,attribute,tx,att,this,attribute,cache,put,cache,key,tx,att,return,tx,att
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass);1496837955;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;@Nullable_	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = (targetClass != null ? ClassUtils.getUserClass(targetClass) : null)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;nullable,protected,transaction,attribute,compute,transaction,attribute,method,method,nullable,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,target,class,null,class,utils,get,user,class,target,class,null,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass);1502974979;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;@Nullable_	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = (targetClass != null ? ClassUtils.getUserClass(targetClass) : null)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;nullable,protected,transaction,attribute,compute,transaction,attribute,method,method,nullable,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,target,class,null,class,utils,get,user,class,target,class,null,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass);1520528267;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;@Nullable_	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		Class<?> userClass = (targetClass != null ? ClassUtils.getUserClass(targetClass) : null)__		_		_		Method specificMethod = ClassUtils.getMostSpecificMethod(method, userClass)__		_		specificMethod = BridgeMethodResolver.findBridgedMethod(specificMethod)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;nullable,protected,transaction,attribute,compute,transaction,attribute,method,method,nullable,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,class,user,class,target,class,null,class,utils,get,user,class,target,class,null,method,specific,method,class,utils,get,most,specific,method,method,user,class,specific,method,bridge,method,resolver,find,bridged,method,specific,method,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass);1522716161;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;@Nullable_	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		_		Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;nullable,protected,transaction,attribute,compute,transaction,attribute,method,method,nullable,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,method,specific,method,aop,utils,get,most,specific,method,method,target,class,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass);1530174524;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;@Nullable_	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		_		Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;nullable,protected,transaction,attribute,compute,transaction,attribute,method,method,nullable,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,method,specific,method,aop,utils,get,most,specific,method,method,target,class,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass);1533808755;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;@Nullable_	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		_		Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;nullable,protected,transaction,attribute,compute,transaction,attribute,method,method,nullable,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,method,specific,method,aop,utils,get,most,specific,method,method,target,class,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass);1533908746;Same signature as {@link #getTransactionAttribute}, but doesn't cache the result._{@link #getTransactionAttribute} is effectively a caching decorator for this method._<p>As of 4.1.8, this method can be overridden._@since 4.1.8_@see #getTransactionAttribute;@Nullable_	protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		_		if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {_			return null__		}__		_		_		Method specificMethod = AopUtils.getMostSpecificMethod(method, targetClass)___		_		TransactionAttribute txAttr = findTransactionAttribute(specificMethod)__		if (txAttr != null) {_			return txAttr__		}__		_		txAttr = findTransactionAttribute(specificMethod.getDeclaringClass())__		if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_			return txAttr__		}__		if (specificMethod != method) {_			_			txAttr = findTransactionAttribute(method)__			if (txAttr != null) {_				return txAttr__			}_			_			txAttr = findTransactionAttribute(method.getDeclaringClass())__			if (txAttr != null && ClassUtils.isUserLevelMethod(method)) {_				return txAttr__			}_		}__		return null__	};same,signature,as,link,get,transaction,attribute,but,doesn,t,cache,the,result,link,get,transaction,attribute,is,effectively,a,caching,decorator,for,this,method,p,as,of,4,1,8,this,method,can,be,overridden,since,4,1,8,see,get,transaction,attribute;nullable,protected,transaction,attribute,compute,transaction,attribute,method,method,nullable,class,target,class,if,allow,public,methods,only,modifier,is,public,method,get,modifiers,return,null,method,specific,method,aop,utils,get,most,specific,method,method,target,class,transaction,attribute,tx,attr,find,transaction,attribute,specific,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,specific,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,if,specific,method,method,tx,attr,find,transaction,attribute,method,if,tx,attr,null,return,tx,attr,tx,attr,find,transaction,attribute,method,get,declaring,class,if,tx,attr,null,class,utils,is,user,level,method,method,return,tx,attr,return,null
AbstractFallbackTransactionAttributeSource -> @Override 	@Nullable 	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);1502974979;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	@Nullable_	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,nullable,public,transaction,attribute,get,transaction,attribute,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> @Override 	@Nullable 	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);1520528267;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	@Nullable_	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,nullable,public,transaction,attribute,get,transaction,attribute,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> @Override 	@Nullable 	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);1522716161;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	@Nullable_	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,nullable,public,transaction,attribute,get,transaction,attribute,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> @Override 	@Nullable 	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);1530174524;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return a TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	@Nullable_	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,a,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,nullable,public,transaction,attribute,get,transaction,attribute,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> @Override 	@Nullable 	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);1533808755;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return a TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	@Nullable_	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		TransactionAttribute cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,a,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,nullable,public,transaction,attribute,get,transaction,attribute,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,transaction,attribute,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> @Override 	@Nullable 	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);1533908746;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return a TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	@Nullable_	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		TransactionAttribute cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,a,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,nullable,public,transaction,attribute,get,transaction,attribute,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,transaction,attribute,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,trace,enabled,logger,trace,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1328020251;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or <code>null</code> if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,code,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1355352386;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or <code>null</code> if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,code,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1356735495;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1357119239;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1368482696;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1385412762;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1388597808;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1419270367;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1437139464;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1443047594;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1458999130;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1459326082;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1459339984;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1467730834;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1477045393;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1488283735;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1488303453;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1328020251;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never <code>null</code>)_@param targetClass the target class (may be <code>null</code>)_@return the cache key (never <code>null</code>);protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,code,param,target,class,the,target,class,may,be,code,null,code,return,the,cache,key,never,code,null,code;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1355352386;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never <code>null</code>)_@param targetClass the target class (may be <code>null</code>)_@return the cache key (never <code>null</code>);protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,code,param,target,class,the,target,class,may,be,code,null,code,return,the,cache,key,never,code,null,code;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1356735495;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1357119239;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1368482696;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1385412762;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1388597808;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1419270367;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1437139464;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1443047594;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1458999130;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1459326082;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new DefaultCacheKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,default,cache,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1459339984;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1467730834;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1477045393;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1488283735;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, Class<?> targetClass);1488303453;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1495868221;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1496837955;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1502974979;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1520528267;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1522716161;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1530174524;Subclasses need to implement this to return the transaction attribute_for the given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class_(or {@code null} if none);@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1533808755;Subclasses need to implement this to return the transaction attribute for the_given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class, or {@code null} if none;@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> @Nullable 	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;1533908746;Subclasses need to implement this to return the transaction attribute for the_given class, if any._@param clazz the class to retrieve the attribute for_@return all transaction attribute associated with this class, or {@code null} if none;@Nullable_	protected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,class,if,any,param,clazz,the,class,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,class,or,code,null,if,none;nullable,protected,abstract,transaction,attribute,find,transaction,attribute,class,clazz
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1328020251;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or <code>null</code> if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,code,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1355352386;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or <code>null</code> if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,code,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1356735495;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1357119239;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1368482696;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1385412762;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1388597808;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1419270367;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1437139464;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1443047594;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1458999130;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1459326082;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1459339984;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1467730834;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1477045393;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1488283735;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected abstract TransactionAttribute findTransactionAttribute(Method method)_;1488303453;Subclasses need to implement this to return the transaction attribute_for the given method, if any._@param method the method to retrieve the attribute for_@return all transaction attribute associated with this method_(or {@code null} if none);protected abstract TransactionAttribute findTransactionAttribute(Method method)_;subclasses,need,to,implement,this,to,return,the,transaction,attribute,for,the,given,method,if,any,param,method,the,method,to,retrieve,the,attribute,for,return,all,transaction,attribute,associated,with,this,method,or,code,null,if,none;protected,abstract,transaction,attribute,find,transaction,attribute,method,method
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1328020251;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns <code>false</code>.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false,code;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1355352386;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns <code>false</code>.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false,code;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1356735495;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1357119239;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1368482696;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1385412762;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1388597808;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1419270367;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1437139464;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1443047594;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1458999130;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1459326082;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1459339984;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1467730834;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1477045393;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1488283735;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1488303453;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1495868221;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1496837955;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1502974979;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1520528267;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1522716161;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1530174524;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1533808755;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> protected boolean allowPublicMethodsOnly();1533908746;Should only public methods be allowed to have transactional semantics?_<p>The default implementation returns {@code false}.;protected boolean allowPublicMethodsOnly() {_		return false__	};should,only,public,methods,be,allowed,to,have,transactional,semantics,p,the,default,implementation,returns,code,false;protected,boolean,allow,public,methods,only,return,false
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);1495868221;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> @Override 	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass);1496837955;Determine the transaction attribute for this method invocation._<p>Defaults to the class's transaction attribute if no method attribute is found._@param method the method for the current invocation (never {@code null})_@param targetClass the target class for this invocation (may be {@code null})_@return TransactionAttribute for this method, or {@code null} if the method_is not transactional;@Override_	public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {_		if (method.getDeclaringClass() == Object.class) {_			return null__		}__		_		Object cacheKey = getCacheKey(method, targetClass)__		Object cached = this.attributeCache.get(cacheKey)__		if (cached != null) {_			_			_			if (cached == NULL_TRANSACTION_ATTRIBUTE) {_				return null__			}_			else {_				return (TransactionAttribute) cached__			}_		}_		else {_			_			TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass)__			_			if (txAttr == null) {_				this.attributeCache.put(cacheKey, NULL_TRANSACTION_ATTRIBUTE)__			}_			else {_				String methodIdentification = ClassUtils.getQualifiedMethodName(method, targetClass)__				if (txAttr instanceof DefaultTransactionAttribute) {_					((DefaultTransactionAttribute) txAttr).setDescriptor(methodIdentification)__				}_				if (logger.isDebugEnabled()) {_					logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr)__				}_				this.attributeCache.put(cacheKey, txAttr)__			}_			return txAttr__		}_	};determine,the,transaction,attribute,for,this,method,invocation,p,defaults,to,the,class,s,transaction,attribute,if,no,method,attribute,is,found,param,method,the,method,for,the,current,invocation,never,code,null,param,target,class,the,target,class,for,this,invocation,may,be,code,null,return,transaction,attribute,for,this,method,or,code,null,if,the,method,is,not,transactional;override,public,transaction,attribute,get,transaction,attribute,method,method,nullable,class,target,class,if,method,get,declaring,class,object,class,return,null,object,cache,key,get,cache,key,method,target,class,object,cached,this,attribute,cache,get,cache,key,if,cached,null,if,cached,return,null,else,return,transaction,attribute,cached,else,transaction,attribute,tx,attr,compute,transaction,attribute,method,target,class,if,tx,attr,null,this,attribute,cache,put,cache,key,else,string,method,identification,class,utils,get,qualified,method,name,method,target,class,if,tx,attr,instanceof,default,transaction,attribute,default,transaction,attribute,tx,attr,set,descriptor,method,identification,if,logger,is,debug,enabled,logger,debug,adding,transactional,method,method,identification,with,attribute,tx,attr,this,attribute,cache,put,cache,key,tx,attr,return,tx,attr
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1495868221;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1496837955;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1502974979;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1520528267;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1522716161;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1530174524;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1533808755;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
AbstractFallbackTransactionAttributeSource -> protected Object getCacheKey(Method method, @Nullable Class<?> targetClass);1533908746;Determine a cache key for the given method and target class._<p>Must not produce same key for overloaded methods._Must produce same key for different instances of the same method._@param method the method (never {@code null})_@param targetClass the target class (may be {@code null})_@return the cache key (never {@code null});protected Object getCacheKey(Method method, @Nullable Class<?> targetClass) {_		return new MethodClassKey(method, targetClass)__	};determine,a,cache,key,for,the,given,method,and,target,class,p,must,not,produce,same,key,for,overloaded,methods,must,produce,same,key,for,different,instances,of,the,same,method,param,method,the,method,never,code,null,param,target,class,the,target,class,may,be,code,null,return,the,cache,key,never,code,null;protected,object,get,cache,key,method,method,nullable,class,target,class,return,new,method,class,key,method,target,class
