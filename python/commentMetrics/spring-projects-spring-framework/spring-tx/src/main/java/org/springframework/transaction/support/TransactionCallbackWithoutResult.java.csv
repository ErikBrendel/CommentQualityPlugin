commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;6;;@Override @Nullable public final Object doInTransaction(TransactionStatus status) {     doInTransactionWithoutResult(status).     return null. }
true;protected,abstract;1;1;/**  * Gets called by {@code TransactionTemplate.execute} within a transactional  * context. Does not need to care about transactions itself, although it can retrieve  * and influence the status of the current transaction via the given status object,  * e.g. setting rollback-only.  * <p>A RuntimeException thrown by the callback is treated as application  * exception that enforces a rollback. An exception gets propagated to the  * caller of the template.  * <p>Note when using JTA: JTA transactions only work with transactional  * JNDI resources, so implementations need to use such resources if they  * want transaction support.  * @param status associated transaction status  * @see TransactionTemplate#execute  */ ;/**  * Gets called by {@code TransactionTemplate.execute} within a transactional  * context. Does not need to care about transactions itself, although it can retrieve  * and influence the status of the current transaction via the given status object,  * e.g. setting rollback-only.  * <p>A RuntimeException thrown by the callback is treated as application  * exception that enforces a rollback. An exception gets propagated to the  * caller of the template.  * <p>Note when using JTA: JTA transactions only work with transactional  * JNDI resources, so implementations need to use such resources if they  * want transaction support.  * @param status associated transaction status  * @see TransactionTemplate#execute  */ protected abstract void doInTransactionWithoutResult(TransactionStatus status).
