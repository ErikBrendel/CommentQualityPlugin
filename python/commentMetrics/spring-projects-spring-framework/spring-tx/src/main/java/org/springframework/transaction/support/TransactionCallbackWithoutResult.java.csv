# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionCallbackWithoutResult -> protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;1328020251;Gets called by <code>TransactionTemplate.execute</code> within a transactional_context. Does not need to care about transactions itself, although it can retrieve_and influence the status of the current transaction via the given status object,_e.g. setting rollback-only.__<p>A RuntimeException thrown by the callback is treated as application_exception that enforces a rollback. An exception gets propagated to the_caller of the template.__<p>Note when using JTA: JTA transactions only work with transactional_JNDI resources, so implementations need to use such resources if they_want transaction support.__@param status associated transaction status_@see TransactionTemplate#execute;protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;gets,called,by,code,transaction,template,execute,code,within,a,transactional,context,does,not,need,to,care,about,transactions,itself,although,it,can,retrieve,and,influence,the,status,of,the,current,transaction,via,the,given,status,object,e,g,setting,rollback,only,p,a,runtime,exception,thrown,by,the,callback,is,treated,as,application,exception,that,enforces,a,rollback,an,exception,gets,propagated,to,the,caller,of,the,template,p,note,when,using,jta,jta,transactions,only,work,with,transactional,jndi,resources,so,implementations,need,to,use,such,resources,if,they,want,transaction,support,param,status,associated,transaction,status,see,transaction,template,execute;protected,abstract,void,do,in,transaction,without,result,transaction,status,status
TransactionCallbackWithoutResult -> protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;1356735495;Gets called by {@code TransactionTemplate.execute} within a transactional_context. Does not need to care about transactions itself, although it can retrieve_and influence the status of the current transaction via the given status object,_e.g. setting rollback-only.__<p>A RuntimeException thrown by the callback is treated as application_exception that enforces a rollback. An exception gets propagated to the_caller of the template.__<p>Note when using JTA: JTA transactions only work with transactional_JNDI resources, so implementations need to use such resources if they_want transaction support.__@param status associated transaction status_@see TransactionTemplate#execute;protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;gets,called,by,code,transaction,template,execute,within,a,transactional,context,does,not,need,to,care,about,transactions,itself,although,it,can,retrieve,and,influence,the,status,of,the,current,transaction,via,the,given,status,object,e,g,setting,rollback,only,p,a,runtime,exception,thrown,by,the,callback,is,treated,as,application,exception,that,enforces,a,rollback,an,exception,gets,propagated,to,the,caller,of,the,template,p,note,when,using,jta,jta,transactions,only,work,with,transactional,jndi,resources,so,implementations,need,to,use,such,resources,if,they,want,transaction,support,param,status,associated,transaction,status,see,transaction,template,execute;protected,abstract,void,do,in,transaction,without,result,transaction,status,status
TransactionCallbackWithoutResult -> protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;1357119239;Gets called by {@code TransactionTemplate.execute} within a transactional_context. Does not need to care about transactions itself, although it can retrieve_and influence the status of the current transaction via the given status object,_e.g. setting rollback-only.__<p>A RuntimeException thrown by the callback is treated as application_exception that enforces a rollback. An exception gets propagated to the_caller of the template.__<p>Note when using JTA: JTA transactions only work with transactional_JNDI resources, so implementations need to use such resources if they_want transaction support.__@param status associated transaction status_@see TransactionTemplate#execute;protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;gets,called,by,code,transaction,template,execute,within,a,transactional,context,does,not,need,to,care,about,transactions,itself,although,it,can,retrieve,and,influence,the,status,of,the,current,transaction,via,the,given,status,object,e,g,setting,rollback,only,p,a,runtime,exception,thrown,by,the,callback,is,treated,as,application,exception,that,enforces,a,rollback,an,exception,gets,propagated,to,the,caller,of,the,template,p,note,when,using,jta,jta,transactions,only,work,with,transactional,jndi,resources,so,implementations,need,to,use,such,resources,if,they,want,transaction,support,param,status,associated,transaction,status,see,transaction,template,execute;protected,abstract,void,do,in,transaction,without,result,transaction,status,status
TransactionCallbackWithoutResult -> protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;1368482696;Gets called by {@code TransactionTemplate.execute} within a transactional_context. Does not need to care about transactions itself, although it can retrieve_and influence the status of the current transaction via the given status object,_e.g. setting rollback-only.__<p>A RuntimeException thrown by the callback is treated as application_exception that enforces a rollback. An exception gets propagated to the_caller of the template.__<p>Note when using JTA: JTA transactions only work with transactional_JNDI resources, so implementations need to use such resources if they_want transaction support.__@param status associated transaction status_@see TransactionTemplate#execute;protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;gets,called,by,code,transaction,template,execute,within,a,transactional,context,does,not,need,to,care,about,transactions,itself,although,it,can,retrieve,and,influence,the,status,of,the,current,transaction,via,the,given,status,object,e,g,setting,rollback,only,p,a,runtime,exception,thrown,by,the,callback,is,treated,as,application,exception,that,enforces,a,rollback,an,exception,gets,propagated,to,the,caller,of,the,template,p,note,when,using,jta,jta,transactions,only,work,with,transactional,jndi,resources,so,implementations,need,to,use,such,resources,if,they,want,transaction,support,param,status,associated,transaction,status,see,transaction,template,execute;protected,abstract,void,do,in,transaction,without,result,transaction,status,status
TransactionCallbackWithoutResult -> protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;1486720600;Gets called by {@code TransactionTemplate.execute} within a transactional_context. Does not need to care about transactions itself, although it can retrieve_and influence the status of the current transaction via the given status object,_e.g. setting rollback-only._<p>A RuntimeException thrown by the callback is treated as application_exception that enforces a rollback. An exception gets propagated to the_caller of the template._<p>Note when using JTA: JTA transactions only work with transactional_JNDI resources, so implementations need to use such resources if they_want transaction support._@param status associated transaction status_@see TransactionTemplate#execute;protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;gets,called,by,code,transaction,template,execute,within,a,transactional,context,does,not,need,to,care,about,transactions,itself,although,it,can,retrieve,and,influence,the,status,of,the,current,transaction,via,the,given,status,object,e,g,setting,rollback,only,p,a,runtime,exception,thrown,by,the,callback,is,treated,as,application,exception,that,enforces,a,rollback,an,exception,gets,propagated,to,the,caller,of,the,template,p,note,when,using,jta,jta,transactions,only,work,with,transactional,jndi,resources,so,implementations,need,to,use,such,resources,if,they,want,transaction,support,param,status,associated,transaction,status,see,transaction,template,execute;protected,abstract,void,do,in,transaction,without,result,transaction,status,status
TransactionCallbackWithoutResult -> protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;1502974979;Gets called by {@code TransactionTemplate.execute} within a transactional_context. Does not need to care about transactions itself, although it can retrieve_and influence the status of the current transaction via the given status object,_e.g. setting rollback-only._<p>A RuntimeException thrown by the callback is treated as application_exception that enforces a rollback. An exception gets propagated to the_caller of the template._<p>Note when using JTA: JTA transactions only work with transactional_JNDI resources, so implementations need to use such resources if they_want transaction support._@param status associated transaction status_@see TransactionTemplate#execute;protected abstract void doInTransactionWithoutResult(TransactionStatus status)_;gets,called,by,code,transaction,template,execute,within,a,transactional,context,does,not,need,to,care,about,transactions,itself,although,it,can,retrieve,and,influence,the,status,of,the,current,transaction,via,the,given,status,object,e,g,setting,rollback,only,p,a,runtime,exception,thrown,by,the,callback,is,treated,as,application,exception,that,enforces,a,rollback,an,exception,gets,propagated,to,the,caller,of,the,template,p,note,when,using,jta,jta,transactions,only,work,with,transactional,jndi,resources,so,implementations,need,to,use,such,resources,if,they,want,transaction,support,param,status,associated,transaction,status,see,transaction,template,execute;protected,abstract,void,do,in,transaction,without,result,transaction,status,status
