# id;timestamp;commentText;codeText;commentWords;codeWords
SavepointManager -> void releaseSavepoint(Object savepoint) throws TransactionException_;1328020251;Explicitly release the given savepoint._<p>Note that most transaction managers will automatically release_savepoints at transaction completion._<p>Implementations should fail as silently as possible if_proper resource cleanup will still happen at transaction completion._@param savepoint the savepoint to release_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the release failed_@see java.sql.Connection#releaseSavepoint;void releaseSavepoint(Object savepoint) throws TransactionException_;explicitly,release,the,given,savepoint,p,note,that,most,transaction,managers,will,automatically,release,savepoints,at,transaction,completion,p,implementations,should,fail,as,silently,as,possible,if,proper,resource,cleanup,will,still,happen,at,transaction,completion,param,savepoint,the,savepoint,to,release,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,release,failed,see,java,sql,connection,release,savepoint;void,release,savepoint,object,savepoint,throws,transaction,exception
SavepointManager -> void releaseSavepoint(Object savepoint) throws TransactionException_;1356735495;Explicitly release the given savepoint._<p>Note that most transaction managers will automatically release_savepoints at transaction completion._<p>Implementations should fail as silently as possible if_proper resource cleanup will still happen at transaction completion._@param savepoint the savepoint to release_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the release failed_@see java.sql.Connection#releaseSavepoint;void releaseSavepoint(Object savepoint) throws TransactionException_;explicitly,release,the,given,savepoint,p,note,that,most,transaction,managers,will,automatically,release,savepoints,at,transaction,completion,p,implementations,should,fail,as,silently,as,possible,if,proper,resource,cleanup,will,still,happen,at,transaction,completion,param,savepoint,the,savepoint,to,release,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,release,failed,see,java,sql,connection,release,savepoint;void,release,savepoint,object,savepoint,throws,transaction,exception
SavepointManager -> void releaseSavepoint(Object savepoint) throws TransactionException_;1411399750;Explicitly release the given savepoint._<p>Note that most transaction managers will automatically release_savepoints on transaction completion._<p>Implementations should fail as silently as possible if proper_resource cleanup will eventually happen at transaction completion._@param savepoint the savepoint to release_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the release failed_@see java.sql.Connection#releaseSavepoint;void releaseSavepoint(Object savepoint) throws TransactionException_;explicitly,release,the,given,savepoint,p,note,that,most,transaction,managers,will,automatically,release,savepoints,on,transaction,completion,p,implementations,should,fail,as,silently,as,possible,if,proper,resource,cleanup,will,eventually,happen,at,transaction,completion,param,savepoint,the,savepoint,to,release,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,release,failed,see,java,sql,connection,release,savepoint;void,release,savepoint,object,savepoint,throws,transaction,exception
SavepointManager -> Object createSavepoint() throws TransactionException_;1328020251;Create a new savepoint. You can roll back to a specific savepoint_via <code>rollbackToSavepoint</code>, and explicitly release a_savepoint that you don't need anymore via <code>releaseSavepoint</code>._<p>Note that most transaction managers will automatically release_savepoints at transaction completion._@return a savepoint object, to be passed into rollbackToSavepoint_or releaseSavepoint_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the savepoint could not be created,_for example because the transaction is not in an appropriate state_@see java.sql.Connection#setSavepoint;Object createSavepoint() throws TransactionException_;create,a,new,savepoint,you,can,roll,back,to,a,specific,savepoint,via,code,rollback,to,savepoint,code,and,explicitly,release,a,savepoint,that,you,don,t,need,anymore,via,code,release,savepoint,code,p,note,that,most,transaction,managers,will,automatically,release,savepoints,at,transaction,completion,return,a,savepoint,object,to,be,passed,into,rollback,to,savepoint,or,release,savepoint,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,savepoint,could,not,be,created,for,example,because,the,transaction,is,not,in,an,appropriate,state,see,java,sql,connection,set,savepoint;object,create,savepoint,throws,transaction,exception
SavepointManager -> Object createSavepoint() throws TransactionException_;1356735495;Create a new savepoint. You can roll back to a specific savepoint_via {@code rollbackToSavepoint}, and explicitly release a_savepoint that you don't need anymore via {@code releaseSavepoint}._<p>Note that most transaction managers will automatically release_savepoints at transaction completion._@return a savepoint object, to be passed into rollbackToSavepoint_or releaseSavepoint_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the savepoint could not be created,_for example because the transaction is not in an appropriate state_@see java.sql.Connection#setSavepoint;Object createSavepoint() throws TransactionException_;create,a,new,savepoint,you,can,roll,back,to,a,specific,savepoint,via,code,rollback,to,savepoint,and,explicitly,release,a,savepoint,that,you,don,t,need,anymore,via,code,release,savepoint,p,note,that,most,transaction,managers,will,automatically,release,savepoints,at,transaction,completion,return,a,savepoint,object,to,be,passed,into,rollback,to,savepoint,or,release,savepoint,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,savepoint,could,not,be,created,for,example,because,the,transaction,is,not,in,an,appropriate,state,see,java,sql,connection,set,savepoint;object,create,savepoint,throws,transaction,exception
SavepointManager -> Object createSavepoint() throws TransactionException_;1411399750;Create a new savepoint. You can roll back to a specific savepoint_via {@code rollbackToSavepoint}, and explicitly release a savepoint_that you don't need anymore via {@code releaseSavepoint}._<p>Note that most transaction managers will automatically release_savepoints at transaction completion._@return a savepoint object, to be passed into_{@link #rollbackToSavepoint} or {@link #releaseSavepoint}_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the savepoint could not be created,_for example because the transaction is not in an appropriate state_@see java.sql.Connection#setSavepoint;Object createSavepoint() throws TransactionException_;create,a,new,savepoint,you,can,roll,back,to,a,specific,savepoint,via,code,rollback,to,savepoint,and,explicitly,release,a,savepoint,that,you,don,t,need,anymore,via,code,release,savepoint,p,note,that,most,transaction,managers,will,automatically,release,savepoints,at,transaction,completion,return,a,savepoint,object,to,be,passed,into,link,rollback,to,savepoint,or,link,release,savepoint,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,savepoint,could,not,be,created,for,example,because,the,transaction,is,not,in,an,appropriate,state,see,java,sql,connection,set,savepoint;object,create,savepoint,throws,transaction,exception
SavepointManager -> void rollbackToSavepoint(Object savepoint) throws TransactionException_;1328020251;Roll back to the given savepoint. The savepoint will be_automatically released afterwards._@param savepoint the savepoint to roll back to_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the rollback failed_@see java.sql.Connection#rollback(java.sql.Savepoint);void rollbackToSavepoint(Object savepoint) throws TransactionException_;roll,back,to,the,given,savepoint,the,savepoint,will,be,automatically,released,afterwards,param,savepoint,the,savepoint,to,roll,back,to,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,rollback,failed,see,java,sql,connection,rollback,java,sql,savepoint;void,rollback,to,savepoint,object,savepoint,throws,transaction,exception
SavepointManager -> void rollbackToSavepoint(Object savepoint) throws TransactionException_;1356735495;Roll back to the given savepoint. The savepoint will be_automatically released afterwards._@param savepoint the savepoint to roll back to_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the rollback failed_@see java.sql.Connection#rollback(java.sql.Savepoint);void rollbackToSavepoint(Object savepoint) throws TransactionException_;roll,back,to,the,given,savepoint,the,savepoint,will,be,automatically,released,afterwards,param,savepoint,the,savepoint,to,roll,back,to,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,rollback,failed,see,java,sql,connection,rollback,java,sql,savepoint;void,rollback,to,savepoint,object,savepoint,throws,transaction,exception
SavepointManager -> void rollbackToSavepoint(Object savepoint) throws TransactionException_;1411399750;Roll back to the given savepoint._<p>The savepoint will <i>not</i> be automatically released afterwards._You may explicitly call {@link #releaseSavepoint(Object)} or rely on_automatic release on transaction completion._@param savepoint the savepoint to roll back to_@throws NestedTransactionNotSupportedException if the underlying_transaction does not support savepoints_@throws TransactionException if the rollback failed_@see java.sql.Connection#rollback(java.sql.Savepoint);void rollbackToSavepoint(Object savepoint) throws TransactionException_;roll,back,to,the,given,savepoint,p,the,savepoint,will,i,not,i,be,automatically,released,afterwards,you,may,explicitly,call,link,release,savepoint,object,or,rely,on,automatic,release,on,transaction,completion,param,savepoint,the,savepoint,to,roll,back,to,throws,nested,transaction,not,supported,exception,if,the,underlying,transaction,does,not,support,savepoints,throws,transaction,exception,if,the,rollback,failed,see,java,sql,connection,rollback,java,sql,savepoint;void,rollback,to,savepoint,object,savepoint,throws,transaction,exception
