commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Create a new savepoint. You can roll back to a specific savepoint  * via {@code rollbackToSavepoint}, and explicitly release a savepoint  * that you don't need anymore via {@code releaseSavepoint}.  * <p>Note that most transaction managers will automatically release  * savepoints at transaction completion.  * @return a savepoint object, to be passed into  * {@link #rollbackToSavepoint} or {@link #releaseSavepoint}  * @throws NestedTransactionNotSupportedException if the underlying  * transaction does not support savepoints  * @throws TransactionException if the savepoint could not be created,  * for example because the transaction is not in an appropriate state  * @see java.sql.Connection#setSavepoint  */ ;/**  * Create a new savepoint. You can roll back to a specific savepoint  * via {@code rollbackToSavepoint}, and explicitly release a savepoint  * that you don't need anymore via {@code releaseSavepoint}.  * <p>Note that most transaction managers will automatically release  * savepoints at transaction completion.  * @return a savepoint object, to be passed into  * {@link #rollbackToSavepoint} or {@link #releaseSavepoint}  * @throws NestedTransactionNotSupportedException if the underlying  * transaction does not support savepoints  * @throws TransactionException if the savepoint could not be created,  * for example because the transaction is not in an appropriate state  * @see java.sql.Connection#setSavepoint  */ Object createSavepoint() throws TransactionException.
true;;1;1;/**  * Roll back to the given savepoint.  * <p>The savepoint will <i>not</i> be automatically released afterwards.  * You may explicitly call {@link #releaseSavepoint(Object)} or rely on  * automatic release on transaction completion.  * @param savepoint the savepoint to roll back to  * @throws NestedTransactionNotSupportedException if the underlying  * transaction does not support savepoints  * @throws TransactionException if the rollback failed  * @see java.sql.Connection#rollback(java.sql.Savepoint)  */ ;/**  * Roll back to the given savepoint.  * <p>The savepoint will <i>not</i> be automatically released afterwards.  * You may explicitly call {@link #releaseSavepoint(Object)} or rely on  * automatic release on transaction completion.  * @param savepoint the savepoint to roll back to  * @throws NestedTransactionNotSupportedException if the underlying  * transaction does not support savepoints  * @throws TransactionException if the rollback failed  * @see java.sql.Connection#rollback(java.sql.Savepoint)  */ void rollbackToSavepoint(Object savepoint) throws TransactionException.
true;;1;1;/**  * Explicitly release the given savepoint.  * <p>Note that most transaction managers will automatically release  * savepoints on transaction completion.  * <p>Implementations should fail as silently as possible if proper  * resource cleanup will eventually happen at transaction completion.  * @param savepoint the savepoint to release  * @throws NestedTransactionNotSupportedException if the underlying  * transaction does not support savepoints  * @throws TransactionException if the release failed  * @see java.sql.Connection#releaseSavepoint  */ ;/**  * Explicitly release the given savepoint.  * <p>Note that most transaction managers will automatically release  * savepoints on transaction completion.  * <p>Implementations should fail as silently as possible if proper  * resource cleanup will eventually happen at transaction completion.  * @param savepoint the savepoint to release  * @throws NestedTransactionNotSupportedException if the underlying  * transaction does not support savepoints  * @throws TransactionException if the release failed  * @see java.sql.Connection#releaseSavepoint  */ void releaseSavepoint(Object savepoint) throws TransactionException.
