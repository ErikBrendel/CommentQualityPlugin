# id;timestamp;commentText;codeText;commentWords;codeWords
ConnectionFactoryUtils -> public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException;1328020251;Actually obtain a CCI Connection from the given ConnectionFactory._Same as {@link #getConnection}, but throwing the original ResourceException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws ResourceException if thrown by CCI API methods_@see #doReleaseConnection;public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException {_		Assert.notNull(cf, "No ConnectionFactory specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		if (conHolder != null) {_			return conHolder.getConnection()__		}__		logger.debug("Opening CCI Connection")__		Connection con = cf.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for CCI Connection")__			conHolder = new ConnectionHolder(con)__			conHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.registerSynchronization(new ConnectionSynchronization(conHolder, cf))__			TransactionSynchronizationManager.bindResource(cf, conHolder)__		}__		return con__	};actually,obtain,a,cci,connection,from,the,given,connection,factory,same,as,link,get,connection,but,throwing,the,original,resource,exception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,resource,exception,if,thrown,by,cci,api,methods,see,do,release,connection;public,static,connection,do,get,connection,connection,factory,cf,throws,resource,exception,assert,not,null,cf,no,connection,factory,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,if,con,holder,null,return,con,holder,get,connection,logger,debug,opening,cci,connection,connection,con,cf,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,cci,connection,con,holder,new,connection,holder,con,con,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,con,holder,cf,transaction,synchronization,manager,bind,resource,cf,con,holder,return,con
ConnectionFactoryUtils -> public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException;1356735495;Actually obtain a CCI Connection from the given ConnectionFactory._Same as {@link #getConnection}, but throwing the original ResourceException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws ResourceException if thrown by CCI API methods_@see #doReleaseConnection;public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException {_		Assert.notNull(cf, "No ConnectionFactory specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		if (conHolder != null) {_			return conHolder.getConnection()__		}__		logger.debug("Opening CCI Connection")__		Connection con = cf.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for CCI Connection")__			conHolder = new ConnectionHolder(con)__			conHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.registerSynchronization(new ConnectionSynchronization(conHolder, cf))__			TransactionSynchronizationManager.bindResource(cf, conHolder)__		}__		return con__	};actually,obtain,a,cci,connection,from,the,given,connection,factory,same,as,link,get,connection,but,throwing,the,original,resource,exception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,resource,exception,if,thrown,by,cci,api,methods,see,do,release,connection;public,static,connection,do,get,connection,connection,factory,cf,throws,resource,exception,assert,not,null,cf,no,connection,factory,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,if,con,holder,null,return,con,holder,get,connection,logger,debug,opening,cci,connection,connection,con,cf,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,cci,connection,con,holder,new,connection,holder,con,con,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,con,holder,cf,transaction,synchronization,manager,bind,resource,cf,con,holder,return,con
ConnectionFactoryUtils -> public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException;1495868221;Actually obtain a CCI Connection from the given ConnectionFactory._Same as {@link #getConnection}, but throwing the original ResourceException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws ResourceException if thrown by CCI API methods_@see #doReleaseConnection;public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException {_		Assert.notNull(cf, "No ConnectionFactory specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		if (conHolder != null) {_			return conHolder.getConnection()__		}__		logger.debug("Opening CCI Connection")__		Connection con = cf.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for CCI Connection")__			conHolder = new ConnectionHolder(con)__			conHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.registerSynchronization(new ConnectionSynchronization(conHolder, cf))__			TransactionSynchronizationManager.bindResource(cf, conHolder)__		}__		return con__	};actually,obtain,a,cci,connection,from,the,given,connection,factory,same,as,link,get,connection,but,throwing,the,original,resource,exception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,resource,exception,if,thrown,by,cci,api,methods,see,do,release,connection;public,static,connection,do,get,connection,connection,factory,cf,throws,resource,exception,assert,not,null,cf,no,connection,factory,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,if,con,holder,null,return,con,holder,get,connection,logger,debug,opening,cci,connection,connection,con,cf,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,cci,connection,con,holder,new,connection,holder,con,con,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,con,holder,cf,transaction,synchronization,manager,bind,resource,cf,con,holder,return,con
ConnectionFactoryUtils -> public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException;1496837955;Actually obtain a CCI Connection from the given ConnectionFactory._Same as {@link #getConnection}, but throwing the original ResourceException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws ResourceException if thrown by CCI API methods_@see #doReleaseConnection;public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException {_		Assert.notNull(cf, "No ConnectionFactory specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		if (conHolder != null) {_			return conHolder.getConnection()__		}__		logger.debug("Opening CCI Connection")__		Connection con = cf.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			logger.debug("Registering transaction synchronization for CCI Connection")__			conHolder = new ConnectionHolder(con)__			conHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.registerSynchronization(new ConnectionSynchronization(conHolder, cf))__			TransactionSynchronizationManager.bindResource(cf, conHolder)__		}__		return con__	};actually,obtain,a,cci,connection,from,the,given,connection,factory,same,as,link,get,connection,but,throwing,the,original,resource,exception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,resource,exception,if,thrown,by,cci,api,methods,see,do,release,connection;public,static,connection,do,get,connection,connection,factory,cf,throws,resource,exception,assert,not,null,cf,no,connection,factory,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,if,con,holder,null,return,con,holder,get,connection,logger,debug,opening,cci,connection,connection,con,cf,get,connection,if,transaction,synchronization,manager,is,synchronization,active,logger,debug,registering,transaction,synchronization,for,cci,connection,con,holder,new,connection,holder,con,con,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,con,holder,cf,transaction,synchronization,manager,bind,resource,cf,con,holder,return,con
ConnectionFactoryUtils -> public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException;1543877450;Actually obtain a CCI Connection from the given ConnectionFactory._Same as {@link #getConnection}, but throwing the original ResourceException._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws ResourceException if thrown by CCI API methods_@see #doReleaseConnection;public static Connection doGetConnection(ConnectionFactory cf) throws ResourceException {_		Assert.notNull(cf, "No ConnectionFactory specified")___		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		if (conHolder != null) {_			return conHolder.getConnection()__		}__		logger.debug("Opening CCI Connection")__		Connection con = cf.getConnection()___		if (TransactionSynchronizationManager.isSynchronizationActive()) {_			conHolder = new ConnectionHolder(con)__			conHolder.setSynchronizedWithTransaction(true)__			TransactionSynchronizationManager.registerSynchronization(new ConnectionSynchronization(conHolder, cf))__			TransactionSynchronizationManager.bindResource(cf, conHolder)__		}__		return con__	};actually,obtain,a,cci,connection,from,the,given,connection,factory,same,as,link,get,connection,but,throwing,the,original,resource,exception,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,resource,exception,if,thrown,by,cci,api,methods,see,do,release,connection;public,static,connection,do,get,connection,connection,factory,cf,throws,resource,exception,assert,not,null,cf,no,connection,factory,specified,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,if,con,holder,null,return,con,holder,get,connection,logger,debug,opening,cci,connection,connection,con,cf,get,connection,if,transaction,synchronization,manager,is,synchronization,active,con,holder,new,connection,holder,con,con,holder,set,synchronized,with,transaction,true,transaction,synchronization,manager,register,synchronization,new,connection,synchronization,con,holder,cf,transaction,synchronization,manager,bind,resource,cf,con,holder,return,con
ConnectionFactoryUtils -> public static void doReleaseConnection(Connection con, ConnectionFactory cf) throws ResourceException;1328020251;Actually close the given Connection, obtained from the given ConnectionFactory._Same as {@link #releaseConnection}, but throwing the original ResourceException._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param con the Connection to close if necessary_(if this is <code>null</code>, the call will be ignored)_@param cf the ConnectionFactory that the Connection was obtained from_(can be <code>null</code>)_@throws ResourceException if thrown by JCA CCI methods_@see #doGetConnection;public static void doReleaseConnection(Connection con, ConnectionFactory cf) throws ResourceException {_		if (con == null || isConnectionTransactional(con, cf)) {_			return__		}_		con.close()__	};actually,close,the,given,connection,obtained,from,the,given,connection,factory,same,as,link,release,connection,but,throwing,the,original,resource,exception,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,code,the,call,will,be,ignored,param,cf,the,connection,factory,that,the,connection,was,obtained,from,can,be,code,null,code,throws,resource,exception,if,thrown,by,jca,cci,methods,see,do,get,connection;public,static,void,do,release,connection,connection,con,connection,factory,cf,throws,resource,exception,if,con,null,is,connection,transactional,con,cf,return,con,close
ConnectionFactoryUtils -> public static void doReleaseConnection(Connection con, ConnectionFactory cf) throws ResourceException;1356735495;Actually close the given Connection, obtained from the given ConnectionFactory._Same as {@link #releaseConnection}, but throwing the original ResourceException._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param cf the ConnectionFactory that the Connection was obtained from_(can be {@code null})_@throws ResourceException if thrown by JCA CCI methods_@see #doGetConnection;public static void doReleaseConnection(Connection con, ConnectionFactory cf) throws ResourceException {_		if (con == null || isConnectionTransactional(con, cf)) {_			return__		}_		con.close()__	};actually,close,the,given,connection,obtained,from,the,given,connection,factory,same,as,link,release,connection,but,throwing,the,original,resource,exception,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,cf,the,connection,factory,that,the,connection,was,obtained,from,can,be,code,null,throws,resource,exception,if,thrown,by,jca,cci,methods,see,do,get,connection;public,static,void,do,release,connection,connection,con,connection,factory,cf,throws,resource,exception,if,con,null,is,connection,transactional,con,cf,return,con,close
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf, @Nullable ConnectionSpec spec) 			throws CannotGetCciConnectionException;1495868221;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@param spec the ConnectionSpec for the desired Connection (may be {@code null})._Note: If this is specified, a new Connection will be obtained for every call,_without participating in a shared transactional Connection._@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf, @Nullable ConnectionSpec spec)_			throws CannotGetCciConnectionException {_		try {_			if (spec != null) {_				Assert.notNull(cf, "No ConnectionFactory specified")__				return cf.getConnection(spec)__			}_			else {_				return doGetConnection(cf)__			}_		}_		catch (ResourceException ex) {_			throw new CannotGetCciConnectionException("Could not get CCI Connection", ex)__		}_	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,param,spec,the,connection,spec,for,the,desired,connection,may,be,code,null,note,if,this,is,specified,a,new,connection,will,be,obtained,for,every,call,without,participating,in,a,shared,transactional,connection,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,nullable,connection,spec,spec,throws,cannot,get,cci,connection,exception,try,if,spec,null,assert,not,null,cf,no,connection,factory,specified,return,cf,get,connection,spec,else,return,do,get,connection,cf,catch,resource,exception,ex,throw,new,cannot,get,cci,connection,exception,could,not,get,cci,connection,ex
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf, @Nullable ConnectionSpec spec) 			throws CannotGetCciConnectionException;1496837955;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@param spec the ConnectionSpec for the desired Connection (may be {@code null})._Note: If this is specified, a new Connection will be obtained for every call,_without participating in a shared transactional Connection._@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf, @Nullable ConnectionSpec spec)_			throws CannotGetCciConnectionException {_		try {_			if (spec != null) {_				Assert.notNull(cf, "No ConnectionFactory specified")__				return cf.getConnection(spec)__			}_			else {_				return doGetConnection(cf)__			}_		}_		catch (ResourceException ex) {_			throw new CannotGetCciConnectionException("Could not get CCI Connection", ex)__		}_	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,param,spec,the,connection,spec,for,the,desired,connection,may,be,code,null,note,if,this,is,specified,a,new,connection,will,be,obtained,for,every,call,without,participating,in,a,shared,transactional,connection,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,nullable,connection,spec,spec,throws,cannot,get,cci,connection,exception,try,if,spec,null,assert,not,null,cf,no,connection,factory,specified,return,cf,get,connection,spec,else,return,do,get,connection,cf,catch,resource,exception,ex,throw,new,cannot,get,cci,connection,exception,could,not,get,cci,connection,ex
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf, @Nullable ConnectionSpec spec) 			throws CannotGetCciConnectionException;1543877450;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@param spec the ConnectionSpec for the desired Connection (may be {@code null})._Note: If this is specified, a new Connection will be obtained for every call,_without participating in a shared transactional Connection._@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf, @Nullable ConnectionSpec spec)_			throws CannotGetCciConnectionException {_		try {_			if (spec != null) {_				Assert.notNull(cf, "No ConnectionFactory specified")__				return cf.getConnection(spec)__			}_			else {_				return doGetConnection(cf)__			}_		}_		catch (ResourceException ex) {_			throw new CannotGetCciConnectionException("Could not get CCI Connection", ex)__		}_	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,param,spec,the,connection,spec,for,the,desired,connection,may,be,code,null,note,if,this,is,specified,a,new,connection,will,be,obtained,for,every,call,without,participating,in,a,shared,transactional,connection,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,nullable,connection,spec,spec,throws,cannot,get,cci,connection,exception,try,if,spec,null,assert,not,null,cf,no,connection,factory,specified,return,cf,get,connection,spec,else,return,do,get,connection,cf,catch,resource,exception,ex,throw,new,cannot,get,cci,connection,exception,could,not,get,cci,connection,ex
ConnectionFactoryUtils -> public static void releaseConnection(@Nullable Connection con, @Nullable ConnectionFactory cf);1496837955;Close the given Connection, obtained from the given ConnectionFactory,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param cf the ConnectionFactory that the Connection was obtained from_(can be {@code null})_@see #getConnection;public static void releaseConnection(@Nullable Connection con, @Nullable ConnectionFactory cf) {_		try {_			doReleaseConnection(con, cf)__		}_		catch (ResourceException ex) {_			logger.debug("Could not close CCI Connection", ex)__		}_		catch (Throwable ex) {_			_			logger.debug("Unexpected exception on closing CCI Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,connection,factory,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,cf,the,connection,factory,that,the,connection,was,obtained,from,can,be,code,null,see,get,connection;public,static,void,release,connection,nullable,connection,con,nullable,connection,factory,cf,try,do,release,connection,con,cf,catch,resource,exception,ex,logger,debug,could,not,close,cci,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,cci,connection,ex
ConnectionFactoryUtils -> public static void releaseConnection(@Nullable Connection con, @Nullable ConnectionFactory cf);1543877450;Close the given Connection, obtained from the given ConnectionFactory,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param cf the ConnectionFactory that the Connection was obtained from_(can be {@code null})_@see #getConnection;public static void releaseConnection(@Nullable Connection con, @Nullable ConnectionFactory cf) {_		try {_			doReleaseConnection(con, cf)__		}_		catch (ResourceException ex) {_			logger.debug("Could not close CCI Connection", ex)__		}_		catch (Throwable ex) {_			_			logger.debug("Unexpected exception on closing CCI Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,connection,factory,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,cf,the,connection,factory,that,the,connection,was,obtained,from,can,be,code,null,see,get,connection;public,static,void,release,connection,nullable,connection,con,nullable,connection,factory,cf,try,do,release,connection,con,cf,catch,resource,exception,ex,logger,debug,could,not,close,cci,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,cci,connection,ex
ConnectionFactoryUtils -> public static void releaseConnection(Connection con, ConnectionFactory cf);1328020251;Close the given Connection, obtained from the given ConnectionFactory,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is <code>null</code>, the call will be ignored)_@param cf the ConnectionFactory that the Connection was obtained from_(can be <code>null</code>)_@see #getConnection;public static void releaseConnection(Connection con, ConnectionFactory cf) {_		try {_			doReleaseConnection(con, cf)__		}_		catch (ResourceException ex) {_			logger.debug("Could not close CCI Connection", ex)__		}_		catch (Throwable ex) {_			_			logger.debug("Unexpected exception on closing CCI Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,connection,factory,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,code,the,call,will,be,ignored,param,cf,the,connection,factory,that,the,connection,was,obtained,from,can,be,code,null,code,see,get,connection;public,static,void,release,connection,connection,con,connection,factory,cf,try,do,release,connection,con,cf,catch,resource,exception,ex,logger,debug,could,not,close,cci,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,cci,connection,ex
ConnectionFactoryUtils -> public static void releaseConnection(Connection con, ConnectionFactory cf);1356735495;Close the given Connection, obtained from the given ConnectionFactory,_if it is not managed externally (that is, not bound to the thread)._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param cf the ConnectionFactory that the Connection was obtained from_(can be {@code null})_@see #getConnection;public static void releaseConnection(Connection con, ConnectionFactory cf) {_		try {_			doReleaseConnection(con, cf)__		}_		catch (ResourceException ex) {_			logger.debug("Could not close CCI Connection", ex)__		}_		catch (Throwable ex) {_			_			logger.debug("Unexpected exception on closing CCI Connection", ex)__		}_	};close,the,given,connection,obtained,from,the,given,connection,factory,if,it,is,not,managed,externally,that,is,not,bound,to,the,thread,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,cf,the,connection,factory,that,the,connection,was,obtained,from,can,be,code,null,see,get,connection;public,static,void,release,connection,connection,con,connection,factory,cf,try,do,release,connection,con,cf,catch,resource,exception,ex,logger,debug,could,not,close,cci,connection,ex,catch,throwable,ex,logger,debug,unexpected,exception,on,closing,cci,connection,ex
ConnectionFactoryUtils -> public static boolean isConnectionTransactional(Connection con, ConnectionFactory cf);1328020251;Determine whether the given JCA CCI Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param cf the ConnectionFactory that the Connection was obtained from_(may be <code>null</code>)_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, ConnectionFactory cf) {_		if (cf == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		return (conHolder != null && conHolder.getConnection() == con)__	};determine,whether,the,given,jca,cci,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,cf,the,connection,factory,that,the,connection,was,obtained,from,may,be,code,null,code,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,connection,factory,cf,if,cf,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,return,con,holder,null,con,holder,get,connection,con
ConnectionFactoryUtils -> public static boolean isConnectionTransactional(Connection con, ConnectionFactory cf);1356735495;Determine whether the given JCA CCI Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param cf the ConnectionFactory that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, ConnectionFactory cf) {_		if (cf == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		return (conHolder != null && conHolder.getConnection() == con)__	};determine,whether,the,given,jca,cci,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,cf,the,connection,factory,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,connection,factory,cf,if,cf,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,return,con,holder,null,con,holder,get,connection,con
ConnectionFactoryUtils -> public static boolean isConnectionTransactional(Connection con, @Nullable ConnectionFactory cf);1495868221;Determine whether the given JCA CCI Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param cf the ConnectionFactory that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, @Nullable ConnectionFactory cf) {_		if (cf == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		return (conHolder != null && conHolder.getConnection() == con)__	};determine,whether,the,given,jca,cci,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,cf,the,connection,factory,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,nullable,connection,factory,cf,if,cf,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,return,con,holder,null,con,holder,get,connection,con
ConnectionFactoryUtils -> public static boolean isConnectionTransactional(Connection con, @Nullable ConnectionFactory cf);1496837955;Determine whether the given JCA CCI Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param cf the ConnectionFactory that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, @Nullable ConnectionFactory cf) {_		if (cf == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		return (conHolder != null && conHolder.getConnection() == con)__	};determine,whether,the,given,jca,cci,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,cf,the,connection,factory,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,nullable,connection,factory,cf,if,cf,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,return,con,holder,null,con,holder,get,connection,con
ConnectionFactoryUtils -> public static boolean isConnectionTransactional(Connection con, @Nullable ConnectionFactory cf);1543877450;Determine whether the given JCA CCI Connection is transactional, that is,_bound to the current thread by Spring's transaction facilities._@param con the Connection to check_@param cf the ConnectionFactory that the Connection was obtained from_(may be {@code null})_@return whether the Connection is transactional;public static boolean isConnectionTransactional(Connection con, @Nullable ConnectionFactory cf) {_		if (cf == null) {_			return false__		}_		ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(cf)__		return (conHolder != null && conHolder.getConnection() == con)__	};determine,whether,the,given,jca,cci,connection,is,transactional,that,is,bound,to,the,current,thread,by,spring,s,transaction,facilities,param,con,the,connection,to,check,param,cf,the,connection,factory,that,the,connection,was,obtained,from,may,be,code,null,return,whether,the,connection,is,transactional;public,static,boolean,is,connection,transactional,connection,con,nullable,connection,factory,cf,if,cf,null,return,false,connection,holder,con,holder,connection,holder,transaction,synchronization,manager,get,resource,cf,return,con,holder,null,con,holder,get,connection,con
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf, ConnectionSpec spec) 			throws CannotGetCciConnectionException;1328020251;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@param spec the ConnectionSpec for the desired Connection (may be <code>null</code>)._Note: If this is specified, a new Connection will be obtained for every call,_without participating in a shared transactional Connection._@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf, ConnectionSpec spec)_			throws CannotGetCciConnectionException {_		try {_			if (spec != null) {_				Assert.notNull(cf, "No ConnectionFactory specified")__				return cf.getConnection(spec)__			}_			else {_				return doGetConnection(cf)__			}_		}_		catch (ResourceException ex) {_			throw new CannotGetCciConnectionException("Could not get CCI Connection", ex)__		}_	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,param,spec,the,connection,spec,for,the,desired,connection,may,be,code,null,code,note,if,this,is,specified,a,new,connection,will,be,obtained,for,every,call,without,participating,in,a,shared,transactional,connection,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,connection,spec,spec,throws,cannot,get,cci,connection,exception,try,if,spec,null,assert,not,null,cf,no,connection,factory,specified,return,cf,get,connection,spec,else,return,do,get,connection,cf,catch,resource,exception,ex,throw,new,cannot,get,cci,connection,exception,could,not,get,cci,connection,ex
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf, ConnectionSpec spec) 			throws CannotGetCciConnectionException;1356735495;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@param spec the ConnectionSpec for the desired Connection (may be {@code null})._Note: If this is specified, a new Connection will be obtained for every call,_without participating in a shared transactional Connection._@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf, ConnectionSpec spec)_			throws CannotGetCciConnectionException {_		try {_			if (spec != null) {_				Assert.notNull(cf, "No ConnectionFactory specified")__				return cf.getConnection(spec)__			}_			else {_				return doGetConnection(cf)__			}_		}_		catch (ResourceException ex) {_			throw new CannotGetCciConnectionException("Could not get CCI Connection", ex)__		}_	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,param,spec,the,connection,spec,for,the,desired,connection,may,be,code,null,note,if,this,is,specified,a,new,connection,will,be,obtained,for,every,call,without,participating,in,a,shared,transactional,connection,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,connection,spec,spec,throws,cannot,get,cci,connection,exception,try,if,spec,null,assert,not,null,cf,no,connection,factory,specified,return,cf,get,connection,spec,else,return,do,get,connection,cf,catch,resource,exception,ex,throw,new,cannot,get,cci,connection,exception,could,not,get,cci,connection,ex
ConnectionFactoryUtils -> public static void doReleaseConnection(@Nullable Connection con, @Nullable ConnectionFactory cf) 			throws ResourceException;1496837955;Actually close the given Connection, obtained from the given ConnectionFactory._Same as {@link #releaseConnection}, but throwing the original ResourceException._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param cf the ConnectionFactory that the Connection was obtained from_(can be {@code null})_@throws ResourceException if thrown by JCA CCI methods_@see #doGetConnection;public static void doReleaseConnection(@Nullable Connection con, @Nullable ConnectionFactory cf)_			throws ResourceException {__		if (con == null || isConnectionTransactional(con, cf)) {_			return__		}_		con.close()__	};actually,close,the,given,connection,obtained,from,the,given,connection,factory,same,as,link,release,connection,but,throwing,the,original,resource,exception,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,cf,the,connection,factory,that,the,connection,was,obtained,from,can,be,code,null,throws,resource,exception,if,thrown,by,jca,cci,methods,see,do,get,connection;public,static,void,do,release,connection,nullable,connection,con,nullable,connection,factory,cf,throws,resource,exception,if,con,null,is,connection,transactional,con,cf,return,con,close
ConnectionFactoryUtils -> public static void doReleaseConnection(@Nullable Connection con, @Nullable ConnectionFactory cf) 			throws ResourceException;1543877450;Actually close the given Connection, obtained from the given ConnectionFactory._Same as {@link #releaseConnection}, but throwing the original ResourceException._<p>Directly accessed by {@link TransactionAwareConnectionFactoryProxy}._@param con the Connection to close if necessary_(if this is {@code null}, the call will be ignored)_@param cf the ConnectionFactory that the Connection was obtained from_(can be {@code null})_@throws ResourceException if thrown by JCA CCI methods_@see #doGetConnection;public static void doReleaseConnection(@Nullable Connection con, @Nullable ConnectionFactory cf)_			throws ResourceException {__		if (con == null || isConnectionTransactional(con, cf)) {_			return__		}_		con.close()__	};actually,close,the,given,connection,obtained,from,the,given,connection,factory,same,as,link,release,connection,but,throwing,the,original,resource,exception,p,directly,accessed,by,link,transaction,aware,connection,factory,proxy,param,con,the,connection,to,close,if,necessary,if,this,is,code,null,the,call,will,be,ignored,param,cf,the,connection,factory,that,the,connection,was,obtained,from,can,be,code,null,throws,resource,exception,if,thrown,by,jca,cci,methods,see,do,get,connection;public,static,void,do,release,connection,nullable,connection,con,nullable,connection,factory,cf,throws,resource,exception,if,con,null,is,connection,transactional,con,cf,return,con,close
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException;1328020251;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException {_		return getConnection(cf, null)__	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,throws,cannot,get,cci,connection,exception,return,get,connection,cf,null
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException;1356735495;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException {_		return getConnection(cf, null)__	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,throws,cannot,get,cci,connection,exception,return,get,connection,cf,null
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException;1495868221;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException {_		return getConnection(cf, null)__	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,throws,cannot,get,cci,connection,exception,return,get,connection,cf,null
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException;1496837955;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException {_		return getConnection(cf, null)__	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,throws,cannot,get,cci,connection,exception,return,get,connection,cf,null
ConnectionFactoryUtils -> public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException;1543877450;Obtain a Connection from the given ConnectionFactory. Translates ResourceExceptions_into the Spring hierarchy of unchecked generic data access exceptions, simplifying_calling code and making any exception that is thrown more meaningful._<p>Is aware of a corresponding Connection bound to the current thread, for example_when using {@link CciLocalTransactionManager}. Will bind a Connection to the thread_if transaction synchronization is active (e.g. if in a JTA transaction)._@param cf the ConnectionFactory to obtain Connection from_@return a CCI Connection from the given ConnectionFactory_@throws org.springframework.jca.cci.CannotGetCciConnectionException_if the attempt to get a Connection failed_@see #releaseConnection;public static Connection getConnection(ConnectionFactory cf) throws CannotGetCciConnectionException {_		return getConnection(cf, null)__	};obtain,a,connection,from,the,given,connection,factory,translates,resource,exceptions,into,the,spring,hierarchy,of,unchecked,generic,data,access,exceptions,simplifying,calling,code,and,making,any,exception,that,is,thrown,more,meaningful,p,is,aware,of,a,corresponding,connection,bound,to,the,current,thread,for,example,when,using,link,cci,local,transaction,manager,will,bind,a,connection,to,the,thread,if,transaction,synchronization,is,active,e,g,if,in,a,jta,transaction,param,cf,the,connection,factory,to,obtain,connection,from,return,a,cci,connection,from,the,given,connection,factory,throws,org,springframework,jca,cci,cannot,get,cci,connection,exception,if,the,attempt,to,get,a,connection,failed,see,release,connection;public,static,connection,get,connection,connection,factory,cf,throws,cannot,get,cci,connection,exception,return,get,connection,cf,null
