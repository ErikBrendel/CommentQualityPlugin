commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the default transaction manager. This will perform actual  * transaction management: This class is just a way of invoking it.  * @see TransactionInterceptor#setTransactionManager  */ ;/**  * Set the default transaction manager. This will perform actual  * transaction management: This class is just a way of invoking it.  * @see TransactionInterceptor#setTransactionManager  */ public void setTransactionManager(PlatformTransactionManager transactionManager) {     this.transactionInterceptor.setTransactionManager(transactionManager). }
true;public;1;3;/**  * Set properties with method names as keys and transaction attribute  * descriptors (parsed via TransactionAttributeEditor) as values:  * e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly".  * <p>Note: Method names are always applied to the target class,  * no matter if defined in an interface or the class itself.  * <p>Internally, a NameMatchTransactionAttributeSource will be  * created from the given properties.  * @see #setTransactionAttributeSource  * @see TransactionInterceptor#setTransactionAttributes  * @see TransactionAttributeEditor  * @see NameMatchTransactionAttributeSource  */ ;/**  * Set properties with method names as keys and transaction attribute  * descriptors (parsed via TransactionAttributeEditor) as values:  * e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly".  * <p>Note: Method names are always applied to the target class,  * no matter if defined in an interface or the class itself.  * <p>Internally, a NameMatchTransactionAttributeSource will be  * created from the given properties.  * @see #setTransactionAttributeSource  * @see TransactionInterceptor#setTransactionAttributes  * @see TransactionAttributeEditor  * @see NameMatchTransactionAttributeSource  */ public void setTransactionAttributes(Properties transactionAttributes) {     this.transactionInterceptor.setTransactionAttributes(transactionAttributes). }
true;public;1;3;/**  * Set the transaction attribute source which is used to find transaction  * attributes. If specifying a String property value, a PropertyEditor  * will create a MethodMapTransactionAttributeSource from the value.  * @see #setTransactionAttributes  * @see TransactionInterceptor#setTransactionAttributeSource  * @see TransactionAttributeSourceEditor  * @see MethodMapTransactionAttributeSource  * @see NameMatchTransactionAttributeSource  * @see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource  */ ;/**  * Set the transaction attribute source which is used to find transaction  * attributes. If specifying a String property value, a PropertyEditor  * will create a MethodMapTransactionAttributeSource from the value.  * @see #setTransactionAttributes  * @see TransactionInterceptor#setTransactionAttributeSource  * @see TransactionAttributeSourceEditor  * @see MethodMapTransactionAttributeSource  * @see NameMatchTransactionAttributeSource  * @see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource  */ public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {     this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource). }
true;public;1;3;/**  * Set a pointcut, i.e a bean that can cause conditional invocation  * of the TransactionInterceptor depending on method and attributes passed.  * Note: Additional interceptors are always invoked.  * @see #setPreInterceptors  * @see #setPostInterceptors  */ ;/**  * Set a pointcut, i.e a bean that can cause conditional invocation  * of the TransactionInterceptor depending on method and attributes passed.  * Note: Additional interceptors are always invoked.  * @see #setPreInterceptors  * @see #setPostInterceptors  */ public void setPointcut(Pointcut pointcut) {     this.pointcut = pointcut. }
true;public;1;4;/**  * This callback is optional: If running in a BeanFactory and no transaction  * manager has been set explicitly, a single matching bean of type  * {@link PlatformTransactionManager} will be fetched from the BeanFactory.  * @see org.springframework.beans.factory.BeanFactory#getBean(Class)  * @see org.springframework.transaction.PlatformTransactionManager  */ ;/**  * This callback is optional: If running in a BeanFactory and no transaction  * manager has been set explicitly, a single matching bean of type  * {@link PlatformTransactionManager} will be fetched from the BeanFactory.  * @see org.springframework.beans.factory.BeanFactory#getBean(Class)  * @see org.springframework.transaction.PlatformTransactionManager  */ @Override public void setBeanFactory(BeanFactory beanFactory) {     this.transactionInterceptor.setBeanFactory(beanFactory). }
true;protected;0;11;/**  * Creates an advisor for this FactoryBean's TransactionInterceptor.  */ ;/**  * Creates an advisor for this FactoryBean's TransactionInterceptor.  */ @Override protected Object createMainInterceptor() {     this.transactionInterceptor.afterPropertiesSet().     if (this.pointcut != null) {         return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor).     } else {         // Rely on default pointcut.         return new TransactionAttributeSourceAdvisor(this.transactionInterceptor).     } }
true;protected;1;4;/**  * As of 4.2, this method adds {@link TransactionalProxy} to the set of  * proxy interfaces in order to avoid re-processing of transaction metadata.  */ ;/**  * As of 4.2, this method adds {@link TransactionalProxy} to the set of  * proxy interfaces in order to avoid re-processing of transaction metadata.  */ @Override protected void postProcessProxyFactory(ProxyFactory proxyFactory) {     proxyFactory.addInterface(TransactionalProxy.class). }
