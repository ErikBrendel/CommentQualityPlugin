# id;timestamp;commentText;codeText;commentWords;codeWords
TransactionProxyFactoryBean -> @Override 	protected void postProcessProxyFactory(ProxyFactory proxyFactory);1434538946;As of 4.2, this method adds {@link TransactionalProxy} to the set of_proxy interfaces in order to avoid re-processing of transaction metadata.;@Override_	protected void postProcessProxyFactory(ProxyFactory proxyFactory) {_		proxyFactory.addInterface(TransactionalProxy.class)__	};as,of,4,2,this,method,adds,link,transactional,proxy,to,the,set,of,proxy,interfaces,in,order,to,avoid,re,processing,of,transaction,metadata;override,protected,void,post,process,proxy,factory,proxy,factory,proxy,factory,proxy,factory,add,interface,transactional,proxy,class
TransactionProxyFactoryBean -> @Override 	protected void postProcessProxyFactory(ProxyFactory proxyFactory);1498780456;As of 4.2, this method adds {@link TransactionalProxy} to the set of_proxy interfaces in order to avoid re-processing of transaction metadata.;@Override_	protected void postProcessProxyFactory(ProxyFactory proxyFactory) {_		proxyFactory.addInterface(TransactionalProxy.class)__	};as,of,4,2,this,method,adds,link,transactional,proxy,to,the,set,of,proxy,interfaces,in,order,to,avoid,re,processing,of,transaction,metadata;override,protected,void,post,process,proxy,factory,proxy,factory,proxy,factory,proxy,factory,add,interface,transactional,proxy,class
TransactionProxyFactoryBean -> @Override 	protected void postProcessProxyFactory(ProxyFactory proxyFactory);1530174524;As of 4.2, this method adds {@link TransactionalProxy} to the set of_proxy interfaces in order to avoid re-processing of transaction metadata.;@Override_	protected void postProcessProxyFactory(ProxyFactory proxyFactory) {_		proxyFactory.addInterface(TransactionalProxy.class)__	};as,of,4,2,this,method,adds,link,transactional,proxy,to,the,set,of,proxy,interfaces,in,order,to,avoid,re,processing,of,transaction,metadata;override,protected,void,post,process,proxy,factory,proxy,factory,proxy,factory,proxy,factory,add,interface,transactional,proxy,class
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1328020251;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see AttributesTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,attributes,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1335774711;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1356735495;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1357119239;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1362408075;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1368482696;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1385501137;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1391721359;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1418414219;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1434538946;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1498780456;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource);1530174524;Set the transaction attribute source which is used to find transaction_attributes. If specifying a String property value, a PropertyEditor_will create a MethodMapTransactionAttributeSource from the value._@see #setTransactionAttributes_@see TransactionInterceptor#setTransactionAttributeSource_@see TransactionAttributeSourceEditor_@see MethodMapTransactionAttributeSource_@see NameMatchTransactionAttributeSource_@see org.springframework.transaction.annotation.AnnotationTransactionAttributeSource;public void setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource) {_		this.transactionInterceptor.setTransactionAttributeSource(transactionAttributeSource)__	};set,the,transaction,attribute,source,which,is,used,to,find,transaction,attributes,if,specifying,a,string,property,value,a,property,editor,will,create,a,method,map,transaction,attribute,source,from,the,value,see,set,transaction,attributes,see,transaction,interceptor,set,transaction,attribute,source,see,transaction,attribute,source,editor,see,method,map,transaction,attribute,source,see,name,match,transaction,attribute,source,see,org,springframework,transaction,annotation,annotation,transaction,attribute,source;public,void,set,transaction,attribute,source,transaction,attribute,source,transaction,attribute,source,this,transaction,interceptor,set,transaction,attribute,source,transaction,attribute,source
TransactionProxyFactoryBean -> public void setBeanFactory(BeanFactory beanFactory);1328020251;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_PlatformTransactionManager will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactoryUtils#beanOfTypeIncludingAncestors_@see org.springframework.transaction.PlatformTransactionManager;public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,utils,bean,of,type,including,ancestors,see,org,springframework,transaction,platform,transaction,manager;public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> public void setBeanFactory(BeanFactory beanFactory);1335774711;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_PlatformTransactionManager will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactoryUtils#beanOfTypeIncludingAncestors_@see org.springframework.transaction.PlatformTransactionManager;public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,utils,bean,of,type,including,ancestors,see,org,springframework,transaction,platform,transaction,manager;public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> public void setBeanFactory(BeanFactory beanFactory);1357119239;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_PlatformTransactionManager will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactoryUtils#beanOfTypeIncludingAncestors_@see org.springframework.transaction.PlatformTransactionManager;public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,utils,bean,of,type,including,ancestors,see,org,springframework,transaction,platform,transaction,manager;public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> public void setBeanFactory(BeanFactory beanFactory);1362408075;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_{@link PlatformTransactionManager} will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactory#getBean(Class)_@see org.springframework.transaction.PlatformTransactionManager;public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,link,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,get,bean,class,see,org,springframework,transaction,platform,transaction,manager;public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1328020251;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1335774711;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1356735495;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1357119239;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1362408075;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1368482696;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1385501137;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1391721359;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1418414219;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1434538946;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1498780456;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> @Override 	protected Object createMainInterceptor();1530174524;Creates an advisor for this FactoryBean's TransactionInterceptor.;@Override_	protected Object createMainInterceptor() {_		this.transactionInterceptor.afterPropertiesSet()__		if (this.pointcut != null) {_			return new DefaultPointcutAdvisor(this.pointcut, this.transactionInterceptor)__		}_		else {_			_			return new TransactionAttributeSourceAdvisor(this.transactionInterceptor)__		}_	};creates,an,advisor,for,this,factory,bean,s,transaction,interceptor;override,protected,object,create,main,interceptor,this,transaction,interceptor,after,properties,set,if,this,pointcut,null,return,new,default,pointcut,advisor,this,pointcut,this,transaction,interceptor,else,return,new,transaction,attribute,source,advisor,this,transaction,interceptor
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1328020251;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1335774711;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1356735495;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1357119239;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1362408075;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1368482696;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1385501137;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1391721359;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1418414219;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1434538946;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1498780456;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setTransactionAttributes(Properties transactionAttributes);1530174524;Set properties with method names as keys and transaction attribute_descriptors (parsed via TransactionAttributeEditor) as values:_e.g. key = "myMethod", value = "PROPAGATION_REQUIRED,readOnly"._<p>Note: Method names are always applied to the target class,_no matter if defined in an interface or the class itself._<p>Internally, a NameMatchTransactionAttributeSource will be_created from the given properties._@see #setTransactionAttributeSource_@see TransactionInterceptor#setTransactionAttributes_@see TransactionAttributeEditor_@see NameMatchTransactionAttributeSource;public void setTransactionAttributes(Properties transactionAttributes) {_		this.transactionInterceptor.setTransactionAttributes(transactionAttributes)__	};set,properties,with,method,names,as,keys,and,transaction,attribute,descriptors,parsed,via,transaction,attribute,editor,as,values,e,g,key,my,method,value,read,only,p,note,method,names,are,always,applied,to,the,target,class,no,matter,if,defined,in,an,interface,or,the,class,itself,p,internally,a,name,match,transaction,attribute,source,will,be,created,from,the,given,properties,see,set,transaction,attribute,source,see,transaction,interceptor,set,transaction,attributes,see,transaction,attribute,editor,see,name,match,transaction,attribute,source;public,void,set,transaction,attributes,properties,transaction,attributes,this,transaction,interceptor,set,transaction,attributes,transaction,attributes
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1328020251;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1335774711;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1356735495;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1357119239;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1362408075;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1368482696;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1385501137;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1391721359;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1418414219;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1434538946;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1498780456;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> public void setPointcut(Pointcut pointcut);1530174524;Set a pointcut, i.e a bean that can cause conditional invocation_of the TransactionInterceptor depending on method and attributes passed._Note: Additional interceptors are always invoked._@see #setPreInterceptors_@see #setPostInterceptors;public void setPointcut(Pointcut pointcut) {_		this.pointcut = pointcut__	};set,a,pointcut,i,e,a,bean,that,can,cause,conditional,invocation,of,the,transaction,interceptor,depending,on,method,and,attributes,passed,note,additional,interceptors,are,always,invoked,see,set,pre,interceptors,see,set,post,interceptors;public,void,set,pointcut,pointcut,pointcut,this,pointcut,pointcut
TransactionProxyFactoryBean -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1356735495;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_PlatformTransactionManager will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactoryUtils#beanOfTypeIncludingAncestors_@see org.springframework.transaction.PlatformTransactionManager;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,utils,bean,of,type,including,ancestors,see,org,springframework,transaction,platform,transaction,manager;override,public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1368482696;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_{@link PlatformTransactionManager} will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactory#getBean(Class)_@see org.springframework.transaction.PlatformTransactionManager;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,link,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,get,bean,class,see,org,springframework,transaction,platform,transaction,manager;override,public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1385501137;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_{@link PlatformTransactionManager} will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactory#getBean(Class)_@see org.springframework.transaction.PlatformTransactionManager;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,link,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,get,bean,class,see,org,springframework,transaction,platform,transaction,manager;override,public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1391721359;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_{@link PlatformTransactionManager} will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactory#getBean(Class)_@see org.springframework.transaction.PlatformTransactionManager;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,link,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,get,bean,class,see,org,springframework,transaction,platform,transaction,manager;override,public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1418414219;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_{@link PlatformTransactionManager} will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactory#getBean(Class)_@see org.springframework.transaction.PlatformTransactionManager;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,link,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,get,bean,class,see,org,springframework,transaction,platform,transaction,manager;override,public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1434538946;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_{@link PlatformTransactionManager} will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactory#getBean(Class)_@see org.springframework.transaction.PlatformTransactionManager;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,link,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,get,bean,class,see,org,springframework,transaction,platform,transaction,manager;override,public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1498780456;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_{@link PlatformTransactionManager} will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactory#getBean(Class)_@see org.springframework.transaction.PlatformTransactionManager;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,link,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,get,bean,class,see,org,springframework,transaction,platform,transaction,manager;override,public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530174524;This callback is optional: If running in a BeanFactory and no transaction_manager has been set explicitly, a single matching bean of type_{@link PlatformTransactionManager} will be fetched from the BeanFactory._@see org.springframework.beans.factory.BeanFactory#getBean(Class)_@see org.springframework.transaction.PlatformTransactionManager;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		this.transactionInterceptor.setBeanFactory(beanFactory)__	};this,callback,is,optional,if,running,in,a,bean,factory,and,no,transaction,manager,has,been,set,explicitly,a,single,matching,bean,of,type,link,platform,transaction,manager,will,be,fetched,from,the,bean,factory,see,org,springframework,beans,factory,bean,factory,get,bean,class,see,org,springframework,transaction,platform,transaction,manager;override,public,void,set,bean,factory,bean,factory,bean,factory,this,transaction,interceptor,set,bean,factory,bean,factory
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1328020251;Set the transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1335774711;Set the transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1356735495;Set the transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1357119239;Set the transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1362408075;Set the transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1368482696;Set the transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1385501137;Set the transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1391721359;Set the transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1418414219;Set the default transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,default,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1434538946;Set the default transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,default,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1498780456;Set the default transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,default,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
TransactionProxyFactoryBean -> public void setTransactionManager(PlatformTransactionManager transactionManager);1530174524;Set the default transaction manager. This will perform actual_transaction management: This class is just a way of invoking it._@see TransactionInterceptor#setTransactionManager;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionInterceptor.setTransactionManager(transactionManager)__	};set,the,default,transaction,manager,this,will,perform,actual,transaction,management,this,class,is,just,a,way,of,invoking,it,see,transaction,interceptor,set,transaction,manager;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,interceptor,set,transaction,manager,transaction,manager
