commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testSimpleRecordOperation() throws ResourceException {     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     Connection connection = mock(Connection.class).     Interaction interaction = mock(Interaction.class).     Record inputRecord = mock(Record.class).     Record outputRecord = mock(Record.class).     InteractionSpec interactionSpec = mock(InteractionSpec.class).     SimpleRecordOperation query = new SimpleRecordOperation(connectionFactory, interactionSpec).     given(connectionFactory.getConnection()).willReturn(connection).     given(connection.createInteraction()).willReturn(interaction).     given(interaction.execute(interactionSpec, inputRecord)).willReturn(outputRecord).     query.execute(inputRecord).     verify(interaction).execute(interactionSpec, inputRecord).     verify(interaction).close().     verify(connection).close(). }
false;public;0;23;;@Test public void testSimpleRecordOperationWithExplicitOutputRecord() throws ResourceException {     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     Connection connection = mock(Connection.class).     Interaction interaction = mock(Interaction.class).     Record inputRecord = mock(Record.class).     Record outputRecord = mock(Record.class).     InteractionSpec interactionSpec = mock(InteractionSpec.class).     SimpleRecordOperation operation = new SimpleRecordOperation(connectionFactory, interactionSpec).     given(connectionFactory.getConnection()).willReturn(connection).     given(connection.createInteraction()).willReturn(interaction).     given(interaction.execute(interactionSpec, inputRecord, outputRecord)).willReturn(true).     operation.execute(inputRecord, outputRecord).     verify(interaction).execute(interactionSpec, inputRecord, outputRecord).     verify(interaction).close().     verify(connection).close(). }
false;public;0;22;;@Test public void testSimpleRecordOperationWithInputOutputRecord() throws ResourceException {     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     Connection connection = mock(Connection.class).     Interaction interaction = mock(Interaction.class).     Record inputOutputRecord = mock(Record.class).     InteractionSpec interactionSpec = mock(InteractionSpec.class).     SimpleRecordOperation query = new SimpleRecordOperation(connectionFactory, interactionSpec).     given(connectionFactory.getConnection()).willReturn(connection).     given(connection.createInteraction()).willReturn(interaction).     given(interaction.execute(interactionSpec, inputOutputRecord, inputOutputRecord)).willReturn(true).     query.execute(inputOutputRecord, inputOutputRecord).     verify(interaction).execute(interactionSpec, inputOutputRecord, inputOutputRecord).     verify(interaction).close().     verify(connection).close(). }
false;public;0;31;;@Test public void testMappingRecordOperation() throws ResourceException {     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     Connection connection = mock(Connection.class).     Interaction interaction = mock(Interaction.class).     RecordFactory recordFactory = mock(RecordFactory.class).     Record inputRecord = mock(Record.class).     Record outputRecord = mock(Record.class).     InteractionSpec interactionSpec = mock(InteractionSpec.class).     QueryCallDetector callDetector = mock(QueryCallDetector.class).     MappingRecordOperationImpl query = new MappingRecordOperationImpl(connectionFactory, interactionSpec).     query.setCallDetector(callDetector).     Object inObj = new Object().     Object outObj = new Object().     given(connectionFactory.getRecordFactory()).willReturn(recordFactory).     given(callDetector.callCreateInputRecord(recordFactory, inObj)).willReturn(inputRecord).     given(connectionFactory.getConnection()).willReturn(connection).     given(connection.createInteraction()).willReturn(interaction).     given(interaction.execute(interactionSpec, inputRecord)).willReturn(outputRecord).     given(callDetector.callExtractOutputData(outputRecord)).willReturn(outObj).     assertSame(outObj, query.execute(inObj)).     verify(interaction).close().     verify(connection).close(). }
false;public;0;36;;@Test public void testMappingRecordOperationWithOutputRecordCreator() throws ResourceException {     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     Connection connection = mock(Connection.class).     Interaction interaction = mock(Interaction.class).     RecordFactory recordFactory = mock(RecordFactory.class).     Record inputRecord = mock(Record.class).     Record outputRecord = mock(Record.class).     RecordCreator outputCreator = mock(RecordCreator.class).     InteractionSpec interactionSpec = mock(InteractionSpec.class).     QueryCallDetector callDetector = mock(QueryCallDetector.class).     MappingRecordOperationImpl query = new MappingRecordOperationImpl(connectionFactory, interactionSpec).     query.setOutputRecordCreator(outputCreator).     query.setCallDetector(callDetector).     Object inObj = new Object().     Object outObj = new Object().     given(connectionFactory.getRecordFactory()).willReturn(recordFactory).     given(callDetector.callCreateInputRecord(recordFactory, inObj)).willReturn(inputRecord).     given(connectionFactory.getConnection()).willReturn(connection).     given(connection.createInteraction()).willReturn(interaction).     given(connectionFactory.getRecordFactory()).willReturn(recordFactory).     given(outputCreator.createRecord(recordFactory)).willReturn(outputRecord).     given(interaction.execute(interactionSpec, inputRecord, outputRecord)).willReturn(true).     given(callDetector.callExtractOutputData(outputRecord)).willReturn(outObj).     assertSame(outObj, query.execute(inObj)).     verify(interaction).close().     verify(connection).close(). }
false;public;1;3;;public void setCallDetector(QueryCallDetector callDetector) {     this.callDetector = callDetector. }
false;protected;2;4;;@Override protected Record createInputRecord(RecordFactory recordFactory, Object inputObject) {     return this.callDetector.callCreateInputRecord(recordFactory, inputObject). }
false;protected;1;4;;@Override protected Object extractOutputData(Record outputRecord) throws ResourceException {     return this.callDetector.callExtractOutputData(outputRecord). }
false;;2;1;;Record callCreateInputRecord(RecordFactory recordFactory, Object inputObject).
false;;1;1;;Object callExtractOutputData(Record outputRecord).
