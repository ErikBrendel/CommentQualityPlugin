commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void classLevelOnly() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestClassLevelOnly()).     proxyFactory.addAdvice(this.ti).     TestClassLevelOnly proxy = (TestClassLevelOnly) proxyFactory.getProxy().     proxy.doSomething().     assertGetTransactionAndCommitCount(1).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(2).     proxy.doSomething().     assertGetTransactionAndCommitCount(3).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(4). }
false;public;0;20;;@Test public void withSingleMethodOverride() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithSingleMethodOverride()).     proxyFactory.addAdvice(this.ti).     TestWithSingleMethodOverride proxy = (TestWithSingleMethodOverride) proxyFactory.getProxy().     proxy.doSomething().     assertGetTransactionAndCommitCount(1).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(2).     proxy.doSomethingCompletelyElse().     assertGetTransactionAndCommitCount(3).     proxy.doSomething().     assertGetTransactionAndCommitCount(4). }
false;public;0;20;;@Test public void withSingleMethodOverrideInverted() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithSingleMethodOverrideInverted()).     proxyFactory.addAdvice(this.ti).     TestWithSingleMethodOverrideInverted proxy = (TestWithSingleMethodOverrideInverted) proxyFactory.getProxy().     proxy.doSomething().     assertGetTransactionAndCommitCount(1).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(2).     proxy.doSomethingCompletelyElse().     assertGetTransactionAndCommitCount(3).     proxy.doSomething().     assertGetTransactionAndCommitCount(4). }
false;public;0;20;;@Test public void withMultiMethodOverride() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithMultiMethodOverride()).     proxyFactory.addAdvice(this.ti).     TestWithMultiMethodOverride proxy = (TestWithMultiMethodOverride) proxyFactory.getProxy().     proxy.doSomething().     assertGetTransactionAndCommitCount(1).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(2).     proxy.doSomethingCompletelyElse().     assertGetTransactionAndCommitCount(3).     proxy.doSomething().     assertGetTransactionAndCommitCount(4). }
false;public;0;24;;@Test public void withRollbackOnRuntimeException() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithExceptions()).     proxyFactory.addAdvice(this.ti).     TestWithExceptions proxy = (TestWithExceptions) proxyFactory.getProxy().     try {         proxy.doSomethingErroneous().         fail("Should throw IllegalStateException").     } catch (IllegalStateException ex) {         assertGetTransactionAndRollbackCount(1).     }     try {         proxy.doSomethingElseErroneous().         fail("Should throw IllegalArgumentException").     } catch (IllegalArgumentException ex) {         assertGetTransactionAndRollbackCount(2).     } }
false;public;0;16;;@Test public void withCommitOnCheckedException() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithExceptions()).     proxyFactory.addAdvice(this.ti).     TestWithExceptions proxy = (TestWithExceptions) proxyFactory.getProxy().     try {         proxy.doSomethingElseWithCheckedException().         fail("Should throw Exception").     } catch (Exception ex) {         assertGetTransactionAndCommitCount(1).     } }
false;public;0;16;;@Test public void withRollbackOnCheckedExceptionAndRollbackRule() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithExceptions()).     proxyFactory.addAdvice(this.ti).     TestWithExceptions proxy = (TestWithExceptions) proxyFactory.getProxy().     try {         proxy.doSomethingElseWithCheckedExceptionAndRollbackRule().         fail("Should throw Exception").     } catch (Exception ex) {         assertGetTransactionAndRollbackCount(1).     } }
false;public;0;11;;@Test public void withVavrTrySuccess() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithVavrTry()).     proxyFactory.addAdvice(this.ti).     TestWithVavrTry proxy = (TestWithVavrTry) proxyFactory.getProxy().     proxy.doSomething().     assertGetTransactionAndCommitCount(1). }
false;public;0;11;;@Test public void withVavrTryRuntimeException() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithVavrTry()).     proxyFactory.addAdvice(this.ti).     TestWithVavrTry proxy = (TestWithVavrTry) proxyFactory.getProxy().     proxy.doSomethingErroneous().     assertGetTransactionAndRollbackCount(1). }
false;public;0;11;;@Test public void withVavrTryCheckedException() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithVavrTry()).     proxyFactory.addAdvice(this.ti).     TestWithVavrTry proxy = (TestWithVavrTry) proxyFactory.getProxy().     proxy.doSomethingErroneousWithCheckedException().     assertGetTransactionAndCommitCount(1). }
false;public;0;11;;@Test public void withVavrTryCheckedExceptionAndRollbackRule() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithVavrTry()).     proxyFactory.addAdvice(this.ti).     TestWithVavrTry proxy = (TestWithVavrTry) proxyFactory.getProxy().     proxy.doSomethingErroneousWithCheckedExceptionAndRollbackRule().     assertGetTransactionAndRollbackCount(1). }
false;public;0;24;;@Test public void withInterface() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new TestWithInterfaceImpl()).     proxyFactory.addInterface(TestWithInterface.class).     proxyFactory.addAdvice(this.ti).     TestWithInterface proxy = (TestWithInterface) proxyFactory.getProxy().     proxy.doSomething().     assertGetTransactionAndCommitCount(1).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(2).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(3).     proxy.doSomething().     assertGetTransactionAndCommitCount(4).     proxy.doSomethingDefault().     assertGetTransactionAndCommitCount(5). }
false;public;0;18;;@Test public void crossClassInterfaceMethodLevelOnJdkProxy() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new SomeServiceImpl()).     proxyFactory.addInterface(SomeService.class).     proxyFactory.addAdvice(this.ti).     SomeService someService = (SomeService) proxyFactory.getProxy().     someService.bar().     assertGetTransactionAndCommitCount(1).     someService.foo().     assertGetTransactionAndCommitCount(2).     someService.fooBar().     assertGetTransactionAndCommitCount(3). }
false;public;0;12;;@Test public void crossClassInterfaceOnJdkProxy() {     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(new OtherServiceImpl()).     proxyFactory.addInterface(OtherService.class).     proxyFactory.addAdvice(this.ti).     OtherService otherService = (OtherService) proxyFactory.getProxy().     otherService.foo().     assertGetTransactionAndCommitCount(1). }
false;public;0;28;;@Test public void withInterfaceOnTargetJdkProxy() {     ProxyFactory targetFactory = new ProxyFactory().     targetFactory.setTarget(new TestWithInterfaceImpl()).     targetFactory.addInterface(TestWithInterface.class).     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(targetFactory.getProxy()).     proxyFactory.addInterface(TestWithInterface.class).     proxyFactory.addAdvice(this.ti).     TestWithInterface proxy = (TestWithInterface) proxyFactory.getProxy().     proxy.doSomething().     assertGetTransactionAndCommitCount(1).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(2).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(3).     proxy.doSomething().     assertGetTransactionAndCommitCount(4).     proxy.doSomethingDefault().     assertGetTransactionAndCommitCount(5). }
false;public;0;28;;@Test public void withInterfaceOnTargetCglibProxy() {     ProxyFactory targetFactory = new ProxyFactory().     targetFactory.setTarget(new TestWithInterfaceImpl()).     targetFactory.setProxyTargetClass(true).     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setTarget(targetFactory.getProxy()).     proxyFactory.addInterface(TestWithInterface.class).     proxyFactory.addAdvice(this.ti).     TestWithInterface proxy = (TestWithInterface) proxyFactory.getProxy().     proxy.doSomething().     assertGetTransactionAndCommitCount(1).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(2).     proxy.doSomethingElse().     assertGetTransactionAndCommitCount(3).     proxy.doSomething().     assertGetTransactionAndCommitCount(4).     proxy.doSomethingDefault().     assertGetTransactionAndCommitCount(5). }
false;private;1;4;;private void assertGetTransactionAndCommitCount(int expectedCount) {     assertEquals(expectedCount, this.ptm.begun).     assertEquals(expectedCount, this.ptm.commits). }
false;private;1;4;;private void assertGetTransactionAndRollbackCount(int expectedCount) {     assertEquals(expectedCount, this.ptm.begun).     assertEquals(expectedCount, this.ptm.rollbacks). }
false;public;0;4;;public void doSomething() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;4;;public void doSomethingElse() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;4;;public void doSomething() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;5;;@Transactional(readOnly = true) public void doSomethingElse() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;4;;public void doSomethingCompletelyElse() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;5;;@Transactional public void doSomething() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;4;;public void doSomethingElse() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;4;;public void doSomethingCompletelyElse() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;5;;@Transactional(readOnly = true) public void doSomething() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;5;;@Transactional(readOnly = true) public void doSomethingElse() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;4;;public void doSomethingCompletelyElse() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;5;;public void doSomethingErroneous() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     throw new IllegalStateException(). }
false;public;0;5;;public void doSomethingElseErroneous() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     throw new IllegalArgumentException(). }
false;public;0;6;;@Transactional public void doSomethingElseWithCheckedException() throws Exception {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     throw new Exception(). }
false;public;0;6;;@Transactional(rollbackFor = Exception.class) public void doSomethingElseWithCheckedExceptionAndRollbackRule() throws Exception {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     throw new Exception(). }
false;public;0;5;;public Try<String> doSomething() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return Try.success("ok"). }
false;public;0;5;;public Try<String> doSomethingErroneous() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return Try.failure(new IllegalStateException()). }
false;public;0;5;;public Try<String> doSomethingErroneousWithCheckedException() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return Try.failure(new Exception()). }
false;public;0;6;;@Transactional(rollbackFor = Exception.class) public Try<String> doSomethingErroneousWithCheckedExceptionAndRollbackRule() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return Try.failure(new Exception()). }
false;;0;1;;void doSomething().
false;;0;2;;@Transactional(readOnly = true) void doSomethingElse().
false;default;0;4;;default void doSomethingDefault() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;5;;@Override public void doSomething() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;public;0;5;;@Override public void doSomethingElse() {     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()). }
false;;0;1;;void foo().
false;;0;2;;@Transactional void bar().
false;;0;2;;@Transactional(readOnly = true) void fooBar().
false;public;0;3;;@Override public void bar() { }
false;public;0;4;;@Override @Transactional public void foo() { }
false;public;0;4;;@Override @Transactional(readOnly = false) public void fooBar() { }
false;;0;1;;void foo().
false;public;0;3;;@Override public void foo() { }
