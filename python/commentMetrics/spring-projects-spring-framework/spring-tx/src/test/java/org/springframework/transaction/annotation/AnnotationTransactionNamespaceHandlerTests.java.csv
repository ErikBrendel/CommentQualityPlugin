commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void tearDown() {     this.context.close(). }
false;public;0;7;;@Test public void isProxy() throws Exception {     TransactionalTestBean bean = getTestBean().     assertTrue("testBean is not a proxy", AopUtils.isAopProxy(bean)).     Map<String, Object> services = this.context.getBeansWithAnnotation(Service.class).     assertTrue("Stereotype annotation not visible", services.containsKey("testBean")). }
false;public;0;25;;@Test public void invokeTransactional() throws Exception {     TransactionalTestBean testBean = getTestBean().     CallCountingTransactionManager ptm = (CallCountingTransactionManager) context.getBean("transactionManager").     // try with transactional     assertEquals("Should not have any started transactions", 0, ptm.begun).     testBean.findAllFoos().     assertEquals("Should have 1 started transaction", 1, ptm.begun).     assertEquals("Should have 1 committed transaction", 1, ptm.commits).     // try with non-transaction     testBean.doSomething().     assertEquals("Should not have started another transaction", 1, ptm.begun).     // try with exceptional     try {         testBean.exceptional(new IllegalArgumentException("foo")).         fail("Should NEVER get here").     } catch (Throwable throwable) {         assertEquals("Should have another started transaction", 2, ptm.begun).         assertEquals("Should have 1 rolled back transaction", 1, ptm.rollbacks).     } }
false;public;0;9;;@Test public void nonPublicMethodsNotAdvised() {     TransactionalTestBean testBean = getTestBean().     CallCountingTransactionManager ptm = (CallCountingTransactionManager) context.getBean("transactionManager").     assertEquals("Should not have any started transactions", 0, ptm.begun).     testBean.annotationsOnProtectedAreIgnored().     assertEquals("Should not have any started transactions", 0, ptm.begun). }
false;public;0;6;;@Test public void mBeanExportAlsoWorks() throws Exception {     MBeanServer server = ManagementFactory.getPlatformMBeanServer().     assertEquals("done", server.invoke(ObjectName.getInstance("test:type=TestBean"), "doSomething", new Object[0], new String[0])). }
false;public;0;6;;@Test public void transactionalEventListenerRegisteredProperly() {     assertTrue(this.context.containsBean(TransactionManagementConfigUtils.TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME)).     assertEquals(1, this.context.getBeansOfType(TransactionalEventListenerFactory.class).size()). }
false;private;0;3;;private TransactionalTestBean getTestBean() {     return (TransactionalTestBean) context.getBean("testBean"). }
false;public;0;4;;@Transactional(readOnly = true) public Collection<?> findAllFoos() {     return null. }
false;public;0;3;;@Transactional public void saveFoo() { }
false;public;0;3;;@Transactional("qualifiedTransactionManager") public void saveQualifiedFoo() { }
false;public;0;3;;@Transactional(transactionManager = "qualifiedTransactionManager") public void saveQualifiedFooWithAttributeAlias() { }
false;public;1;4;;@Transactional public void exceptional(Throwable t) throws Throwable {     throw t. }
false;public;0;4;;@ManagedOperation public String doSomething() {     return "done". }
false;protected;0;3;;@Transactional protected void annotationsOnProtectedAreIgnored() { }
