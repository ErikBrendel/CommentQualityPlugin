# id;timestamp;commentText;codeText;commentWords;codeWords
RuleBasedTransactionAttributeTests -> @Test 	public void testRuleForRollbackOnChecked();1328020251;Test one checked exception that should roll back.;@Test_	public void testRuleForRollbackOnChecked() {_		List<RollbackRuleAttribute> list = new LinkedList<RollbackRuleAttribute>()__		list.add(new RollbackRuleAttribute(IOException.class.getName()))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new RuntimeException()))__		assertTrue(rta.rollbackOn(new MyRuntimeException("")))__		assertFalse(rta.rollbackOn(new Exception()))__		_		assertTrue(rta.rollbackOn(new IOException()))__	};test,one,checked,exception,that,should,roll,back;test,public,void,test,rule,for,rollback,on,checked,list,rollback,rule,attribute,list,new,linked,list,rollback,rule,attribute,list,add,new,rollback,rule,attribute,ioexception,class,get,name,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,runtime,exception,assert,true,rta,rollback,on,new,my,runtime,exception,assert,false,rta,rollback,on,new,exception,assert,true,rta,rollback,on,new,ioexception
RuleBasedTransactionAttributeTests -> @Test 	public void testRuleForRollbackOnChecked();1413848647;Test one checked exception that should roll back.;@Test_	public void testRuleForRollbackOnChecked() {_		List<RollbackRuleAttribute> list = new LinkedList<RollbackRuleAttribute>()__		list.add(new RollbackRuleAttribute(IOException.class.getName()))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new RuntimeException()))__		assertTrue(rta.rollbackOn(new MyRuntimeException("")))__		assertFalse(rta.rollbackOn(new Exception()))__		_		assertTrue(rta.rollbackOn(new IOException()))__	};test,one,checked,exception,that,should,roll,back;test,public,void,test,rule,for,rollback,on,checked,list,rollback,rule,attribute,list,new,linked,list,rollback,rule,attribute,list,add,new,rollback,rule,attribute,ioexception,class,get,name,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,runtime,exception,assert,true,rta,rollback,on,new,my,runtime,exception,assert,false,rta,rollback,on,new,exception,assert,true,rta,rollback,on,new,ioexception
RuleBasedTransactionAttributeTests -> @Test 	public void testRuleForRollbackOnChecked();1467730834;Test one checked exception that should roll back.;@Test_	public void testRuleForRollbackOnChecked() {_		List<RollbackRuleAttribute> list = new LinkedList<>()__		list.add(new RollbackRuleAttribute(IOException.class.getName()))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new RuntimeException()))__		assertTrue(rta.rollbackOn(new MyRuntimeException("")))__		assertFalse(rta.rollbackOn(new Exception()))__		_		assertTrue(rta.rollbackOn(new IOException()))__	};test,one,checked,exception,that,should,roll,back;test,public,void,test,rule,for,rollback,on,checked,list,rollback,rule,attribute,list,new,linked,list,list,add,new,rollback,rule,attribute,ioexception,class,get,name,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,runtime,exception,assert,true,rta,rollback,on,new,my,runtime,exception,assert,false,rta,rollback,on,new,exception,assert,true,rta,rollback,on,new,ioexception
RuleBasedTransactionAttributeTests -> @Test 	public void testRuleForCommitOnSubclassOfChecked();1328020251;Check that a rule can cause commit on a IOException_when Exception prompts a rollback.;@Test_	public void testRuleForCommitOnSubclassOfChecked() {_		List<RollbackRuleAttribute> list = new LinkedList<RollbackRuleAttribute>()__		_		_		list.add(new RollbackRuleAttribute("java.lang.Exception"))__		list.add(new NoRollbackRuleAttribute("IOException"))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new RuntimeException()))__		assertTrue(rta.rollbackOn(new Exception()))__		_		assertFalse(rta.rollbackOn(new IOException()))__	};check,that,a,rule,can,cause,commit,on,a,ioexception,when,exception,prompts,a,rollback;test,public,void,test,rule,for,commit,on,subclass,of,checked,list,rollback,rule,attribute,list,new,linked,list,rollback,rule,attribute,list,add,new,rollback,rule,attribute,java,lang,exception,list,add,new,no,rollback,rule,attribute,ioexception,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,runtime,exception,assert,true,rta,rollback,on,new,exception,assert,false,rta,rollback,on,new,ioexception
RuleBasedTransactionAttributeTests -> @Test 	public void testRuleForCommitOnSubclassOfChecked();1413848647;Check that a rule can cause commit on a IOException_when Exception prompts a rollback.;@Test_	public void testRuleForCommitOnSubclassOfChecked() {_		List<RollbackRuleAttribute> list = new LinkedList<RollbackRuleAttribute>()__		_		_		list.add(new RollbackRuleAttribute("java.lang.Exception"))__		list.add(new NoRollbackRuleAttribute("IOException"))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new RuntimeException()))__		assertTrue(rta.rollbackOn(new Exception()))__		_		assertFalse(rta.rollbackOn(new IOException()))__	};check,that,a,rule,can,cause,commit,on,a,ioexception,when,exception,prompts,a,rollback;test,public,void,test,rule,for,commit,on,subclass,of,checked,list,rollback,rule,attribute,list,new,linked,list,rollback,rule,attribute,list,add,new,rollback,rule,attribute,java,lang,exception,list,add,new,no,rollback,rule,attribute,ioexception,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,runtime,exception,assert,true,rta,rollback,on,new,exception,assert,false,rta,rollback,on,new,ioexception
RuleBasedTransactionAttributeTests -> @Test 	public void testRuleForCommitOnSubclassOfChecked();1467730834;Check that a rule can cause commit on a IOException_when Exception prompts a rollback.;@Test_	public void testRuleForCommitOnSubclassOfChecked() {_		List<RollbackRuleAttribute> list = new LinkedList<>()__		_		_		list.add(new RollbackRuleAttribute("java.lang.Exception"))__		list.add(new NoRollbackRuleAttribute("IOException"))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new RuntimeException()))__		assertTrue(rta.rollbackOn(new Exception()))__		_		assertFalse(rta.rollbackOn(new IOException()))__	};check,that,a,rule,can,cause,commit,on,a,ioexception,when,exception,prompts,a,rollback;test,public,void,test,rule,for,commit,on,subclass,of,checked,list,rollback,rule,attribute,list,new,linked,list,list,add,new,rollback,rule,attribute,java,lang,exception,list,add,new,no,rollback,rule,attribute,ioexception,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,runtime,exception,assert,true,rta,rollback,on,new,exception,assert,false,rta,rollback,on,new,ioexception
RuleBasedTransactionAttributeTests -> @Test 	public void testConflictingRulesToDetermineExactContract();1328020251;See <a href="http://forum.springframework.org/showthread.php?t=41350">this forum post</a>.;@Test_	public void testConflictingRulesToDetermineExactContract() {_		List<RollbackRuleAttribute> list = new LinkedList<RollbackRuleAttribute>()__		list.add(new NoRollbackRuleAttribute(MyBusinessWarningException.class))__		list.add(new RollbackRuleAttribute(MyBusinessException.class))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new MyBusinessException()))__		assertFalse(rta.rollbackOn(new MyBusinessWarningException()))__	};see,a,href,http,forum,springframework,org,showthread,php,t,41350,this,forum,post,a;test,public,void,test,conflicting,rules,to,determine,exact,contract,list,rollback,rule,attribute,list,new,linked,list,rollback,rule,attribute,list,add,new,no,rollback,rule,attribute,my,business,warning,exception,class,list,add,new,rollback,rule,attribute,my,business,exception,class,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,my,business,exception,assert,false,rta,rollback,on,new,my,business,warning,exception
RuleBasedTransactionAttributeTests -> @Test 	public void testConflictingRulesToDetermineExactContract();1413848647;See <a href="http://forum.springframework.org/showthread.php?t=41350">this forum post</a>.;@Test_	public void testConflictingRulesToDetermineExactContract() {_		List<RollbackRuleAttribute> list = new LinkedList<RollbackRuleAttribute>()__		list.add(new NoRollbackRuleAttribute(MyBusinessWarningException.class))__		list.add(new RollbackRuleAttribute(MyBusinessException.class))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new MyBusinessException()))__		assertFalse(rta.rollbackOn(new MyBusinessWarningException()))__	};see,a,href,http,forum,springframework,org,showthread,php,t,41350,this,forum,post,a;test,public,void,test,conflicting,rules,to,determine,exact,contract,list,rollback,rule,attribute,list,new,linked,list,rollback,rule,attribute,list,add,new,no,rollback,rule,attribute,my,business,warning,exception,class,list,add,new,rollback,rule,attribute,my,business,exception,class,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,my,business,exception,assert,false,rta,rollback,on,new,my,business,warning,exception
RuleBasedTransactionAttributeTests -> @Test 	public void testConflictingRulesToDetermineExactContract();1467730834;See <a href="http://forum.springframework.org/showthread.php?t=41350">this forum post</a>.;@Test_	public void testConflictingRulesToDetermineExactContract() {_		List<RollbackRuleAttribute> list = new LinkedList<>()__		list.add(new NoRollbackRuleAttribute(MyBusinessWarningException.class))__		list.add(new RollbackRuleAttribute(MyBusinessException.class))__		RuleBasedTransactionAttribute rta = new RuleBasedTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED, list)___		assertTrue(rta.rollbackOn(new MyBusinessException()))__		assertFalse(rta.rollbackOn(new MyBusinessWarningException()))__	};see,a,href,http,forum,springframework,org,showthread,php,t,41350,this,forum,post,a;test,public,void,test,conflicting,rules,to,determine,exact,contract,list,rollback,rule,attribute,list,new,linked,list,list,add,new,no,rollback,rule,attribute,my,business,warning,exception,class,list,add,new,rollback,rule,attribute,my,business,exception,class,rule,based,transaction,attribute,rta,new,rule,based,transaction,attribute,transaction,definition,list,assert,true,rta,rollback,on,new,my,business,exception,assert,false,rta,rollback,on,new,my,business,warning,exception
