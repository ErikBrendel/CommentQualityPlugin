# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceedWithNotNew() throws Exception;1404485123;Check that a transaction is created and committed.;@Test_	public void transactionShouldSucceedWithNotNew() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		_		itb.getName()__		checkTransactionStatus(false)___		verify(ptm).commit(status)__	};check,that,a,transaction,is,created,and,committed;test,public,void,transaction,should,succeed,with,not,new,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceedWithNotNew() throws Exception;1518615840;Check that a transaction is created and committed.;@Test_	public void transactionShouldSucceedWithNotNew() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		_		itb.getName()__		checkTransactionStatus(false)___		verify(ptm).commit(status)__	};check,that,a,transaction,is,created,and,committed;test,public,void,transaction,should,succeed,with,not,new,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceedWithNotNew() throws Exception;1525511255;Check that a transaction is created and committed.;@Test_	public void transactionShouldSucceedWithNotNew() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		_		itb.getName()__		checkTransactionStatus(false)___		verify(ptm).commit(status)__	};check,that,a,transaction,is,created,and,committed;test,public,void,transaction,should,succeed,with,not,new,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,verify,ptm,commit,status
AbstractTransactionAspectTests -> public void testProgrammaticRollback() throws Exception;1328020251;Test that TransactionStatus.setRollbackOnly works.;public void testProgrammaticRollback() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()___		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		final String name = "jenny"__		TestBean tb = new TestBean() {_			public String getName() {_				TransactionStatus txStatus = TransactionInterceptor.currentTransactionStatus()__				txStatus.setRollbackOnly()__				return name__			}_		}__		_		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		_		assertTrue(name.equals(itb.getName()))___		ptmControl.verify()__	};test,that,transaction,status,set,rollback,only,works;public,void,test,programmatic,rollback,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,final,string,name,jenny,test,bean,tb,new,test,bean,public,string,get,name,transaction,status,tx,status,transaction,interceptor,current,transaction,status,tx,status,set,rollback,only,return,name,itest,bean,itb,itest,bean,advised,tb,ptm,tas,assert,true,name,equals,itb,get,name,ptm,control,verify
AbstractTransactionAspectTests -> public void testProgrammaticRollback() throws Exception;1356735495;Test that TransactionStatus.setRollbackOnly works.;public void testProgrammaticRollback() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()___		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		final String name = "jenny"__		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				TransactionStatus txStatus = TransactionInterceptor.currentTransactionStatus()__				txStatus.setRollbackOnly()__				return name__			}_		}___		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		_		assertTrue(name.equals(itb.getName()))___		ptmControl.verify()__	};test,that,transaction,status,set,rollback,only,works;public,void,test,programmatic,rollback,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,final,string,name,jenny,test,bean,tb,new,test,bean,override,public,string,get,name,transaction,status,tx,status,transaction,interceptor,current,transaction,status,tx,status,set,rollback,only,return,name,itest,bean,itb,itest,bean,advised,tb,ptm,tas,assert,true,name,equals,itb,get,name,ptm,control,verify
AbstractTransactionAspectTests -> public void testProgrammaticRollback() throws Exception;1362408075;Test that TransactionStatus.setRollbackOnly works.;public void testProgrammaticRollback() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()___		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		final String name = "jenny"__		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				TransactionStatus txStatus = TransactionInterceptor.currentTransactionStatus()__				txStatus.setRollbackOnly()__				return name__			}_		}___		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		_		assertTrue(name.equals(itb.getName()))___		ptmControl.verify()__	};test,that,transaction,status,set,rollback,only,works;public,void,test,programmatic,rollback,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,final,string,name,jenny,test,bean,tb,new,test,bean,override,public,string,get,name,transaction,status,tx,status,transaction,interceptor,current,transaction,status,tx,status,set,rollback,only,return,name,itest,bean,itb,itest,bean,advised,tb,ptm,tas,assert,true,name,equals,itb,get,name,ptm,control,verify
AbstractTransactionAspectTests -> public void testProgrammaticRollback() throws Exception;1363208506;Test that TransactionStatus.setRollbackOnly works.;public void testProgrammaticRollback() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)___		given(ptm.getTransaction(txatt)).willReturn(status)___		final String name = "jenny"__		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				TransactionStatus txStatus = TransactionInterceptor.currentTransactionStatus()__				txStatus.setRollbackOnly()__				return name__			}_		}___		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		_		assertTrue(name.equals(itb.getName()))___		verify(ptm).commit(status)__	};test,that,transaction,status,set,rollback,only,works;public,void,test,programmatic,rollback,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,final,string,name,jenny,test,bean,tb,new,test,bean,override,public,string,get,name,transaction,status,tx,status,transaction,interceptor,current,transaction,status,tx,status,set,rollback,only,return,name,itest,bean,itb,itest,bean,advised,tb,ptm,tas,assert,true,name,equals,itb,get,name,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void cannotCreateTransaction() throws Exception;1404485123;Simulate a transaction infrastructure failure._Shouldn't invoke target method.;@Test_	public void cannotCreateTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		CannotCreateTransactionException ex = new CannotCreateTransactionException("foobar", null)__		given(ptm.getTransaction(txatt)).willThrow(ex)___		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				throw new UnsupportedOperationException(_						"Shouldn't have invoked target method when couldn't create transaction for transactional method")__			}_		}__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.getName()__			fail("Shouldn't have invoked method")__		}_		catch (CannotCreateTransactionException thrown) {_			assertTrue(thrown == ex)__		}_	};simulate,a,transaction,infrastructure,failure,shouldn,t,invoke,target,method;test,public,void,cannot,create,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,cannot,create,transaction,exception,ex,new,cannot,create,transaction,exception,foobar,null,given,ptm,get,transaction,txatt,will,throw,ex,test,bean,tb,new,test,bean,override,public,string,get,name,throw,new,unsupported,operation,exception,shouldn,t,have,invoked,target,method,when,couldn,t,create,transaction,for,transactional,method,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,get,name,fail,shouldn,t,have,invoked,method,catch,cannot,create,transaction,exception,thrown,assert,true,thrown,ex
AbstractTransactionAspectTests -> @Test 	public void cannotCreateTransaction() throws Exception;1518615840;Simulate a transaction infrastructure failure._Shouldn't invoke target method.;@Test_	public void cannotCreateTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		CannotCreateTransactionException ex = new CannotCreateTransactionException("foobar", null)__		given(ptm.getTransaction(txatt)).willThrow(ex)___		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				throw new UnsupportedOperationException(_						"Shouldn't have invoked target method when couldn't create transaction for transactional method")__			}_		}__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.getName()__			fail("Shouldn't have invoked method")__		}_		catch (CannotCreateTransactionException thrown) {_			assertTrue(thrown == ex)__		}_	};simulate,a,transaction,infrastructure,failure,shouldn,t,invoke,target,method;test,public,void,cannot,create,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,cannot,create,transaction,exception,ex,new,cannot,create,transaction,exception,foobar,null,given,ptm,get,transaction,txatt,will,throw,ex,test,bean,tb,new,test,bean,override,public,string,get,name,throw,new,unsupported,operation,exception,shouldn,t,have,invoked,target,method,when,couldn,t,create,transaction,for,transactional,method,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,get,name,fail,shouldn,t,have,invoked,method,catch,cannot,create,transaction,exception,thrown,assert,true,thrown,ex
AbstractTransactionAspectTests -> @Test 	public void cannotCreateTransaction() throws Exception;1525511255;Simulate a transaction infrastructure failure._Shouldn't invoke target method.;@Test_	public void cannotCreateTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		CannotCreateTransactionException ex = new CannotCreateTransactionException("foobar", null)__		given(ptm.getTransaction(txatt)).willThrow(ex)___		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				throw new UnsupportedOperationException(_						"Shouldn't have invoked target method when couldn't create transaction for transactional method")__			}_		}__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.getName()__			fail("Shouldn't have invoked method")__		}_		catch (CannotCreateTransactionException thrown) {_			assertTrue(thrown == ex)__		}_	};simulate,a,transaction,infrastructure,failure,shouldn,t,invoke,target,method;test,public,void,cannot,create,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,cannot,create,transaction,exception,ex,new,cannot,create,transaction,exception,foobar,null,given,ptm,get,transaction,txatt,will,throw,ex,test,bean,tb,new,test,bean,override,public,string,get,name,throw,new,unsupported,operation,exception,shouldn,t,have,invoked,target,method,when,couldn,t,create,transaction,for,transactional,method,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,get,name,fail,shouldn,t,have,invoked,method,catch,cannot,create,transaction,exception,thrown,assert,true,thrown,ex
AbstractTransactionAspectTests -> public void testTwoTransactionsShouldSucceed() throws Exception;1328020251;Check that two transactions are created and committed.;public void testTwoTransactionsShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas1 = new MapTransactionAttributeSource()__		tas1.register(getNameMethod, txatt)__		MapTransactionAttributeSource tas2 = new MapTransactionAttributeSource()__		tas2.register(setNameMethod, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 2)__		ptm.commit(status)__		ptmControl.setVoidCallable(2)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, new TransactionAttributeSource[] {tas1, tas2})___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)__		itb.setName("myName")__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,two,transactions,are,created,and,committed;public,void,test,two,transactions,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas1,new,map,transaction,attribute,source,tas1,register,get,name,method,txatt,map,transaction,attribute,source,tas2,new,map,transaction,attribute,source,tas2,register,set,name,method,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,2,ptm,commit,status,ptm,control,set,void,callable,2,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,new,transaction,attribute,source,tas1,tas2,check,transaction,status,false,itb,get,name,check,transaction,status,false,itb,set,name,my,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTwoTransactionsShouldSucceed() throws Exception;1356735495;Check that two transactions are created and committed.;public void testTwoTransactionsShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas1 = new MapTransactionAttributeSource()__		tas1.register(getNameMethod, txatt)__		MapTransactionAttributeSource tas2 = new MapTransactionAttributeSource()__		tas2.register(setNameMethod, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 2)__		ptm.commit(status)__		ptmControl.setVoidCallable(2)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, new TransactionAttributeSource[] {tas1, tas2})___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)__		itb.setName("myName")__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,two,transactions,are,created,and,committed;public,void,test,two,transactions,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas1,new,map,transaction,attribute,source,tas1,register,get,name,method,txatt,map,transaction,attribute,source,tas2,new,map,transaction,attribute,source,tas2,register,set,name,method,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,2,ptm,commit,status,ptm,control,set,void,callable,2,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,new,transaction,attribute,source,tas1,tas2,check,transaction,status,false,itb,get,name,check,transaction,status,false,itb,set,name,my,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTwoTransactionsShouldSucceed() throws Exception;1362408075;Check that two transactions are created and committed.;public void testTwoTransactionsShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas1 = new MapTransactionAttributeSource()__		tas1.register(getNameMethod, txatt)__		MapTransactionAttributeSource tas2 = new MapTransactionAttributeSource()__		tas2.register(setNameMethod, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 2)__		ptm.commit(status)__		ptmControl.setVoidCallable(2)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, new TransactionAttributeSource[] {tas1, tas2})___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)__		itb.setName("myName")__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,two,transactions,are,created,and,committed;public,void,test,two,transactions,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas1,new,map,transaction,attribute,source,tas1,register,get,name,method,txatt,map,transaction,attribute,source,tas2,new,map,transaction,attribute,source,tas2,register,set,name,method,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,2,ptm,commit,status,ptm,control,set,void,callable,2,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,new,transaction,attribute,source,tas1,tas2,check,transaction,status,false,itb,get,name,check,transaction,status,false,itb,set,name,my,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTwoTransactionsShouldSucceed() throws Exception;1363208506;Check that two transactions are created and committed.;public void testTwoTransactionsShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas1 = new MapTransactionAttributeSource()__		tas1.register(getNameMethod, txatt)__		MapTransactionAttributeSource tas2 = new MapTransactionAttributeSource()__		tas2.register(setNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, new TransactionAttributeSource[] {tas1, tas2})___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)__		itb.setName("myName")__		checkTransactionStatus(false)___		verify(ptm, times(2)).commit(status)__	};check,that,two,transactions,are,created,and,committed;public,void,test,two,transactions,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas1,new,map,transaction,attribute,source,tas1,register,get,name,method,txatt,map,transaction,attribute,source,tas2,new,map,transaction,attribute,source,tas2,register,set,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,new,transaction,attribute,source,tas1,tas2,check,transaction,status,false,itb,get,name,check,transaction,status,false,itb,set,name,my,name,check,transaction,status,false,verify,ptm,times,2,commit,status
AbstractTransactionAspectTests -> @Test 	public void cannotCommitTransaction() throws Exception;1404485123;Simulate failure of the underlying transaction infrastructure to commit._Check that the target method was invoked, but that the transaction_infrastructure exception was thrown to the client;@Test_	public void cannotCommitTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = setNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)__		_		__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)___		TransactionStatus status = mock(TransactionStatus.class)__		given(ptm.getTransaction(txatt)).willReturn(status)__		UnexpectedRollbackException ex = new UnexpectedRollbackException("foobar", null)__		willThrow(ex).given(ptm).commit(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		String name = "new name"__		try {_			itb.setName(name)__			fail("Shouldn't have succeeded")__		}_		catch (UnexpectedRollbackException thrown) {_			assertTrue(thrown == ex)__		}__		_		assertTrue(itb.getName() == name)__	};simulate,failure,of,the,underlying,transaction,infrastructure,to,commit,check,that,the,target,method,was,invoked,but,that,the,transaction,infrastructure,exception,was,thrown,to,the,client;test,public,void,cannot,commit,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,set,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,transaction,status,status,mock,transaction,status,class,given,ptm,get,transaction,txatt,will,return,status,unexpected,rollback,exception,ex,new,unexpected,rollback,exception,foobar,null,will,throw,ex,given,ptm,commit,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,string,name,new,name,try,itb,set,name,name,fail,shouldn,t,have,succeeded,catch,unexpected,rollback,exception,thrown,assert,true,thrown,ex,assert,true,itb,get,name,name
AbstractTransactionAspectTests -> @Test 	public void cannotCommitTransaction() throws Exception;1518615840;Simulate failure of the underlying transaction infrastructure to commit._Check that the target method was invoked, but that the transaction_infrastructure exception was thrown to the client;@Test_	public void cannotCommitTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = setNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)__		_		__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)___		TransactionStatus status = mock(TransactionStatus.class)__		given(ptm.getTransaction(txatt)).willReturn(status)__		UnexpectedRollbackException ex = new UnexpectedRollbackException("foobar", null)__		willThrow(ex).given(ptm).commit(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		String name = "new name"__		try {_			itb.setName(name)__			fail("Shouldn't have succeeded")__		}_		catch (UnexpectedRollbackException thrown) {_			assertTrue(thrown == ex)__		}__		_		assertTrue(itb.getName() == name)__	};simulate,failure,of,the,underlying,transaction,infrastructure,to,commit,check,that,the,target,method,was,invoked,but,that,the,transaction,infrastructure,exception,was,thrown,to,the,client;test,public,void,cannot,commit,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,set,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,transaction,status,status,mock,transaction,status,class,given,ptm,get,transaction,txatt,will,return,status,unexpected,rollback,exception,ex,new,unexpected,rollback,exception,foobar,null,will,throw,ex,given,ptm,commit,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,string,name,new,name,try,itb,set,name,name,fail,shouldn,t,have,succeeded,catch,unexpected,rollback,exception,thrown,assert,true,thrown,ex,assert,true,itb,get,name,name
AbstractTransactionAspectTests -> @Test 	public void cannotCommitTransaction() throws Exception;1525511255;Simulate failure of the underlying transaction infrastructure to commit._Check that the target method was invoked, but that the transaction_infrastructure exception was thrown to the client;@Test_	public void cannotCommitTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = setNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)__		_		__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)___		TransactionStatus status = mock(TransactionStatus.class)__		given(ptm.getTransaction(txatt)).willReturn(status)__		UnexpectedRollbackException ex = new UnexpectedRollbackException("foobar", null)__		willThrow(ex).given(ptm).commit(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		String name = "new name"__		try {_			itb.setName(name)__			fail("Shouldn't have succeeded")__		}_		catch (UnexpectedRollbackException thrown) {_			assertTrue(thrown == ex)__		}__		_		assertTrue(itb.getName() == name)__	};simulate,failure,of,the,underlying,transaction,infrastructure,to,commit,check,that,the,target,method,was,invoked,but,that,the,transaction,infrastructure,exception,was,thrown,to,the,client;test,public,void,cannot,commit,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,set,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,transaction,status,status,mock,transaction,status,class,given,ptm,get,transaction,txatt,will,return,status,unexpected,rollback,exception,ex,new,unexpected,rollback,exception,foobar,null,will,throw,ex,given,ptm,commit,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,string,name,new,name,try,itb,set,name,name,fail,shouldn,t,have,succeeded,catch,unexpected,rollback,exception,thrown,assert,true,thrown,ex,assert,true,itb,get,name,name
AbstractTransactionAspectTests -> @SuppressWarnings("serial") 	protected void doTestRollbackOnException( 			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception;1356735495;Check that the given exception thrown by the target can produce the_desired behavior with the appropriate transaction attribute._@param ex exception to be thrown by the target_@param shouldRollback whether this should cause a transaction rollback;@SuppressWarnings("serial")_	protected void doTestRollbackOnException(_			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception {__		TransactionAttribute txatt = new DefaultTransactionAttribute() {_			@Override_			public boolean rollbackOn(Throwable t) {_				assertTrue(t == ex)__				return shouldRollback__			}_		}___		Method m = exceptionalMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		MockControl statusControl = MockControl.createControl(TransactionStatus.class)__		TransactionStatus status = (TransactionStatus) statusControl.getMock()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		__		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)___		if (shouldRollback) {_			ptm.rollback(status)__		}_		else {_			ptm.commit(status)__		}_		TransactionSystemException tex = new TransactionSystemException("system exception")__		if (rollbackException) {_			ptmControl.setThrowable(tex, 1)__		}_		else {_			ptmControl.setVoidCallable(1)__		}_		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.exceptional(ex)__			fail("Should have thrown exception")__		}_		catch (Throwable t) {_			if (rollbackException) {_				assertEquals("Caught wrong exception", tex, t )__			}_			else {_				assertEquals("Caught wrong exception", ex, t)__			}_		}__		ptmControl.verify()__	};check,that,the,given,exception,thrown,by,the,target,can,produce,the,desired,behavior,with,the,appropriate,transaction,attribute,param,ex,exception,to,be,thrown,by,the,target,param,should,rollback,whether,this,should,cause,a,transaction,rollback;suppress,warnings,serial,protected,void,do,test,rollback,on,exception,final,exception,ex,final,boolean,should,rollback,boolean,rollback,exception,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,override,public,boolean,rollback,on,throwable,t,assert,true,t,ex,return,should,rollback,method,m,exceptional,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,mock,control,status,control,mock,control,create,control,transaction,status,class,transaction,status,status,transaction,status,status,control,get,mock,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,if,should,rollback,ptm,rollback,status,else,ptm,commit,status,transaction,system,exception,tex,new,transaction,system,exception,system,exception,if,rollback,exception,ptm,control,set,throwable,tex,1,else,ptm,control,set,void,callable,1,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,exceptional,ex,fail,should,have,thrown,exception,catch,throwable,t,if,rollback,exception,assert,equals,caught,wrong,exception,tex,t,else,assert,equals,caught,wrong,exception,ex,t,ptm,control,verify
AbstractTransactionAspectTests -> @SuppressWarnings("serial") 	protected void doTestRollbackOnException( 			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception;1362408075;Check that the given exception thrown by the target can produce the_desired behavior with the appropriate transaction attribute._@param ex exception to be thrown by the target_@param shouldRollback whether this should cause a transaction rollback;@SuppressWarnings("serial")_	protected void doTestRollbackOnException(_			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception {__		TransactionAttribute txatt = new DefaultTransactionAttribute() {_			@Override_			public boolean rollbackOn(Throwable t) {_				assertTrue(t == ex)__				return shouldRollback__			}_		}___		Method m = exceptionalMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		MockControl statusControl = MockControl.createControl(TransactionStatus.class)__		TransactionStatus status = (TransactionStatus) statusControl.getMock()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		__		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)___		if (shouldRollback) {_			ptm.rollback(status)__		}_		else {_			ptm.commit(status)__		}_		TransactionSystemException tex = new TransactionSystemException("system exception")__		if (rollbackException) {_			ptmControl.setThrowable(tex, 1)__		}_		else {_			ptmControl.setVoidCallable(1)__		}_		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.exceptional(ex)__			fail("Should have thrown exception")__		}_		catch (Throwable t) {_			if (rollbackException) {_				assertEquals("Caught wrong exception", tex, t )__			}_			else {_				assertEquals("Caught wrong exception", ex, t)__			}_		}__		ptmControl.verify()__	};check,that,the,given,exception,thrown,by,the,target,can,produce,the,desired,behavior,with,the,appropriate,transaction,attribute,param,ex,exception,to,be,thrown,by,the,target,param,should,rollback,whether,this,should,cause,a,transaction,rollback;suppress,warnings,serial,protected,void,do,test,rollback,on,exception,final,exception,ex,final,boolean,should,rollback,boolean,rollback,exception,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,override,public,boolean,rollback,on,throwable,t,assert,true,t,ex,return,should,rollback,method,m,exceptional,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,mock,control,status,control,mock,control,create,control,transaction,status,class,transaction,status,status,transaction,status,status,control,get,mock,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,if,should,rollback,ptm,rollback,status,else,ptm,commit,status,transaction,system,exception,tex,new,transaction,system,exception,system,exception,if,rollback,exception,ptm,control,set,throwable,tex,1,else,ptm,control,set,void,callable,1,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,exceptional,ex,fail,should,have,thrown,exception,catch,throwable,t,if,rollback,exception,assert,equals,caught,wrong,exception,tex,t,else,assert,equals,caught,wrong,exception,ex,t,ptm,control,verify
AbstractTransactionAspectTests -> @SuppressWarnings("serial") 	protected void doTestRollbackOnException( 			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception;1363208506;Check that the given exception thrown by the target can produce the_desired behavior with the appropriate transaction attribute._@param ex exception to be thrown by the target_@param shouldRollback whether this should cause a transaction rollback;@SuppressWarnings("serial")_	protected void doTestRollbackOnException(_			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception {__		TransactionAttribute txatt = new DefaultTransactionAttribute() {_			@Override_			public boolean rollbackOn(Throwable t) {_				assertTrue(t == ex)__				return shouldRollback__			}_		}___		Method m = exceptionalMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		__		given(ptm.getTransaction(txatt)).willReturn(status)___		TransactionSystemException tex = new TransactionSystemException("system exception")__		if (rollbackException) {_			if (shouldRollback) {_				willThrow(tex).given(ptm).rollback(status)__			}_			else {_				willThrow(tex).given(ptm).commit(status)__			}_		}__		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.exceptional(ex)__			fail("Should have thrown exception")__		}_		catch (Throwable t) {_			if (rollbackException) {_				assertEquals("Caught wrong exception", tex, t )__			}_			else {_				assertEquals("Caught wrong exception", ex, t)__			}_		}__		if (!rollbackException) {_			if (shouldRollback) {_				verify(ptm).rollback(status)__			}_			else {_				verify(ptm).commit(status)__			}_		}_	};check,that,the,given,exception,thrown,by,the,target,can,produce,the,desired,behavior,with,the,appropriate,transaction,attribute,param,ex,exception,to,be,thrown,by,the,target,param,should,rollback,whether,this,should,cause,a,transaction,rollback;suppress,warnings,serial,protected,void,do,test,rollback,on,exception,final,exception,ex,final,boolean,should,rollback,boolean,rollback,exception,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,override,public,boolean,rollback,on,throwable,t,assert,true,t,ex,return,should,rollback,method,m,exceptional,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,transaction,system,exception,tex,new,transaction,system,exception,system,exception,if,rollback,exception,if,should,rollback,will,throw,tex,given,ptm,rollback,status,else,will,throw,tex,given,ptm,commit,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,exceptional,ex,fail,should,have,thrown,exception,catch,throwable,t,if,rollback,exception,assert,equals,caught,wrong,exception,tex,t,else,assert,equals,caught,wrong,exception,ex,t,if,rollback,exception,if,should,rollback,verify,ptm,rollback,status,else,verify,ptm,commit,status
AbstractTransactionAspectTests -> @SuppressWarnings("serial") 	protected void doTestRollbackOnException( 			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception;1404485123;Check that the given exception thrown by the target can produce the_desired behavior with the appropriate transaction attribute._@param ex exception to be thrown by the target_@param shouldRollback whether this should cause a transaction rollback;@SuppressWarnings("serial")_	protected void doTestRollbackOnException(_			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception {__		TransactionAttribute txatt = new DefaultTransactionAttribute() {_			@Override_			public boolean rollbackOn(Throwable t) {_				assertTrue(t == ex)__				return shouldRollback__			}_		}___		Method m = exceptionalMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		__		given(ptm.getTransaction(txatt)).willReturn(status)___		TransactionSystemException tex = new TransactionSystemException("system exception")__		if (rollbackException) {_			if (shouldRollback) {_				willThrow(tex).given(ptm).rollback(status)__			}_			else {_				willThrow(tex).given(ptm).commit(status)__			}_		}__		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.exceptional(ex)__			fail("Should have thrown exception")__		}_		catch (Throwable t) {_			if (rollbackException) {_				assertEquals("Caught wrong exception", tex, t )__			}_			else {_				assertEquals("Caught wrong exception", ex, t)__			}_		}__		if (!rollbackException) {_			if (shouldRollback) {_				verify(ptm).rollback(status)__			}_			else {_				verify(ptm).commit(status)__			}_		}_	};check,that,the,given,exception,thrown,by,the,target,can,produce,the,desired,behavior,with,the,appropriate,transaction,attribute,param,ex,exception,to,be,thrown,by,the,target,param,should,rollback,whether,this,should,cause,a,transaction,rollback;suppress,warnings,serial,protected,void,do,test,rollback,on,exception,final,exception,ex,final,boolean,should,rollback,boolean,rollback,exception,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,override,public,boolean,rollback,on,throwable,t,assert,true,t,ex,return,should,rollback,method,m,exceptional,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,transaction,system,exception,tex,new,transaction,system,exception,system,exception,if,rollback,exception,if,should,rollback,will,throw,tex,given,ptm,rollback,status,else,will,throw,tex,given,ptm,commit,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,exceptional,ex,fail,should,have,thrown,exception,catch,throwable,t,if,rollback,exception,assert,equals,caught,wrong,exception,tex,t,else,assert,equals,caught,wrong,exception,ex,t,if,rollback,exception,if,should,rollback,verify,ptm,rollback,status,else,verify,ptm,commit,status
AbstractTransactionAspectTests -> @SuppressWarnings("serial") 	protected void doTestRollbackOnException( 			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception;1518615840;Check that the given exception thrown by the target can produce the_desired behavior with the appropriate transaction attribute._@param ex exception to be thrown by the target_@param shouldRollback whether this should cause a transaction rollback;@SuppressWarnings("serial")_	protected void doTestRollbackOnException(_			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception {__		TransactionAttribute txatt = new DefaultTransactionAttribute() {_			@Override_			public boolean rollbackOn(Throwable t) {_				assertTrue(t == ex)__				return shouldRollback__			}_		}___		Method m = exceptionalMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		__		given(ptm.getTransaction(txatt)).willReturn(status)___		TransactionSystemException tex = new TransactionSystemException("system exception")__		if (rollbackException) {_			if (shouldRollback) {_				willThrow(tex).given(ptm).rollback(status)__			}_			else {_				willThrow(tex).given(ptm).commit(status)__			}_		}__		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.exceptional(ex)__			fail("Should have thrown exception")__		}_		catch (Throwable t) {_			if (rollbackException) {_				assertEquals("Caught wrong exception", tex, t )__			}_			else {_				assertEquals("Caught wrong exception", ex, t)__			}_		}__		if (!rollbackException) {_			if (shouldRollback) {_				verify(ptm).rollback(status)__			}_			else {_				verify(ptm).commit(status)__			}_		}_	};check,that,the,given,exception,thrown,by,the,target,can,produce,the,desired,behavior,with,the,appropriate,transaction,attribute,param,ex,exception,to,be,thrown,by,the,target,param,should,rollback,whether,this,should,cause,a,transaction,rollback;suppress,warnings,serial,protected,void,do,test,rollback,on,exception,final,exception,ex,final,boolean,should,rollback,boolean,rollback,exception,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,override,public,boolean,rollback,on,throwable,t,assert,true,t,ex,return,should,rollback,method,m,exceptional,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,transaction,system,exception,tex,new,transaction,system,exception,system,exception,if,rollback,exception,if,should,rollback,will,throw,tex,given,ptm,rollback,status,else,will,throw,tex,given,ptm,commit,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,exceptional,ex,fail,should,have,thrown,exception,catch,throwable,t,if,rollback,exception,assert,equals,caught,wrong,exception,tex,t,else,assert,equals,caught,wrong,exception,ex,t,if,rollback,exception,if,should,rollback,verify,ptm,rollback,status,else,verify,ptm,commit,status
AbstractTransactionAspectTests -> @SuppressWarnings("serial") 	protected void doTestRollbackOnException( 			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception;1525511255;Check that the given exception thrown by the target can produce the_desired behavior with the appropriate transaction attribute._@param ex exception to be thrown by the target_@param shouldRollback whether this should cause a transaction rollback;@SuppressWarnings("serial")_	protected void doTestRollbackOnException(_			final Exception ex, final boolean shouldRollback, boolean rollbackException) throws Exception {__		TransactionAttribute txatt = new DefaultTransactionAttribute() {_			@Override_			public boolean rollbackOn(Throwable t) {_				assertTrue(t == ex)__				return shouldRollback__			}_		}___		Method m = exceptionalMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		__		given(ptm.getTransaction(txatt)).willReturn(status)___		TransactionSystemException tex = new TransactionSystemException("system exception")__		if (rollbackException) {_			if (shouldRollback) {_				willThrow(tex).given(ptm).rollback(status)__			}_			else {_				willThrow(tex).given(ptm).commit(status)__			}_		}__		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.exceptional(ex)__			fail("Should have thrown exception")__		}_		catch (Throwable t) {_			if (rollbackException) {_				assertEquals("Caught wrong exception", tex, t)__			}_			else {_				assertEquals("Caught wrong exception", ex, t)__			}_		}__		if (!rollbackException) {_			if (shouldRollback) {_				verify(ptm).rollback(status)__			}_			else {_				verify(ptm).commit(status)__			}_		}_	};check,that,the,given,exception,thrown,by,the,target,can,produce,the,desired,behavior,with,the,appropriate,transaction,attribute,param,ex,exception,to,be,thrown,by,the,target,param,should,rollback,whether,this,should,cause,a,transaction,rollback;suppress,warnings,serial,protected,void,do,test,rollback,on,exception,final,exception,ex,final,boolean,should,rollback,boolean,rollback,exception,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,override,public,boolean,rollback,on,throwable,t,assert,true,t,ex,return,should,rollback,method,m,exceptional,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,transaction,system,exception,tex,new,transaction,system,exception,system,exception,if,rollback,exception,if,should,rollback,will,throw,tex,given,ptm,rollback,status,else,will,throw,tex,given,ptm,commit,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,exceptional,ex,fail,should,have,thrown,exception,catch,throwable,t,if,rollback,exception,assert,equals,caught,wrong,exception,tex,t,else,assert,equals,caught,wrong,exception,ex,t,if,rollback,exception,if,should,rollback,verify,ptm,rollback,status,else,verify,ptm,commit,status
AbstractTransactionAspectTests -> public void testTransactionShouldSucceedWithCallbackPreference() throws Exception;1328020251;Check that a transaction is created and committed using_CallbackPreferringPlatformTransactionManager.;public void testTransactionShouldSucceedWithCallbackPreference() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockCallbackPreferringTransactionManager ptm = new MockCallbackPreferringTransactionManager()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		assertSame(txatt, ptm.getDefinition())__		assertFalse(ptm.getStatus().isRollbackOnly())__	};check,that,a,transaction,is,created,and,committed,using,callback,preferring,platform,transaction,manager;public,void,test,transaction,should,succeed,with,callback,preference,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,callback,preferring,transaction,manager,ptm,new,mock,callback,preferring,transaction,manager,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,assert,same,txatt,ptm,get,definition,assert,false,ptm,get,status,is,rollback,only
AbstractTransactionAspectTests -> public void testTransactionShouldSucceedWithCallbackPreference() throws Exception;1356735495;Check that a transaction is created and committed using_CallbackPreferringPlatformTransactionManager.;public void testTransactionShouldSucceedWithCallbackPreference() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockCallbackPreferringTransactionManager ptm = new MockCallbackPreferringTransactionManager()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		assertSame(txatt, ptm.getDefinition())__		assertFalse(ptm.getStatus().isRollbackOnly())__	};check,that,a,transaction,is,created,and,committed,using,callback,preferring,platform,transaction,manager;public,void,test,transaction,should,succeed,with,callback,preference,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,callback,preferring,transaction,manager,ptm,new,mock,callback,preferring,transaction,manager,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,assert,same,txatt,ptm,get,definition,assert,false,ptm,get,status,is,rollback,only
AbstractTransactionAspectTests -> public void testTransactionShouldSucceedWithCallbackPreference() throws Exception;1362408075;Check that a transaction is created and committed using_CallbackPreferringPlatformTransactionManager.;public void testTransactionShouldSucceedWithCallbackPreference() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockCallbackPreferringTransactionManager ptm = new MockCallbackPreferringTransactionManager()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		assertSame(txatt, ptm.getDefinition())__		assertFalse(ptm.getStatus().isRollbackOnly())__	};check,that,a,transaction,is,created,and,committed,using,callback,preferring,platform,transaction,manager;public,void,test,transaction,should,succeed,with,callback,preference,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,callback,preferring,transaction,manager,ptm,new,mock,callback,preferring,transaction,manager,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,assert,same,txatt,ptm,get,definition,assert,false,ptm,get,status,is,rollback,only
AbstractTransactionAspectTests -> public void testTransactionShouldSucceedWithCallbackPreference() throws Exception;1363208506;Check that a transaction is created and committed using_CallbackPreferringPlatformTransactionManager.;public void testTransactionShouldSucceedWithCallbackPreference() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockCallbackPreferringTransactionManager ptm = new MockCallbackPreferringTransactionManager()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		assertSame(txatt, ptm.getDefinition())__		assertFalse(ptm.getStatus().isRollbackOnly())__	};check,that,a,transaction,is,created,and,committed,using,callback,preferring,platform,transaction,manager;public,void,test,transaction,should,succeed,with,callback,preference,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,callback,preferring,transaction,manager,ptm,new,mock,callback,preferring,transaction,manager,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,assert,same,txatt,ptm,get,definition,assert,false,ptm,get,status,is,rollback,only
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceedWithCallbackPreference() throws Exception;1404485123;Check that a transaction is created and committed using_CallbackPreferringPlatformTransactionManager.;@Test_	public void transactionShouldSucceedWithCallbackPreference() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockCallbackPreferringTransactionManager ptm = new MockCallbackPreferringTransactionManager()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		assertSame(txatt, ptm.getDefinition())__		assertFalse(ptm.getStatus().isRollbackOnly())__	};check,that,a,transaction,is,created,and,committed,using,callback,preferring,platform,transaction,manager;test,public,void,transaction,should,succeed,with,callback,preference,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,callback,preferring,transaction,manager,ptm,new,mock,callback,preferring,transaction,manager,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,assert,same,txatt,ptm,get,definition,assert,false,ptm,get,status,is,rollback,only
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceedWithCallbackPreference() throws Exception;1518615840;Check that a transaction is created and committed using_CallbackPreferringPlatformTransactionManager.;@Test_	public void transactionShouldSucceedWithCallbackPreference() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockCallbackPreferringTransactionManager ptm = new MockCallbackPreferringTransactionManager()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		assertSame(txatt, ptm.getDefinition())__		assertFalse(ptm.getStatus().isRollbackOnly())__	};check,that,a,transaction,is,created,and,committed,using,callback,preferring,platform,transaction,manager;test,public,void,transaction,should,succeed,with,callback,preference,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,callback,preferring,transaction,manager,ptm,new,mock,callback,preferring,transaction,manager,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,assert,same,txatt,ptm,get,definition,assert,false,ptm,get,status,is,rollback,only
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceedWithCallbackPreference() throws Exception;1525511255;Check that a transaction is created and committed using_CallbackPreferringPlatformTransactionManager.;@Test_	public void transactionShouldSucceedWithCallbackPreference() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockCallbackPreferringTransactionManager ptm = new MockCallbackPreferringTransactionManager()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		assertSame(txatt, ptm.getDefinition())__		assertFalse(ptm.getStatus().isRollbackOnly())__	};check,that,a,transaction,is,created,and,committed,using,callback,preferring,platform,transaction,manager;test,public,void,transaction,should,succeed,with,callback,preference,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,callback,preferring,transaction,manager,ptm,new,mock,callback,preferring,transaction,manager,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,assert,same,txatt,ptm,get,definition,assert,false,ptm,get,status,is,rollback,only
AbstractTransactionAspectTests -> public void testTransactionShouldSucceed() throws Exception;1328020251;Check that a transaction is created and committed.;public void testTransactionShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,a,transaction,is,created,and,committed;public,void,test,transaction,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTransactionShouldSucceed() throws Exception;1356735495;Check that a transaction is created and committed.;public void testTransactionShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,a,transaction,is,created,and,committed;public,void,test,transaction,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTransactionShouldSucceed() throws Exception;1362408075;Check that a transaction is created and committed.;public void testTransactionShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = transactionStatusForNewTransaction()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,a,transaction,is,created,and,committed;public,void,test,transaction,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,transaction,status,for,new,transaction,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTransactionShouldSucceed() throws Exception;1363208506;Check that a transaction is created and committed.;public void testTransactionShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		verify(ptm).commit(status)__	};check,that,a,transaction,is,created,and,committed;public,void,test,transaction,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,verify,ptm,commit,status
AbstractTransactionAspectTests -> private TransactionStatus transactionStatusForNewTransaction();1328020251;@return a TransactionStatus object configured for a new transaction;private TransactionStatus transactionStatusForNewTransaction() {_		MockControl statusControl = MockControl.createControl(TransactionStatus.class)__		return (TransactionStatus) statusControl.getMock()__	};return,a,transaction,status,object,configured,for,a,new,transaction;private,transaction,status,transaction,status,for,new,transaction,mock,control,status,control,mock,control,create,control,transaction,status,class,return,transaction,status,status,control,get,mock
AbstractTransactionAspectTests -> private TransactionStatus transactionStatusForNewTransaction();1356735495;@return a TransactionStatus object configured for a new transaction;private TransactionStatus transactionStatusForNewTransaction() {_		MockControl statusControl = MockControl.createControl(TransactionStatus.class)__		return (TransactionStatus) statusControl.getMock()__	};return,a,transaction,status,object,configured,for,a,new,transaction;private,transaction,status,transaction,status,for,new,transaction,mock,control,status,control,mock,control,create,control,transaction,status,class,return,transaction,status,status,control,get,mock
AbstractTransactionAspectTests -> private TransactionStatus transactionStatusForNewTransaction();1362408075;@return a TransactionStatus object configured for a new transaction;private TransactionStatus transactionStatusForNewTransaction() {_		MockControl statusControl = MockControl.createControl(TransactionStatus.class)__		return (TransactionStatus) statusControl.getMock()__	};return,a,transaction,status,object,configured,for,a,new,transaction;private,transaction,status,transaction,status,for,new,transaction,mock,control,status,control,mock,control,create,control,transaction,status,class,return,transaction,status,status,control,get,mock
AbstractTransactionAspectTests -> public void testCannotCreateTransaction() throws Exception;1328020251;Simulate a transaction infrastructure failure._Shouldn't invoke target method.;public void testCannotCreateTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		CannotCreateTransactionException ex = new CannotCreateTransactionException("foobar", null)__		ptmControl.setThrowable(ex)__		ptmControl.replay()___		TestBean tb = new TestBean() {_			public String getName() {_				throw new UnsupportedOperationException(_						"Shouldn't have invoked target method when couldn't create transaction for transactional method")__			}_		}_		_		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.getName()__			fail("Shouldn't have invoked method")__		}_		catch (CannotCreateTransactionException thrown) {_			assertTrue(thrown == ex)__		}_		ptmControl.verify()__	};simulate,a,transaction,infrastructure,failure,shouldn,t,invoke,target,method;public,void,test,cannot,create,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,cannot,create,transaction,exception,ex,new,cannot,create,transaction,exception,foobar,null,ptm,control,set,throwable,ex,ptm,control,replay,test,bean,tb,new,test,bean,public,string,get,name,throw,new,unsupported,operation,exception,shouldn,t,have,invoked,target,method,when,couldn,t,create,transaction,for,transactional,method,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,get,name,fail,shouldn,t,have,invoked,method,catch,cannot,create,transaction,exception,thrown,assert,true,thrown,ex,ptm,control,verify
AbstractTransactionAspectTests -> public void testCannotCreateTransaction() throws Exception;1356735495;Simulate a transaction infrastructure failure._Shouldn't invoke target method.;public void testCannotCreateTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		CannotCreateTransactionException ex = new CannotCreateTransactionException("foobar", null)__		ptmControl.setThrowable(ex)__		ptmControl.replay()___		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				throw new UnsupportedOperationException(_						"Shouldn't have invoked target method when couldn't create transaction for transactional method")__			}_		}__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.getName()__			fail("Shouldn't have invoked method")__		}_		catch (CannotCreateTransactionException thrown) {_			assertTrue(thrown == ex)__		}_		ptmControl.verify()__	};simulate,a,transaction,infrastructure,failure,shouldn,t,invoke,target,method;public,void,test,cannot,create,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,cannot,create,transaction,exception,ex,new,cannot,create,transaction,exception,foobar,null,ptm,control,set,throwable,ex,ptm,control,replay,test,bean,tb,new,test,bean,override,public,string,get,name,throw,new,unsupported,operation,exception,shouldn,t,have,invoked,target,method,when,couldn,t,create,transaction,for,transactional,method,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,get,name,fail,shouldn,t,have,invoked,method,catch,cannot,create,transaction,exception,thrown,assert,true,thrown,ex,ptm,control,verify
AbstractTransactionAspectTests -> public void testCannotCreateTransaction() throws Exception;1362408075;Simulate a transaction infrastructure failure._Shouldn't invoke target method.;public void testCannotCreateTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		CannotCreateTransactionException ex = new CannotCreateTransactionException("foobar", null)__		ptmControl.setThrowable(ex)__		ptmControl.replay()___		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				throw new UnsupportedOperationException(_						"Shouldn't have invoked target method when couldn't create transaction for transactional method")__			}_		}__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.getName()__			fail("Shouldn't have invoked method")__		}_		catch (CannotCreateTransactionException thrown) {_			assertTrue(thrown == ex)__		}_		ptmControl.verify()__	};simulate,a,transaction,infrastructure,failure,shouldn,t,invoke,target,method;public,void,test,cannot,create,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,cannot,create,transaction,exception,ex,new,cannot,create,transaction,exception,foobar,null,ptm,control,set,throwable,ex,ptm,control,replay,test,bean,tb,new,test,bean,override,public,string,get,name,throw,new,unsupported,operation,exception,shouldn,t,have,invoked,target,method,when,couldn,t,create,transaction,for,transactional,method,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,get,name,fail,shouldn,t,have,invoked,method,catch,cannot,create,transaction,exception,thrown,assert,true,thrown,ex,ptm,control,verify
AbstractTransactionAspectTests -> public void testCannotCreateTransaction() throws Exception;1363208506;Simulate a transaction infrastructure failure._Shouldn't invoke target method.;public void testCannotCreateTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		CannotCreateTransactionException ex = new CannotCreateTransactionException("foobar", null)__		given(ptm.getTransaction(txatt)).willThrow(ex)___		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				throw new UnsupportedOperationException(_						"Shouldn't have invoked target method when couldn't create transaction for transactional method")__			}_		}__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		try {_			itb.getName()__			fail("Shouldn't have invoked method")__		}_		catch (CannotCreateTransactionException thrown) {_			assertTrue(thrown == ex)__		}_	};simulate,a,transaction,infrastructure,failure,shouldn,t,invoke,target,method;public,void,test,cannot,create,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,cannot,create,transaction,exception,ex,new,cannot,create,transaction,exception,foobar,null,given,ptm,get,transaction,txatt,will,throw,ex,test,bean,tb,new,test,bean,override,public,string,get,name,throw,new,unsupported,operation,exception,shouldn,t,have,invoked,target,method,when,couldn,t,create,transaction,for,transactional,method,itest,bean,itb,itest,bean,advised,tb,ptm,tas,try,itb,get,name,fail,shouldn,t,have,invoked,method,catch,cannot,create,transaction,exception,thrown,assert,true,thrown,ex
AbstractTransactionAspectTests -> protected abstract Object advised( 			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;1328020251;Subclasses must implement this to create an advised object based on the_given target. In the case of AspectJ, the  advised object will already_have been created, as there's no distinction between target and proxy._In the case of Spring's own AOP framework, a proxy must be created_using a suitably configured transaction interceptor_@param target target if there's a distinct target. If not (AspectJ),_return target._@return transactional advised object;protected abstract Object advised(_			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;subclasses,must,implement,this,to,create,an,advised,object,based,on,the,given,target,in,the,case,of,aspect,j,the,advised,object,will,already,have,been,created,as,there,s,no,distinction,between,target,and,proxy,in,the,case,of,spring,s,own,aop,framework,a,proxy,must,be,created,using,a,suitably,configured,transaction,interceptor,param,target,target,if,there,s,a,distinct,target,if,not,aspect,j,return,target,return,transactional,advised,object;protected,abstract,object,advised,object,target,platform,transaction,manager,ptm,transaction,attribute,source,tas,throws,exception
AbstractTransactionAspectTests -> protected abstract Object advised( 			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;1356735495;Subclasses must implement this to create an advised object based on the_given target. In the case of AspectJ, the  advised object will already_have been created, as there's no distinction between target and proxy._In the case of Spring's own AOP framework, a proxy must be created_using a suitably configured transaction interceptor_@param target target if there's a distinct target. If not (AspectJ),_return target._@return transactional advised object;protected abstract Object advised(_			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;subclasses,must,implement,this,to,create,an,advised,object,based,on,the,given,target,in,the,case,of,aspect,j,the,advised,object,will,already,have,been,created,as,there,s,no,distinction,between,target,and,proxy,in,the,case,of,spring,s,own,aop,framework,a,proxy,must,be,created,using,a,suitably,configured,transaction,interceptor,param,target,target,if,there,s,a,distinct,target,if,not,aspect,j,return,target,return,transactional,advised,object;protected,abstract,object,advised,object,target,platform,transaction,manager,ptm,transaction,attribute,source,tas,throws,exception
AbstractTransactionAspectTests -> protected abstract Object advised( 			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;1362408075;Subclasses must implement this to create an advised object based on the_given target. In the case of AspectJ, the  advised object will already_have been created, as there's no distinction between target and proxy._In the case of Spring's own AOP framework, a proxy must be created_using a suitably configured transaction interceptor_@param target target if there's a distinct target. If not (AspectJ),_return target._@return transactional advised object;protected abstract Object advised(_			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;subclasses,must,implement,this,to,create,an,advised,object,based,on,the,given,target,in,the,case,of,aspect,j,the,advised,object,will,already,have,been,created,as,there,s,no,distinction,between,target,and,proxy,in,the,case,of,spring,s,own,aop,framework,a,proxy,must,be,created,using,a,suitably,configured,transaction,interceptor,param,target,target,if,there,s,a,distinct,target,if,not,aspect,j,return,target,return,transactional,advised,object;protected,abstract,object,advised,object,target,platform,transaction,manager,ptm,transaction,attribute,source,tas,throws,exception
AbstractTransactionAspectTests -> protected abstract Object advised( 			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;1363208506;Subclasses must implement this to create an advised object based on the_given target. In the case of AspectJ, the  advised object will already_have been created, as there's no distinction between target and proxy._In the case of Spring's own AOP framework, a proxy must be created_using a suitably configured transaction interceptor_@param target target if there's a distinct target. If not (AspectJ),_return target._@return transactional advised object;protected abstract Object advised(_			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;subclasses,must,implement,this,to,create,an,advised,object,based,on,the,given,target,in,the,case,of,aspect,j,the,advised,object,will,already,have,been,created,as,there,s,no,distinction,between,target,and,proxy,in,the,case,of,spring,s,own,aop,framework,a,proxy,must,be,created,using,a,suitably,configured,transaction,interceptor,param,target,target,if,there,s,a,distinct,target,if,not,aspect,j,return,target,return,transactional,advised,object;protected,abstract,object,advised,object,target,platform,transaction,manager,ptm,transaction,attribute,source,tas,throws,exception
AbstractTransactionAspectTests -> protected abstract Object advised( 			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;1404485123;Subclasses must implement this to create an advised object based on the_given target. In the case of AspectJ, the  advised object will already_have been created, as there's no distinction between target and proxy._In the case of Spring's own AOP framework, a proxy must be created_using a suitably configured transaction interceptor_@param target target if there's a distinct target. If not (AspectJ),_return target._@return transactional advised object;protected abstract Object advised(_			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;subclasses,must,implement,this,to,create,an,advised,object,based,on,the,given,target,in,the,case,of,aspect,j,the,advised,object,will,already,have,been,created,as,there,s,no,distinction,between,target,and,proxy,in,the,case,of,spring,s,own,aop,framework,a,proxy,must,be,created,using,a,suitably,configured,transaction,interceptor,param,target,target,if,there,s,a,distinct,target,if,not,aspect,j,return,target,return,transactional,advised,object;protected,abstract,object,advised,object,target,platform,transaction,manager,ptm,transaction,attribute,source,tas,throws,exception
AbstractTransactionAspectTests -> protected abstract Object advised( 			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;1518615840;Subclasses must implement this to create an advised object based on the_given target. In the case of AspectJ, the  advised object will already_have been created, as there's no distinction between target and proxy._In the case of Spring's own AOP framework, a proxy must be created_using a suitably configured transaction interceptor_@param target target if there's a distinct target. If not (AspectJ),_return target._@return transactional advised object;protected abstract Object advised(_			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;subclasses,must,implement,this,to,create,an,advised,object,based,on,the,given,target,in,the,case,of,aspect,j,the,advised,object,will,already,have,been,created,as,there,s,no,distinction,between,target,and,proxy,in,the,case,of,spring,s,own,aop,framework,a,proxy,must,be,created,using,a,suitably,configured,transaction,interceptor,param,target,target,if,there,s,a,distinct,target,if,not,aspect,j,return,target,return,transactional,advised,object;protected,abstract,object,advised,object,target,platform,transaction,manager,ptm,transaction,attribute,source,tas,throws,exception
AbstractTransactionAspectTests -> protected abstract Object advised( 			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;1525511255;Subclasses must implement this to create an advised object based on the_given target. In the case of AspectJ, the  advised object will already_have been created, as there's no distinction between target and proxy._In the case of Spring's own AOP framework, a proxy must be created_using a suitably configured transaction interceptor_@param target target if there's a distinct target. If not (AspectJ),_return target._@return transactional advised object;protected abstract Object advised(_			Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) throws Exception_;subclasses,must,implement,this,to,create,an,advised,object,based,on,the,given,target,in,the,case,of,aspect,j,the,advised,object,will,already,have,been,created,as,there,s,no,distinction,between,target,and,proxy,in,the,case,of,spring,s,own,aop,framework,a,proxy,must,be,created,using,a,suitably,configured,transaction,interceptor,param,target,target,if,there,s,a,distinct,target,if,not,aspect,j,return,target,return,transactional,advised,object;protected,abstract,object,advised,object,target,platform,transaction,manager,ptm,transaction,attribute,source,tas,throws,exception
AbstractTransactionAspectTests -> public void testCannotCommitTransaction() throws Exception;1328020251;Simulate failure of the underlying transaction infrastructure to commit._Check that the target method was invoked, but that the transaction_infrastructure exception was thrown to the client;public void testCannotCommitTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = setNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)__		Method m2 = getNameMethod__		__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()___		TransactionStatus status = transactionStatusForNewTransaction()__		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status)__		UnexpectedRollbackException ex = new UnexpectedRollbackException("foobar", null)__		ptm.commit(status)__		ptmControl.setThrowable(ex)__		ptmControl.replay()___		TestBean tb = new TestBean()_		_		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		String name = "new name"__		try {_			itb.setName(name)__			fail("Shouldn't have succeeded")__		}_		catch (UnexpectedRollbackException thrown) {_			assertTrue(thrown == ex)__		}__		_		assertTrue(itb.getName() == name)__		ptmControl.verify()__	};simulate,failure,of,the,underlying,transaction,infrastructure,to,commit,check,that,the,target,method,was,invoked,but,that,the,transaction,infrastructure,exception,was,thrown,to,the,client;public,void,test,cannot,commit,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,set,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,method,m2,get,name,method,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,transaction,status,status,transaction,status,for,new,transaction,ptm,get,transaction,txatt,ptm,control,set,return,value,status,unexpected,rollback,exception,ex,new,unexpected,rollback,exception,foobar,null,ptm,commit,status,ptm,control,set,throwable,ex,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,string,name,new,name,try,itb,set,name,name,fail,shouldn,t,have,succeeded,catch,unexpected,rollback,exception,thrown,assert,true,thrown,ex,assert,true,itb,get,name,name,ptm,control,verify
AbstractTransactionAspectTests -> public void testCannotCommitTransaction() throws Exception;1356735495;Simulate failure of the underlying transaction infrastructure to commit._Check that the target method was invoked, but that the transaction_infrastructure exception was thrown to the client;public void testCannotCommitTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = setNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)__		Method m2 = getNameMethod__		__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()___		TransactionStatus status = transactionStatusForNewTransaction()__		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status)__		UnexpectedRollbackException ex = new UnexpectedRollbackException("foobar", null)__		ptm.commit(status)__		ptmControl.setThrowable(ex)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		String name = "new name"__		try {_			itb.setName(name)__			fail("Shouldn't have succeeded")__		}_		catch (UnexpectedRollbackException thrown) {_			assertTrue(thrown == ex)__		}__		_		assertTrue(itb.getName() == name)__		ptmControl.verify()__	};simulate,failure,of,the,underlying,transaction,infrastructure,to,commit,check,that,the,target,method,was,invoked,but,that,the,transaction,infrastructure,exception,was,thrown,to,the,client;public,void,test,cannot,commit,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,set,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,method,m2,get,name,method,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,transaction,status,status,transaction,status,for,new,transaction,ptm,get,transaction,txatt,ptm,control,set,return,value,status,unexpected,rollback,exception,ex,new,unexpected,rollback,exception,foobar,null,ptm,commit,status,ptm,control,set,throwable,ex,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,string,name,new,name,try,itb,set,name,name,fail,shouldn,t,have,succeeded,catch,unexpected,rollback,exception,thrown,assert,true,thrown,ex,assert,true,itb,get,name,name,ptm,control,verify
AbstractTransactionAspectTests -> public void testCannotCommitTransaction() throws Exception;1362408075;Simulate failure of the underlying transaction infrastructure to commit._Check that the target method was invoked, but that the transaction_infrastructure exception was thrown to the client;public void testCannotCommitTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = setNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)__		_		__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()___		TransactionStatus status = transactionStatusForNewTransaction()__		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status)__		UnexpectedRollbackException ex = new UnexpectedRollbackException("foobar", null)__		ptm.commit(status)__		ptmControl.setThrowable(ex)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		String name = "new name"__		try {_			itb.setName(name)__			fail("Shouldn't have succeeded")__		}_		catch (UnexpectedRollbackException thrown) {_			assertTrue(thrown == ex)__		}__		_		assertTrue(itb.getName() == name)__		ptmControl.verify()__	};simulate,failure,of,the,underlying,transaction,infrastructure,to,commit,check,that,the,target,method,was,invoked,but,that,the,transaction,infrastructure,exception,was,thrown,to,the,client;public,void,test,cannot,commit,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,set,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,transaction,status,status,transaction,status,for,new,transaction,ptm,get,transaction,txatt,ptm,control,set,return,value,status,unexpected,rollback,exception,ex,new,unexpected,rollback,exception,foobar,null,ptm,commit,status,ptm,control,set,throwable,ex,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,string,name,new,name,try,itb,set,name,name,fail,shouldn,t,have,succeeded,catch,unexpected,rollback,exception,thrown,assert,true,thrown,ex,assert,true,itb,get,name,name,ptm,control,verify
AbstractTransactionAspectTests -> public void testCannotCommitTransaction() throws Exception;1363208506;Simulate failure of the underlying transaction infrastructure to commit._Check that the target method was invoked, but that the transaction_infrastructure exception was thrown to the client;public void testCannotCommitTransaction() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = setNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)__		_		__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)___		TransactionStatus status = mock(TransactionStatus.class)__		given(ptm.getTransaction(txatt)).willReturn(status)__		UnexpectedRollbackException ex = new UnexpectedRollbackException("foobar", null)__		willThrow(ex).given(ptm).commit(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		String name = "new name"__		try {_			itb.setName(name)__			fail("Shouldn't have succeeded")__		}_		catch (UnexpectedRollbackException thrown) {_			assertTrue(thrown == ex)__		}__		_		assertTrue(itb.getName() == name)__	};simulate,failure,of,the,underlying,transaction,infrastructure,to,commit,check,that,the,target,method,was,invoked,but,that,the,transaction,infrastructure,exception,was,thrown,to,the,client;public,void,test,cannot,commit,transaction,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,set,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,transaction,status,status,mock,transaction,status,class,given,ptm,get,transaction,txatt,will,return,status,unexpected,rollback,exception,ex,new,unexpected,rollback,exception,foobar,null,will,throw,ex,given,ptm,commit,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,string,name,new,name,try,itb,set,name,name,fail,shouldn,t,have,succeeded,catch,unexpected,rollback,exception,thrown,assert,true,thrown,ex,assert,true,itb,get,name,name
AbstractTransactionAspectTests -> @Test 	public void twoTransactionsShouldSucceed() throws Exception;1404485123;Check that two transactions are created and committed.;@Test_	public void twoTransactionsShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas1 = new MapTransactionAttributeSource()__		tas1.register(getNameMethod, txatt)__		MapTransactionAttributeSource tas2 = new MapTransactionAttributeSource()__		tas2.register(setNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, new TransactionAttributeSource[] {tas1, tas2})___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)__		itb.setName("myName")__		checkTransactionStatus(false)___		verify(ptm, times(2)).commit(status)__	};check,that,two,transactions,are,created,and,committed;test,public,void,two,transactions,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas1,new,map,transaction,attribute,source,tas1,register,get,name,method,txatt,map,transaction,attribute,source,tas2,new,map,transaction,attribute,source,tas2,register,set,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,new,transaction,attribute,source,tas1,tas2,check,transaction,status,false,itb,get,name,check,transaction,status,false,itb,set,name,my,name,check,transaction,status,false,verify,ptm,times,2,commit,status
AbstractTransactionAspectTests -> @Test 	public void twoTransactionsShouldSucceed() throws Exception;1518615840;Check that two transactions are created and committed.;@Test_	public void twoTransactionsShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas1 = new MapTransactionAttributeSource()__		tas1.register(getNameMethod, txatt)__		MapTransactionAttributeSource tas2 = new MapTransactionAttributeSource()__		tas2.register(setNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, new TransactionAttributeSource[] {tas1, tas2})___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)__		itb.setName("myName")__		checkTransactionStatus(false)___		verify(ptm, times(2)).commit(status)__	};check,that,two,transactions,are,created,and,committed;test,public,void,two,transactions,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas1,new,map,transaction,attribute,source,tas1,register,get,name,method,txatt,map,transaction,attribute,source,tas2,new,map,transaction,attribute,source,tas2,register,set,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,new,transaction,attribute,source,tas1,tas2,check,transaction,status,false,itb,get,name,check,transaction,status,false,itb,set,name,my,name,check,transaction,status,false,verify,ptm,times,2,commit,status
AbstractTransactionAspectTests -> @Test 	public void twoTransactionsShouldSucceed() throws Exception;1525511255;Check that two transactions are created and committed.;@Test_	public void twoTransactionsShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas1 = new MapTransactionAttributeSource()__		tas1.register(getNameMethod, txatt)__		MapTransactionAttributeSource tas2 = new MapTransactionAttributeSource()__		tas2.register(setNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, new TransactionAttributeSource[] {tas1, tas2})___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)__		itb.setName("myName")__		checkTransactionStatus(false)___		verify(ptm, times(2)).commit(status)__	};check,that,two,transactions,are,created,and,committed;test,public,void,two,transactions,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas1,new,map,transaction,attribute,source,tas1,register,get,name,method,txatt,map,transaction,attribute,source,tas2,new,map,transaction,attribute,source,tas2,register,set,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,new,transaction,attribute,source,tas1,tas2,check,transaction,status,false,itb,get,name,check,transaction,status,false,itb,set,name,my,name,check,transaction,status,false,verify,ptm,times,2,commit,status
AbstractTransactionAspectTests -> public void testTransactionShouldSucceedWithNotNew() throws Exception;1328020251;Check that a transaction is created and committed.;public void testTransactionShouldSucceedWithNotNew() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockControl statusControl = MockControl.createControl(TransactionStatus.class)__		TransactionStatus status = (TransactionStatus) statusControl.getMock()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		_		itb.getName()__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,a,transaction,is,created,and,committed;public,void,test,transaction,should,succeed,with,not,new,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,control,status,control,mock,control,create,control,transaction,status,class,transaction,status,status,transaction,status,status,control,get,mock,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTransactionShouldSucceedWithNotNew() throws Exception;1356735495;Check that a transaction is created and committed.;public void testTransactionShouldSucceedWithNotNew() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockControl statusControl = MockControl.createControl(TransactionStatus.class)__		TransactionStatus status = (TransactionStatus) statusControl.getMock()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		_		itb.getName()__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,a,transaction,is,created,and,committed;public,void,test,transaction,should,succeed,with,not,new,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,control,status,control,mock,control,create,control,transaction,status,class,transaction,status,status,transaction,status,status,control,get,mock,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTransactionShouldSucceedWithNotNew() throws Exception;1362408075;Check that a transaction is created and committed.;public void testTransactionShouldSucceedWithNotNew() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		MockControl statusControl = MockControl.createControl(TransactionStatus.class)__		TransactionStatus status = (TransactionStatus) statusControl.getMock()__		MockControl ptmControl = MockControl.createControl(PlatformTransactionManager.class)__		PlatformTransactionManager ptm = (PlatformTransactionManager) ptmControl.getMock()__		_		ptm.getTransaction(txatt)__		ptmControl.setReturnValue(status, 1)__		ptm.commit(status)__		ptmControl.setVoidCallable(1)__		ptmControl.replay()___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		_		itb.getName()__		checkTransactionStatus(false)___		ptmControl.verify()__	};check,that,a,transaction,is,created,and,committed;public,void,test,transaction,should,succeed,with,not,new,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,mock,control,status,control,mock,control,create,control,transaction,status,class,transaction,status,status,transaction,status,status,control,get,mock,mock,control,ptm,control,mock,control,create,control,platform,transaction,manager,class,platform,transaction,manager,ptm,platform,transaction,manager,ptm,control,get,mock,ptm,get,transaction,txatt,ptm,control,set,return,value,status,1,ptm,commit,status,ptm,control,set,void,callable,1,ptm,control,replay,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,ptm,control,verify
AbstractTransactionAspectTests -> public void testTransactionShouldSucceedWithNotNew() throws Exception;1363208506;Check that a transaction is created and committed.;public void testTransactionShouldSucceedWithNotNew() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		_		itb.getName()__		checkTransactionStatus(false)___		verify(ptm).commit(status)__	};check,that,a,transaction,is,created,and,committed;public,void,test,transaction,should,succeed,with,not,new,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceed() throws Exception;1404485123;Check that a transaction is created and committed.;@Test_	public void transactionShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		verify(ptm).commit(status)__	};check,that,a,transaction,is,created,and,committed;test,public,void,transaction,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceed() throws Exception;1518615840;Check that a transaction is created and committed.;@Test_	public void transactionShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		verify(ptm).commit(status)__	};check,that,a,transaction,is,created,and,committed;test,public,void,transaction,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void transactionShouldSucceed() throws Exception;1525511255;Check that a transaction is created and committed.;@Test_	public void transactionShouldSucceed() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(getNameMethod, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)__		_		given(ptm.getTransaction(txatt)).willReturn(status)___		TestBean tb = new TestBean()__		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		checkTransactionStatus(false)__		itb.getName()__		checkTransactionStatus(false)___		verify(ptm).commit(status)__	};check,that,a,transaction,is,created,and,committed;test,public,void,transaction,should,succeed,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,get,name,method,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,test,bean,tb,new,test,bean,itest,bean,itb,itest,bean,advised,tb,ptm,tas,check,transaction,status,false,itb,get,name,check,transaction,status,false,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void programmaticRollback() throws Exception;1404485123;Test that TransactionStatus.setRollbackOnly works.;@Test_	public void programmaticRollback() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)___		given(ptm.getTransaction(txatt)).willReturn(status)___		final String name = "jenny"__		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				TransactionStatus txStatus = TransactionInterceptor.currentTransactionStatus()__				txStatus.setRollbackOnly()__				return name__			}_		}___		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		_		assertTrue(name.equals(itb.getName()))___		verify(ptm).commit(status)__	};test,that,transaction,status,set,rollback,only,works;test,public,void,programmatic,rollback,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,final,string,name,jenny,test,bean,tb,new,test,bean,override,public,string,get,name,transaction,status,tx,status,transaction,interceptor,current,transaction,status,tx,status,set,rollback,only,return,name,itest,bean,itb,itest,bean,advised,tb,ptm,tas,assert,true,name,equals,itb,get,name,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void programmaticRollback() throws Exception;1518615840;Test that TransactionStatus.setRollbackOnly works.;@Test_	public void programmaticRollback() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)___		given(ptm.getTransaction(txatt)).willReturn(status)___		final String name = "jenny"__		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				TransactionStatus txStatus = TransactionInterceptor.currentTransactionStatus()__				txStatus.setRollbackOnly()__				return name__			}_		}___		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		_		assertTrue(name.equals(itb.getName()))___		verify(ptm).commit(status)__	};test,that,transaction,status,set,rollback,only,works;test,public,void,programmatic,rollback,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,final,string,name,jenny,test,bean,tb,new,test,bean,override,public,string,get,name,transaction,status,tx,status,transaction,interceptor,current,transaction,status,tx,status,set,rollback,only,return,name,itest,bean,itb,itest,bean,advised,tb,ptm,tas,assert,true,name,equals,itb,get,name,verify,ptm,commit,status
AbstractTransactionAspectTests -> @Test 	public void programmaticRollback() throws Exception;1525511255;Test that TransactionStatus.setRollbackOnly works.;@Test_	public void programmaticRollback() throws Exception {_		TransactionAttribute txatt = new DefaultTransactionAttribute()___		Method m = getNameMethod__		MapTransactionAttributeSource tas = new MapTransactionAttributeSource()__		tas.register(m, txatt)___		TransactionStatus status = mock(TransactionStatus.class)__		PlatformTransactionManager ptm = mock(PlatformTransactionManager.class)___		given(ptm.getTransaction(txatt)).willReturn(status)___		final String name = "jenny"__		TestBean tb = new TestBean() {_			@Override_			public String getName() {_				TransactionStatus txStatus = TransactionInterceptor.currentTransactionStatus()__				txStatus.setRollbackOnly()__				return name__			}_		}___		ITestBean itb = (ITestBean) advised(tb, ptm, tas)___		_		assertTrue(name.equals(itb.getName()))___		verify(ptm).commit(status)__	};test,that,transaction,status,set,rollback,only,works;test,public,void,programmatic,rollback,throws,exception,transaction,attribute,txatt,new,default,transaction,attribute,method,m,get,name,method,map,transaction,attribute,source,tas,new,map,transaction,attribute,source,tas,register,m,txatt,transaction,status,status,mock,transaction,status,class,platform,transaction,manager,ptm,mock,platform,transaction,manager,class,given,ptm,get,transaction,txatt,will,return,status,final,string,name,jenny,test,bean,tb,new,test,bean,override,public,string,get,name,transaction,status,tx,status,transaction,interceptor,current,transaction,status,tx,status,set,rollback,only,return,name,itest,bean,itb,itest,bean,advised,tb,ptm,tas,assert,true,name,equals,itb,get,name,verify,ptm,commit,status
