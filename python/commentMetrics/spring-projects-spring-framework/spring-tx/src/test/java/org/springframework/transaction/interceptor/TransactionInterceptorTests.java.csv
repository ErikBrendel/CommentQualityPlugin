commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;10;;@Override protected Object advised(Object target, PlatformTransactionManager ptm, TransactionAttributeSource[] tas) throws Exception {     TransactionInterceptor ti = new TransactionInterceptor().     ti.setTransactionManager(ptm).     ti.setTransactionAttributeSources(tas).     ProxyFactory pf = new ProxyFactory(target).     pf.addAdvice(0, ti).     return pf.getProxy(). }
true;protected;3;12;/**  * Template method to create an advised object given the  * target object and transaction setup.  * Creates a TransactionInterceptor and applies it.  */ ;/**  * Template method to create an advised object given the  * target object and transaction setup.  * Creates a TransactionInterceptor and applies it.  */ @Override protected Object advised(Object target, PlatformTransactionManager ptm, TransactionAttributeSource tas) {     TransactionInterceptor ti = new TransactionInterceptor().     ti.setTransactionManager(ptm).     assertEquals(ptm, ti.getTransactionManager()).     ti.setTransactionAttributeSource(tas).     assertEquals(tas, ti.getTransactionAttributeSource()).     ProxyFactory pf = new ProxyFactory(target).     pf.addAdvice(0, ti).     return pf.getProxy(). }
true;public;0;15;/**  * A TransactionInterceptor should be serializable if its  * PlatformTransactionManager is.  */ ;/**  * A TransactionInterceptor should be serializable if its  * PlatformTransactionManager is.  */ @Test public void serializableWithAttributeProperties() throws Exception {     TransactionInterceptor ti = new TransactionInterceptor().     Properties props = new Properties().     props.setProperty("methodName", "PROPAGATION_REQUIRED").     ti.setTransactionAttributes(props).     PlatformTransactionManager ptm = new SerializableTransactionManager().     ti.setTransactionManager(ptm).     ti = (TransactionInterceptor) SerializationTestUtils.serializeAndDeserialize(ti).     // Check that logger survived deserialization     assertNotNull(ti.logger).     assertTrue(ti.getTransactionManager() instanceof SerializableTransactionManager).     assertNotNull(ti.getTransactionAttributeSource()). }
false;public;0;24;;@Test public void serializableWithCompositeSource() throws Exception {     NameMatchTransactionAttributeSource tas1 = new NameMatchTransactionAttributeSource().     Properties props = new Properties().     props.setProperty("methodName", "PROPAGATION_REQUIRED").     tas1.setProperties(props).     NameMatchTransactionAttributeSource tas2 = new NameMatchTransactionAttributeSource().     props = new Properties().     props.setProperty("otherMethodName", "PROPAGATION_REQUIRES_NEW").     tas2.setProperties(props).     TransactionInterceptor ti = new TransactionInterceptor().     ti.setTransactionAttributeSources(tas1, tas2).     PlatformTransactionManager ptm = new SerializableTransactionManager().     ti.setTransactionManager(ptm).     ti = (TransactionInterceptor) SerializationTestUtils.serializeAndDeserialize(ti).     assertTrue(ti.getTransactionManager() instanceof SerializableTransactionManager).     assertTrue(ti.getTransactionAttributeSource() instanceof CompositeTransactionAttributeSource).     CompositeTransactionAttributeSource ctas = (CompositeTransactionAttributeSource) ti.getTransactionAttributeSource().     assertTrue(ctas.getTransactionAttributeSources()[0] instanceof NameMatchTransactionAttributeSource).     assertTrue(ctas.getTransactionAttributeSources()[1] instanceof NameMatchTransactionAttributeSource). }
false;public;0;7;;@Test public void determineTransactionManagerWithNoBeanFactory() {     PlatformTransactionManager transactionManager = mock(PlatformTransactionManager.class).     TransactionInterceptor ti = transactionInterceptorWithTransactionManager(transactionManager, null).     assertSame(transactionManager, ti.determineTransactionManager(new DefaultTransactionAttribute())). }
false;public;0;7;;@Test public void determineTransactionManagerWithNoBeanFactoryAndNoTransactionAttribute() {     PlatformTransactionManager transactionManager = mock(PlatformTransactionManager.class).     TransactionInterceptor ti = transactionInterceptorWithTransactionManager(transactionManager, null).     assertSame(transactionManager, ti.determineTransactionManager(null)). }
false;public;0;7;;@Test public void determineTransactionManagerWithNoTransactionAttribute() {     BeanFactory beanFactory = mock(BeanFactory.class).     TransactionInterceptor ti = simpleTransactionInterceptor(beanFactory).     assertNull(ti.determineTransactionManager(null)). }
false;public;0;11;;@Test public void determineTransactionManagerWithQualifierUnknown() {     BeanFactory beanFactory = mock(BeanFactory.class).     TransactionInterceptor ti = simpleTransactionInterceptor(beanFactory).     DefaultTransactionAttribute attribute = new DefaultTransactionAttribute().     attribute.setQualifier("fooTransactionManager").     thrown.expect(NoSuchBeanDefinitionException.class).     thrown.expectMessage("'fooTransactionManager'").     ti.determineTransactionManager(attribute). }
false;public;0;13;;@Test public void determineTransactionManagerWithQualifierAndDefault() {     BeanFactory beanFactory = mock(BeanFactory.class).     PlatformTransactionManager transactionManager = mock(PlatformTransactionManager.class).     TransactionInterceptor ti = transactionInterceptorWithTransactionManager(transactionManager, beanFactory).     PlatformTransactionManager fooTransactionManager = associateTransactionManager(beanFactory, "fooTransactionManager").     DefaultTransactionAttribute attribute = new DefaultTransactionAttribute().     attribute.setQualifier("fooTransactionManager").     assertSame(fooTransactionManager, ti.determineTransactionManager(attribute)). }
false;public;0;14;;@Test public void determineTransactionManagerWithQualifierAndDefaultName() {     BeanFactory beanFactory = mock(BeanFactory.class).     associateTransactionManager(beanFactory, "defaultTransactionManager").     TransactionInterceptor ti = transactionInterceptorWithTransactionManagerName("defaultTransactionManager", beanFactory).     PlatformTransactionManager fooTransactionManager = associateTransactionManager(beanFactory, "fooTransactionManager").     DefaultTransactionAttribute attribute = new DefaultTransactionAttribute().     attribute.setQualifier("fooTransactionManager").     assertSame(fooTransactionManager, ti.determineTransactionManager(attribute)). }
false;public;0;13;;@Test public void determineTransactionManagerWithEmptyQualifierAndDefaultName() {     BeanFactory beanFactory = mock(BeanFactory.class).     PlatformTransactionManager defaultTransactionManager = associateTransactionManager(beanFactory, "defaultTransactionManager").     TransactionInterceptor ti = transactionInterceptorWithTransactionManagerName("defaultTransactionManager", beanFactory).     DefaultTransactionAttribute attribute = new DefaultTransactionAttribute().     attribute.setQualifier("").     assertSame(defaultTransactionManager, ti.determineTransactionManager(attribute)). }
false;public;0;18;;@Test public void determineTransactionManagerWithQualifierSeveralTimes() {     BeanFactory beanFactory = mock(BeanFactory.class).     TransactionInterceptor ti = simpleTransactionInterceptor(beanFactory).     PlatformTransactionManager txManager = associateTransactionManager(beanFactory, "fooTransactionManager").     DefaultTransactionAttribute attribute = new DefaultTransactionAttribute().     attribute.setQualifier("fooTransactionManager").     PlatformTransactionManager actual = ti.determineTransactionManager(attribute).     assertSame(txManager, actual).     // Call again, should be cached     PlatformTransactionManager actual2 = ti.determineTransactionManager(attribute).     assertSame(txManager, actual2).     verify(beanFactory, times(1)).containsBean("fooTransactionManager").     verify(beanFactory, times(1)).getBean("fooTransactionManager", PlatformTransactionManager.class). }
false;public;0;17;;@Test public void determineTransactionManagerWithBeanNameSeveralTimes() {     BeanFactory beanFactory = mock(BeanFactory.class).     TransactionInterceptor ti = transactionInterceptorWithTransactionManagerName("fooTransactionManager", beanFactory).     PlatformTransactionManager txManager = associateTransactionManager(beanFactory, "fooTransactionManager").     DefaultTransactionAttribute attribute = new DefaultTransactionAttribute().     PlatformTransactionManager actual = ti.determineTransactionManager(attribute).     assertSame(txManager, actual).     // Call again, should be cached     PlatformTransactionManager actual2 = ti.determineTransactionManager(attribute).     assertSame(txManager, actual2).     verify(beanFactory, times(1)).getBean("fooTransactionManager", PlatformTransactionManager.class). }
false;public;0;17;;@Test public void determineTransactionManagerDefaultSeveralTimes() {     BeanFactory beanFactory = mock(BeanFactory.class).     TransactionInterceptor ti = simpleTransactionInterceptor(beanFactory).     PlatformTransactionManager txManager = mock(PlatformTransactionManager.class).     given(beanFactory.getBean(PlatformTransactionManager.class)).willReturn(txManager).     DefaultTransactionAttribute attribute = new DefaultTransactionAttribute().     PlatformTransactionManager actual = ti.determineTransactionManager(attribute).     assertSame(txManager, actual).     // Call again, should be cached     PlatformTransactionManager actual2 = ti.determineTransactionManager(attribute).     assertSame(txManager, actual2).     verify(beanFactory, times(1)).getBean(PlatformTransactionManager.class). }
false;private;3;18;;private TransactionInterceptor createTransactionInterceptor(BeanFactory beanFactory, String transactionManagerName, PlatformTransactionManager transactionManager) {     TransactionInterceptor ti = new TransactionInterceptor().     if (beanFactory != null) {         ti.setBeanFactory(beanFactory).     }     if (transactionManagerName != null) {         ti.setTransactionManagerBeanName(transactionManagerName).     }     if (transactionManager != null) {         ti.setTransactionManager(transactionManager).     }     ti.setTransactionAttributeSource(new NameMatchTransactionAttributeSource()).     ti.afterPropertiesSet().     return ti. }
false;private;2;5;;private TransactionInterceptor transactionInterceptorWithTransactionManager(PlatformTransactionManager transactionManager, BeanFactory beanFactory) {     return createTransactionInterceptor(beanFactory, null, transactionManager). }
false;private;2;5;;private TransactionInterceptor transactionInterceptorWithTransactionManagerName(String transactionManagerName, BeanFactory beanFactory) {     return createTransactionInterceptor(beanFactory, transactionManagerName, null). }
false;private;1;3;;private TransactionInterceptor simpleTransactionInterceptor(BeanFactory beanFactory) {     return createTransactionInterceptor(beanFactory, null, null). }
false;private;2;6;;private PlatformTransactionManager associateTransactionManager(BeanFactory beanFactory, String name) {     PlatformTransactionManager transactionManager = mock(PlatformTransactionManager.class).     given(beanFactory.containsBean(name)).willReturn(true).     given(beanFactory.getBean(name, PlatformTransactionManager.class)).willReturn(transactionManager).     return transactionManager. }
false;public;1;4;;@Override public TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void commit(TransactionStatus status) throws TransactionException {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void rollback(TransactionStatus status) throws TransactionException {     throw new UnsupportedOperationException(). }
