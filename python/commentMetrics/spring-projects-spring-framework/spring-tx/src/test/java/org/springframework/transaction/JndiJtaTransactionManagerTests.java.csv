# id;timestamp;commentText;codeText;commentWords;codeWords
JndiJtaTransactionManagerTests -> @Override 	protected void tearDown();1356735495;Prevent any side-effects due to this test modifying ThreadLocals that might_affect subsequent tests when all tests are run in the same JVM, as with Eclipse.;@Override_	protected void tearDown() {_		assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty())__		assertFalse(TransactionSynchronizationManager.isSynchronizationActive())__		assertNull(TransactionSynchronizationManager.getCurrentTransactionName())__		assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())__		assertFalse(TransactionSynchronizationManager.isActualTransactionActive())__	};prevent,any,side,effects,due,to,this,test,modifying,thread,locals,that,might,affect,subsequent,tests,when,all,tests,are,run,in,the,same,jvm,as,with,eclipse;override,protected,void,tear,down,assert,true,transaction,synchronization,manager,get,resource,map,is,empty,assert,false,transaction,synchronization,manager,is,synchronization,active,assert,null,transaction,synchronization,manager,get,current,transaction,name,assert,false,transaction,synchronization,manager,is,current,transaction,read,only,assert,false,transaction,synchronization,manager,is,actual,transaction,active
JndiJtaTransactionManagerTests -> @Override 	protected void tearDown();1362408075;Prevent any side-effects due to this test modifying ThreadLocals that might_affect subsequent tests when all tests are run in the same JVM, as with Eclipse.;@Override_	protected void tearDown() {_		assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty())__		assertFalse(TransactionSynchronizationManager.isSynchronizationActive())__		assertNull(TransactionSynchronizationManager.getCurrentTransactionName())__		assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())__		assertFalse(TransactionSynchronizationManager.isActualTransactionActive())__	};prevent,any,side,effects,due,to,this,test,modifying,thread,locals,that,might,affect,subsequent,tests,when,all,tests,are,run,in,the,same,jvm,as,with,eclipse;override,protected,void,tear,down,assert,true,transaction,synchronization,manager,get,resource,map,is,empty,assert,false,transaction,synchronization,manager,is,synchronization,active,assert,null,transaction,synchronization,manager,get,current,transaction,name,assert,false,transaction,synchronization,manager,is,current,transaction,read,only,assert,false,transaction,synchronization,manager,is,actual,transaction,active
JndiJtaTransactionManagerTests -> @Override 	protected void tearDown();1363208506;Prevent any side-effects due to this test modifying ThreadLocals that might_affect subsequent tests when all tests are run in the same JVM, as with Eclipse.;@Override_	protected void tearDown() {_		assertTrue(TransactionSynchronizationManager.getResourceMap().isEmpty())__		assertFalse(TransactionSynchronizationManager.isSynchronizationActive())__		assertNull(TransactionSynchronizationManager.getCurrentTransactionName())__		assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())__		assertFalse(TransactionSynchronizationManager.isActualTransactionActive())__	};prevent,any,side,effects,due,to,this,test,modifying,thread,locals,that,might,affect,subsequent,tests,when,all,tests,are,run,in,the,same,jvm,as,with,eclipse;override,protected,void,tear,down,assert,true,transaction,synchronization,manager,get,resource,map,is,empty,assert,false,transaction,synchronization,manager,is,synchronization,active,assert,null,transaction,synchronization,manager,get,current,transaction,name,assert,false,transaction,synchronization,manager,is,current,transaction,read,only,assert,false,transaction,synchronization,manager,is,actual,transaction,active
