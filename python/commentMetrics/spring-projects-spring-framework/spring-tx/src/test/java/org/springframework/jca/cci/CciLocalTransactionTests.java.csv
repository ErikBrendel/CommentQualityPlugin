# id;timestamp;commentText;codeText;commentWords;codeWords
CciLocalTransactionTests -> @Test 	public void testLocalTransactionCommit() throws ResourceException;1328020251;Test if a transaction ( begin / commit ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager.;@Test_	public void testLocalTransactionCommit() throws ResourceException {_		final ConnectionFactory connectionFactory = createMock(ConnectionFactory.class)__		Connection connection = createMock(Connection.class)__		Interaction interaction = createMock(Interaction.class)__		LocalTransaction localTransaction = createMock(LocalTransaction.class)__		final Record record = createMock(Record.class)__		final InteractionSpec interactionSpec = createMock(InteractionSpec.class)___		expect(connectionFactory.getConnection()).andReturn(connection)___		expect(connection.getLocalTransaction()).andReturn(localTransaction)___		localTransaction.begin()___		expect(connection.createInteraction()).andReturn(interaction)___		expect(interaction.execute(interactionSpec, record, record)).andReturn(true)___		interaction.close()___		expect(connection.getLocalTransaction()).andReturn(localTransaction)___		localTransaction.commit()___		connection.close()___		replay(connectionFactory, connection, localTransaction, interaction, record)___		org.springframework.jca.cci.connection.CciLocalTransactionManager tm = new org.springframework.jca.cci.connection.CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		tt.execute(new TransactionCallbackWithoutResult() {_			protected void doInTransactionWithoutResult(TransactionStatus status) {_				assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__				CciTemplate ct = new CciTemplate(connectionFactory)__				ct.execute(interactionSpec, record, record)__			}_		})___		verify(connectionFactory, connection, localTransaction, interaction, record)__	};test,if,a,transaction,begin,commit,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager;test,public,void,test,local,transaction,commit,throws,resource,exception,final,connection,factory,connection,factory,create,mock,connection,factory,class,connection,connection,create,mock,connection,class,interaction,interaction,create,mock,interaction,class,local,transaction,local,transaction,create,mock,local,transaction,class,final,record,record,create,mock,record,class,final,interaction,spec,interaction,spec,create,mock,interaction,spec,class,expect,connection,factory,get,connection,and,return,connection,expect,connection,get,local,transaction,and,return,local,transaction,local,transaction,begin,expect,connection,create,interaction,and,return,interaction,expect,interaction,execute,interaction,spec,record,record,and,return,true,interaction,close,expect,connection,get,local,transaction,and,return,local,transaction,local,transaction,commit,connection,close,replay,connection,factory,connection,local,transaction,interaction,record,org,springframework,jca,cci,connection,cci,local,transaction,manager,tm,new,org,springframework,jca,cci,connection,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,tt,execute,new,transaction,callback,without,result,protected,void,do,in,transaction,without,result,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,verify,connection,factory,connection,local,transaction,interaction,record
CciLocalTransactionTests -> @Test 	public void testLocalTransactionCommit() throws ResourceException;1356735495;Test if a transaction ( begin / commit ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager.;@Test_	public void testLocalTransactionCommit() throws ResourceException {_		final ConnectionFactory connectionFactory = createMock(ConnectionFactory.class)__		Connection connection = createMock(Connection.class)__		Interaction interaction = createMock(Interaction.class)__		LocalTransaction localTransaction = createMock(LocalTransaction.class)__		final Record record = createMock(Record.class)__		final InteractionSpec interactionSpec = createMock(InteractionSpec.class)___		expect(connectionFactory.getConnection()).andReturn(connection)___		expect(connection.getLocalTransaction()).andReturn(localTransaction)___		localTransaction.begin()___		expect(connection.createInteraction()).andReturn(interaction)___		expect(interaction.execute(interactionSpec, record, record)).andReturn(true)___		interaction.close()___		expect(connection.getLocalTransaction()).andReturn(localTransaction)___		localTransaction.commit()___		connection.close()___		replay(connectionFactory, connection, localTransaction, interaction, record)___		org.springframework.jca.cci.connection.CciLocalTransactionManager tm = new org.springframework.jca.cci.connection.CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		tt.execute(new TransactionCallbackWithoutResult() {_			@Override_			protected void doInTransactionWithoutResult(TransactionStatus status) {_				assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__				CciTemplate ct = new CciTemplate(connectionFactory)__				ct.execute(interactionSpec, record, record)__			}_		})___		verify(connectionFactory, connection, localTransaction, interaction, record)__	};test,if,a,transaction,begin,commit,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager;test,public,void,test,local,transaction,commit,throws,resource,exception,final,connection,factory,connection,factory,create,mock,connection,factory,class,connection,connection,create,mock,connection,class,interaction,interaction,create,mock,interaction,class,local,transaction,local,transaction,create,mock,local,transaction,class,final,record,record,create,mock,record,class,final,interaction,spec,interaction,spec,create,mock,interaction,spec,class,expect,connection,factory,get,connection,and,return,connection,expect,connection,get,local,transaction,and,return,local,transaction,local,transaction,begin,expect,connection,create,interaction,and,return,interaction,expect,interaction,execute,interaction,spec,record,record,and,return,true,interaction,close,expect,connection,get,local,transaction,and,return,local,transaction,local,transaction,commit,connection,close,replay,connection,factory,connection,local,transaction,interaction,record,org,springframework,jca,cci,connection,cci,local,transaction,manager,tm,new,org,springframework,jca,cci,connection,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,verify,connection,factory,connection,local,transaction,interaction,record
CciLocalTransactionTests -> @Test 	public void testLocalTransactionCommit() throws ResourceException;1363208506;Test if a transaction ( begin / commit ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager.;@Test_	public void testLocalTransactionCommit() throws ResourceException {_		final ConnectionFactory connectionFactory = mock(ConnectionFactory.class)__		Connection connection = mock(Connection.class)__		Interaction interaction = mock(Interaction.class)__		LocalTransaction localTransaction = mock(LocalTransaction.class)__		final Record record = mock(Record.class)__		final InteractionSpec interactionSpec = mock(InteractionSpec.class)___		given(connectionFactory.getConnection()).willReturn(connection)__		given(connection.getLocalTransaction()).willReturn(localTransaction)__		given(connection.createInteraction()).willReturn(interaction)__		given(interaction.execute(interactionSpec, record, record)).willReturn(true)__		given(connection.getLocalTransaction()).willReturn(localTransaction)___		CciLocalTransactionManager tm = new CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		tt.execute(new TransactionCallbackWithoutResult() {_			@Override_			protected void doInTransactionWithoutResult(TransactionStatus status) {_				assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__				CciTemplate ct = new CciTemplate(connectionFactory)__				ct.execute(interactionSpec, record, record)__			}_		})___		verify(localTransaction).begin()__		verify(interaction).close()__		verify(localTransaction).commit()__		verify(connection).close()__	};test,if,a,transaction,begin,commit,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager;test,public,void,test,local,transaction,commit,throws,resource,exception,final,connection,factory,connection,factory,mock,connection,factory,class,connection,connection,mock,connection,class,interaction,interaction,mock,interaction,class,local,transaction,local,transaction,mock,local,transaction,class,final,record,record,mock,record,class,final,interaction,spec,interaction,spec,mock,interaction,spec,class,given,connection,factory,get,connection,will,return,connection,given,connection,get,local,transaction,will,return,local,transaction,given,connection,create,interaction,will,return,interaction,given,interaction,execute,interaction,spec,record,record,will,return,true,given,connection,get,local,transaction,will,return,local,transaction,cci,local,transaction,manager,tm,new,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,verify,local,transaction,begin,verify,interaction,close,verify,local,transaction,commit,verify,connection,close
CciLocalTransactionTests -> @Test 	public void testLocalTransactionCommit() throws ResourceException;1398144682;Test if a transaction ( begin / commit ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager.;@Test_	public void testLocalTransactionCommit() throws ResourceException {_		final ConnectionFactory connectionFactory = mock(ConnectionFactory.class)__		Connection connection = mock(Connection.class)__		Interaction interaction = mock(Interaction.class)__		LocalTransaction localTransaction = mock(LocalTransaction.class)__		final Record record = mock(Record.class)__		final InteractionSpec interactionSpec = mock(InteractionSpec.class)___		given(connectionFactory.getConnection()).willReturn(connection)__		given(connection.getLocalTransaction()).willReturn(localTransaction)__		given(connection.createInteraction()).willReturn(interaction)__		given(interaction.execute(interactionSpec, record, record)).willReturn(true)__		given(connection.getLocalTransaction()).willReturn(localTransaction)___		CciLocalTransactionManager tm = new CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		tt.execute(new TransactionCallbackWithoutResult() {_			@Override_			protected void doInTransactionWithoutResult(TransactionStatus status) {_				assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__				CciTemplate ct = new CciTemplate(connectionFactory)__				ct.execute(interactionSpec, record, record)__			}_		})___		verify(localTransaction).begin()__		verify(interaction).close()__		verify(localTransaction).commit()__		verify(connection).close()__	};test,if,a,transaction,begin,commit,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager;test,public,void,test,local,transaction,commit,throws,resource,exception,final,connection,factory,connection,factory,mock,connection,factory,class,connection,connection,mock,connection,class,interaction,interaction,mock,interaction,class,local,transaction,local,transaction,mock,local,transaction,class,final,record,record,mock,record,class,final,interaction,spec,interaction,spec,mock,interaction,spec,class,given,connection,factory,get,connection,will,return,connection,given,connection,get,local,transaction,will,return,local,transaction,given,connection,create,interaction,will,return,interaction,given,interaction,execute,interaction,spec,record,record,will,return,true,given,connection,get,local,transaction,will,return,local,transaction,cci,local,transaction,manager,tm,new,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,verify,local,transaction,begin,verify,interaction,close,verify,local,transaction,commit,verify,connection,close
CciLocalTransactionTests -> @Test 	public void testLocalTransactionCommit() throws ResourceException;1413848647;Test if a transaction ( begin / commit ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager.;@Test_	public void testLocalTransactionCommit() throws ResourceException {_		final ConnectionFactory connectionFactory = mock(ConnectionFactory.class)__		Connection connection = mock(Connection.class)__		Interaction interaction = mock(Interaction.class)__		LocalTransaction localTransaction = mock(LocalTransaction.class)__		final Record record = mock(Record.class)__		final InteractionSpec interactionSpec = mock(InteractionSpec.class)___		given(connectionFactory.getConnection()).willReturn(connection)__		given(connection.getLocalTransaction()).willReturn(localTransaction)__		given(connection.createInteraction()).willReturn(interaction)__		given(interaction.execute(interactionSpec, record, record)).willReturn(true)__		given(connection.getLocalTransaction()).willReturn(localTransaction)___		CciLocalTransactionManager tm = new CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		tt.execute(new TransactionCallbackWithoutResult() {_			@Override_			protected void doInTransactionWithoutResult(TransactionStatus status) {_				assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__				CciTemplate ct = new CciTemplate(connectionFactory)__				ct.execute(interactionSpec, record, record)__			}_		})___		verify(localTransaction).begin()__		verify(interaction).close()__		verify(localTransaction).commit()__		verify(connection).close()__	};test,if,a,transaction,begin,commit,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager;test,public,void,test,local,transaction,commit,throws,resource,exception,final,connection,factory,connection,factory,mock,connection,factory,class,connection,connection,mock,connection,class,interaction,interaction,mock,interaction,class,local,transaction,local,transaction,mock,local,transaction,class,final,record,record,mock,record,class,final,interaction,spec,interaction,spec,mock,interaction,spec,class,given,connection,factory,get,connection,will,return,connection,given,connection,get,local,transaction,will,return,local,transaction,given,connection,create,interaction,will,return,interaction,given,interaction,execute,interaction,spec,record,record,will,return,true,given,connection,get,local,transaction,will,return,local,transaction,cci,local,transaction,manager,tm,new,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,verify,local,transaction,begin,verify,interaction,close,verify,local,transaction,commit,verify,connection,close
CciLocalTransactionTests -> @Test 	public void testLocalTransactionRollback() throws ResourceException;1328020251;Test if a transaction ( begin / rollback ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager and a non-checked exception is thrown.;@Test_	public void testLocalTransactionRollback() throws ResourceException {_		final ConnectionFactory connectionFactory = createMock(ConnectionFactory.class)__		Connection connection = createMock(Connection.class)__		Interaction interaction = createMock(Interaction.class)__		LocalTransaction localTransaction = createMock(LocalTransaction.class)__		final Record record = createMock(Record.class)__		final InteractionSpec interactionSpec = createMock(InteractionSpec.class)__		_		expect(connectionFactory.getConnection()).andReturn(connection)___		expect(connection.getLocalTransaction()).andReturn(localTransaction)___		localTransaction.begin()___		expect(connection.createInteraction()).andReturn(interaction)___		expect(interaction.execute(interactionSpec, record, record)).andReturn(true)___		interaction.close()___		expect(connection.getLocalTransaction()).andReturn(localTransaction)___		localTransaction.rollback()___		connection.close()__		_		replay(connectionFactory, connection, localTransaction, interaction, record)___		org.springframework.jca.cci.connection.CciLocalTransactionManager tm = new org.springframework.jca.cci.connection.CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		try {_			tt.execute(new TransactionCallback() {_				public Object doInTransaction(TransactionStatus status) {_					assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__					CciTemplate ct = new CciTemplate(connectionFactory)__					ct.execute(interactionSpec, record, record)__					throw new DataRetrievalFailureException("error")__				}_			})__		}_		catch (Exception ex) {_		}__		verify(connectionFactory, connection, localTransaction, interaction, record)__	};test,if,a,transaction,begin,rollback,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager,and,a,non,checked,exception,is,thrown;test,public,void,test,local,transaction,rollback,throws,resource,exception,final,connection,factory,connection,factory,create,mock,connection,factory,class,connection,connection,create,mock,connection,class,interaction,interaction,create,mock,interaction,class,local,transaction,local,transaction,create,mock,local,transaction,class,final,record,record,create,mock,record,class,final,interaction,spec,interaction,spec,create,mock,interaction,spec,class,expect,connection,factory,get,connection,and,return,connection,expect,connection,get,local,transaction,and,return,local,transaction,local,transaction,begin,expect,connection,create,interaction,and,return,interaction,expect,interaction,execute,interaction,spec,record,record,and,return,true,interaction,close,expect,connection,get,local,transaction,and,return,local,transaction,local,transaction,rollback,connection,close,replay,connection,factory,connection,local,transaction,interaction,record,org,springframework,jca,cci,connection,cci,local,transaction,manager,tm,new,org,springframework,jca,cci,connection,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,public,object,do,in,transaction,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,throw,new,data,retrieval,failure,exception,error,catch,exception,ex,verify,connection,factory,connection,local,transaction,interaction,record
CciLocalTransactionTests -> @Test 	public void testLocalTransactionRollback() throws ResourceException;1356735495;Test if a transaction ( begin / rollback ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager and a non-checked exception is thrown.;@Test_	public void testLocalTransactionRollback() throws ResourceException {_		final ConnectionFactory connectionFactory = createMock(ConnectionFactory.class)__		Connection connection = createMock(Connection.class)__		Interaction interaction = createMock(Interaction.class)__		LocalTransaction localTransaction = createMock(LocalTransaction.class)__		final Record record = createMock(Record.class)__		final InteractionSpec interactionSpec = createMock(InteractionSpec.class)___		expect(connectionFactory.getConnection()).andReturn(connection)___		expect(connection.getLocalTransaction()).andReturn(localTransaction)___		localTransaction.begin()___		expect(connection.createInteraction()).andReturn(interaction)___		expect(interaction.execute(interactionSpec, record, record)).andReturn(true)___		interaction.close()___		expect(connection.getLocalTransaction()).andReturn(localTransaction)___		localTransaction.rollback()___		connection.close()___		replay(connectionFactory, connection, localTransaction, interaction, record)___		org.springframework.jca.cci.connection.CciLocalTransactionManager tm = new org.springframework.jca.cci.connection.CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		try {_			tt.execute(new TransactionCallback() {_				@Override_				public Object doInTransaction(TransactionStatus status) {_					assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__					CciTemplate ct = new CciTemplate(connectionFactory)__					ct.execute(interactionSpec, record, record)__					throw new DataRetrievalFailureException("error")__				}_			})__		}_		catch (Exception ex) {_		}__		verify(connectionFactory, connection, localTransaction, interaction, record)__	};test,if,a,transaction,begin,rollback,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager,and,a,non,checked,exception,is,thrown;test,public,void,test,local,transaction,rollback,throws,resource,exception,final,connection,factory,connection,factory,create,mock,connection,factory,class,connection,connection,create,mock,connection,class,interaction,interaction,create,mock,interaction,class,local,transaction,local,transaction,create,mock,local,transaction,class,final,record,record,create,mock,record,class,final,interaction,spec,interaction,spec,create,mock,interaction,spec,class,expect,connection,factory,get,connection,and,return,connection,expect,connection,get,local,transaction,and,return,local,transaction,local,transaction,begin,expect,connection,create,interaction,and,return,interaction,expect,interaction,execute,interaction,spec,record,record,and,return,true,interaction,close,expect,connection,get,local,transaction,and,return,local,transaction,local,transaction,rollback,connection,close,replay,connection,factory,connection,local,transaction,interaction,record,org,springframework,jca,cci,connection,cci,local,transaction,manager,tm,new,org,springframework,jca,cci,connection,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,override,public,object,do,in,transaction,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,throw,new,data,retrieval,failure,exception,error,catch,exception,ex,verify,connection,factory,connection,local,transaction,interaction,record
CciLocalTransactionTests -> @Test 	public void testLocalTransactionRollback() throws ResourceException;1363208506;Test if a transaction ( begin / rollback ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager and a non-checked exception is thrown.;@Test_	public void testLocalTransactionRollback() throws ResourceException {_		final ConnectionFactory connectionFactory = mock(ConnectionFactory.class)__		Connection connection = mock(Connection.class)__		Interaction interaction = mock(Interaction.class)__		LocalTransaction localTransaction = mock(LocalTransaction.class)__		final Record record = mock(Record.class)__		final InteractionSpec interactionSpec = mock(InteractionSpec.class)___		given(connectionFactory.getConnection()).willReturn(connection)__		given(connection.getLocalTransaction()).willReturn(localTransaction)__		given(connection.createInteraction()).willReturn(interaction)__		given(interaction.execute(interactionSpec, record, record)).willReturn(true)__		given(connection.getLocalTransaction()).willReturn(localTransaction)___		CciLocalTransactionManager tm = new CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		try {_			tt.execute(new TransactionCallback() {_				@Override_				public Object doInTransaction(TransactionStatus status) {_					assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__					CciTemplate ct = new CciTemplate(connectionFactory)__					ct.execute(interactionSpec, record, record)__					throw new DataRetrievalFailureException("error")__				}_			})__		}_		catch (Exception ex) {_		}__		verify(localTransaction).begin()__		verify(interaction).close()__		verify(localTransaction).rollback()__		verify(connection).close()__	};test,if,a,transaction,begin,rollback,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager,and,a,non,checked,exception,is,thrown;test,public,void,test,local,transaction,rollback,throws,resource,exception,final,connection,factory,connection,factory,mock,connection,factory,class,connection,connection,mock,connection,class,interaction,interaction,mock,interaction,class,local,transaction,local,transaction,mock,local,transaction,class,final,record,record,mock,record,class,final,interaction,spec,interaction,spec,mock,interaction,spec,class,given,connection,factory,get,connection,will,return,connection,given,connection,get,local,transaction,will,return,local,transaction,given,connection,create,interaction,will,return,interaction,given,interaction,execute,interaction,spec,record,record,will,return,true,given,connection,get,local,transaction,will,return,local,transaction,cci,local,transaction,manager,tm,new,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,override,public,object,do,in,transaction,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,throw,new,data,retrieval,failure,exception,error,catch,exception,ex,verify,local,transaction,begin,verify,interaction,close,verify,local,transaction,rollback,verify,connection,close
CciLocalTransactionTests -> @Test 	public void testLocalTransactionRollback() throws ResourceException;1398144682;Test if a transaction ( begin / rollback ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager and a non-checked exception is thrown.;@Test_	public void testLocalTransactionRollback() throws ResourceException {_		final ConnectionFactory connectionFactory = mock(ConnectionFactory.class)__		Connection connection = mock(Connection.class)__		Interaction interaction = mock(Interaction.class)__		LocalTransaction localTransaction = mock(LocalTransaction.class)__		final Record record = mock(Record.class)__		final InteractionSpec interactionSpec = mock(InteractionSpec.class)___		given(connectionFactory.getConnection()).willReturn(connection)__		given(connection.getLocalTransaction()).willReturn(localTransaction)__		given(connection.createInteraction()).willReturn(interaction)__		given(interaction.execute(interactionSpec, record, record)).willReturn(true)__		given(connection.getLocalTransaction()).willReturn(localTransaction)___		CciLocalTransactionManager tm = new CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		try {_			tt.execute(new TransactionCallback<Void>() {_				@Override_				public Void doInTransaction(TransactionStatus status) {_					assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__					CciTemplate ct = new CciTemplate(connectionFactory)__					ct.execute(interactionSpec, record, record)__					throw new DataRetrievalFailureException("error")__				}_			})__		}_		catch (Exception ex) {_		}__		verify(localTransaction).begin()__		verify(interaction).close()__		verify(localTransaction).rollback()__		verify(connection).close()__	};test,if,a,transaction,begin,rollback,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager,and,a,non,checked,exception,is,thrown;test,public,void,test,local,transaction,rollback,throws,resource,exception,final,connection,factory,connection,factory,mock,connection,factory,class,connection,connection,mock,connection,class,interaction,interaction,mock,interaction,class,local,transaction,local,transaction,mock,local,transaction,class,final,record,record,mock,record,class,final,interaction,spec,interaction,spec,mock,interaction,spec,class,given,connection,factory,get,connection,will,return,connection,given,connection,get,local,transaction,will,return,local,transaction,given,connection,create,interaction,will,return,interaction,given,interaction,execute,interaction,spec,record,record,will,return,true,given,connection,get,local,transaction,will,return,local,transaction,cci,local,transaction,manager,tm,new,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,void,override,public,void,do,in,transaction,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,throw,new,data,retrieval,failure,exception,error,catch,exception,ex,verify,local,transaction,begin,verify,interaction,close,verify,local,transaction,rollback,verify,connection,close
CciLocalTransactionTests -> @Test 	public void testLocalTransactionRollback() throws ResourceException;1413848647;Test if a transaction ( begin / rollback ) is executed on the_LocalTransaction when CciLocalTransactionManager is specified as_transaction manager and a non-checked exception is thrown.;@Test_	public void testLocalTransactionRollback() throws ResourceException {_		final ConnectionFactory connectionFactory = mock(ConnectionFactory.class)__		Connection connection = mock(Connection.class)__		Interaction interaction = mock(Interaction.class)__		LocalTransaction localTransaction = mock(LocalTransaction.class)__		final Record record = mock(Record.class)__		final InteractionSpec interactionSpec = mock(InteractionSpec.class)___		given(connectionFactory.getConnection()).willReturn(connection)__		given(connection.getLocalTransaction()).willReturn(localTransaction)__		given(connection.createInteraction()).willReturn(interaction)__		given(interaction.execute(interactionSpec, record, record)).willReturn(true)__		given(connection.getLocalTransaction()).willReturn(localTransaction)___		CciLocalTransactionManager tm = new CciLocalTransactionManager()__		tm.setConnectionFactory(connectionFactory)__		TransactionTemplate tt = new TransactionTemplate(tm)___		try {_			tt.execute(new TransactionCallback<Void>() {_				@Override_				public Void doInTransaction(TransactionStatus status) {_					assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(connectionFactory))__					CciTemplate ct = new CciTemplate(connectionFactory)__					ct.execute(interactionSpec, record, record)__					throw new DataRetrievalFailureException("error")__				}_			})__		}_		catch (Exception ex) {_		}__		verify(localTransaction).begin()__		verify(interaction).close()__		verify(localTransaction).rollback()__		verify(connection).close()__	};test,if,a,transaction,begin,rollback,is,executed,on,the,local,transaction,when,cci,local,transaction,manager,is,specified,as,transaction,manager,and,a,non,checked,exception,is,thrown;test,public,void,test,local,transaction,rollback,throws,resource,exception,final,connection,factory,connection,factory,mock,connection,factory,class,connection,connection,mock,connection,class,interaction,interaction,mock,interaction,class,local,transaction,local,transaction,mock,local,transaction,class,final,record,record,mock,record,class,final,interaction,spec,interaction,spec,mock,interaction,spec,class,given,connection,factory,get,connection,will,return,connection,given,connection,get,local,transaction,will,return,local,transaction,given,connection,create,interaction,will,return,interaction,given,interaction,execute,interaction,spec,record,record,will,return,true,given,connection,get,local,transaction,will,return,local,transaction,cci,local,transaction,manager,tm,new,cci,local,transaction,manager,tm,set,connection,factory,connection,factory,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,void,override,public,void,do,in,transaction,transaction,status,status,assert,true,has,thread,connection,transaction,synchronization,manager,has,resource,connection,factory,cci,template,ct,new,cci,template,connection,factory,ct,execute,interaction,spec,record,record,throw,new,data,retrieval,failure,exception,error,catch,exception,ex,verify,local,transaction,begin,verify,interaction,close,verify,local,transaction,rollback,verify,connection,close
