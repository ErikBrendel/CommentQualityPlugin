commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void defaultPhase() {     Method m = ReflectionUtils.findMethod(SampleEvents.class, "defaultPhase", String.class).     assertPhase(m, TransactionPhase.AFTER_COMMIT). }
false;public;0;5;;@Test public void phaseSet() {     Method m = ReflectionUtils.findMethod(SampleEvents.class, "phaseSet", String.class).     assertPhase(m, TransactionPhase.AFTER_ROLLBACK). }
false;public;0;8;;@Test public void phaseAndClassesSet() {     Method m = ReflectionUtils.findMethod(SampleEvents.class, "phaseAndClassesSet").     assertPhase(m, TransactionPhase.AFTER_COMPLETION).     supportsEventType(true, m, createGenericEventType(String.class)).     supportsEventType(true, m, createGenericEventType(Integer.class)).     supportsEventType(false, m, createGenericEventType(Double.class)). }
false;public;0;7;;@Test public void valueSet() {     Method m = ReflectionUtils.findMethod(SampleEvents.class, "valueSet").     assertPhase(m, TransactionPhase.AFTER_COMMIT).     supportsEventType(true, m, createGenericEventType(String.class)).     supportsEventType(false, m, createGenericEventType(Double.class)). }
false;private;2;6;;private void assertPhase(Method method, TransactionPhase expected) {     assertNotNull("Method must not be null", method).     TransactionalEventListener annotation = AnnotatedElementUtils.findMergedAnnotation(method, TransactionalEventListener.class).     assertEquals("Wrong phase for '" + method + "'", expected, annotation.phase()). }
false;private;3;5;;private void supportsEventType(boolean match, Method method, ResolvableType eventType) {     ApplicationListenerMethodAdapter adapter = createTestInstance(method).     assertEquals("Wrong match for event '" + eventType + "' on " + method, match, adapter.supportsEventType(eventType)). }
false;private;1;3;;private ApplicationListenerMethodTransactionalAdapter createTestInstance(Method m) {     return new ApplicationListenerMethodTransactionalAdapter("test", SampleEvents.class, m). }
false;private;1;3;;private ResolvableType createGenericEventType(Class<?> payloadType) {     return ResolvableType.forClassWithGenerics(PayloadApplicationEvent.class, payloadType). }
false;public;1;3;;@TransactionalEventListener public void defaultPhase(String data) { }
false;public;1;3;;@TransactionalEventListener(phase = TransactionPhase.AFTER_ROLLBACK) public void phaseSet(String data) { }
false;public;0;4;;@TransactionalEventListener(classes = { String.class, Integer.class }, phase = TransactionPhase.AFTER_COMPLETION) public void phaseAndClassesSet() { }
false;public;0;3;;@TransactionalEventListener(String.class) public void valueSet() { }
