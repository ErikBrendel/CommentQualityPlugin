commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;8;;protected RepositoryInterface createProxy(RepositoryInterfaceImpl target) {     MapPersistenceExceptionTranslator mpet = new MapPersistenceExceptionTranslator().     mpet.addTranslation(persistenceException1, new InvalidDataAccessApiUsageException("", persistenceException1)).     ProxyFactory pf = new ProxyFactory(target).     pf.addInterface(RepositoryInterface.class).     addPersistenceExceptionTranslation(pf, mpet).     return (RepositoryInterface) pf.getProxy(). }
false;protected;2;3;;protected void addPersistenceExceptionTranslation(ProxyFactory pf, PersistenceExceptionTranslator pet) {     pf.addAdvisor(new PersistenceExceptionTranslationAdvisor(pet, Repository.class)). }
false;public;0;24;;@Test public void noTranslationNeeded() {     RepositoryInterfaceImpl target = new RepositoryInterfaceImpl().     RepositoryInterface ri = createProxy(target).     ri.noThrowsClause().     ri.throwsPersistenceException().     target.setBehavior(persistenceException1).     try {         ri.noThrowsClause().         fail().     } catch (RuntimeException ex) {         assertSame(persistenceException1, ex).     }     try {         ri.throwsPersistenceException().         fail().     } catch (RuntimeException ex) {         assertSame(persistenceException1, ex).     } }
false;public;0;24;;@Test public void translationNotNeededForTheseExceptions() {     RepositoryInterfaceImpl target = new StereotypedRepositoryInterfaceImpl().     RepositoryInterface ri = createProxy(target).     ri.noThrowsClause().     ri.throwsPersistenceException().     target.setBehavior(doNotTranslate).     try {         ri.noThrowsClause().         fail().     } catch (RuntimeException ex) {         assertSame(doNotTranslate, ex).     }     try {         ri.throwsPersistenceException().         fail().     } catch (RuntimeException ex) {         assertSame(doNotTranslate, ex).     } }
false;public;0;4;;@Test public void translationNeededForTheseExceptions() {     doTestTranslationNeededForTheseExceptions(new StereotypedRepositoryInterfaceImpl()). }
false;public;0;4;;@Test public void translationNeededForTheseExceptionsOnSuperclass() {     doTestTranslationNeededForTheseExceptions(new MyStereotypedRepositoryInterfaceImpl()). }
false;public;0;4;;@Test public void translationNeededForTheseExceptionsWithCustomStereotype() {     doTestTranslationNeededForTheseExceptions(new CustomStereotypedRepositoryInterfaceImpl()). }
false;public;0;4;;@Test public void translationNeededForTheseExceptionsOnInterface() {     doTestTranslationNeededForTheseExceptions(new MyInterfaceStereotypedRepositoryInterfaceImpl()). }
false;public;0;4;;@Test public void translationNeededForTheseExceptionsOnInheritedInterface() {     doTestTranslationNeededForTheseExceptions(new MyInterfaceInheritedStereotypedRepositoryInterfaceImpl()). }
false;private;1;24;;private void doTestTranslationNeededForTheseExceptions(RepositoryInterfaceImpl target) {     RepositoryInterface ri = createProxy(target).     target.setBehavior(persistenceException1).     try {         ri.noThrowsClause().         fail().     } catch (DataAccessException ex) {         // Expected         assertSame(persistenceException1, ex.getCause()).     } catch (PersistenceException ex) {         fail("Should have been translated").     }     try {         ri.throwsPersistenceException().         fail().     } catch (PersistenceException ex) {         assertSame(persistenceException1, ex).     } }
false;;0;1;;void noThrowsClause().
false;;0;1;;void throwsPersistenceException() throws PersistenceException.
false;public;1;3;;public void setBehavior(RuntimeException rex) {     this.runtimeException = rex. }
false;public;0;6;;@Override public void noThrowsClause() {     if (runtimeException != null) {         throw runtimeException.     } }
false;public;0;6;;@Override public void throwsPersistenceException() throws PersistenceException {     if (runtimeException != null) {         throw runtimeException.     } }
