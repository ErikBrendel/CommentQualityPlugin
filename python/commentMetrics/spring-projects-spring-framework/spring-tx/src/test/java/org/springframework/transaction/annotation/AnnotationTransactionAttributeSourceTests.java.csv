# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception;1328020251;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception;1356735495;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception;1362408075;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception;1364419997;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception;1377099356;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception;1385134668;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception;1385163809;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void defaultsToClassTransactionAttribute() throws Exception;1434486973;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void defaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void defaultsToClassTransactionAttribute() throws Exception;1459326082;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void defaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void defaultsToClassTransactionAttribute() throws Exception;1501582101;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void defaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1434486973;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void transactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge")__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,method,interface,method2,itest,bean3,class,get,method,get,name,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1459326082;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void transactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge")__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,method,interface,method2,itest,bean3,class,get,method,get,name,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1501582101;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void transactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge")__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,method,interface,method2,itest,bean3,class,get,method,get,name,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void testDefaultsToClassTransactionAttribute() throws Exception;1328020251;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void testDefaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)__		_		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,test,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testDefaultsToClassTransactionAttribute() throws Exception;1356735495;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void testDefaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,test,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testDefaultsToClassTransactionAttribute() throws Exception;1362408075;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void testDefaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,test,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testDefaultsToClassTransactionAttribute() throws Exception;1364419997;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void testDefaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,test,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testDefaultsToClassTransactionAttribute() throws Exception;1377099356;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void testDefaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,test,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testDefaultsToClassTransactionAttribute() throws Exception;1385134668;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void testDefaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,test,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testDefaultsToClassTransactionAttribute() throws Exception;1385163809;Test that transaction attribute is inherited from class_if not specified on method.;@Test_	public void testDefaultsToClassTransactionAttribute() throws Exception {_		Method method = TestBean4.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,that,transaction,attribute,is,inherited,from,class,if,not,specified,on,method;test,public,void,test,defaults,to,class,transaction,attribute,throws,exception,method,method,test,bean4,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,method,test,bean4,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnCglibClassMethod() throws Exception;1434486973;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void transactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge")__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnCglibClassMethod() throws Exception;1459326082;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void transactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge")__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnCglibClassMethod() throws Exception;1501582101;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void transactionAttributeDeclaredOnCglibClassMethod() throws Exception {_		Method classMethod = ITestBean1.class.getMethod("getAge")__		TestBean1 tb = new TestBean1()__		ProxyFactory pf = new ProxyFactory(tb)__		pf.setProxyTargetClass(true)__		Object proxy = pf.getProxy()___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,transaction,attribute,declared,on,cglib,class,method,throws,exception,method,class,method,itest,bean1,class,get,method,get,age,test,bean1,tb,new,test,bean1,proxy,factory,pf,new,proxy,factory,tb,pf,set,proxy,target,class,true,object,proxy,pf,get,proxy,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,proxy,get,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnClassMethod() throws Exception;1434486973;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void transactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnClassMethod() throws Exception;1459326082;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void transactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnClassMethod() throws Exception;1501582101;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void transactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean1.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean1,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1434486973;Test case where attribute is on the interface method.;@Test_	public void transactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1459326082;Test case where attribute is on the interface method.;@Test_	public void transactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void transactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1501582101;Test case where attribute is on the interface method.;@Test_	public void transactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge")___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1328020251;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge", (Class[]) null)__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,test,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,class,null,method,interface,method2,itest,bean3,class,get,method,get,name,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1356735495;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge", (Class[]) null)__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,test,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,class,null,method,interface,method2,itest,bean3,class,get,method,get,name,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1362408075;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge", (Class[]) null)__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,test,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,class,null,method,interface,method2,itest,bean3,class,get,method,get,name,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1364419997;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge", (Class[]) null)__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,test,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,class,null,method,interface,method2,itest,bean3,class,get,method,get,name,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1377099356;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge", (Class[]) null)__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,test,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,class,null,method,interface,method2,itest,bean3,class,get,method,get,name,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1385134668;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge", (Class[]) null)__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,test,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,class,null,method,interface,method2,itest,bean3,class,get,method,get,name,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception;1385163809;Test that when an attribute exists on both class and interface, class takes precedence.;@Test_	public void testTransactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {_		Method interfaceMethod = ITestBean3.class.getMethod("getAge", (Class[]) null)__		Method interfaceMethod2 = ITestBean3.class.getMethod("getName", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior())__		assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel())__		assertEquals(5, actual.getTimeout())__		assertTrue(actual.isReadOnly())___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())___		TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class)__		assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior())__	};test,that,when,an,attribute,exists,on,both,class,and,interface,class,takes,precedence;test,public,void,test,transaction,attribute,on,target,class,method,overrides,attribute,on,interface,method,throws,exception,method,interface,method,itest,bean3,class,get,method,get,age,class,null,method,interface,method2,itest,bean3,class,get,method,get,name,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean3,class,assert,equals,transaction,attribute,actual,get,propagation,behavior,assert,equals,transaction,attribute,actual,get,isolation,level,assert,equals,5,actual,get,timeout,assert,true,actual,is,read,only,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,rbta,get,rollback,rules,add,new,no,rollback,rule,attribute,ioexception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules,transaction,attribute,actual2,atas,get,transaction,attribute,interface,method2,test,bean3,class,assert,equals,transaction,attribute,actual2,get,propagation,behavior
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception;1328020251;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)__		_		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)__		_		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception;1356735495;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception;1362408075;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception;1364419997;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception;1377099356;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception;1385134668;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception;1385163809;Test the important case where the invocation is on a proxied interface method_but the attribute is defined on the target class.;@Test_	public void testTransactionAttributeDeclaredOnClassMethod() throws Exception {_		Method classMethod = ITestBean.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__		rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class))__		assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,the,important,case,where,the,invocation,is,on,a,proxied,interface,method,but,the,attribute,is,defined,on,the,target,class;test,public,void,test,transaction,attribute,declared,on,class,method,throws,exception,method,class,method,itest,bean,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,class,method,test,bean1,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,rbta,get,rollback,rules,add,new,rollback,rule,attribute,exception,class,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1328020251;Test case where attribute is on the interface method.;@Test_	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)__		_		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,test,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1356735495;Test case where attribute is on the interface method.;@Test_	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,test,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1362408075;Test case where attribute is on the interface method.;@Test_	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,test,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1364419997;Test case where attribute is on the interface method.;@Test_	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,test,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1377099356;Test case where attribute is on the interface method.;@Test_	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,test,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1385134668;Test case where attribute is on the interface method.;@Test_	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,test,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
AnnotationTransactionAttributeSourceTests -> @Test 	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception;1385163809;Test case where attribute is on the interface method.;@Test_	public void testTransactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {_		Method interfaceMethod = ITestBean2.class.getMethod("getAge", (Class[]) null)___		AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource()__		TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class)___		RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute()__			assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules())__	};test,case,where,attribute,is,on,the,interface,method;test,public,void,test,transaction,attribute,declared,on,interface,method,only,throws,exception,method,interface,method,itest,bean2,class,get,method,get,age,class,null,annotation,transaction,attribute,source,atas,new,annotation,transaction,attribute,source,transaction,attribute,actual,atas,get,transaction,attribute,interface,method,test,bean2,class,rule,based,transaction,attribute,rbta,new,rule,based,transaction,attribute,assert,equals,rbta,get,rollback,rules,rule,based,transaction,attribute,actual,get,rollback,rules
