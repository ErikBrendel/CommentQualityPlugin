commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void serializable() throws Exception {     TestBean1 tb = new TestBean1().     CallCountingTransactionManager ptm = new CallCountingTransactionManager().     AnnotationTransactionAttributeSource tas = new AnnotationTransactionAttributeSource().     TransactionInterceptor ti = new TransactionInterceptor(ptm, tas).     ProxyFactory proxyFactory = new ProxyFactory().     proxyFactory.setInterfaces(ITestBean1.class).     proxyFactory.addAdvice(ti).     proxyFactory.setTarget(tb).     ITestBean1 proxy = (ITestBean1) proxyFactory.getProxy().     proxy.getAge().     assertEquals(1, ptm.commits).     ITestBean1 serializedProxy = (ITestBean1) SerializationTestUtils.serializeAndDeserialize(proxy).     serializedProxy.getAge().     Advised advised = (Advised) serializedProxy.     TransactionInterceptor serializedTi = (TransactionInterceptor) advised.getAdvisors()[0].getAdvice().     CallCountingTransactionManager serializedPtm = (CallCountingTransactionManager) serializedTi.getTransactionManager().     assertEquals(2, serializedPtm.commits). }
false;public;0;10;;@Test public void nullOrEmpty() throws Exception {     Method method = Empty.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     assertNull(atas.getTransactionAttribute(method, null)).     // Try again in case of caching     assertNull(atas.getTransactionAttribute(method, null)). }
true;public;0;11;/**  * Test the important case where the invocation is on a proxied interface method  * but the attribute is defined on the target class.  */ ;/**  * Test the important case where the invocation is on a proxied interface method  * but the attribute is defined on the target class.  */ @Test public void transactionAttributeDeclaredOnClassMethod() throws Exception {     Method classMethod = ITestBean1.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(classMethod, TestBean1.class).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()). }
true;public;0;15;/**  * Test the important case where the invocation is on a proxied interface method  * but the attribute is defined on the target class.  */ ;/**  * Test the important case where the invocation is on a proxied interface method  * but the attribute is defined on the target class.  */ @Test public void transactionAttributeDeclaredOnCglibClassMethod() throws Exception {     Method classMethod = ITestBean1.class.getMethod("getAge").     TestBean1 tb = new TestBean1().     ProxyFactory pf = new ProxyFactory(tb).     pf.setProxyTargetClass(true).     Object proxy = pf.getProxy().     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(classMethod, proxy.getClass()).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()). }
true;public;0;10;/**  * Test case where attribute is on the interface method.  */ ;/**  * Test case where attribute is on the interface method.  */ @Test public void transactionAttributeDeclaredOnInterfaceMethodOnly() throws Exception {     Method interfaceMethod = ITestBean2.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean2.class).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()). }
true;public;0;20;/**  * Test that when an attribute exists on both class and interface, class takes precedence.  */ ;/**  * Test that when an attribute exists on both class and interface, class takes precedence.  */ @Test public void transactionAttributeOnTargetClassMethodOverridesAttributeOnInterfaceMethod() throws Exception {     Method interfaceMethod = ITestBean3.class.getMethod("getAge").     Method interfaceMethod2 = ITestBean3.class.getMethod("getName").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(interfaceMethod, TestBean3.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRES_NEW, actual.getPropagationBehavior()).     assertEquals(TransactionAttribute.ISOLATION_REPEATABLE_READ, actual.getIsolationLevel()).     assertEquals(5, actual.getTimeout()).     assertTrue(actual.isReadOnly()).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()).     TransactionAttribute actual2 = atas.getTransactionAttribute(interfaceMethod2, TestBean3.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, actual2.getPropagationBehavior()). }
false;public;0;25;;@Test public void rollbackRulesAreApplied() throws Exception {     Method method = TestBean3.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean3.class).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute("java.lang.Exception")).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()).     assertTrue(actual.rollbackOn(new Exception())).     assertFalse(actual.rollbackOn(new IOException())).     actual = atas.getTransactionAttribute(method, method.getDeclaringClass()).     rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute("java.lang.Exception")).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()).     assertTrue(actual.rollbackOn(new Exception())).     assertFalse(actual.rollbackOn(new IOException())). }
true;public;0;12;/**  * Test that transaction attribute is inherited from class  * if not specified on method.  */ ;/**  * Test that transaction attribute is inherited from class  * if not specified on method.  */ @Test public void defaultsToClassTransactionAttribute() throws Exception {     Method method = TestBean4.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean4.class).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()). }
false;public;0;12;;@Test public void customClassAttributeDetected() throws Exception {     Method method = TestBean5.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean5.class).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()). }
false;public;0;12;;@Test public void customMethodAttributeDetected() throws Exception {     Method method = TestBean6.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean6.class).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()). }
false;public;0;14;;@Test public void customClassAttributeWithReadOnlyOverrideDetected() throws Exception {     Method method = TestBean7.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean7.class).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()).     assertTrue(actual.isReadOnly()). }
false;public;0;14;;@Test public void customMethodAttributeWithReadOnlyOverrideDetected() throws Exception {     Method method = TestBean8.class.getMethod("getAge").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean8.class).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()).     assertTrue(actual.isReadOnly()). }
false;public;0;20;;@Test public void customClassAttributeWithReadOnlyOverrideOnInterface() throws Exception {     Method method = TestInterface9.class.getMethod("getAge").     Transactional annotation = AnnotationUtils.findAnnotation(method, Transactional.class).     assertNull("AnnotationUtils.findAnnotation should not find @Transactional for TestBean9.getAge()", annotation).     annotation = AnnotationUtils.findAnnotation(TestBean9.class, Transactional.class).     assertNotNull("AnnotationUtils.findAnnotation failed to find @Transactional for TestBean9", annotation).     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean9.class).     assertNotNull("Failed to retrieve TransactionAttribute for TestBean9.getAge()", actual).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()).     assertTrue(actual.isReadOnly()). }
false;public;0;21;;@Test public void customMethodAttributeWithReadOnlyOverrideOnInterface() throws Exception {     Method method = TestInterface10.class.getMethod("getAge").     Transactional annotation = AnnotationUtils.findAnnotation(method, Transactional.class).     assertNotNull("AnnotationUtils.findAnnotation failed to find @Transactional for TestBean10.getAge()", annotation).     annotation = AnnotationUtils.findAnnotation(TestBean10.class, Transactional.class).     assertNull("AnnotationUtils.findAnnotation should not find @Transactional for TestBean10", annotation).     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute actual = atas.getTransactionAttribute(method, TestBean10.class).     assertNotNull("Failed to retrieve TransactionAttribute for TestBean10.getAge()", actual).     RuleBasedTransactionAttribute rbta = new RuleBasedTransactionAttribute().     rbta.getRollbackRules().add(new RollbackRuleAttribute(Exception.class)).     rbta.getRollbackRules().add(new NoRollbackRuleAttribute(IOException.class)).     assertEquals(rbta.getRollbackRules(), ((RuleBasedTransactionAttribute) actual).getRollbackRules()).     assertTrue(actual.isReadOnly()). }
false;public;0;11;;@Test public void transactionAttributeDeclaredOnClassMethodWithEjb3() throws Exception {     Method getAgeMethod = ITestBean1.class.getMethod("getAge").     Method getNameMethod = ITestBean1.class.getMethod("getName").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute getAgeAttr = atas.getTransactionAttribute(getAgeMethod, Ejb3AnnotatedBean1.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, getAgeAttr.getPropagationBehavior()).     TransactionAttribute getNameAttr = atas.getTransactionAttribute(getNameMethod, Ejb3AnnotatedBean1.class).     assertEquals(TransactionAttribute.PROPAGATION_SUPPORTS, getNameAttr.getPropagationBehavior()). }
false;public;0;11;;@Test public void transactionAttributeDeclaredOnClassWithEjb3() throws Exception {     Method getAgeMethod = ITestBean1.class.getMethod("getAge").     Method getNameMethod = ITestBean1.class.getMethod("getName").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute getAgeAttr = atas.getTransactionAttribute(getAgeMethod, Ejb3AnnotatedBean2.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, getAgeAttr.getPropagationBehavior()).     TransactionAttribute getNameAttr = atas.getTransactionAttribute(getNameMethod, Ejb3AnnotatedBean2.class).     assertEquals(TransactionAttribute.PROPAGATION_SUPPORTS, getNameAttr.getPropagationBehavior()). }
false;public;0;11;;@Test public void transactionAttributeDeclaredOnInterfaceWithEjb3() throws Exception {     Method getAgeMethod = ITestEjb.class.getMethod("getAge").     Method getNameMethod = ITestEjb.class.getMethod("getName").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute getAgeAttr = atas.getTransactionAttribute(getAgeMethod, Ejb3AnnotatedBean3.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, getAgeAttr.getPropagationBehavior()).     TransactionAttribute getNameAttr = atas.getTransactionAttribute(getNameMethod, Ejb3AnnotatedBean3.class).     assertEquals(TransactionAttribute.PROPAGATION_SUPPORTS, getNameAttr.getPropagationBehavior()). }
false;public;0;11;;@Test public void transactionAttributeDeclaredOnClassMethodWithJta() throws Exception {     Method getAgeMethod = ITestBean1.class.getMethod("getAge").     Method getNameMethod = ITestBean1.class.getMethod("getName").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute getAgeAttr = atas.getTransactionAttribute(getAgeMethod, JtaAnnotatedBean1.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, getAgeAttr.getPropagationBehavior()).     TransactionAttribute getNameAttr = atas.getTransactionAttribute(getNameMethod, JtaAnnotatedBean1.class).     assertEquals(TransactionAttribute.PROPAGATION_SUPPORTS, getNameAttr.getPropagationBehavior()). }
false;public;0;11;;@Test public void transactionAttributeDeclaredOnClassWithJta() throws Exception {     Method getAgeMethod = ITestBean1.class.getMethod("getAge").     Method getNameMethod = ITestBean1.class.getMethod("getName").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute getAgeAttr = atas.getTransactionAttribute(getAgeMethod, JtaAnnotatedBean2.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, getAgeAttr.getPropagationBehavior()).     TransactionAttribute getNameAttr = atas.getTransactionAttribute(getNameMethod, JtaAnnotatedBean2.class).     assertEquals(TransactionAttribute.PROPAGATION_SUPPORTS, getNameAttr.getPropagationBehavior()). }
false;public;0;11;;@Test public void transactionAttributeDeclaredOnInterfaceWithJta() throws Exception {     Method getAgeMethod = ITestEjb.class.getMethod("getAge").     Method getNameMethod = ITestEjb.class.getMethod("getName").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute getAgeAttr = atas.getTransactionAttribute(getAgeMethod, JtaAnnotatedBean3.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, getAgeAttr.getPropagationBehavior()).     TransactionAttribute getNameAttr = atas.getTransactionAttribute(getNameMethod, JtaAnnotatedBean3.class).     assertEquals(TransactionAttribute.PROPAGATION_SUPPORTS, getNameAttr.getPropagationBehavior()). }
false;public;0;13;;@Test public void transactionAttributeDeclaredOnGroovyClass() throws Exception {     Method getAgeMethod = ITestBean1.class.getMethod("getAge").     Method getNameMethod = ITestBean1.class.getMethod("getName").     Method getMetaClassMethod = GroovyObject.class.getMethod("getMetaClass").     AnnotationTransactionAttributeSource atas = new AnnotationTransactionAttributeSource().     TransactionAttribute getAgeAttr = atas.getTransactionAttribute(getAgeMethod, GroovyTestBean.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, getAgeAttr.getPropagationBehavior()).     TransactionAttribute getNameAttr = atas.getTransactionAttribute(getNameMethod, GroovyTestBean.class).     assertEquals(TransactionAttribute.PROPAGATION_REQUIRED, getNameAttr.getPropagationBehavior()).     assertNull(atas.getTransactionAttribute(getMetaClassMethod, GroovyTestBean.class)). }
false;;0;1;;int getAge().
false;;1;1;;void setAge(int age).
false;;0;1;;String getName().
false;;1;1;;void setName(String name).
false;;0;2;;@Transactional int getAge().
false;;1;1;;void setAge(int age).
false;;0;1;;String getName().
false;;1;1;;void setName(String name).
false;;0;1;;int getAge().
false;;1;1;;void setAge(int age).
false;;0;1;;String getName().
false;;1;1;;void setName(String name).
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;5;;@Override @Transactional(rollbackFor = Exception.class) public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;6;;@Override @Transactional(propagation = Propagation.REQUIRES_NEW, isolation = Isolation.REPEATABLE_READ, timeout = 5, readOnly = true, rollbackFor = Exception.class, noRollbackFor = IOException.class) public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;3;;public int getAge() {     return 10. }
false;public;0;4;;@Tx public int getAge() {     return 10. }
false;public;0;3;;public int getAge() {     return 10. }
false;public;0;4;;@TxWithAttribute(readOnly = true) public int getAge() {     return 10. }
false;;0;1;;int getAge().
false;public;0;4;;@Override public int getAge() {     return 10. }
false;;0;2;;@TxWithAttribute(readOnly = true) int getAge().
false;public;0;4;;@Override public int getAge() {     return 10. }
false;public;0;5;;@Override @javax.ejb.TransactionAttribute(TransactionAttributeType.SUPPORTS) public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;5;;@Override @javax.ejb.TransactionAttribute public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;5;;@Override @javax.ejb.TransactionAttribute public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;;0;2;;@javax.ejb.TransactionAttribute int getAge().
false;;1;1;;void setAge(int age).
false;;0;1;;String getName().
false;;1;1;;void setName(String name).
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;5;;@Override @javax.transaction.Transactional(javax.transaction.Transactional.TxType.SUPPORTS) public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;5;;@Override @javax.transaction.Transactional public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;5;;@Override @javax.transaction.Transactional public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;;0;2;;@javax.transaction.Transactional int getAge().
false;;1;1;;void setAge(int age).
false;;0;1;;String getName().
false;;1;1;;void setName(String name).
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;1;4;;@Override public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public int getAge() {     return age. }
false;public;1;4;;@Override public void setAge(int age) {     this.age = age. }
false;public;2;4;;@Override public Object invokeMethod(String name, Object args) {     return null. }
false;public;1;4;;@Override public Object getProperty(String propertyName) {     return null. }
false;public;2;3;;@Override public void setProperty(String propertyName, Object newValue) { }
false;public;0;4;;@Override public MetaClass getMetaClass() {     return null. }
false;public;1;3;;@Override public void setMetaClass(MetaClass metaClass) { }
