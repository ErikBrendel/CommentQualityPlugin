commented;modifiers;parameterAmount;loc;comment;code
false;public;0;46;;@Test public void withEmptyCollection() {     Collection<String> col = new HashSet<>().     assertNull(DataAccessUtils.uniqueResult(col)).     try {         DataAccessUtils.requiredUniqueResult(col).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(0, ex.getActualSize()).     }     try {         DataAccessUtils.objectResult(col, String.class).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(0, ex.getActualSize()).     }     try {         DataAccessUtils.intResult(col).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(0, ex.getActualSize()).     }     try {         DataAccessUtils.longResult(col).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(0, ex.getActualSize()).     } }
false;public;0;56;;@Test public void withTooLargeCollection() {     Collection<String> col = new HashSet<>(2).     col.add("test1").     col.add("test2").     try {         DataAccessUtils.uniqueResult(col).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(2, ex.getActualSize()).     }     try {         DataAccessUtils.requiredUniqueResult(col).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(2, ex.getActualSize()).     }     try {         DataAccessUtils.objectResult(col, String.class).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(2, ex.getActualSize()).     }     try {         DataAccessUtils.intResult(col).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(2, ex.getActualSize()).     }     try {         DataAccessUtils.longResult(col).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(2, ex.getActualSize()).     } }
false;public;0;12;;@Test public void withInteger() {     Collection<Integer> col = new HashSet<>(1).     col.add(5).     assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col)).     assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col)).     assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class)).     assertEquals("5", DataAccessUtils.objectResult(col, String.class)).     assertEquals(5, DataAccessUtils.intResult(col)).     assertEquals(5, DataAccessUtils.longResult(col)). }
false;public;0;14;;@Test public void withSameIntegerInstanceTwice() {     Integer i = 5.     Collection<Integer> col = new ArrayList<>(1).     col.add(i).     col.add(i).     assertEquals(Integer.valueOf(5), DataAccessUtils.uniqueResult(col)).     assertEquals(Integer.valueOf(5), DataAccessUtils.requiredUniqueResult(col)).     assertEquals(Integer.valueOf(5), DataAccessUtils.objectResult(col, Integer.class)).     assertEquals("5", DataAccessUtils.objectResult(col, String.class)).     assertEquals(5, DataAccessUtils.intResult(col)).     assertEquals(5, DataAccessUtils.longResult(col)). }
false;public;0;17;;@Test // on JDK 9 @SuppressWarnings("deprecation") public void withEquivalentIntegerInstanceTwice() {     Collection<Integer> col = new ArrayList<>(2).     col.add(new Integer(5)).     col.add(new Integer(5)).     try {         DataAccessUtils.uniqueResult(col).         fail("Should have thrown IncorrectResultSizeDataAccessException").     } catch (IncorrectResultSizeDataAccessException ex) {         // expected         assertEquals(1, ex.getExpectedSize()).         assertEquals(2, ex.getActualSize()).     } }
false;public;0;12;;@Test public void withLong() {     Collection<Long> col = new HashSet<>(1).     col.add(5L).     assertEquals(Long.valueOf(5L), DataAccessUtils.uniqueResult(col)).     assertEquals(Long.valueOf(5L), DataAccessUtils.requiredUniqueResult(col)).     assertEquals(Long.valueOf(5L), DataAccessUtils.objectResult(col, Long.class)).     assertEquals("5", DataAccessUtils.objectResult(col, String.class)).     assertEquals(5, DataAccessUtils.intResult(col)).     assertEquals(5, DataAccessUtils.longResult(col)). }
false;public;0;25;;@Test public void withString() {     Collection<String> col = new HashSet<>(1).     col.add("test1").     assertEquals("test1", DataAccessUtils.uniqueResult(col)).     assertEquals("test1", DataAccessUtils.requiredUniqueResult(col)).     assertEquals("test1", DataAccessUtils.objectResult(col, String.class)).     try {         DataAccessUtils.intResult(col).         fail("Should have thrown TypeMismatchDataAccessException").     } catch (TypeMismatchDataAccessException ex) {     // expected     }     try {         DataAccessUtils.longResult(col).         fail("Should have thrown TypeMismatchDataAccessException").     } catch (TypeMismatchDataAccessException ex) {     // expected     } }
false;public;0;27;;@Test public void withDate() {     Date date = new Date().     Collection<Date> col = new HashSet<>(1).     col.add(date).     assertEquals(date, DataAccessUtils.uniqueResult(col)).     assertEquals(date, DataAccessUtils.requiredUniqueResult(col)).     assertEquals(date, DataAccessUtils.objectResult(col, Date.class)).     assertEquals(date.toString(), DataAccessUtils.objectResult(col, String.class)).     try {         DataAccessUtils.intResult(col).         fail("Should have thrown TypeMismatchDataAccessException").     } catch (TypeMismatchDataAccessException ex) {     // expected     }     try {         DataAccessUtils.longResult(col).         fail("Should have thrown TypeMismatchDataAccessException").     } catch (TypeMismatchDataAccessException ex) {     // expected     } }
false;public;0;6;;@Test public void exceptionTranslationWithNoTranslation() {     MapPersistenceExceptionTranslator mpet = new MapPersistenceExceptionTranslator().     RuntimeException in = new RuntimeException().     assertSame(in, DataAccessUtils.translateIfNecessary(in, mpet)). }
false;public;0;8;;@Test public void exceptionTranslationWithTranslation() {     MapPersistenceExceptionTranslator mpet = new MapPersistenceExceptionTranslator().     RuntimeException in = new RuntimeException("in").     InvalidDataAccessApiUsageException out = new InvalidDataAccessApiUsageException("out").     mpet.addTranslation(in, out).     assertSame(out, DataAccessUtils.translateIfNecessary(in, mpet)). }
false;public;2;3;;public void addTranslation(RuntimeException in, RuntimeException out) {     this.translations.put(in, out). }
false;public;1;4;;@Override public DataAccessException translateExceptionIfPossible(RuntimeException ex) {     return (DataAccessException) translations.get(ex). }
