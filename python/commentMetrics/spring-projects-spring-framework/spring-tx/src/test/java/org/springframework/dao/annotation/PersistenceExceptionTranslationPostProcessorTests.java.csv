commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test @SuppressWarnings("resource") public void proxiesCorrectly() {     GenericApplicationContext gac = new GenericApplicationContext().     gac.registerBeanDefinition("translator", new RootBeanDefinition(PersistenceExceptionTranslationPostProcessor.class)).     gac.registerBeanDefinition("notProxied", new RootBeanDefinition(RepositoryInterfaceImpl.class)).     gac.registerBeanDefinition("proxied", new RootBeanDefinition(StereotypedRepositoryInterfaceImpl.class)).     gac.registerBeanDefinition("classProxied", new RootBeanDefinition(RepositoryWithoutInterface.class)).     gac.registerBeanDefinition("classProxiedAndAdvised", new RootBeanDefinition(RepositoryWithoutInterfaceAndOtherwiseAdvised.class)).     gac.registerBeanDefinition("myTranslator", new RootBeanDefinition(MyPersistenceExceptionTranslator.class)).     gac.registerBeanDefinition("proxyCreator", BeanDefinitionBuilder.rootBeanDefinition(AnnotationAwareAspectJAutoProxyCreator.class).addPropertyValue("order", 50).getBeanDefinition()).     gac.registerBeanDefinition("logger", new RootBeanDefinition(LogAllAspect.class)).     gac.refresh().     RepositoryInterface shouldNotBeProxied = (RepositoryInterface) gac.getBean("notProxied").     assertFalse(AopUtils.isAopProxy(shouldNotBeProxied)).     RepositoryInterface shouldBeProxied = (RepositoryInterface) gac.getBean("proxied").     assertTrue(AopUtils.isAopProxy(shouldBeProxied)).     RepositoryWithoutInterface rwi = (RepositoryWithoutInterface) gac.getBean("classProxied").     assertTrue(AopUtils.isAopProxy(rwi)).     checkWillTranslateExceptions(rwi).     Additional rwi2 = (Additional) gac.getBean("classProxiedAndAdvised").     assertTrue(AopUtils.isAopProxy(rwi2)).     rwi2.additionalMethod(false).     checkWillTranslateExceptions(rwi2).     try {         rwi2.additionalMethod(true).         fail("Should have thrown DataAccessResourceFailureException").     } catch (DataAccessResourceFailureException ex) {         assertEquals("my failure", ex.getMessage()).     } }
false;protected;1;10;;protected void checkWillTranslateExceptions(Object o) {     assertTrue(o instanceof Advised).     Advised a = (Advised) o.     for (Advisor advisor : a.getAdvisors()) {         if (advisor instanceof PersistenceExceptionTranslationAdvisor) {             return.         }     }     fail("No translation"). }
false;public;0;2;;public void nameDoesntMatter() { }
false;;1;1;;void additionalMethod(boolean fail).
false;public;1;6;;@Override public void additionalMethod(boolean fail) {     if (fail) {         throw new PersistenceException("my failure").     } }
false;public;1;7;;@Override public DataAccessException translateExceptionIfPossible(RuntimeException ex) {     if (ex instanceof PersistenceException) {         return new DataAccessResourceFailureException(ex.getMessage()).     }     return null. }
false;public;1;4;;@Before("execution(void *.additionalMethod(*))") public void log(JoinPoint jp) {     System.out.println("Before " + jp.getSignature().getName()). }
