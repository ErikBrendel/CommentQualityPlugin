commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void transactionProxyIsCreated() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EnableTxConfig.class, TxManagerConfig.class).     TransactionalTestBean bean = ctx.getBean(TransactionalTestBean.class).     assertTrue("testBean is not a proxy", AopUtils.isAopProxy(bean)).     Map<?, ?> services = ctx.getBeansWithAnnotation(Service.class).     assertTrue("Stereotype annotation not visible", services.containsKey("testBean")).     ctx.close(). }
false;public;0;10;;@Test public void transactionProxyIsCreatedWithEnableOnSuperclass() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(InheritedEnableTxConfig.class, TxManagerConfig.class).     TransactionalTestBean bean = ctx.getBean(TransactionalTestBean.class).     assertTrue("testBean is not a proxy", AopUtils.isAopProxy(bean)).     Map<?, ?> services = ctx.getBeansWithAnnotation(Service.class).     assertTrue("Stereotype annotation not visible", services.containsKey("testBean")).     ctx.close(). }
false;public;0;10;;@Test public void transactionProxyIsCreatedWithEnableOnExcludedSuperclass() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ParentEnableTxConfig.class, ChildEnableTxConfig.class, TxManagerConfig.class).     TransactionalTestBean bean = ctx.getBean(TransactionalTestBean.class).     assertTrue("testBean is not a proxy", AopUtils.isAopProxy(bean)).     Map<?, ?> services = ctx.getBeansWithAnnotation(Service.class).     assertTrue("Stereotype annotation not visible", services.containsKey("testBean")).     ctx.close(). }
false;public;0;10;;@Test public void txManagerIsResolvedOnInvocationOfTransactionalMethod() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EnableTxConfig.class, TxManagerConfig.class).     TransactionalTestBean bean = ctx.getBean(TransactionalTestBean.class).     // invoke a transactional method, causing the PlatformTransactionManager bean to be resolved.     bean.findAllFoos().     ctx.close(). }
false;public;0;10;;@Test public void txManagerIsResolvedCorrectlyWhenMultipleManagersArePresent() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EnableTxConfig.class, MultiTxManagerConfig.class).     TransactionalTestBean bean = ctx.getBean(TransactionalTestBean.class).     // invoke a transactional method, causing the PlatformTransactionManager bean to be resolved.     bean.findAllFoos().     ctx.close(). }
true;public;0;12;/**  * A cheap test just to prove that in ASPECTJ mode, the AnnotationTransactionAspect does indeed  * get loaded -- or in this case, attempted to be loaded at which point the test fails.  */ ;/**  * A cheap test just to prove that in ASPECTJ mode, the AnnotationTransactionAspect does indeed  * get loaded -- or in this case, attempted to be loaded at which point the test fails.  */ @Test @SuppressWarnings("resource") public void proxyTypeAspectJCausesRegistrationOfAnnotationTransactionAspect() {     try {         new AnnotationConfigApplicationContext(EnableAspectjTxConfig.class, TxManagerConfig.class).         fail("should have thrown CNFE when trying to load AnnotationTransactionAspect. " + "Do you actually have org.springframework.aspects on the classpath?").     } catch (Exception ex) {         assertThat(ex.getMessage(), containsString("AspectJJtaTransactionManagementConfiguration")).     } }
false;public;0;7;;@Test public void transactionalEventListenerRegisteredProperly() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(EnableTxConfig.class).     assertTrue(ctx.containsBean(TransactionManagementConfigUtils.TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME)).     assertEquals(1, ctx.getBeansOfType(TransactionalEventListenerFactory.class).size()).     ctx.close(). }
false;public;0;18;;@Test public void spr11915TransactionManagerAsManualSingleton() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(Spr11915Config.class).     TransactionalTestBean bean = ctx.getBean(TransactionalTestBean.class).     CallCountingTransactionManager txManager = ctx.getBean("qualifiedTransactionManager", CallCountingTransactionManager.class).     bean.saveQualifiedFoo().     assertThat(txManager.begun, equalTo(1)).     assertThat(txManager.commits, equalTo(1)).     assertThat(txManager.rollbacks, equalTo(0)).     bean.saveQualifiedFooWithAttributeAlias().     assertThat(txManager.begun, equalTo(2)).     assertThat(txManager.commits, equalTo(2)).     assertThat(txManager.rollbacks, equalTo(0)).     ctx.close(). }
false;public;0;14;;@Test public void spr14322FindsOnInterfaceWithInterfaceProxy() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(Spr14322ConfigA.class).     TransactionalTestInterface bean = ctx.getBean(TransactionalTestInterface.class).     CallCountingTransactionManager txManager = ctx.getBean(CallCountingTransactionManager.class).     bean.saveFoo().     bean.saveBar().     assertThat(txManager.begun, equalTo(2)).     assertThat(txManager.commits, equalTo(2)).     assertThat(txManager.rollbacks, equalTo(0)).     ctx.close(). }
false;public;0;14;;@Test public void spr14322FindsOnInterfaceWithCglibProxy() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(Spr14322ConfigB.class).     TransactionalTestInterface bean = ctx.getBean(TransactionalTestInterface.class).     CallCountingTransactionManager txManager = ctx.getBean(CallCountingTransactionManager.class).     bean.saveFoo().     bean.saveBar().     assertThat(txManager.begun, equalTo(2)).     assertThat(txManager.commits, equalTo(2)).     assertThat(txManager.rollbacks, equalTo(0)).     ctx.close(). }
false;public;0;4;;@Transactional(readOnly = true) public Collection<?> findAllFoos() {     return null. }
false;public;0;3;;@Transactional("qualifiedTransactionManager") public void saveQualifiedFoo() { }
false;public;0;3;;@Transactional(transactionManager = "qualifiedTransactionManager") public void saveQualifiedFooWithAttributeAlias() { }
false;;0;4;;@Bean Object someBean() {     return new Object(). }
false;;0;4;;@Override Object someBean() {     return "X". }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return false. }
false;public;0;4;;@Override public ConfigurationPhase getConfigurationPhase() {     return ConfigurationPhase.REGISTER_BEAN. }
false;public;0;4;;@Bean public TransactionalTestBean testBean() {     return new TransactionalTestBean(). }
false;public;0;4;;@Bean public PlatformTransactionManager txManager() {     return new CallCountingTransactionManager(). }
false;public;0;4;;@Bean public PlatformTransactionManager txManager2() {     return new CallCountingTransactionManager(). }
false;public;0;4;;@Override public PlatformTransactionManager annotationDrivenTransactionManager() {     return txManager2(). }
false;public;1;5;;@Autowired public void initializeApp(ConfigurableApplicationContext applicationContext) {     applicationContext.getBeanFactory().registerSingleton("qualifiedTransactionManager", new CallCountingTransactionManager()). }
false;public;0;4;;@Bean public TransactionalTestBean testBean() {     return new TransactionalTestBean(). }
false;default;0;3;;@Transactional default void saveBar() { }
false;;0;2;;@Transactional void saveFoo().
false;public;0;3;;@Override public void saveFoo() { }
false;public;0;4;;@Bean public TransactionalTestInterface testBean() {     return new TransactionalTestService(). }
false;public;0;4;;@Bean public PlatformTransactionManager txManager() {     return new CallCountingTransactionManager(). }
false;public;0;4;;@Bean public TransactionalTestInterface testBean() {     return new TransactionalTestService(). }
false;public;0;4;;@Bean public PlatformTransactionManager txManager() {     return new CallCountingTransactionManager(). }
