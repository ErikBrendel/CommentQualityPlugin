commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public String doInTransaction(TransactionStatus status) {     return "result". }
false;public;0;21;;@Test public void uowManagerFoundInJndi() {     MockUOWManager manager = new MockUOWManager().     ExpectedLookupTemplate jndiTemplate = new ExpectedLookupTemplate(WebSphereUowTransactionManager.DEFAULT_UOW_MANAGER_NAME, manager).     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager().     ptm.setJndiTemplate(jndiTemplate).     ptm.afterPropertiesSet().     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             return "result".         }     })).     assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     assertFalse(manager.getJoined()).     assertFalse(manager.getRollbackOnly()). }
false;public;1;4;;@Override public String doInTransaction(TransactionStatus status) {     return "result". }
false;public;0;29;;@Test public void uowManagerAndUserTransactionFoundInJndi() throws Exception {     UserTransaction ut = mock(UserTransaction.class).     given(ut.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION, Status.STATUS_ACTIVE, Status.STATUS_ACTIVE).     MockUOWManager manager = new MockUOWManager().     ExpectedLookupTemplate jndiTemplate = new ExpectedLookupTemplate().     jndiTemplate.addObject(WebSphereUowTransactionManager.DEFAULT_USER_TRANSACTION_NAME, ut).     jndiTemplate.addObject(WebSphereUowTransactionManager.DEFAULT_UOW_MANAGER_NAME, manager).     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager().     ptm.setJndiTemplate(jndiTemplate).     ptm.afterPropertiesSet().     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     TransactionStatus ts = ptm.getTransaction(definition).     ptm.commit(ts).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             return "result".         }     })).     assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     assertFalse(manager.getJoined()).     assertFalse(manager.getRollbackOnly()).     verify(ut).begin().     verify(ut).commit(). }
false;public;1;4;;@Override public String doInTransaction(TransactionStatus status) {     return "result". }
false;public;0;20;;@Test public void propagationMandatoryFailsInCaseOfNoExistingTransaction() {     MockUOWManager manager = new MockUOWManager().     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     definition.setPropagationBehavior(TransactionDefinition.PROPAGATION_MANDATORY).     try {         ptm.execute(definition, new TransactionCallback<String>() {              @Override             public String doInTransaction(TransactionStatus status) {                 return "result".             }         }).         fail("Should have thrown IllegalTransactionStateException").     } catch (IllegalTransactionStateException ex) {     // expected     } }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationSupports() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_SUPPORTS, WebSphereUowTransactionManager.SYNCHRONIZATION_ALWAYS). }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationNotSupported() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_NOT_SUPPORTED, WebSphereUowTransactionManager.SYNCHRONIZATION_ALWAYS). }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationNever() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_NEVER, WebSphereUowTransactionManager.SYNCHRONIZATION_ALWAYS). }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationSupportsAndSynchOnActual() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_SUPPORTS, WebSphereUowTransactionManager.SYNCHRONIZATION_ON_ACTUAL_TRANSACTION). }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationNotSupportedAndSynchOnActual() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_NOT_SUPPORTED, WebSphereUowTransactionManager.SYNCHRONIZATION_ON_ACTUAL_TRANSACTION). }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationNeverAndSynchOnActual() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_NEVER, WebSphereUowTransactionManager.SYNCHRONIZATION_ON_ACTUAL_TRANSACTION). }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationSupportsAndSynchNever() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_SUPPORTS, WebSphereUowTransactionManager.SYNCHRONIZATION_NEVER). }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationNotSupportedAndSynchNever() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_NOT_SUPPORTED, WebSphereUowTransactionManager.SYNCHRONIZATION_NEVER). }
false;public;0;5;;@Test public void newTransactionSynchronizationUsingPropagationNeverAndSynchNever() {     doTestNewTransactionSynchronization(TransactionDefinition.PROPAGATION_NEVER, WebSphereUowTransactionManager.SYNCHRONIZATION_NEVER). }
false;public;1;14;;@Override public String doInTransaction(TransactionStatus status) {     if (synchMode == WebSphereUowTransactionManager.SYNCHRONIZATION_ALWAYS) {         assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).         assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).         assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     } else {         assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).         assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).         assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     }     return "result". }
false;private;2;38;;private void doTestNewTransactionSynchronization(int propagationBehavior, final int synchMode) {     MockUOWManager manager = new MockUOWManager().     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     ptm.setTransactionSynchronization(synchMode).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     definition.setPropagationBehavior(propagationBehavior).     definition.setReadOnly(true).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             if (synchMode == WebSphereUowTransactionManager.SYNCHRONIZATION_ALWAYS) {                 assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).                 assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).                 assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             } else {                 assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).                 assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).                 assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             }             return "result".         }     })).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()).     assertEquals(UOWManager.UOW_TYPE_LOCAL_TRANSACTION, manager.getUOWType()).     assertFalse(manager.getJoined()).     assertFalse(manager.getRollbackOnly()). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationRequired() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_REQUIRED, WebSphereUowTransactionManager.SYNCHRONIZATION_ALWAYS). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationRequiresNew() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_REQUIRES_NEW, WebSphereUowTransactionManager.SYNCHRONIZATION_ALWAYS). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationNested() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_NESTED, WebSphereUowTransactionManager.SYNCHRONIZATION_ALWAYS). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationRequiredAndSynchOnActual() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_REQUIRED, WebSphereUowTransactionManager.SYNCHRONIZATION_ON_ACTUAL_TRANSACTION). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationRequiresNewAndSynchOnActual() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_REQUIRES_NEW, WebSphereUowTransactionManager.SYNCHRONIZATION_ON_ACTUAL_TRANSACTION). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationNestedAndSynchOnActual() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_NESTED, WebSphereUowTransactionManager.SYNCHRONIZATION_ON_ACTUAL_TRANSACTION). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationRequiredAndSynchNever() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_REQUIRED, WebSphereUowTransactionManager.SYNCHRONIZATION_NEVER). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationRequiresNewAndSynchNever() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_REQUIRES_NEW, WebSphereUowTransactionManager.SYNCHRONIZATION_NEVER). }
false;public;0;5;;@Test public void newTransactionWithCommitUsingPropagationNestedAndSynchNever() {     doTestNewTransactionWithCommit(TransactionDefinition.PROPAGATION_NESTED, WebSphereUowTransactionManager.SYNCHRONIZATION_NEVER). }
false;public;1;14;;@Override public String doInTransaction(TransactionStatus status) {     if (synchMode != WebSphereUowTransactionManager.SYNCHRONIZATION_NEVER) {         assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).         assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).         assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     } else {         assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).         assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).         assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     }     return "result". }
false;private;2;38;;private void doTestNewTransactionWithCommit(int propagationBehavior, final int synchMode) {     MockUOWManager manager = new MockUOWManager().     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     ptm.setTransactionSynchronization(synchMode).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     definition.setPropagationBehavior(propagationBehavior).     definition.setReadOnly(true).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             if (synchMode != WebSphereUowTransactionManager.SYNCHRONIZATION_NEVER) {                 assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).                 assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).                 assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             } else {                 assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).                 assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).                 assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             }             return "result".         }     })).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()).     assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     assertFalse(manager.getJoined()).     assertFalse(manager.getRollbackOnly()). }
false;public;1;7;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return "result". }
false;public;0;31;;@Test public void newTransactionWithCommitAndTimeout() {     MockUOWManager manager = new MockUOWManager().     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     definition.setTimeout(10).     definition.setReadOnly(true).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).             assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             return "result".         }     })).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(10, manager.getUOWTimeout()).     assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     assertFalse(manager.getJoined()).     assertFalse(manager.getRollbackOnly()). }
false;public;3;4;;@Override public void runUnderUOW(int type, boolean join, UOWAction action) throws UOWException {     throw new UOWException(rex). }
false;public;1;7;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return "result". }
false;public;0;41;;@Test public void newTransactionWithCommitException() {     final RollbackException rex = new RollbackException().     MockUOWManager manager = new MockUOWManager() {          @Override         public void runUnderUOW(int type, boolean join, UOWAction action) throws UOWException {             throw new UOWException(rex).         }     }.     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     try {         ptm.execute(definition, new TransactionCallback<String>() {              @Override             public String doInTransaction(TransactionStatus status) {                 assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).                 assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).                 assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).                 return "result".             }         }).         fail("Should have thrown TransactionSystemException").     } catch (TransactionSystemException ex) {         // expected         assertTrue(ex.getCause() instanceof UOWException).         assertSame(rex, ex.getRootCause()).         assertSame(rex, ex.getMostSpecificCause()).     }     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()). }
false;public;1;7;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     throw new OptimisticLockingFailureException(""). }
false;public;0;35;;@Test public void newTransactionWithRollback() {     MockUOWManager manager = new MockUOWManager().     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     try {         ptm.execute(definition, new TransactionCallback<String>() {              @Override             public String doInTransaction(TransactionStatus status) {                 assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).                 assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).                 assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).                 throw new OptimisticLockingFailureException("").             }         }).         fail("Should have thrown OptimisticLockingFailureException").     } catch (OptimisticLockingFailureException ex) {     // expected     }     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()).     assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     assertFalse(manager.getJoined()).     assertTrue(manager.getRollbackOnly()). }
false;public;1;8;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     status.setRollbackOnly().     return "result". }
false;public;0;30;;@Test public void newTransactionWithRollbackOnly() {     MockUOWManager manager = new MockUOWManager().     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).             assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             status.setRollbackOnly().             return "result".         }     })).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()).     assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     assertFalse(manager.getJoined()).     assertTrue(manager.getRollbackOnly()). }
false;public;1;7;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return "result". }
false;public;0;30;;@Test public void existingNonSpringTransaction() {     MockUOWManager manager = new MockUOWManager().     manager.setUOWStatus(UOWManager.UOW_STATUS_ACTIVE).     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).             assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             return "result".         }     })).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()).     assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     assertTrue(manager.getJoined()).     assertFalse(manager.getRollbackOnly()). }
false;public;1;4;;@Override public String doInTransaction(TransactionStatus status) {     return "result". }
false;public;0;21;;@Test public void propagationNeverFailsInCaseOfExistingTransaction() {     MockUOWManager manager = new MockUOWManager().     manager.setUOWStatus(UOWManager.UOW_STATUS_ACTIVE).     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     definition.setPropagationBehavior(TransactionDefinition.PROPAGATION_NEVER).     try {         ptm.execute(definition, new TransactionCallback<String>() {              @Override             public String doInTransaction(TransactionStatus status) {                 return "result".             }         }).         fail("Should have thrown IllegalTransactionStateException").     } catch (IllegalTransactionStateException ex) {     // expected     } }
false;public;1;4;;@Override public String doInTransaction(TransactionStatus status) {     return "result". }
false;public;0;21;;@Test public void propagationNestedFailsInCaseOfExistingTransaction() {     MockUOWManager manager = new MockUOWManager().     manager.setUOWStatus(UOWManager.UOW_STATUS_ACTIVE).     WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     definition.setPropagationBehavior(TransactionDefinition.PROPAGATION_NESTED).     try {         ptm.execute(definition, new TransactionCallback<String>() {              @Override             public String doInTransaction(TransactionStatus status) {                 return "result".             }         }).         fail("Should have thrown NestedTransactionNotSupportedException").     } catch (NestedTransactionNotSupportedException ex) {     // expected     } }
false;public;0;4;;@Test public void existingTransactionWithParticipationUsingPropagationRequired() {     doTestExistingTransactionWithParticipation(TransactionDefinition.PROPAGATION_REQUIRED). }
false;public;0;4;;@Test public void existingTransactionWithParticipationUsingPropagationSupports() {     doTestExistingTransactionWithParticipation(TransactionDefinition.PROPAGATION_SUPPORTS). }
false;public;0;4;;@Test public void existingTransactionWithParticipationUsingPropagationMandatory() {     doTestExistingTransactionWithParticipation(TransactionDefinition.PROPAGATION_MANDATORY). }
false;public;1;7;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return "result2". }
false;public;1;16;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result2", ptm.execute(definition2, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).             assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             return "result2".         }     })).     return "result". }
false;private;1;40;;private void doTestExistingTransactionWithParticipation(int propagationBehavior) {     MockUOWManager manager = new MockUOWManager().     final WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     final DefaultTransactionDefinition definition2 = new DefaultTransactionDefinition().     definition2.setPropagationBehavior(propagationBehavior).     definition2.setReadOnly(true).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).             assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             assertEquals("result2", ptm.execute(definition2, new TransactionCallback<String>() {                  @Override                 public String doInTransaction(TransactionStatus status) {                     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).                     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).                     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).                     return "result2".                 }             })).             return "result".         }     })).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()).     assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     assertTrue(manager.getJoined()).     assertFalse(manager.getRollbackOnly()). }
false;public;0;4;;@Test public void existingTransactionWithSuspensionUsingPropagationRequiresNew() {     doTestExistingTransactionWithSuspension(TransactionDefinition.PROPAGATION_REQUIRES_NEW). }
false;public;0;4;;@Test public void existingTransactionWithSuspensionUsingPropagationNotSupported() {     doTestExistingTransactionWithSuspension(TransactionDefinition.PROPAGATION_NOT_SUPPORTED). }
false;public;1;8;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertEquals(propagationBehavior == TransactionDefinition.PROPAGATION_REQUIRES_NEW, TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return "result2". }
false;public;1;17;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result2", ptm.execute(definition2, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertEquals(propagationBehavior == TransactionDefinition.PROPAGATION_REQUIRES_NEW, TransactionSynchronizationManager.isActualTransactionActive()).             assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             return "result2".         }     })).     return "result". }
false;private;1;46;;private void doTestExistingTransactionWithSuspension(final int propagationBehavior) {     MockUOWManager manager = new MockUOWManager().     final WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     final DefaultTransactionDefinition definition2 = new DefaultTransactionDefinition().     definition2.setPropagationBehavior(propagationBehavior).     definition2.setReadOnly(true).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).             assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             assertEquals("result2", ptm.execute(definition2, new TransactionCallback<String>() {                  @Override                 public String doInTransaction(TransactionStatus status) {                     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).                     assertEquals(propagationBehavior == TransactionDefinition.PROPAGATION_REQUIRES_NEW, TransactionSynchronizationManager.isActualTransactionActive()).                     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).                     return "result2".                 }             })).             return "result".         }     })).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()).     if (propagationBehavior == TransactionDefinition.PROPAGATION_REQUIRES_NEW) {         assertEquals(UOWManager.UOW_TYPE_GLOBAL_TRANSACTION, manager.getUOWType()).     } else {         assertEquals(UOWManager.UOW_TYPE_LOCAL_TRANSACTION, manager.getUOWType()).     }     assertFalse(manager.getJoined()).     assertFalse(manager.getRollbackOnly()). }
false;public;1;7;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     return "result2". }
false;public;1;16;;@Override public String doInTransaction(TransactionStatus status) {     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).     assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result2", ptm.execute(definition2, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).             assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             return "result2".         }     })).     return "result". }
false;public;0;41;;@Test public void existingTransactionUsingPropagationNotSupported() {     MockUOWManager manager = new MockUOWManager().     final WebSphereUowTransactionManager ptm = new WebSphereUowTransactionManager(manager).     DefaultTransactionDefinition definition = new DefaultTransactionDefinition().     final DefaultTransactionDefinition definition2 = new DefaultTransactionDefinition().     definition2.setPropagationBehavior(TransactionDefinition.PROPAGATION_NOT_SUPPORTED).     definition2.setReadOnly(true).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals("result", ptm.execute(definition, new TransactionCallback<String>() {          @Override         public String doInTransaction(TransactionStatus status) {             assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).             assertTrue(TransactionSynchronizationManager.isActualTransactionActive()).             assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).             assertEquals("result2", ptm.execute(definition2, new TransactionCallback<String>() {                  @Override                 public String doInTransaction(TransactionStatus status) {                     assertTrue(TransactionSynchronizationManager.isSynchronizationActive()).                     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).                     assertTrue(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).                     return "result2".                 }             })).             return "result".         }     })).     assertFalse(TransactionSynchronizationManager.isSynchronizationActive()).     assertFalse(TransactionSynchronizationManager.isActualTransactionActive()).     assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly()).     assertEquals(0, manager.getUOWTimeout()).     assertEquals(UOWManager.UOW_TYPE_LOCAL_TRANSACTION, manager.getUOWType()).     assertFalse(manager.getJoined()).     assertFalse(manager.getRollbackOnly()). }
