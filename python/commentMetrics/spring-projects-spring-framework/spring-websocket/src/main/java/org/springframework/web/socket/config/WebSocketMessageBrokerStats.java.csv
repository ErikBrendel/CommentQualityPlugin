commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void setSubProtocolWebSocketHandler(SubProtocolWebSocketHandler webSocketHandler) {     this.webSocketHandler = webSocketHandler.     this.stompSubProtocolHandler = initStompSubProtocolHandler(). }
false;private;0;16;;@Nullable private StompSubProtocolHandler initStompSubProtocolHandler() {     if (this.webSocketHandler == null) {         return null.     }     for (SubProtocolHandler handler : this.webSocketHandler.getProtocolHandlers()) {         if (handler instanceof StompSubProtocolHandler) {             return (StompSubProtocolHandler) handler.         }     }     SubProtocolHandler defaultHandler = this.webSocketHandler.getDefaultProtocolHandler().     if (defaultHandler != null && defaultHandler instanceof StompSubProtocolHandler) {         return (StompSubProtocolHandler) defaultHandler.     }     return null. }
false;public;1;3;;public void setStompBrokerRelay(StompBrokerRelayMessageHandler stompBrokerRelay) {     this.stompBrokerRelay = stompBrokerRelay. }
false;public;1;3;;public void setInboundChannelExecutor(ThreadPoolTaskExecutor inboundChannelExecutor) {     this.inboundChannelExecutor = inboundChannelExecutor.getThreadPoolExecutor(). }
false;public;1;3;;public void setOutboundChannelExecutor(ThreadPoolTaskExecutor outboundChannelExecutor) {     this.outboundChannelExecutor = outboundChannelExecutor.getThreadPoolExecutor(). }
false;public;1;4;;public void setSockJsTaskScheduler(ThreadPoolTaskScheduler sockJsTaskScheduler) {     this.sockJsTaskScheduler = sockJsTaskScheduler.getScheduledThreadPoolExecutor().     this.loggingTask = initLoggingTask(TimeUnit.MINUTES.toMillis(1)). }
false;private;1;9;;@Nullable private ScheduledFuture<?> initLoggingTask(long initialDelay) {     if (this.sockJsTaskScheduler != null && this.loggingPeriod > 0 && logger.isInfoEnabled()) {         return this.sockJsTaskScheduler.scheduleAtFixedRate(() -> logger.info(WebSocketMessageBrokerStats.this.toString()), initialDelay, this.loggingPeriod, TimeUnit.MILLISECONDS).     }     return null. }
true;public;1;7;/**  * Set the frequency for logging information at INFO level in milliseconds.  * If set 0 or less than 0, the logging task is cancelled.  * <p>By default this property is set to 30 minutes (30 * 60 * 1000).  */ ;/**  * Set the frequency for logging information at INFO level in milliseconds.  * If set 0 or less than 0, the logging task is cancelled.  * <p>By default this property is set to 30 minutes (30 * 60 * 1000).  */ public void setLoggingPeriod(long period) {     if (this.loggingTask != null) {         this.loggingTask.cancel(true).     }     this.loggingPeriod = period.     this.loggingTask = initLoggingTask(0). }
true;public;0;3;/**  * Return the configured logging period frequency in milliseconds.  */ ;/**  * Return the configured logging period frequency in milliseconds.  */ public long getLoggingPeriod() {     return this.loggingPeriod. }
true;public;0;3;/**  * Get stats about WebSocket sessions.  */ ;/**  * Get stats about WebSocket sessions.  */ public String getWebSocketSessionStatsInfo() {     return (this.webSocketHandler != null ? this.webSocketHandler.getStatsInfo() : "null"). }
true;public;0;3;/**  * Get stats about STOMP-related WebSocket message processing.  */ ;/**  * Get stats about STOMP-related WebSocket message processing.  */ public String getStompSubProtocolStatsInfo() {     return (this.stompSubProtocolHandler != null ? this.stompSubProtocolHandler.getStatsInfo() : "null"). }
true;public;0;3;/**  * Get stats about STOMP broker relay (when using a full-featured STOMP broker).  */ ;/**  * Get stats about STOMP broker relay (when using a full-featured STOMP broker).  */ public String getStompBrokerRelayStatsInfo() {     return (this.stompBrokerRelay != null ? this.stompBrokerRelay.getStatsInfo() : "null"). }
true;public;0;3;/**  * Get stats about the executor processing incoming messages from WebSocket clients.  */ ;/**  * Get stats about the executor processing incoming messages from WebSocket clients.  */ public String getClientInboundExecutorStatsInfo() {     return (this.inboundChannelExecutor != null ? getExecutorStatsInfo(this.inboundChannelExecutor) : "null"). }
true;public;0;3;/**  * Get stats about the executor processing outgoing messages to WebSocket clients.  */ ;/**  * Get stats about the executor processing outgoing messages to WebSocket clients.  */ public String getClientOutboundExecutorStatsInfo() {     return (this.outboundChannelExecutor != null ? getExecutorStatsInfo(this.outboundChannelExecutor) : "null"). }
true;public;0;3;/**  * Get stats about the SockJS task scheduler.  */ ;/**  * Get stats about the SockJS task scheduler.  */ public String getSockJsTaskSchedulerStatsInfo() {     return (this.sockJsTaskScheduler != null ? getExecutorStatsInfo(this.sockJsTaskScheduler) : "null"). }
false;private;1;4;;private String getExecutorStatsInfo(Executor executor) {     String str = executor.toString().     return str.substring(str.indexOf("pool"), str.length() - 1). }
false;public;0;8;;public String toString() {     return "WebSocketSession[" + getWebSocketSessionStatsInfo() + "]" + ", stompSubProtocol[" + getStompSubProtocolStatsInfo() + "]" + ", stompBrokerRelay[" + getStompBrokerRelayStatsInfo() + "]" + ", inboundChannel[" + getClientInboundExecutorStatsInfo() + "]" + ", outboundChannel[" + getClientOutboundExecutorStatsInfo() + "]" + ", sockJsScheduler[" + getSockJsTaskSchedulerStatsInfo() + "]". }
