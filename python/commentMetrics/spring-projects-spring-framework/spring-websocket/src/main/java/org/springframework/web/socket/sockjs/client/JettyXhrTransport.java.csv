commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public HttpClient getHttpClient() {     return this.httpClient. }
false;public;0;11;;@Override public void start() {     try {         if (!this.httpClient.isRunning()) {             this.httpClient.start().         }     } catch (Exception ex) {         throw new SockJsException("Failed to start JettyXhrTransport", ex).     } }
false;public;0;11;;@Override public void stop() {     try {         if (this.httpClient.isRunning()) {             this.httpClient.stop().         }     } catch (Exception ex) {         throw new SockJsException("Failed to stop JettyXhrTransport", ex).     } }
false;public;0;4;;@Override public boolean isRunning() {     return this.httpClient.isRunning(). }
false;protected;6;9;;@Override protected void connectInternal(TransportRequest transportRequest, WebSocketHandler handler, URI url, HttpHeaders handshakeHeaders, XhrClientSockJsSession session, SettableListenableFuture<WebSocketSession> connectFuture) {     HttpHeaders httpHeaders = transportRequest.getHttpRequestHeaders().     SockJsResponseListener listener = new SockJsResponseListener(url, httpHeaders, session, connectFuture).     executeReceiveRequest(url, handshakeHeaders, listener). }
false;private;3;8;;private void executeReceiveRequest(URI url, HttpHeaders headers, SockJsResponseListener listener) {     if (logger.isTraceEnabled()) {         logger.trace("Starting XHR receive request, url=" + url).     }     Request httpRequest = this.httpClient.newRequest(url).method(HttpMethod.POST).     addHttpHeaders(httpRequest, headers).     httpRequest.send(listener). }
false;protected;2;4;;@Override protected ResponseEntity<String> executeInfoRequestInternal(URI infoUrl, HttpHeaders headers) {     return executeRequest(infoUrl, HttpMethod.GET, headers, null). }
false;public;3;4;;@Override public ResponseEntity<String> executeSendRequestInternal(URI url, HttpHeaders headers, TextMessage message) {     return executeRequest(url, HttpMethod.POST, headers, message.getPayload()). }
false;protected;4;21;;protected ResponseEntity<String> executeRequest(URI url, HttpMethod method, HttpHeaders headers, @Nullable String body) {     Request httpRequest = this.httpClient.newRequest(url).method(method).     addHttpHeaders(httpRequest, headers).     if (body != null) {         httpRequest.content(new StringContentProvider(body)).     }     ContentResponse response.     try {         response = httpRequest.send().     } catch (Exception ex) {         throw new SockJsTransportFailureException("Failed to execute request to " + url, ex).     }     HttpStatus status = HttpStatus.valueOf(response.getStatus()).     HttpHeaders responseHeaders = toHttpHeaders(response.getHeaders()).     return (response.getContent() != null ? new ResponseEntity<>(response.getContentAsString(), responseHeaders, status) : new ResponseEntity<>(responseHeaders, status)). }
false;private,static;2;7;;private static void addHttpHeaders(Request request, HttpHeaders headers) {     headers.forEach((key, values) -> {         for (String value : values) {             request.header(key, value).         }     }). }
false;private,static;1;13;;private static HttpHeaders toHttpHeaders(HttpFields httpFields) {     HttpHeaders responseHeaders = new HttpHeaders().     Enumeration<String> names = httpFields.getFieldNames().     while (names.hasMoreElements()) {         String name = names.nextElement().         Enumeration<String> values = httpFields.getValues(name).         while (values.hasMoreElements()) {             String value = values.nextElement().             responseHeaders.add(name, value).         }     }     return responseHeaders. }
false;public;1;7;;@Override public void onBegin(Response response) {     if (response.getStatus() != 200) {         HttpStatus status = HttpStatus.valueOf(response.getStatus()).         response.abort(new HttpServerErrorException(status, "Unexpected XHR receive status")).     } }
false;public;1;7;;@Override public void onHeaders(Response response) {     if (logger.isTraceEnabled()) {         // Convert to HttpHeaders to avoid "\n"         logger.trace("XHR receive headers: " + toHttpHeaders(response.getHeaders())).     } }
false;public;2;22;;@Override public void onContent(Response response, ByteBuffer buffer) {     while (true) {         if (this.sockJsSession.isDisconnected()) {             if (logger.isDebugEnabled()) {                 logger.debug("SockJS sockJsSession closed, closing response.").             }             response.abort(new SockJsException("Session closed.", this.sockJsSession.getId(), null)).             return.         }         if (buffer.remaining() == 0) {             break.         }         int b = buffer.get().         if (b == '\n') {             handleFrame().         } else {             this.outputStream.write(b).         }     } }
false;private;0;11;;private void handleFrame() {     byte[] bytes = this.outputStream.toByteArray().     this.outputStream.reset().     String content = new String(bytes, SockJsFrame.CHARSET).     if (logger.isTraceEnabled()) {         logger.trace("XHR content received: " + content).     }     if (!PRELUDE.equals(content)) {         this.sockJsSession.handleFrame(new String(bytes, SockJsFrame.CHARSET)).     } }
false;public;1;10;;@Override public void onSuccess(Response response) {     if (this.outputStream.size() > 0) {         handleFrame().     }     if (logger.isTraceEnabled()) {         logger.trace("XHR receive request completed.").     }     executeReceiveRequest(this.transportUrl, this.receiveHeaders, this). }
false;public;2;13;;@Override public void onFailure(Response response, Throwable failure) {     if (this.connectFuture.setException(failure)) {         return.     }     if (this.sockJsSession.isDisconnected()) {         this.sockJsSession.afterTransportClosed(null).     } else {         this.sockJsSession.handleTransportError(failure).         this.sockJsSession.afterTransportClosed(new CloseStatus(1006, failure.getMessage())).     } }
