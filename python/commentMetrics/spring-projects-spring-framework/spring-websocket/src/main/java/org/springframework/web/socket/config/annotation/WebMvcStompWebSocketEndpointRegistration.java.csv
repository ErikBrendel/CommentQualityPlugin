commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public StompWebSocketEndpointRegistration setHandshakeHandler(HandshakeHandler handshakeHandler) {     this.handshakeHandler = handshakeHandler.     return this. }
false;public;1;7;;@Override public StompWebSocketEndpointRegistration addInterceptors(HandshakeInterceptor... interceptors) {     if (!ObjectUtils.isEmpty(interceptors)) {         this.interceptors.addAll(Arrays.asList(interceptors)).     }     return this. }
false;public;1;8;;@Override public StompWebSocketEndpointRegistration setAllowedOrigins(String... allowedOrigins) {     this.allowedOrigins.clear().     if (!ObjectUtils.isEmpty(allowedOrigins)) {         this.allowedOrigins.addAll(Arrays.asList(allowedOrigins)).     }     return this. }
false;public;0;17;;@Override public SockJsServiceRegistration withSockJS() {     this.registration = new SockJsServiceRegistration().     this.registration.setTaskScheduler(this.sockJsTaskScheduler).     HandshakeInterceptor[] interceptors = getInterceptors().     if (interceptors.length > 0) {         this.registration.setInterceptors(interceptors).     }     if (this.handshakeHandler != null) {         WebSocketTransportHandler handler = new WebSocketTransportHandler(this.handshakeHandler).         this.registration.setTransportHandlerOverrides(handler).     }     if (!this.allowedOrigins.isEmpty()) {         this.registration.setAllowedOrigins(StringUtils.toStringArray(this.allowedOrigins)).     }     return this.registration. }
false;protected;0;6;;protected HandshakeInterceptor[] getInterceptors() {     List<HandshakeInterceptor> interceptors = new ArrayList<>(this.interceptors.size() + 1).     interceptors.addAll(this.interceptors).     interceptors.add(new OriginHandshakeInterceptor(this.allowedOrigins)).     return interceptors.toArray(new HandshakeInterceptor[0]). }
false;public,final;0;28;;public final MultiValueMap<HttpRequestHandler, String> getMappings() {     MultiValueMap<HttpRequestHandler, String> mappings = new LinkedMultiValueMap<>().     if (this.registration != null) {         SockJsService sockJsService = this.registration.getSockJsService().         for (String path : this.paths) {             String pattern = (path.endsWith("/") ? path + "**" : path + "/**").             SockJsHttpRequestHandler handler = new SockJsHttpRequestHandler(sockJsService, this.webSocketHandler).             mappings.add(handler, pattern).         }     } else {         for (String path : this.paths) {             WebSocketHttpRequestHandler handler.             if (this.handshakeHandler != null) {                 handler = new WebSocketHttpRequestHandler(this.webSocketHandler, this.handshakeHandler).             } else {                 handler = new WebSocketHttpRequestHandler(this.webSocketHandler).             }             HandshakeInterceptor[] interceptors = getInterceptors().             if (interceptors.length > 0) {                 handler.setHandshakeInterceptors(Arrays.asList(interceptors)).             }             mappings.add(handler, path).         }     }     return mappings. }
