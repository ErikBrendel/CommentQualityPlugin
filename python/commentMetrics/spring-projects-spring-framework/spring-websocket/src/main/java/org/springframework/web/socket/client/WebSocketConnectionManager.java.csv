commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;3;/**  * Decorate the WebSocketHandler provided to the class constructor.  * <p>By default {@link LoggingWebSocketHandlerDecorator} is added.  */ ;/**  * Decorate the WebSocketHandler provided to the class constructor.  * <p>By default {@link LoggingWebSocketHandlerDecorator} is added.  */ protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler handler) {     return new LoggingWebSocketHandlerDecorator(handler). }
true;public;1;3;/**  * Set the sub-protocols to use. If configured, specified sub-protocols will be  * requested in the handshake through the {@code Sec-WebSocket-Protocol} header. The  * resulting WebSocket session will contain the protocol accepted by the server, if  * any.  */ ;/**  * Set the sub-protocols to use. If configured, specified sub-protocols will be  * requested in the handshake through the {@code Sec-WebSocket-Protocol} header. The  * resulting WebSocket session will contain the protocol accepted by the server, if  * any.  */ public void setSubProtocols(List<String> protocols) {     this.headers.setSecWebSocketProtocol(protocols). }
true;public;0;3;/**  * Return the configured sub-protocols to use.  */ ;/**  * Return the configured sub-protocols to use.  */ public List<String> getSubProtocols() {     return this.headers.getSecWebSocketProtocol(). }
true;public;1;3;/**  * Set the origin to use.  */ ;/**  * Set the origin to use.  */ public void setOrigin(@Nullable String origin) {     this.headers.setOrigin(origin). }
true;public;0;4;/**  * Return the configured origin.  */ ;/**  * Return the configured origin.  */ @Nullable public String getOrigin() {     return this.headers.getOrigin(). }
true;public;1;4;/**  * Provide default headers to add to the WebSocket handshake request.  */ ;/**  * Provide default headers to add to the WebSocket handshake request.  */ public void setHeaders(HttpHeaders headers) {     this.headers.clear().     this.headers.putAll(headers). }
true;public;0;3;/**  * Return the default headers for the WebSocket handshake request.  */ ;/**  * Return the default headers for the WebSocket handshake request.  */ public HttpHeaders getHeaders() {     return this.headers. }
false;public;0;7;;@Override public void startInternal() {     if (this.client instanceof Lifecycle && !((Lifecycle) this.client).isRunning()) {         ((Lifecycle) this.client).start().     }     super.startInternal(). }
false;public;0;7;;@Override public void stopInternal() throws Exception {     if (this.client instanceof Lifecycle && ((Lifecycle) this.client).isRunning()) {         ((Lifecycle) this.client).stop().     }     super.stopInternal(). }
false;public;1;5;;@Override public void onSuccess(@Nullable WebSocketSession result) {     webSocketSession = result.     logger.info("Successfully connected"). }
false;public;1;4;;@Override public void onFailure(Throwable ex) {     logger.error("Failed to connect", ex). }
false;protected;0;21;;@Override protected void openConnection() {     if (logger.isInfoEnabled()) {         logger.info("Connecting to WebSocket at " + getUri()).     }     ListenableFuture<WebSocketSession> future = this.client.doHandshake(this.webSocketHandler, this.headers, getUri()).     future.addCallback(new ListenableFutureCallback<WebSocketSession>() {          @Override         public void onSuccess(@Nullable WebSocketSession result) {             webSocketSession = result.             logger.info("Successfully connected").         }          @Override         public void onFailure(Throwable ex) {             logger.error("Failed to connect", ex).         }     }). }
false;protected;0;6;;@Override protected void closeConnection() throws Exception {     if (this.webSocketSession != null) {         this.webSocketSession.close().     } }
false;protected;0;4;;@Override protected boolean isConnected() {     return (this.webSocketSession != null && this.webSocketSession.isOpen()). }
