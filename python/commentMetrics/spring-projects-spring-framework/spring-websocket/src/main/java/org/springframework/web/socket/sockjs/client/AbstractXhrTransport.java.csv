# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1406748586;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1413848647;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1438107753;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1438107753;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1440249342;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1467726769;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1467730834;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1467821493;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1475614836;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1496837955;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public boolean isXhrStreamingDisabled();1521123475;Whether XHR streaming is disabled or not.;public boolean isXhrStreamingDisabled() {_		return this.xhrStreamingDisabled__	};whether,xhr,streaming,is,disabled,or,not;public,boolean,is,xhr,streaming,disabled,return,this,xhr,streaming,disabled
AbstractXhrTransport -> public void setRequestHeaders(HttpHeaders requestHeaders);1403719829;Configure headers to be added to every executed HTTP request._@param requestHeaders the headers to add to requests;public void setRequestHeaders(HttpHeaders requestHeaders) {_		this.requestHeaders.clear()__		this.xhrSendRequestHeaders.clear()__		if (requestHeaders != null) {_			this.requestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.setContentType(MediaType.APPLICATION_JSON)__		}_	};configure,headers,to,be,added,to,every,executed,http,request,param,request,headers,the,headers,to,add,to,requests;public,void,set,request,headers,http,headers,request,headers,this,request,headers,clear,this,xhr,send,request,headers,clear,if,request,headers,null,this,request,headers,put,all,request,headers,this,xhr,send,request,headers,put,all,request,headers,this,xhr,send,request,headers,set,content,type,media,type
AbstractXhrTransport -> public void setRequestHeaders(HttpHeaders requestHeaders);1404880799;Configure headers to be added to every executed HTTP request._@param requestHeaders the headers to add to requests;public void setRequestHeaders(HttpHeaders requestHeaders) {_		this.requestHeaders.clear()__		this.xhrSendRequestHeaders.clear()__		if (requestHeaders != null) {_			this.requestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.setContentType(MediaType.APPLICATION_JSON)__		}_	};configure,headers,to,be,added,to,every,executed,http,request,param,request,headers,the,headers,to,add,to,requests;public,void,set,request,headers,http,headers,request,headers,this,request,headers,clear,this,xhr,send,request,headers,clear,if,request,headers,null,this,request,headers,put,all,request,headers,this,xhr,send,request,headers,put,all,request,headers,this,xhr,send,request,headers,set,content,type,media,type
AbstractXhrTransport -> public void setRequestHeaders(HttpHeaders requestHeaders);1406748586;Configure headers to be added to every executed HTTP request._@param requestHeaders the headers to add to requests;public void setRequestHeaders(HttpHeaders requestHeaders) {_		this.requestHeaders.clear()__		this.xhrSendRequestHeaders.clear()__		if (requestHeaders != null) {_			this.requestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.setContentType(MediaType.APPLICATION_JSON)__		}_	};configure,headers,to,be,added,to,every,executed,http,request,param,request,headers,the,headers,to,add,to,requests;public,void,set,request,headers,http,headers,request,headers,this,request,headers,clear,this,xhr,send,request,headers,clear,if,request,headers,null,this,request,headers,put,all,request,headers,this,xhr,send,request,headers,put,all,request,headers,this,xhr,send,request,headers,set,content,type,media,type
AbstractXhrTransport -> public void setRequestHeaders(HttpHeaders requestHeaders);1413848647;Configure headers to be added to every executed HTTP request._@param requestHeaders the headers to add to requests;public void setRequestHeaders(HttpHeaders requestHeaders) {_		this.requestHeaders.clear()__		this.xhrSendRequestHeaders.clear()__		if (requestHeaders != null) {_			this.requestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.setContentType(MediaType.APPLICATION_JSON)__		}_	};configure,headers,to,be,added,to,every,executed,http,request,param,request,headers,the,headers,to,add,to,requests;public,void,set,request,headers,http,headers,request,headers,this,request,headers,clear,this,xhr,send,request,headers,clear,if,request,headers,null,this,request,headers,put,all,request,headers,this,xhr,send,request,headers,put,all,request,headers,this,xhr,send,request,headers,set,content,type,media,type
AbstractXhrTransport -> public void setRequestHeaders(HttpHeaders requestHeaders);1438107753;Configure headers to be added to every executed HTTP request._@param requestHeaders the headers to add to requests;public void setRequestHeaders(HttpHeaders requestHeaders) {_		this.requestHeaders.clear()__		this.xhrSendRequestHeaders.clear()__		if (requestHeaders != null) {_			this.requestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.putAll(requestHeaders)__			this.xhrSendRequestHeaders.setContentType(MediaType.APPLICATION_JSON)__		}_	};configure,headers,to,be,added,to,every,executed,http,request,param,request,headers,the,headers,to,add,to,requests;public,void,set,request,headers,http,headers,request,headers,this,request,headers,clear,this,xhr,send,request,headers,clear,if,request,headers,null,this,request,headers,put,all,request,headers,this,xhr,send,request,headers,put,all,request,headers,this,xhr,send,request,headers,set,content,type,media,type
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1403719829;Whether to attempt to connect with "xhr_streaming" first before trying_with "xhr" next, see {@link XhrTransport#isXhrStreamingDisabled()}.__<p>By default this property is set to {@code false} which means both_"xhr_streaming" and "xhr" will be tried.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};whether,to,attempt,to,connect,with,first,before,trying,with,xhr,next,see,link,xhr,transport,is,xhr,streaming,disabled,p,by,default,this,property,is,set,to,code,false,which,means,both,and,xhr,will,be,tried;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1404880799;Whether to attempt to connect with "xhr_streaming" first before trying_with "xhr" next, see {@link XhrTransport#isXhrStreamingDisabled()}.__<p>By default this property is set to {@code false} which means both_"xhr_streaming" and "xhr" will be tried.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};whether,to,attempt,to,connect,with,first,before,trying,with,xhr,next,see,link,xhr,transport,is,xhr,streaming,disabled,p,by,default,this,property,is,set,to,code,false,which,means,both,and,xhr,will,be,tried;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1406748586;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference.__<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted.__<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1413848647;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference.__<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted.__<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1438107753;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference.__<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted.__<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1438107753;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference.__<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted.__<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1440249342;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference.__<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted.__<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1467726769;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference.__<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted.__<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1467730834;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference.__<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted.__<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1467821493;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference.__<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted.__<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1475614836;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference._<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted._<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1496837955;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference._<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted._<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> public void setXhrStreamingDisabled(boolean disabled);1521123475;An {@code XhrTransport} can support both the "xhr_streaming" and "xhr"_SockJS server transports. From a client perspective there is no_implementation difference._<p>Typically an {@code XhrTransport} is used as "XHR streaming" first and_then, if that fails, as "XHR". In some cases however it may be helpful to_suppress XHR streaming so that only XHR is attempted._<p>By default this property is set to {@code false} which means both_"XHR streaming" and "XHR" apply.;public void setXhrStreamingDisabled(boolean disabled) {_		this.xhrStreamingDisabled = disabled__	};an,code,xhr,transport,can,support,both,the,and,xhr,sock,js,server,transports,from,a,client,perspective,there,is,no,implementation,difference,p,typically,an,code,xhr,transport,is,used,as,xhr,streaming,first,and,then,if,that,fails,as,xhr,in,some,cases,however,it,may,be,helpful,to,suppress,xhr,streaming,so,that,only,xhr,is,attempted,p,by,default,this,property,is,set,to,code,false,which,means,both,xhr,streaming,and,xhr,apply;public,void,set,xhr,streaming,disabled,boolean,disabled,this,xhr,streaming,disabled,disabled
AbstractXhrTransport -> @Deprecated 	public void setRequestHeaders(HttpHeaders requestHeaders);1438107753;Configure headers to be added to every executed HTTP request._@param requestHeaders the headers to add to requests_@deprecated as of 4.2 in favor of {@link SockJsClient#setHttpHeaderNames}.;@Deprecated_	public void setRequestHeaders(HttpHeaders requestHeaders) {_		this.requestHeaders.clear()__		if (requestHeaders != null) {_			this.requestHeaders.putAll(requestHeaders)__		}_	};configure,headers,to,be,added,to,every,executed,http,request,param,request,headers,the,headers,to,add,to,requests,deprecated,as,of,4,2,in,favor,of,link,sock,js,client,set,http,header,names;deprecated,public,void,set,request,headers,http,headers,request,headers,this,request,headers,clear,if,request,headers,null,this,request,headers,put,all,request,headers
AbstractXhrTransport -> @Deprecated 	public void setRequestHeaders(HttpHeaders requestHeaders);1440249342;Configure headers to be added to every executed HTTP request._@param requestHeaders the headers to add to requests_@deprecated as of 4.2 in favor of {@link SockJsClient#setHttpHeaderNames}.;@Deprecated_	public void setRequestHeaders(HttpHeaders requestHeaders) {_		this.requestHeaders.clear()__		if (requestHeaders != null) {_			this.requestHeaders.putAll(requestHeaders)__		}_	};configure,headers,to,be,added,to,every,executed,http,request,param,request,headers,the,headers,to,add,to,requests,deprecated,as,of,4,2,in,favor,of,link,sock,js,client,set,http,header,names;deprecated,public,void,set,request,headers,http,headers,request,headers,this,request,headers,clear,if,request,headers,null,this,request,headers,put,all,request,headers
