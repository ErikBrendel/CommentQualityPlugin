commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setSupportedProtocols(String... protocols) {     this.configBuilder.preferredSubprotocols(Arrays.asList(protocols)). }
false;public;1;3;;public void setExtensions(Extension... extensions) {     this.configBuilder.extensions(Arrays.asList(extensions)). }
false;public;1;3;;public void setEncoders(List<Class<? extends Encoder>> encoders) {     this.configBuilder.encoders(encoders). }
false;public;1;3;;public void setDecoders(List<Class<? extends Decoder>> decoders) {     this.configBuilder.decoders(decoders). }
false;public;1;3;;public void setConfigurator(Configurator configurator) {     this.configBuilder.configurator(configurator). }
false;public;1;3;;public void setWebSocketContainer(WebSocketContainer webSocketContainer) {     this.webSocketContainer = webSocketContainer. }
false;public;0;3;;public WebSocketContainer getWebSocketContainer() {     return this.webSocketContainer. }
false;public;1;6;;@Override public void setBeanFactory(BeanFactory beanFactory) {     if (this.endpointProvider != null) {         this.endpointProvider.setBeanFactory(beanFactory).     } }
true;public;1;4;/**  * Set a {@link TaskExecutor} to use to open connections.  * By default {@link SimpleAsyncTaskExecutor} is used.  */ ;/**  * Set a {@link TaskExecutor} to use to open connections.  * By default {@link SimpleAsyncTaskExecutor} is used.  */ public void setTaskExecutor(TaskExecutor taskExecutor) {     Assert.notNull(taskExecutor, "TaskExecutor must not be null").     this.taskExecutor = taskExecutor. }
true;public;0;3;/**  * Return the configured {@link TaskExecutor}.  */ ;/**  * Return the configured {@link TaskExecutor}.  */ public TaskExecutor getTaskExecutor() {     return this.taskExecutor. }
false;protected;0;21;;@Override protected void openConnection() {     this.taskExecutor.execute(() -> {         try {             if (logger.isInfoEnabled()) {                 logger.info("Connecting to WebSocket at " + getUri()).             }             Endpoint endpointToUse = this.endpoint.             if (endpointToUse == null) {                 Assert.state(this.endpointProvider != null, "No endpoint set").                 endpointToUse = this.endpointProvider.getHandler().             }             ClientEndpointConfig endpointConfig = this.configBuilder.build().             this.session = getWebSocketContainer().connectToServer(endpointToUse, endpointConfig, getUri()).             logger.info("Successfully connected to WebSocket").         } catch (Throwable ex) {             logger.error("Failed to connect to WebSocket", ex).         }     }). }
false;protected;0;12;;@Override protected void closeConnection() throws Exception {     try {         Session session = this.session.         if (session != null && session.isOpen()) {             session.close().         }     } finally {         this.session = null.     } }
false;protected;0;5;;@Override protected boolean isConnected() {     Session session = this.session.     return (session != null && session.isOpen()). }
