commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setAsyncSendTimeout(Long timeoutInMillis) {     this.asyncSendTimeout = timeoutInMillis. }
false;public;0;4;;@Nullable public Long getAsyncSendTimeout() {     return this.asyncSendTimeout. }
false;public;1;3;;public void setMaxSessionIdleTimeout(Long timeoutInMillis) {     this.maxSessionIdleTimeout = timeoutInMillis. }
false;public;0;4;;@Nullable public Long getMaxSessionIdleTimeout() {     return this.maxSessionIdleTimeout. }
false;public;1;3;;public void setMaxTextMessageBufferSize(Integer bufferSize) {     this.maxTextMessageBufferSize = bufferSize. }
false;public;0;4;;@Nullable public Integer getMaxTextMessageBufferSize() {     return this.maxTextMessageBufferSize. }
false;public;1;3;;public void setMaxBinaryMessageBufferSize(Integer bufferSize) {     this.maxBinaryMessageBufferSize = bufferSize. }
false;public;0;4;;@Nullable public Integer getMaxBinaryMessageBufferSize() {     return this.maxBinaryMessageBufferSize. }
false;public;1;4;;@Override public void setServletContext(ServletContext servletContext) {     this.servletContext = servletContext. }
false;public;0;22;;@Override public void afterPropertiesSet() {     Assert.state(this.servletContext != null, "A ServletContext is required to access the javax.websocket.server.ServerContainer instance").     this.serverContainer = (ServerContainer) this.servletContext.getAttribute("javax.websocket.server.ServerContainer").     Assert.state(this.serverContainer != null, "Attribute 'javax.websocket.server.ServerContainer' not found in ServletContext").     if (this.asyncSendTimeout != null) {         this.serverContainer.setAsyncSendTimeout(this.asyncSendTimeout).     }     if (this.maxSessionIdleTimeout != null) {         this.serverContainer.setDefaultMaxSessionIdleTimeout(this.maxSessionIdleTimeout).     }     if (this.maxTextMessageBufferSize != null) {         this.serverContainer.setDefaultMaxTextMessageBufferSize(this.maxTextMessageBufferSize).     }     if (this.maxBinaryMessageBufferSize != null) {         this.serverContainer.setDefaultMaxBinaryMessageBufferSize(this.maxBinaryMessageBufferSize).     } }
false;public;0;5;;@Override @Nullable public ServerContainer getObject() {     return this.serverContainer. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return (this.serverContainer != null ? this.serverContainer.getClass() : ServerContainer.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
