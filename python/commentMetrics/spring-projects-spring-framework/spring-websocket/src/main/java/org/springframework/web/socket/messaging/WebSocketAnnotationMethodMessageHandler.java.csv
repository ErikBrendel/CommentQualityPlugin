commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void afterPropertiesSet() {     initControllerAdviceCache().     super.afterPropertiesSet(). }
false;private;0;12;;private void initControllerAdviceCache() {     ApplicationContext context = getApplicationContext().     if (context == null) {         return.     }     if (logger.isTraceEnabled()) {         logger.trace("Looking for @MessageExceptionHandler mappings: " + context).     }     List<ControllerAdviceBean> beans = ControllerAdviceBean.findAnnotatedBeans(context).     AnnotationAwareOrderComparator.sort(beans).     initMessagingAdviceCache(MessagingControllerAdviceBean.createFromList(beans)). }
false;private;1;17;;private void initMessagingAdviceCache(@Nullable List<MessagingAdviceBean> beans) {     if (beans == null) {         return.     }     for (MessagingAdviceBean bean : beans) {         Class<?> type = bean.getBeanType().         if (type != null) {             AnnotationExceptionHandlerMethodResolver resolver = new AnnotationExceptionHandlerMethodResolver(type).             if (resolver.hasExceptionMappings()) {                 registerExceptionHandlerAdvice(bean, resolver).                 if (logger.isTraceEnabled()) {                     logger.trace("Detected @MessageExceptionHandler methods in " + bean).                 }             }         }     } }
false;public,static;1;7;;public static List<MessagingAdviceBean> createFromList(List<ControllerAdviceBean> beans) {     List<MessagingAdviceBean> result = new ArrayList<>(beans.size()).     for (ControllerAdviceBean bean : beans) {         result.add(new MessagingControllerAdviceBean(bean)).     }     return result. }
false;public;0;5;;@Override @Nullable public Class<?> getBeanType() {     return this.adviceBean.getBeanType(). }
false;public;0;4;;@Override public Object resolveBean() {     return this.adviceBean.resolveBean(). }
false;public;1;4;;@Override public boolean isApplicableToBeanType(Class<?> beanType) {     return this.adviceBean.isApplicableToBeanType(beanType). }
false;public;0;4;;@Override public int getOrder() {     return this.adviceBean.getOrder(). }
