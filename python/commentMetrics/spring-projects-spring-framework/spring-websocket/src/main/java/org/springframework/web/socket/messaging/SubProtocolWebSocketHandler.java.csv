# id;timestamp;commentText;codeText;commentWords;codeWords
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1449060733;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1449086872;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1450045625;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1450050966;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1462186904;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1467730834;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1496837955;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1498780456;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1500448076;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1506097334;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1508619774;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1516879480;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1518476695;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1521123475;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1526479437;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1532520962;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel);1534414082;Create a new {@code SubProtocolWebSocketHandler} for the given inbound and outbound channels._@param clientInboundChannel the inbound {@code MessageChannel}_@param clientOutboundChannel the outbound {@code MessageChannel};public SubProtocolWebSocketHandler(MessageChannel clientInboundChannel, SubscribableChannel clientOutboundChannel) {_		Assert.notNull(clientInboundChannel, "Inbound MessageChannel must not be null")__		Assert.notNull(clientOutboundChannel, "Outbound MessageChannel must not be null")__		this.clientInboundChannel = clientInboundChannel__		this.clientOutboundChannel = clientOutboundChannel__	};create,a,new,code,sub,protocol,web,socket,handler,for,the,given,inbound,and,outbound,channels,param,client,inbound,channel,the,inbound,code,message,channel,param,client,outbound,channel,the,outbound,code,message,channel;public,sub,protocol,web,socket,handler,message,channel,client,inbound,channel,subscribable,channel,client,outbound,channel,assert,not,null,client,inbound,channel,inbound,message,channel,must,not,be,null,assert,not,null,client,outbound,channel,outbound,message,channel,must,not,be,null,this,client,inbound,channel,client,inbound,channel,this,client,outbound,channel,client,outbound,channel
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1449060733;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1449086872;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1450045625;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1450050966;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1462186904;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1467730834;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1496837955;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1498780456;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1500448076;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1506097334;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1508619774;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1516879480;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1518476695;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1521123475;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1526479437;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1532520962;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> public int getSendBufferSizeLimit();1534414082;Return the buffer-size limit (number of bytes).;public int getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};return,the,buffer,size,limit,number,of,bytes;public,int,get,send,buffer,size,limit,return,this,send,buffer,size,limit
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1403791620;Periodically check sessions to ensure they have received at least one_message or otherwise close them.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() && currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE) {_			return__		}_		try {_			if (this.sessionCheckLock.tryLock()) {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (holder.hasHandledMessages() || timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. Closing " + holder)__					}_					try {_						session.close(CloseStatus.PROTOCOL_ERROR)__					}_					catch (Throwable t) {_						logger.error("Failed to close " + session, t)__					}_				}_			}_		}_		finally {_			this.sessionCheckLock.unlock()__		}_	};periodically,check,sessions,to,ensure,they,have,received,at,least,one,message,or,otherwise,close,them;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,try,if,this,session,check,lock,try,lock,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,holder,has,handled,messages,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,try,session,close,close,status,catch,throwable,t,logger,error,failed,to,close,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1403856366;Periodically check sessions to ensure they have received at least one_message or otherwise close them.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() && currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (holder.hasHandledMessages() || timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. Closing " + holder + ".")__					}_					try {_						session.close(CloseStatus.PROTOCOL_ERROR)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};periodically,check,sessions,to,ensure,they,have,received,at,least,one,message,or,otherwise,close,them;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,holder,has,handled,messages,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,try,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1404062102;Periodically check sessions to ensure they have received at least one_message or otherwise close them.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() && currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (holder.hasHandledMessages() || timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						session.close(CloseStatus.PROTOCOL_ERROR)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};periodically,check,sessions,to,ensure,they,have,received,at,least,one,message,or,otherwise,close,them;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,holder,has,handled,messages,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1404062121;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() && currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (holder.hasHandledMessages() || timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,holder,has,handled,messages,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1404075624;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1404880787;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1404880799;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1411567635;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1411585497;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1413848647;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1415021127;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1426887927;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1439467224;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1449060733;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1449086872;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}_		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable t) {_						logger.error("Failure while closing " + session, t)__					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,t,logger,error,failure,while,closing,session,t,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1450045625;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1450050966;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1462186904;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1467730834;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1496837955;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1498780456;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1500448076;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions() throws IOException;1506097334;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility_for sessions to hang. This method checks and closes any sessions that have_been connected for more than 60 seconds without having received a single_message.;private void checkSessions() throws IOException {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,throws,ioexception,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> public String getStatsInfo();1404880787;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1404880799;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1411567635;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1411585497;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1413848647;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1415021127;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1426887927;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1439467224;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1449060733;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1449086872;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1450045625;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1450050966;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1462186904;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1467730834;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1496837955;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1498780456;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1500448076;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1506097334;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1508619774;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1516879480;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1518476695;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1521123475;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1526479437;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1532520962;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public String getStatsInfo();1534414082;Return a String describing internal state and counters.;public String getStatsInfo() {_		return this.stats.toString()__	};return,a,string,describing,internal,state,and,counters;public,string,get,stats,info,return,this,stats,to,string
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1385258957;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1385420761;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1385507478;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1386004713;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1386087504;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1394485082;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1395379769;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1395543579;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1395550293;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1395703238;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1395707441;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1395965753;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1398144543;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1401465872;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1403791620;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1403856366;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1404062102;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1404062121;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1404075624;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1404880787;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1404880799;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1411567635;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1411585497;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1413848647;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1415021127;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1426887927;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1439467224;@return the default sub-protocol handler to use;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1449060733;Return the default sub-protocol handler to use.;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1449086872;Return the default sub-protocol handler to use.;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1450045625;Return the default sub-protocol handler to use.;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1450050966;Return the default sub-protocol handler to use.;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1462186904;Return the default sub-protocol handler to use.;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public SubProtocolHandler getDefaultProtocolHandler();1467730834;Return the default sub-protocol handler to use.;public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1385258957;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request.__@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1385420761;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request.__@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1385507478;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1386004713;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1386087504;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1394485082;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1395379769;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1395543579;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1395550293;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1395703238;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1395707441;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1395965753;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1398144543;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1401465872;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1403791620;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1403856366;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1404062102;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1404062121;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1404075624;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1404880787;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1404880799;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1411567635;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1411585497;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1413848647;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1415021127;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1426887927;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1439467224;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler: protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1449060733;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1449086872;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1450045625;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1450050966;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1462186904;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1467730834;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1496837955;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1498780456;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1500448076;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1506097334;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1508619774;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1516879480;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1518476695;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1521123475;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1526479437;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1532520962;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers);1534414082;Configure one or more handlers to use depending on the sub-protocol requested by_the client in the WebSocket handshake request._@param protocolHandlers the sub-protocol handlers to use;public void setProtocolHandlers(List<SubProtocolHandler> protocolHandlers) {_		this.protocolHandlerLookup.clear()__		this.protocolHandlers.clear()__		for (SubProtocolHandler handler : protocolHandlers) {_			addProtocolHandler(handler)__		}_	};configure,one,or,more,handlers,to,use,depending,on,the,sub,protocol,requested,by,the,client,in,the,web,socket,handshake,request,param,protocol,handlers,the,sub,protocol,handlers,to,use;public,void,set,protocol,handlers,list,sub,protocol,handler,protocol,handlers,this,protocol,handler,lookup,clear,this,protocol,handlers,clear,for,sub,protocol,handler,handler,protocol,handlers,add,protocol,handler,handler
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlers();1385258957;@return the configured sub-protocol handlers;public Map<String, SubProtocolHandler> getProtocolHandlers() {_		return this.protocolHandlers__	};return,the,configured,sub,protocol,handlers;public,map,string,sub,protocol,handler,get,protocol,handlers,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlers();1385420761;@return the configured sub-protocol handlers;public Map<String, SubProtocolHandler> getProtocolHandlers() {_		return this.protocolHandlers__	};return,the,configured,sub,protocol,handlers;public,map,string,sub,protocol,handler,get,protocol,handlers,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlers();1385507478;@return the configured sub-protocol handlers;public Map<String, SubProtocolHandler> getProtocolHandlers() {_		return this.protocolHandlers__	};return,the,configured,sub,protocol,handlers;public,map,string,sub,protocol,handler,get,protocol,handlers,return,this,protocol,handlers
SubProtocolWebSocketHandler -> protected WebSocketSession decorateSession(WebSocketSession session);1508619774;Decorate the given {@link WebSocketSession}, if desired._<p>The default implementation builds a {@link ConcurrentWebSocketSessionDecorator}_with the configured {@link #getSendTimeLimit() send-time limit} and_{@link #getSendBufferSizeLimit() buffer-size limit}._@param session the original {@code WebSocketSession}_@return the decorated {@code WebSocketSession}, or potentially the given session as-is_@since 4.3.13;protected WebSocketSession decorateSession(WebSocketSession session) {_		return new ConcurrentWebSocketSessionDecorator(session, getSendTimeLimit(), getSendBufferSizeLimit())__	};decorate,the,given,link,web,socket,session,if,desired,p,the,default,implementation,builds,a,link,concurrent,web,socket,session,decorator,with,the,configured,link,get,send,time,limit,send,time,limit,and,link,get,send,buffer,size,limit,buffer,size,limit,param,session,the,original,code,web,socket,session,return,the,decorated,code,web,socket,session,or,potentially,the,given,session,as,is,since,4,3,13;protected,web,socket,session,decorate,session,web,socket,session,session,return,new,concurrent,web,socket,session,decorator,session,get,send,time,limit,get,send,buffer,size,limit
SubProtocolWebSocketHandler -> protected WebSocketSession decorateSession(WebSocketSession session);1516879480;Decorate the given {@link WebSocketSession}, if desired._<p>The default implementation builds a {@link ConcurrentWebSocketSessionDecorator}_with the configured {@link #getSendTimeLimit() send-time limit} and_{@link #getSendBufferSizeLimit() buffer-size limit}._@param session the original {@code WebSocketSession}_@return the decorated {@code WebSocketSession}, or potentially the given session as-is_@since 4.3.13;protected WebSocketSession decorateSession(WebSocketSession session) {_		return new ConcurrentWebSocketSessionDecorator(session, getSendTimeLimit(), getSendBufferSizeLimit())__	};decorate,the,given,link,web,socket,session,if,desired,p,the,default,implementation,builds,a,link,concurrent,web,socket,session,decorator,with,the,configured,link,get,send,time,limit,send,time,limit,and,link,get,send,buffer,size,limit,buffer,size,limit,param,session,the,original,code,web,socket,session,return,the,decorated,code,web,socket,session,or,potentially,the,given,session,as,is,since,4,3,13;protected,web,socket,session,decorate,session,web,socket,session,session,return,new,concurrent,web,socket,session,decorator,session,get,send,time,limit,get,send,buffer,size,limit
SubProtocolWebSocketHandler -> protected WebSocketSession decorateSession(WebSocketSession session);1518476695;Decorate the given {@link WebSocketSession}, if desired._<p>The default implementation builds a {@link ConcurrentWebSocketSessionDecorator}_with the configured {@link #getSendTimeLimit() send-time limit} and_{@link #getSendBufferSizeLimit() buffer-size limit}._@param session the original {@code WebSocketSession}_@return the decorated {@code WebSocketSession}, or potentially the given session as-is_@since 4.3.13;protected WebSocketSession decorateSession(WebSocketSession session) {_		return new ConcurrentWebSocketSessionDecorator(session, getSendTimeLimit(), getSendBufferSizeLimit())__	};decorate,the,given,link,web,socket,session,if,desired,p,the,default,implementation,builds,a,link,concurrent,web,socket,session,decorator,with,the,configured,link,get,send,time,limit,send,time,limit,and,link,get,send,buffer,size,limit,buffer,size,limit,param,session,the,original,code,web,socket,session,return,the,decorated,code,web,socket,session,or,potentially,the,given,session,as,is,since,4,3,13;protected,web,socket,session,decorate,session,web,socket,session,session,return,new,concurrent,web,socket,session,decorator,session,get,send,time,limit,get,send,buffer,size,limit
SubProtocolWebSocketHandler -> protected WebSocketSession decorateSession(WebSocketSession session);1521123475;Decorate the given {@link WebSocketSession}, if desired._<p>The default implementation builds a {@link ConcurrentWebSocketSessionDecorator}_with the configured {@link #getSendTimeLimit() send-time limit} and_{@link #getSendBufferSizeLimit() buffer-size limit}._@param session the original {@code WebSocketSession}_@return the decorated {@code WebSocketSession}, or potentially the given session as-is_@since 4.3.13;protected WebSocketSession decorateSession(WebSocketSession session) {_		return new ConcurrentWebSocketSessionDecorator(session, getSendTimeLimit(), getSendBufferSizeLimit())__	};decorate,the,given,link,web,socket,session,if,desired,p,the,default,implementation,builds,a,link,concurrent,web,socket,session,decorator,with,the,configured,link,get,send,time,limit,send,time,limit,and,link,get,send,buffer,size,limit,buffer,size,limit,param,session,the,original,code,web,socket,session,return,the,decorated,code,web,socket,session,or,potentially,the,given,session,as,is,since,4,3,13;protected,web,socket,session,decorate,session,web,socket,session,session,return,new,concurrent,web,socket,session,decorator,session,get,send,time,limit,get,send,buffer,size,limit
SubProtocolWebSocketHandler -> protected WebSocketSession decorateSession(WebSocketSession session);1526479437;Decorate the given {@link WebSocketSession}, if desired._<p>The default implementation builds a {@link ConcurrentWebSocketSessionDecorator}_with the configured {@link #getSendTimeLimit() send-time limit} and_{@link #getSendBufferSizeLimit() buffer-size limit}._@param session the original {@code WebSocketSession}_@return the decorated {@code WebSocketSession}, or potentially the given session as-is_@since 4.3.13;protected WebSocketSession decorateSession(WebSocketSession session) {_		return new ConcurrentWebSocketSessionDecorator(session, getSendTimeLimit(), getSendBufferSizeLimit())__	};decorate,the,given,link,web,socket,session,if,desired,p,the,default,implementation,builds,a,link,concurrent,web,socket,session,decorator,with,the,configured,link,get,send,time,limit,send,time,limit,and,link,get,send,buffer,size,limit,buffer,size,limit,param,session,the,original,code,web,socket,session,return,the,decorated,code,web,socket,session,or,potentially,the,given,session,as,is,since,4,3,13;protected,web,socket,session,decorate,session,web,socket,session,session,return,new,concurrent,web,socket,session,decorator,session,get,send,time,limit,get,send,buffer,size,limit
SubProtocolWebSocketHandler -> protected WebSocketSession decorateSession(WebSocketSession session);1532520962;Decorate the given {@link WebSocketSession}, if desired._<p>The default implementation builds a {@link ConcurrentWebSocketSessionDecorator}_with the configured {@link #getSendTimeLimit() send-time limit} and_{@link #getSendBufferSizeLimit() buffer-size limit}._@param session the original {@code WebSocketSession}_@return the decorated {@code WebSocketSession}, or potentially the given session as-is_@since 4.3.13;protected WebSocketSession decorateSession(WebSocketSession session) {_		return new ConcurrentWebSocketSessionDecorator(session, getSendTimeLimit(), getSendBufferSizeLimit())__	};decorate,the,given,link,web,socket,session,if,desired,p,the,default,implementation,builds,a,link,concurrent,web,socket,session,decorator,with,the,configured,link,get,send,time,limit,send,time,limit,and,link,get,send,buffer,size,limit,buffer,size,limit,param,session,the,original,code,web,socket,session,return,the,decorated,code,web,socket,session,or,potentially,the,given,session,as,is,since,4,3,13;protected,web,socket,session,decorate,session,web,socket,session,session,return,new,concurrent,web,socket,session,decorator,session,get,send,time,limit,get,send,buffer,size,limit
SubProtocolWebSocketHandler -> protected WebSocketSession decorateSession(WebSocketSession session);1534414082;Decorate the given {@link WebSocketSession}, if desired._<p>The default implementation builds a {@link ConcurrentWebSocketSessionDecorator}_with the configured {@link #getSendTimeLimit() send-time limit} and_{@link #getSendBufferSizeLimit() buffer-size limit}._@param session the original {@code WebSocketSession}_@return the decorated {@code WebSocketSession}, or potentially the given session as-is_@since 4.3.13;protected WebSocketSession decorateSession(WebSocketSession session) {_		return new ConcurrentWebSocketSessionDecorator(session, getSendTimeLimit(), getSendBufferSizeLimit())__	};decorate,the,given,link,web,socket,session,if,desired,p,the,default,implementation,builds,a,link,concurrent,web,socket,session,decorator,with,the,configured,link,get,send,time,limit,send,time,limit,and,link,get,send,buffer,size,limit,buffer,size,limit,param,session,the,original,code,web,socket,session,return,the,decorated,code,web,socket,session,or,potentially,the,given,session,as,is,since,4,3,13;protected,web,socket,session,decorate,session,web,socket,session,session,return,new,concurrent,web,socket,session,decorator,session,get,send,time,limit,get,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setTimeToFirstMessage(int timeToFirstMessage);1526479437;Set the maximum time allowed in milliseconds after the WebSocket_connection is established and before the first sub-protocol message is_received.__<p>This handler is for WebSocket connections that use a sub-protocol._Therefore, we expect the client to send at least one sub-protocol message_in the beginning, or else we assume the connection isn't doing well, e.g._proxy issue, slow network, and can be closed.__<p>By default this is set to {@code 60,000} (1 minute).__@param timeToFirstMessage the maximum time allowed in milliseconds_@since 5.1_@see #checkSessions();public void setTimeToFirstMessage(int timeToFirstMessage) {_		this.timeToFirstMessage = timeToFirstMessage__	};set,the,maximum,time,allowed,in,milliseconds,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,is,received,p,this,handler,is,for,web,socket,connections,that,use,a,sub,protocol,therefore,we,expect,the,client,to,send,at,least,one,sub,protocol,message,in,the,beginning,or,else,we,assume,the,connection,isn,t,doing,well,e,g,proxy,issue,slow,network,and,can,be,closed,p,by,default,this,is,set,to,code,60,000,1,minute,param,time,to,first,message,the,maximum,time,allowed,in,milliseconds,since,5,1,see,check,sessions;public,void,set,time,to,first,message,int,time,to,first,message,this,time,to,first,message,time,to,first,message
SubProtocolWebSocketHandler -> public void setTimeToFirstMessage(int timeToFirstMessage);1532520962;Set the maximum time allowed in milliseconds after the WebSocket connection_is established and before the first sub-protocol message is received._<p>This handler is for WebSocket connections that use a sub-protocol._Therefore, we expect the client to send at least one sub-protocol message_in the beginning, or else we assume the connection isn't doing well, e.g._proxy issue, slow network, and can be closed._<p>By default this is set to {@code 60,000} (1 minute)._@param timeToFirstMessage the maximum time allowed in milliseconds_@since 5.1_@see #checkSessions();public void setTimeToFirstMessage(int timeToFirstMessage) {_		this.timeToFirstMessage = timeToFirstMessage__	};set,the,maximum,time,allowed,in,milliseconds,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,is,received,p,this,handler,is,for,web,socket,connections,that,use,a,sub,protocol,therefore,we,expect,the,client,to,send,at,least,one,sub,protocol,message,in,the,beginning,or,else,we,assume,the,connection,isn,t,doing,well,e,g,proxy,issue,slow,network,and,can,be,closed,p,by,default,this,is,set,to,code,60,000,1,minute,param,time,to,first,message,the,maximum,time,allowed,in,milliseconds,since,5,1,see,check,sessions;public,void,set,time,to,first,message,int,time,to,first,message,this,time,to,first,message,time,to,first,message
SubProtocolWebSocketHandler -> public void setTimeToFirstMessage(int timeToFirstMessage);1534414082;Set the maximum time allowed in milliseconds after the WebSocket connection_is established and before the first sub-protocol message is received._<p>This handler is for WebSocket connections that use a sub-protocol._Therefore, we expect the client to send at least one sub-protocol message_in the beginning, or else we assume the connection isn't doing well, e.g._proxy issue, slow network, and can be closed._<p>By default this is set to {@code 60,000} (1 minute)._@param timeToFirstMessage the maximum time allowed in milliseconds_@since 5.1_@see #checkSessions();public void setTimeToFirstMessage(int timeToFirstMessage) {_		this.timeToFirstMessage = timeToFirstMessage__	};set,the,maximum,time,allowed,in,milliseconds,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,is,received,p,this,handler,is,for,web,socket,connections,that,use,a,sub,protocol,therefore,we,expect,the,client,to,send,at,least,one,sub,protocol,message,in,the,beginning,or,else,we,assume,the,connection,isn,t,doing,well,e,g,proxy,issue,slow,network,and,can,be,closed,p,by,default,this,is,set,to,code,60,000,1,minute,param,time,to,first,message,the,maximum,time,allowed,in,milliseconds,since,5,1,see,check,sessions;public,void,set,time,to,first,message,int,time,to,first,message,this,time,to,first,message,time,to,first,message
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1385420761;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1385507478;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1386004713;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1386087504;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1394485082;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1395379769;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1395543579;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1395550293;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1395703238;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1395707441;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1395965753;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1398144543;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1401465872;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1403791620;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlers.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handlers,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1403856366;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1404062102;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1404062121;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1404075624;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1404880787;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1404880799;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1411567635;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1411585497;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1413848647;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1415021127;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1426887927;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1439467224;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1449060733;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1449086872;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1450045625;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1450050966;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1462186904;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<String>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,string,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1467730834;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1496837955;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1498780456;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1500448076;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1506097334;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1508619774;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1516879480;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1518476695;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1521123475;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1526479437;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1532520962;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public List<String> getSubProtocols();1534414082;Return all supported protocols.;public List<String> getSubProtocols() {_		return new ArrayList<>(this.protocolHandlerLookup.keySet())__	};return,all,supported,protocols;public,list,string,get,sub,protocols,return,new,array,list,this,protocol,handler,lookup,key,set
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1386004713;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1386087504;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1394485082;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1395379769;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1395543579;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1395550293;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1395703238;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1395707441;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1395965753;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1398144543;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1401465872;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1403791620;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlers__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handlers
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1403856366;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1404062102;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1404062121;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1404075624;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1404880787;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1404880799;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1411567635;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1411585497;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1413848647;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1415021127;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1426887927;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1439467224;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1449060733;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1449086872;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1450045625;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1450050966;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1462186904;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1467730834;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1496837955;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1498780456;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1500448076;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1506097334;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1508619774;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1516879480;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1518476695;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1521123475;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1526479437;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1532520962;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> public Map<String, SubProtocolHandler> getProtocolHandlerMap();1534414082;Return the sub-protocols keyed by protocol name.;public Map<String, SubProtocolHandler> getProtocolHandlerMap() {_		return this.protocolHandlerLookup__	};return,the,sub,protocols,keyed,by,protocol,name;public,map,string,sub,protocol,handler,get,protocol,handler,map,return,this,protocol,handler,lookup
SubProtocolWebSocketHandler -> private void checkSessions();1508619774;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility for_sessions to hang. This method checks and closes any sessions that have been_connected for more than 60 seconds without having received a single message.;private void checkSessions() {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isErrorEnabled()) {_						logger.error("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isErrorEnabled()) {_							logger.error("Failure while closing " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,error,enabled,logger,error,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,error,enabled,logger,error,failure,while,closing,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions();1516879480;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility for_sessions to hang. This method checks and closes any sessions that have been_connected for more than 60 seconds without having received a single message.;private void checkSessions() {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isInfoEnabled()) {_						logger.info("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to close unreliable " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,info,enabled,logger,info,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,close,unreliable,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions();1518476695;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility for_sessions to hang. This method checks and closes any sessions that have been_connected for more than 60 seconds without having received a single message.;private void checkSessions() {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isInfoEnabled()) {_						logger.info("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to close unreliable " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,info,enabled,logger,info,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,close,unreliable,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions();1521123475;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility for_sessions to hang. This method checks and closes any sessions that have been_connected for more than 60 seconds without having received a single message.;private void checkSessions() {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < TIME_TO_FIRST_MESSAGE)) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < TIME_TO_FIRST_MESSAGE) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isInfoEnabled()) {_						logger.info("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to close unreliable " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,continue,web,socket,session,session,holder,get,session,if,logger,is,info,enabled,logger,info,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,close,unreliable,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions();1526479437;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility for_sessions to hang. This method checks and closes any sessions that have been_connected for more than 60 seconds without having received a single message.;private void checkSessions() {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < getTimeToFirstMessage())) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < getTimeToFirstMessage()) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isInfoEnabled()) {_						logger.info("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to close unreliable " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,get,time,to,first,message,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,get,time,to,first,message,continue,web,socket,session,session,holder,get,session,if,logger,is,info,enabled,logger,info,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,close,unreliable,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions();1532520962;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility for_sessions to hang. This method checks and closes any sessions that have been_connected for more than 60 seconds without having received a single message.;private void checkSessions() {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < getTimeToFirstMessage())) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < getTimeToFirstMessage()) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isInfoEnabled()) {_						logger.info("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to close unreliable " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,get,time,to,first,message,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,get,time,to,first,message,continue,web,socket,session,session,holder,get,session,if,logger,is,info,enabled,logger,info,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,close,unreliable,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> private void checkSessions();1534414082;When a session is connected through a higher-level protocol it has a chance_to use heartbeat management to shut down sessions that are too slow to send_or receive messages. However, after a WebSocketSession is established and_before the higher level protocol is fully connected there is a possibility for_sessions to hang. This method checks and closes any sessions that have been_connected for more than 60 seconds without having received a single message.;private void checkSessions() {_		long currentTime = System.currentTimeMillis()__		if (!isRunning() || (currentTime - this.lastSessionCheckTime < getTimeToFirstMessage())) {_			return__		}__		if (this.sessionCheckLock.tryLock()) {_			try {_				for (WebSocketSessionHolder holder : this.sessions.values()) {_					if (holder.hasHandledMessages()) {_						continue__					}_					long timeSinceCreated = currentTime - holder.getCreateTime()__					if (timeSinceCreated < getTimeToFirstMessage()) {_						continue__					}_					WebSocketSession session = holder.getSession()__					if (logger.isInfoEnabled()) {_						logger.info("No messages received after " + timeSinceCreated + " ms. " +_								"Closing " + holder.getSession() + ".")__					}_					try {_						this.stats.incrementNoMessagesReceivedCount()__						session.close(CloseStatus.SESSION_NOT_RELIABLE)__					}_					catch (Throwable ex) {_						if (logger.isWarnEnabled()) {_							logger.warn("Failed to close unreliable " + session, ex)__						}_					}_				}_			}_			finally {_				this.lastSessionCheckTime = currentTime__				this.sessionCheckLock.unlock()__			}_		}_	};when,a,session,is,connected,through,a,higher,level,protocol,it,has,a,chance,to,use,heartbeat,management,to,shut,down,sessions,that,are,too,slow,to,send,or,receive,messages,however,after,a,web,socket,session,is,established,and,before,the,higher,level,protocol,is,fully,connected,there,is,a,possibility,for,sessions,to,hang,this,method,checks,and,closes,any,sessions,that,have,been,connected,for,more,than,60,seconds,without,having,received,a,single,message;private,void,check,sessions,long,current,time,system,current,time,millis,if,is,running,current,time,this,last,session,check,time,get,time,to,first,message,return,if,this,session,check,lock,try,lock,try,for,web,socket,session,holder,holder,this,sessions,values,if,holder,has,handled,messages,continue,long,time,since,created,current,time,holder,get,create,time,if,time,since,created,get,time,to,first,message,continue,web,socket,session,session,holder,get,session,if,logger,is,info,enabled,logger,info,no,messages,received,after,time,since,created,ms,closing,holder,get,session,try,this,stats,increment,no,messages,received,count,session,close,close,status,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,failed,to,close,unreliable,session,ex,finally,this,last,session,check,time,current,time,this,session,check,lock,unlock
SubProtocolWebSocketHandler -> public int getTimeToFirstMessage();1526479437;Return the maximum time allowed after the WebSocket connection is_established and before the first sub-protocol message._@since 5.1;public int getTimeToFirstMessage() {_		return this.timeToFirstMessage__	};return,the,maximum,time,allowed,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,since,5,1;public,int,get,time,to,first,message,return,this,time,to,first,message
SubProtocolWebSocketHandler -> public int getTimeToFirstMessage();1532520962;Return the maximum time allowed after the WebSocket connection is_established and before the first sub-protocol message._@since 5.1;public int getTimeToFirstMessage() {_		return this.timeToFirstMessage__	};return,the,maximum,time,allowed,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,since,5,1;public,int,get,time,to,first,message,return,this,time,to,first,message
SubProtocolWebSocketHandler -> public int getTimeToFirstMessage();1534414082;Return the maximum time allowed after the WebSocket connection is_established and before the first sub-protocol message._@since 5.1;public int getTimeToFirstMessage() {_		return this.timeToFirstMessage__	};return,the,maximum,time,allowed,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,since,5,1;public,int,get,time,to,first,message,return,this,time,to,first,message
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1385258957;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1385420761;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1385507478;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1386004713;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1386087504;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1394485082;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1395379769;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1395543579;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1395550293;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1395703238;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1395707441;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {__		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}__		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}__		if (handler instanceof ApplicationEventPublisherAware) {_			((ApplicationEventPublisherAware) handler).setApplicationEventPublisher(this.eventPublisher)__		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced,if,handler,instanceof,application,event,publisher,aware,application,event,publisher,aware,handler,set,application,event,publisher,this,event,publisher
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1395965753;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {__		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}__		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}__		if (handler instanceof ApplicationEventPublisherAware) {_			((ApplicationEventPublisherAware) handler).setApplicationEventPublisher(this.eventPublisher)__		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced,if,handler,instanceof,application,event,publisher,aware,application,event,publisher,aware,handler,set,application,event,publisher,this,event,publisher
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1398144543;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {__		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}__		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}__		if (handler instanceof ApplicationEventPublisherAware) {_			((ApplicationEventPublisherAware) handler).setApplicationEventPublisher(this.eventPublisher)__		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced,if,handler,instanceof,application,event,publisher,aware,application,event,publisher,aware,handler,set,application,event,publisher,this,event,publisher
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1401465872;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {__		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}__		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1403791620;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {__		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.warn("No sub-protocols, ignoring handler " + handler)__			return__		}__		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlers.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Failed to map handler " + handler_						+ " to protocol '" + protocol + "', it is already mapped to handler " + replaced)__			}_		}_	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,warn,no,sub,protocols,ignoring,handler,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handlers,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,failed,to,map,handler,handler,to,protocol,protocol,it,is,already,mapped,to,handler,replaced
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1403856366;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1404062102;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1404062121;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1404075624;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1404880787;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1404880799;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1411567635;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1411585497;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1413848647;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1415021127;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1426887927;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1439467224;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1449060733;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1449086872;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1450045625;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			logger.error("No sub-protocols for " + handler + ".")__			return__		}_		for (String protocol: protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if ((replaced != null) && (replaced != handler) ) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1450050966;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1462186904;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1467730834;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1496837955;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1498780456;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1500448076;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1506097334;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1508619774;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Can't map " + handler +_						" to protocol '" + protocol + "'. Already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,can,t,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1516879480;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Cannot map " + handler +_						" to protocol '" + protocol + "': already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,cannot,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1518476695;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Cannot map " + handler +_						" to protocol '" + protocol + "': already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,cannot,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1521123475;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Cannot map " + handler +_						" to protocol '" + protocol + "': already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,cannot,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1526479437;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Cannot map " + handler +_						" to protocol '" + protocol + "': already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,cannot,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1532520962;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Cannot map " + handler +_						" to protocol '" + protocol + "': already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,cannot,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void addProtocolHandler(SubProtocolHandler handler);1534414082;Register a sub-protocol handler.;public void addProtocolHandler(SubProtocolHandler handler) {_		List<String> protocols = handler.getSupportedProtocols()__		if (CollectionUtils.isEmpty(protocols)) {_			if (logger.isErrorEnabled()) {_				logger.error("No sub-protocols for " + handler)__			}_			return__		}_		for (String protocol : protocols) {_			SubProtocolHandler replaced = this.protocolHandlerLookup.put(protocol, handler)__			if (replaced != null && replaced != handler) {_				throw new IllegalStateException("Cannot map " + handler +_						" to protocol '" + protocol + "': already mapped to " + replaced + ".")__			}_		}_		this.protocolHandlers.add(handler)__	};register,a,sub,protocol,handler;public,void,add,protocol,handler,sub,protocol,handler,handler,list,string,protocols,handler,get,supported,protocols,if,collection,utils,is,empty,protocols,if,logger,is,error,enabled,logger,error,no,sub,protocols,for,handler,return,for,string,protocol,protocols,sub,protocol,handler,replaced,this,protocol,handler,lookup,put,protocol,handler,if,replaced,null,replaced,handler,throw,new,illegal,state,exception,cannot,map,handler,to,protocol,protocol,already,mapped,to,replaced,this,protocol,handlers,add,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1500448076;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1506097334;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1508619774;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1516879480;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1518476695;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1521123475;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1526479437;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1532520962;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler);1534414082;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(@Nullable SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,nullable,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1449060733;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1449086872;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1450045625;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1450050966;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1462186904;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1467730834;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1496837955;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1498780456;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1500448076;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1506097334;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1508619774;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1516879480;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1518476695;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1521123475;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1526479437;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1532520962;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> public void setSendTimeLimit(int sendTimeLimit);1534414082;Specify the send-time limit (milliseconds)._@see ConcurrentWebSocketSessionDecorator;public void setSendTimeLimit(int sendTimeLimit) {_		this.sendTimeLimit = sendTimeLimit__	};specify,the,send,time,limit,milliseconds,see,concurrent,web,socket,session,decorator;public,void,set,send,time,limit,int,send,time,limit,this,send,time,limit,send,time,limit
SubProtocolWebSocketHandler -> protected final SubProtocolHandler findProtocolHandler(WebSocketSession session);1508619774;Find a {@link SubProtocolHandler} for the given session._@param session the {@code WebSocketSession} to find a handler for;protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {_		String protocol = null__		try {_			protocol = session.getAcceptedProtocol()__		}_		catch (Exception ex) {_			_			logger.error("Failed to obtain session.getAcceptedProtocol(). " +_					"Will use the default protocol handler (if configured).", ex)__		}__		SubProtocolHandler handler__		if (!StringUtils.isEmpty(protocol)) {_			handler = this.protocolHandlerLookup.get(protocol)__			if (handler == null) {_				throw new IllegalStateException(_						"No handler for '" + protocol + "' among " + this.protocolHandlerLookup)__			}_		}_		else {_			if (this.defaultProtocolHandler != null) {_				handler = this.defaultProtocolHandler__			}_			else if (this.protocolHandlers.size() == 1) {_				handler = this.protocolHandlers.iterator().next()__			}_			else {_				throw new IllegalStateException("Multiple protocol handlers configured and " +_						"no protocol was negotiated. Consider configuring a default SubProtocolHandler.")__			}_		}_		return handler__	};find,a,link,sub,protocol,handler,for,the,given,session,param,session,the,code,web,socket,session,to,find,a,handler,for;protected,final,sub,protocol,handler,find,protocol,handler,web,socket,session,session,string,protocol,null,try,protocol,session,get,accepted,protocol,catch,exception,ex,logger,error,failed,to,obtain,session,get,accepted,protocol,will,use,the,default,protocol,handler,if,configured,ex,sub,protocol,handler,handler,if,string,utils,is,empty,protocol,handler,this,protocol,handler,lookup,get,protocol,if,handler,null,throw,new,illegal,state,exception,no,handler,for,protocol,among,this,protocol,handler,lookup,else,if,this,default,protocol,handler,null,handler,this,default,protocol,handler,else,if,this,protocol,handlers,size,1,handler,this,protocol,handlers,iterator,next,else,throw,new,illegal,state,exception,multiple,protocol,handlers,configured,and,no,protocol,was,negotiated,consider,configuring,a,default,sub,protocol,handler,return,handler
SubProtocolWebSocketHandler -> protected final SubProtocolHandler findProtocolHandler(WebSocketSession session);1516879480;Find a {@link SubProtocolHandler} for the given session._@param session the {@code WebSocketSession} to find a handler for;protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {_		String protocol = null__		try {_			protocol = session.getAcceptedProtocol()__		}_		catch (Exception ex) {_			_			logger.error("Failed to obtain session.getAcceptedProtocol(): " +_					"will use the default protocol handler (if configured).", ex)__		}__		SubProtocolHandler handler__		if (!StringUtils.isEmpty(protocol)) {_			handler = this.protocolHandlerLookup.get(protocol)__			if (handler == null) {_				throw new IllegalStateException(_						"No handler for '" + protocol + "' among " + this.protocolHandlerLookup)__			}_		}_		else {_			if (this.defaultProtocolHandler != null) {_				handler = this.defaultProtocolHandler__			}_			else if (this.protocolHandlers.size() == 1) {_				handler = this.protocolHandlers.iterator().next()__			}_			else {_				throw new IllegalStateException("Multiple protocol handlers configured and " +_						"no protocol was negotiated. Consider configuring a default SubProtocolHandler.")__			}_		}_		return handler__	};find,a,link,sub,protocol,handler,for,the,given,session,param,session,the,code,web,socket,session,to,find,a,handler,for;protected,final,sub,protocol,handler,find,protocol,handler,web,socket,session,session,string,protocol,null,try,protocol,session,get,accepted,protocol,catch,exception,ex,logger,error,failed,to,obtain,session,get,accepted,protocol,will,use,the,default,protocol,handler,if,configured,ex,sub,protocol,handler,handler,if,string,utils,is,empty,protocol,handler,this,protocol,handler,lookup,get,protocol,if,handler,null,throw,new,illegal,state,exception,no,handler,for,protocol,among,this,protocol,handler,lookup,else,if,this,default,protocol,handler,null,handler,this,default,protocol,handler,else,if,this,protocol,handlers,size,1,handler,this,protocol,handlers,iterator,next,else,throw,new,illegal,state,exception,multiple,protocol,handlers,configured,and,no,protocol,was,negotiated,consider,configuring,a,default,sub,protocol,handler,return,handler
SubProtocolWebSocketHandler -> protected final SubProtocolHandler findProtocolHandler(WebSocketSession session);1518476695;Find a {@link SubProtocolHandler} for the given session._@param session the {@code WebSocketSession} to find a handler for;protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {_		String protocol = null__		try {_			protocol = session.getAcceptedProtocol()__		}_		catch (Exception ex) {_			_			logger.error("Failed to obtain session.getAcceptedProtocol(): " +_					"will use the default protocol handler (if configured).", ex)__		}__		SubProtocolHandler handler__		if (!StringUtils.isEmpty(protocol)) {_			handler = this.protocolHandlerLookup.get(protocol)__			if (handler == null) {_				throw new IllegalStateException(_						"No handler for '" + protocol + "' among " + this.protocolHandlerLookup)__			}_		}_		else {_			if (this.defaultProtocolHandler != null) {_				handler = this.defaultProtocolHandler__			}_			else if (this.protocolHandlers.size() == 1) {_				handler = this.protocolHandlers.iterator().next()__			}_			else {_				throw new IllegalStateException("Multiple protocol handlers configured and " +_						"no protocol was negotiated. Consider configuring a default SubProtocolHandler.")__			}_		}_		return handler__	};find,a,link,sub,protocol,handler,for,the,given,session,param,session,the,code,web,socket,session,to,find,a,handler,for;protected,final,sub,protocol,handler,find,protocol,handler,web,socket,session,session,string,protocol,null,try,protocol,session,get,accepted,protocol,catch,exception,ex,logger,error,failed,to,obtain,session,get,accepted,protocol,will,use,the,default,protocol,handler,if,configured,ex,sub,protocol,handler,handler,if,string,utils,is,empty,protocol,handler,this,protocol,handler,lookup,get,protocol,if,handler,null,throw,new,illegal,state,exception,no,handler,for,protocol,among,this,protocol,handler,lookup,else,if,this,default,protocol,handler,null,handler,this,default,protocol,handler,else,if,this,protocol,handlers,size,1,handler,this,protocol,handlers,iterator,next,else,throw,new,illegal,state,exception,multiple,protocol,handlers,configured,and,no,protocol,was,negotiated,consider,configuring,a,default,sub,protocol,handler,return,handler
SubProtocolWebSocketHandler -> protected final SubProtocolHandler findProtocolHandler(WebSocketSession session);1521123475;Find a {@link SubProtocolHandler} for the given session._@param session the {@code WebSocketSession} to find a handler for;protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {_		String protocol = null__		try {_			protocol = session.getAcceptedProtocol()__		}_		catch (Exception ex) {_			_			logger.error("Failed to obtain session.getAcceptedProtocol(): " +_					"will use the default protocol handler (if configured).", ex)__		}__		SubProtocolHandler handler__		if (!StringUtils.isEmpty(protocol)) {_			handler = this.protocolHandlerLookup.get(protocol)__			if (handler == null) {_				throw new IllegalStateException(_						"No handler for '" + protocol + "' among " + this.protocolHandlerLookup)__			}_		}_		else {_			if (this.defaultProtocolHandler != null) {_				handler = this.defaultProtocolHandler__			}_			else if (this.protocolHandlers.size() == 1) {_				handler = this.protocolHandlers.iterator().next()__			}_			else {_				throw new IllegalStateException("Multiple protocol handlers configured and " +_						"no protocol was negotiated. Consider configuring a default SubProtocolHandler.")__			}_		}_		return handler__	};find,a,link,sub,protocol,handler,for,the,given,session,param,session,the,code,web,socket,session,to,find,a,handler,for;protected,final,sub,protocol,handler,find,protocol,handler,web,socket,session,session,string,protocol,null,try,protocol,session,get,accepted,protocol,catch,exception,ex,logger,error,failed,to,obtain,session,get,accepted,protocol,will,use,the,default,protocol,handler,if,configured,ex,sub,protocol,handler,handler,if,string,utils,is,empty,protocol,handler,this,protocol,handler,lookup,get,protocol,if,handler,null,throw,new,illegal,state,exception,no,handler,for,protocol,among,this,protocol,handler,lookup,else,if,this,default,protocol,handler,null,handler,this,default,protocol,handler,else,if,this,protocol,handlers,size,1,handler,this,protocol,handlers,iterator,next,else,throw,new,illegal,state,exception,multiple,protocol,handlers,configured,and,no,protocol,was,negotiated,consider,configuring,a,default,sub,protocol,handler,return,handler
SubProtocolWebSocketHandler -> protected final SubProtocolHandler findProtocolHandler(WebSocketSession session);1526479437;Find a {@link SubProtocolHandler} for the given session._@param session the {@code WebSocketSession} to find a handler for;protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {_		String protocol = null__		try {_			protocol = session.getAcceptedProtocol()__		}_		catch (Exception ex) {_			_			logger.error("Failed to obtain session.getAcceptedProtocol(): " +_					"will use the default protocol handler (if configured).", ex)__		}__		SubProtocolHandler handler__		if (!StringUtils.isEmpty(protocol)) {_			handler = this.protocolHandlerLookup.get(protocol)__			if (handler == null) {_				throw new IllegalStateException(_						"No handler for '" + protocol + "' among " + this.protocolHandlerLookup)__			}_		}_		else {_			if (this.defaultProtocolHandler != null) {_				handler = this.defaultProtocolHandler__			}_			else if (this.protocolHandlers.size() == 1) {_				handler = this.protocolHandlers.iterator().next()__			}_			else {_				throw new IllegalStateException("Multiple protocol handlers configured and " +_						"no protocol was negotiated. Consider configuring a default SubProtocolHandler.")__			}_		}_		return handler__	};find,a,link,sub,protocol,handler,for,the,given,session,param,session,the,code,web,socket,session,to,find,a,handler,for;protected,final,sub,protocol,handler,find,protocol,handler,web,socket,session,session,string,protocol,null,try,protocol,session,get,accepted,protocol,catch,exception,ex,logger,error,failed,to,obtain,session,get,accepted,protocol,will,use,the,default,protocol,handler,if,configured,ex,sub,protocol,handler,handler,if,string,utils,is,empty,protocol,handler,this,protocol,handler,lookup,get,protocol,if,handler,null,throw,new,illegal,state,exception,no,handler,for,protocol,among,this,protocol,handler,lookup,else,if,this,default,protocol,handler,null,handler,this,default,protocol,handler,else,if,this,protocol,handlers,size,1,handler,this,protocol,handlers,iterator,next,else,throw,new,illegal,state,exception,multiple,protocol,handlers,configured,and,no,protocol,was,negotiated,consider,configuring,a,default,sub,protocol,handler,return,handler
SubProtocolWebSocketHandler -> protected final SubProtocolHandler findProtocolHandler(WebSocketSession session);1532520962;Find a {@link SubProtocolHandler} for the given session._@param session the {@code WebSocketSession} to find a handler for;protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {_		String protocol = null__		try {_			protocol = session.getAcceptedProtocol()__		}_		catch (Exception ex) {_			_			logger.error("Failed to obtain session.getAcceptedProtocol(): " +_					"will use the default protocol handler (if configured).", ex)__		}__		SubProtocolHandler handler__		if (!StringUtils.isEmpty(protocol)) {_			handler = this.protocolHandlerLookup.get(protocol)__			if (handler == null) {_				throw new IllegalStateException(_						"No handler for '" + protocol + "' among " + this.protocolHandlerLookup)__			}_		}_		else {_			if (this.defaultProtocolHandler != null) {_				handler = this.defaultProtocolHandler__			}_			else if (this.protocolHandlers.size() == 1) {_				handler = this.protocolHandlers.iterator().next()__			}_			else {_				throw new IllegalStateException("Multiple protocol handlers configured and " +_						"no protocol was negotiated. Consider configuring a default SubProtocolHandler.")__			}_		}_		return handler__	};find,a,link,sub,protocol,handler,for,the,given,session,param,session,the,code,web,socket,session,to,find,a,handler,for;protected,final,sub,protocol,handler,find,protocol,handler,web,socket,session,session,string,protocol,null,try,protocol,session,get,accepted,protocol,catch,exception,ex,logger,error,failed,to,obtain,session,get,accepted,protocol,will,use,the,default,protocol,handler,if,configured,ex,sub,protocol,handler,handler,if,string,utils,is,empty,protocol,handler,this,protocol,handler,lookup,get,protocol,if,handler,null,throw,new,illegal,state,exception,no,handler,for,protocol,among,this,protocol,handler,lookup,else,if,this,default,protocol,handler,null,handler,this,default,protocol,handler,else,if,this,protocol,handlers,size,1,handler,this,protocol,handlers,iterator,next,else,throw,new,illegal,state,exception,multiple,protocol,handlers,configured,and,no,protocol,was,negotiated,consider,configuring,a,default,sub,protocol,handler,return,handler
SubProtocolWebSocketHandler -> protected final SubProtocolHandler findProtocolHandler(WebSocketSession session);1534414082;Find a {@link SubProtocolHandler} for the given session._@param session the {@code WebSocketSession} to find a handler for;protected final SubProtocolHandler findProtocolHandler(WebSocketSession session) {_		String protocol = null__		try {_			protocol = session.getAcceptedProtocol()__		}_		catch (Exception ex) {_			_			logger.error("Failed to obtain session.getAcceptedProtocol(): " +_					"will use the default protocol handler (if configured).", ex)__		}__		SubProtocolHandler handler__		if (!StringUtils.isEmpty(protocol)) {_			handler = this.protocolHandlerLookup.get(protocol)__			if (handler == null) {_				throw new IllegalStateException(_						"No handler for '" + protocol + "' among " + this.protocolHandlerLookup)__			}_		}_		else {_			if (this.defaultProtocolHandler != null) {_				handler = this.defaultProtocolHandler__			}_			else if (this.protocolHandlers.size() == 1) {_				handler = this.protocolHandlers.iterator().next()__			}_			else {_				throw new IllegalStateException("Multiple protocol handlers configured and " +_						"no protocol was negotiated. Consider configuring a default SubProtocolHandler.")__			}_		}_		return handler__	};find,a,link,sub,protocol,handler,for,the,given,session,param,session,the,code,web,socket,session,to,find,a,handler,for;protected,final,sub,protocol,handler,find,protocol,handler,web,socket,session,session,string,protocol,null,try,protocol,session,get,accepted,protocol,catch,exception,ex,logger,error,failed,to,obtain,session,get,accepted,protocol,will,use,the,default,protocol,handler,if,configured,ex,sub,protocol,handler,handler,if,string,utils,is,empty,protocol,handler,this,protocol,handler,lookup,get,protocol,if,handler,null,throw,new,illegal,state,exception,no,handler,for,protocol,among,this,protocol,handler,lookup,else,if,this,default,protocol,handler,null,handler,this,default,protocol,handler,else,if,this,protocol,handlers,size,1,handler,this,protocol,handlers,iterator,next,else,throw,new,illegal,state,exception,multiple,protocol,handlers,configured,and,no,protocol,was,negotiated,consider,configuring,a,default,sub,protocol,handler,return,handler
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1449060733;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1449086872;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1450045625;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1450050966;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1462186904;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1467730834;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1496837955;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1498780456;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1500448076;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1506097334;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1508619774;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1516879480;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1518476695;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1521123475;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1526479437;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1532520962;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> public int getSendTimeLimit();1534414082;Return the send-time limit (milliseconds).;public int getSendTimeLimit() {_		return this.sendTimeLimit__	};return,the,send,time,limit,milliseconds;public,int,get,send,time,limit,return,this,send,time,limit
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1403856366;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		else {_			_			throw new IllegalStateException("Session not found: " + session)__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,else,throw,new,illegal,state,exception,session,not,found,session,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1404062102;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		else {_			_			throw new IllegalStateException("Session not found: " + session)__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,else,throw,new,illegal,state,exception,session,not,found,session,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1404062121;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		else {_			_			throw new IllegalStateException("Session not found: " + session)__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,else,throw,new,illegal,state,exception,session,not,found,session,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1404075624;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1404880787;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1404880799;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1411567635;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1411585497;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1413848647;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1415021127;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1426887927;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1439467224;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1449060733;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1449086872;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1450045625;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1450050966;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1462186904;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1467730834;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1496837955;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1498780456;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1500448076;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1506097334;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1508619774;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1516879480;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1518476695;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1521123475;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1526479437;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1532520962;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception;1534414082;Handle an inbound message from a WebSocket client.;@Override_	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {_		WebSocketSessionHolder holder = this.sessions.get(session.getId())__		if (holder != null) {_			session = holder.getSession()__		}_		SubProtocolHandler protocolHandler = findProtocolHandler(session)__		protocolHandler.handleMessageFromClient(session, message, this.clientInboundChannel)__		if (holder != null) {_			holder.setHasHandledMessages()__		}_		checkSessions()__	};handle,an,inbound,message,from,a,web,socket,client;override,public,void,handle,message,web,socket,session,session,web,socket,message,message,throws,exception,web,socket,session,holder,holder,this,sessions,get,session,get,id,if,holder,null,session,holder,get,session,sub,protocol,handler,protocol,handler,find,protocol,handler,session,protocol,handler,handle,message,from,client,session,message,this,client,inbound,channel,if,holder,null,holder,set,has,handled,messages,check,sessions
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1403856366;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			logger.error("No session for " + message)__			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				logger.error("Terminating '" + session + "'", ex)__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.error("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			logger.error("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,logger,error,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,logger,error,terminating,session,ex,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,error,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,error,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1404062102;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			logger.error("No session for " + message)__			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				logger.error("Terminating '" + session + "'", ex)__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.error("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			logger.error("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,logger,error,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,logger,error,terminating,session,ex,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,error,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,error,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1404062121;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			logger.error("No session for " + message)__			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				logger.error("Terminating '" + session + "'", ex)__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.error("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			logger.error("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,logger,error,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,logger,error,terminating,session,ex,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,error,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,error,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1404075624;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			logger.error("No session for " + message)__			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				logger.error("Terminating '" + session + "'", ex)__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.error("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			logger.error("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,logger,error,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,logger,error,terminating,session,ex,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,error,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,error,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1404880787;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			logger.error("No session for " + message)__			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				logger.error("Terminating '" + session + "'", ex)__				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.error("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			logger.error("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,logger,error,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,logger,error,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,error,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,error,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1404880799;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			logger.error("No session for " + message)__			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				logger.error("Terminating '" + session + "'", ex)__				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.error("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			logger.error("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,logger,error,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,logger,error,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,error,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,error,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1411567635;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			logger.error("No session for " + message)__			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,logger,error,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1411585497;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1413848647;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1415021127;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1426887927;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1439467224;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1449060733;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1449086872;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1450045625;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			logger.error("Couldn't find sessionId in " + message)__			return__		}_		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}_		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception e) {_			_			logger.debug("Failed to send message to client in " + session + ": " + message, e)__		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,e,logger,debug,failed,to,send,message,to,client,in,session,message,e
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1450050966;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Couldn't find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1462186904;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Couldn't find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1467730834;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Couldn't find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1496837955;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Couldn't find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1498780456;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Couldn't find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1500448076;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Couldn't find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1506097334;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Couldn't find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1508619774;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Couldn't find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,couldn,t,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1516879480;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,could,not,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1518476695;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,could,not,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1521123475;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,could,not,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1526479437;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,could,not,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1532520962;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,could,not,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> @Override 	public void handleMessage(Message<?> message) throws MessagingException;1534414082;Handle an outbound Spring Message to a WebSocket client.;@Override_	public void handleMessage(Message<?> message) throws MessagingException {_		String sessionId = resolveSessionId(message)__		if (sessionId == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Could not find session id in " + message)__			}_			return__		}__		WebSocketSessionHolder holder = this.sessions.get(sessionId)__		if (holder == null) {_			if (logger.isDebugEnabled()) {_				_				logger.debug("No session for " + message)__			}_			return__		}__		WebSocketSession session = holder.getSession()__		try {_			findProtocolHandler(session).handleMessageToClient(session, message)__		}_		catch (SessionLimitExceededException ex) {_			try {_				if (logger.isDebugEnabled()) {_					logger.debug("Terminating '" + session + "'", ex)__				}_				this.stats.incrementLimitExceededCount()__				clearSession(session, ex.getStatus())_ _				session.close(ex.getStatus())__			}_			catch (Exception secondException) {_				logger.debug("Failure while closing session " + sessionId + ".", secondException)__			}_		}_		catch (Exception ex) {_			_			if (logger.isDebugEnabled()) {_				logger.debug("Failed to send message to client in " + session + ": " + message, ex)__			}_		}_	};handle,an,outbound,spring,message,to,a,web,socket,client;override,public,void,handle,message,message,message,throws,messaging,exception,string,session,id,resolve,session,id,message,if,session,id,null,if,logger,is,error,enabled,logger,error,could,not,find,session,id,in,message,return,web,socket,session,holder,holder,this,sessions,get,session,id,if,holder,null,if,logger,is,debug,enabled,logger,debug,no,session,for,message,return,web,socket,session,session,holder,get,session,try,find,protocol,handler,session,handle,message,to,client,session,message,catch,session,limit,exceeded,exception,ex,try,if,logger,is,debug,enabled,logger,debug,terminating,session,ex,this,stats,increment,limit,exceeded,count,clear,session,session,ex,get,status,session,close,ex,get,status,catch,exception,second,exception,logger,debug,failure,while,closing,session,session,id,second,exception,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,failed,to,send,message,to,client,in,session,message,ex
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1385258957;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol.__@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1385420761;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol.__@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1385507478;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1386004713;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1386087504;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1394485082;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1395379769;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1395543579;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1395550293;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1395703238;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1395707441;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1395965753;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1398144543;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1401465872;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1403791620;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlers.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handlers,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1403856366;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1404062102;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1404062121;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1404075624;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1404880787;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1404880799;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1411567635;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1411585497;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1413848647;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1415021127;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1426887927;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1439467224;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1449060733;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1449086872;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Arrays.asList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,arrays,as,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1450045625;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1450050966;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1462186904;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1467730834;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1496837955;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler);1498780456;Set the {@link SubProtocolHandler} to use when the client did not request a_sub-protocol._@param defaultProtocolHandler the default handler;public void setDefaultProtocolHandler(SubProtocolHandler defaultProtocolHandler) {_		this.defaultProtocolHandler = defaultProtocolHandler__		if (this.protocolHandlerLookup.isEmpty()) {_			setProtocolHandlers(Collections.singletonList(defaultProtocolHandler))__		}_	};set,the,link,sub,protocol,handler,to,use,when,the,client,did,not,request,a,sub,protocol,param,default,protocol,handler,the,default,handler;public,void,set,default,protocol,handler,sub,protocol,handler,default,protocol,handler,this,default,protocol,handler,default,protocol,handler,if,this,protocol,handler,lookup,is,empty,set,protocol,handlers,collections,singleton,list,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1496837955;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1498780456;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1500448076;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1506097334;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1508619774;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1516879480;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1518476695;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1521123475;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1526479437;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1532520962;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> @Nullable 	public SubProtocolHandler getDefaultProtocolHandler();1534414082;Return the default sub-protocol handler to use.;@Nullable_	public SubProtocolHandler getDefaultProtocolHandler() {_		return this.defaultProtocolHandler__	};return,the,default,sub,protocol,handler,to,use;nullable,public,sub,protocol,handler,get,default,protocol,handler,return,this,default,protocol,handler
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1449060733;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1449086872;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1450045625;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1450050966;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1462186904;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1467730834;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1496837955;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1498780456;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1500448076;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1506097334;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1508619774;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1516879480;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1518476695;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1521123475;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1526479437;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1532520962;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
SubProtocolWebSocketHandler -> public void setSendBufferSizeLimit(int sendBufferSizeLimit);1534414082;Specify the buffer-size limit (number of bytes)._@see ConcurrentWebSocketSessionDecorator;public void setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__	};specify,the,buffer,size,limit,number,of,bytes,see,concurrent,web,socket,session,decorator;public,void,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit
