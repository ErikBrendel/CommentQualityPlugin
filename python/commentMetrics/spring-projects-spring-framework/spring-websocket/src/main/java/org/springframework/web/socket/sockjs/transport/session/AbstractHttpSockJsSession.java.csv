# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1421092089;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1421162819;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1430734105;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1437512314;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1463913402;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1467726769;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1467730834;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1477690459;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1496837955;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1498780456;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1500495740;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1504882582;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, 			boolean initialRequest) throws IOException_;1520529117;Invoked when a SockJS transport request is received._@param request the current request_@param response the current response_@param initialRequest whether it is the first request for the session;protected abstract void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response,_			boolean initialRequest) throws IOException_;invoked,when,a,sock,js,transport,request,is,received,param,request,the,current,request,param,response,the,current,response,param,initial,request,whether,it,is,the,first,request,for,the,session;protected,abstract,void,handle,request,internal,server,http,request,request,server,http,response,response,boolean,initial,request,throws,ioexception
AbstractHttpSockJsSession -> @Deprecated 	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException;1421162819;@deprecated as of 4.2 this method is deprecated since the prelude is written_in {@link #handleRequestInternal} of the StreamingSockJsSession subclass.;@Deprecated_	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException {_	};deprecated,as,of,4,2,this,method,is,deprecated,since,the,prelude,is,written,in,link,handle,request,internal,of,the,streaming,sock,js,session,subclass;deprecated,protected,void,write,prelude,server,http,request,request,server,http,response,response,throws,ioexception
AbstractHttpSockJsSession -> @Deprecated 	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException;1430734105;@deprecated as of 4.2 this method is deprecated since the prelude is written_in {@link #handleRequestInternal} of the StreamingSockJsSession subclass.;@Deprecated_	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException {_	};deprecated,as,of,4,2,this,method,is,deprecated,since,the,prelude,is,written,in,link,handle,request,internal,of,the,streaming,sock,js,session,subclass;deprecated,protected,void,write,prelude,server,http,request,request,server,http,response,response,throws,ioexception
AbstractHttpSockJsSession -> @Deprecated 	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException;1437512314;@deprecated as of 4.2 this method is deprecated since the prelude is written_in {@link #handleRequestInternal} of the StreamingSockJsSession subclass.;@Deprecated_	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException {_	};deprecated,as,of,4,2,this,method,is,deprecated,since,the,prelude,is,written,in,link,handle,request,internal,of,the,streaming,sock,js,session,subclass;deprecated,protected,void,write,prelude,server,http,request,request,server,http,response,response,throws,ioexception
AbstractHttpSockJsSession -> @Deprecated 	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException;1463913402;@deprecated as of 4.2 this method is deprecated since the prelude is written_in {@link #handleRequestInternal} of the StreamingSockJsSession subclass.;@Deprecated_	protected void writePrelude(ServerHttpRequest request, ServerHttpResponse response) throws IOException {_	};deprecated,as,of,4,2,this,method,is,deprecated,since,the,prelude,is,written,in,link,handle,request,internal,of,the,streaming,sock,js,session,subclass;deprecated,protected,void,write,prelude,server,http,request,request,server,http,response,response,throws,ioexception
AbstractHttpSockJsSession -> protected ServerHttpResponse getResponse();1395550899;Return response for the current request, or {@code null} if between requests.;protected ServerHttpResponse getResponse() {_		return this.response__	};return,response,for,the,current,request,or,code,null,if,between,requests;protected,server,http,response,get,response,return,this,response
AbstractHttpSockJsSession -> protected ServerHttpResponse getResponse();1395721625;Return response for the current request, or {@code null} if between requests.;protected ServerHttpResponse getResponse() {_		return this.response__	};return,response,for,the,current,request,or,code,null,if,between,requests;protected,server,http,response,get,response,return,this,response
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1375321376;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.protocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1375470740;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.protocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1375542207;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.protocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1375543262;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.protocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1376429280;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.protocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1376429281;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1377218103;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1380503379;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1383014491;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1383071981;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1385507478;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1386021191;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1386462352;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1389893234;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1395246308;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1395543588;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1395550899;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1395721625;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1403719829;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1403856366;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1404323603;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1408740957;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1411567635;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1417986640;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1421092089;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1421162819;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1430734105;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1437512314;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1463913402;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1467726769;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1467730834;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1477690459;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1496837955;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public String getAcceptedProtocol();1498780456;Return the selected sub-protocol to use.;public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1395543588;Handle the first HTTP request, i.e. the one that starts a SockJS session._Write a prelude to the response (if needed), send the SockJS "open" frame_to indicate to the client the session is opened, and invoke the_delegate WebSocketHandler to provide it with the newly opened session._<p>_The "xhr" and "jsonp" (polling-based) transports completes the initial request_as soon as the open frame is sent. Following that the client should start a_successive polling request within the same SockJS session._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the initial request open in order to stream one or_more messages. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleSuccessiveRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)___		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		try {_			writePrelude(request, response)__			writeFrame(SockJsFrame.openFrame())__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}__		try {_			this.requestInitialized = true__			delegateConnectionEstablished()__		}_		catch (Throwable ex) {_			throw new SockJsException("Unhandled exception from WebSocketHandler", getId(), ex)__		}_	};handle,the,first,http,request,i,e,the,one,that,starts,a,sock,js,session,write,a,prelude,to,the,response,if,needed,send,the,sock,js,open,frame,to,indicate,to,the,client,the,session,is,opened,and,invoke,the,delegate,web,socket,handler,to,provide,it,with,the,newly,opened,session,p,the,xhr,and,jsonp,polling,based,transports,completes,the,initial,request,as,soon,as,the,open,frame,is,sent,following,that,the,client,should,start,a,successive,polling,request,within,the,same,sock,js,session,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,initial,request,open,in,order,to,stream,one,or,more,messages,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,successive,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,try,write,prelude,request,response,write,frame,sock,js,frame,open,frame,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,try,this,request,initialized,true,delegate,connection,established,catch,throwable,ex,throw,new,sock,js,exception,unhandled,exception,from,web,socket,handler,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1395550899;Handle the first HTTP request, i.e. the one that starts a SockJS session._Write a prelude to the response (if needed), send the SockJS "open" frame_to indicate to the client the session is opened, and invoke the_delegate WebSocketHandler to provide it with the newly opened session._<p>_The "xhr" and "jsonp" (polling-based) transports completes the initial request_as soon as the open frame is sent. Following that the client should start a_successive polling request within the same SockJS session._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the initial request open in order to stream one or_more messages. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleSuccessiveRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)___		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		try {_			writePrelude(request, response)__			writeFrame(SockJsFrame.openFrame())__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}__		try {_			this.requestInitialized = true__			delegateConnectionEstablished()__		}_		catch (Throwable ex) {_			throw new SockJsException("Unhandled exception from WebSocketHandler", getId(), ex)__		}_	};handle,the,first,http,request,i,e,the,one,that,starts,a,sock,js,session,write,a,prelude,to,the,response,if,needed,send,the,sock,js,open,frame,to,indicate,to,the,client,the,session,is,opened,and,invoke,the,delegate,web,socket,handler,to,provide,it,with,the,newly,opened,session,p,the,xhr,and,jsonp,polling,based,transports,completes,the,initial,request,as,soon,as,the,open,frame,is,sent,following,that,the,client,should,start,a,successive,polling,request,within,the,same,sock,js,session,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,initial,request,open,in,order,to,stream,one,or,more,messages,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,successive,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,try,write,prelude,request,response,write,frame,sock,js,frame,open,frame,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,try,this,request,initialized,true,delegate,connection,established,catch,throwable,ex,throw,new,sock,js,exception,unhandled,exception,from,web,socket,handler,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1395721625;Handle the first HTTP request, i.e. the one that starts a SockJS session._Write a prelude to the response (if needed), send the SockJS "open" frame_to indicate to the client the session is opened, and invoke the_delegate WebSocketHandler to provide it with the newly opened session._<p>_The "xhr" and "jsonp" (polling-based) transports completes the initial request_as soon as the open frame is sent. Following that the client should start a_successive polling request within the same SockJS session._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the initial request open in order to stream one or_more messages. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleSuccessiveRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)___		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		try {_			writePrelude(request, response)__			writeFrame(SockJsFrame.openFrame())__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}__		try {_			this.requestInitialized = true__			delegateConnectionEstablished()__		}_		catch (Throwable ex) {_			throw new SockJsException("Unhandled exception from WebSocketHandler", getId(), ex)__		}_	};handle,the,first,http,request,i,e,the,one,that,starts,a,sock,js,session,write,a,prelude,to,the,response,if,needed,send,the,sock,js,open,frame,to,indicate,to,the,client,the,session,is,opened,and,invoke,the,delegate,web,socket,handler,to,provide,it,with,the,newly,opened,session,p,the,xhr,and,jsonp,polling,based,transports,completes,the,initial,request,as,soon,as,the,open,frame,is,sent,following,that,the,client,should,start,a,successive,polling,request,within,the,same,sock,js,session,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,initial,request,open,in,order,to,stream,one,or,more,messages,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,successive,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,try,write,prelude,request,response,write,frame,sock,js,frame,open,frame,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,try,this,request,initialized,true,delegate,connection,established,catch,throwable,ex,throw,new,sock,js,exception,unhandled,exception,from,web,socket,handler,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1403719829;Handle the first request for receiving messages on a SockJS HTTP transport_based session.__<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		this.response = response__		this.frameFormat = frameFormat__		this.asyncRequestControl = request.getAsyncRequestControl(response)___		try {_			_			delegateConnectionEstablished()__			writePrelude(request, response)__			writeFrame(SockJsFrame.openFrame())__			if (isStreaming() && !isClosed()) {_				startAsyncRequest()__			}_		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,try,delegate,connection,established,write,prelude,request,response,write,frame,sock,js,frame,open,frame,if,is,streaming,is,closed,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1403856366;Handle the first request for receiving messages on a SockJS HTTP transport_based session.__<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		this.response = response__		this.frameFormat = frameFormat__		this.asyncRequestControl = request.getAsyncRequestControl(response)___		try {_			_			delegateConnectionEstablished()__			writePrelude(request, response)__			writeFrame(SockJsFrame.openFrame())__			if (isStreaming() && !isClosed()) {_				startAsyncRequest()__			}_		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,try,delegate,connection,established,write,prelude,request,response,write,frame,sock,js,frame,open,frame,if,is,streaming,is,closed,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1404323603;Handle the first request for receiving messages on a SockJS HTTP transport_based session.__<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		this.response = response__		this.frameFormat = frameFormat__		this.asyncRequestControl = request.getAsyncRequestControl(response)___		synchronized (this.responseLock) {_			try {_				_				delegateConnectionEstablished()__				writePrelude(request, response)__				writeFrame(SockJsFrame.openFrame())__				if (isStreaming() && !isClosed()) {_					startAsyncRequest()__				}_			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,synchronized,this,response,lock,try,delegate,connection,established,write,prelude,request,response,write,frame,sock,js,frame,open,frame,if,is,streaming,is,closed,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1408740957;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		this.response = response__		this.frameFormat = frameFormat__		this.asyncRequestControl = request.getAsyncRequestControl(response)___		synchronized (this.responseLock) {_			try {_				_				delegateConnectionEstablished()__				writePrelude(request, response)__				writeFrame(SockJsFrame.openFrame())__				if (isStreaming() && !isClosed()) {_					startAsyncRequest()__				}_			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,synchronized,this,response,lock,try,delegate,connection,established,write,prelude,request,response,write,frame,sock,js,frame,open,frame,if,is,streaming,is,closed,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1411567635;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		this.response = response__		this.frameFormat = frameFormat__		this.asyncRequestControl = request.getAsyncRequestControl(response)___		synchronized (this.responseLock) {_			try {_				_				delegateConnectionEstablished()__				writePrelude(request, response)__				writeFrame(SockJsFrame.openFrame())__				if (isStreaming() && !isClosed()) {_					startAsyncRequest()__				}_			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,synchronized,this,response,lock,try,delegate,connection,established,write,prelude,request,response,write,frame,sock,js,frame,open,frame,if,is,streaming,is,closed,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1417986640;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				_				delegateConnectionEstablished()___				if (isStreaming()) {_					writePrelude(request, response)__					writeFrame(SockJsFrame.openFrame())__					flushCache()__					this.readyToSend = true__				}_				else {_					writeFrame(SockJsFrame.openFrame())__				}_			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,delegate,connection,established,if,is,streaming,write,prelude,request,response,write,frame,sock,js,frame,open,frame,flush,cache,this,ready,to,send,true,else,write,frame,sock,js,frame,open,frame,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1421092089;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				_				delegateConnectionEstablished()___				handleRequestInternal(request, response, true)___				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1421162819;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				_				delegateConnectionEstablished()___				handleRequestInternal(request, response, true)___				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1430734105;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				_				delegateConnectionEstablished()___				handleRequestInternal(request, response, true)___				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1437512314;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				_				delegateConnectionEstablished()___				handleRequestInternal(request, response, true)___				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1463913402;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				_				delegateConnectionEstablished()___				handleRequestInternal(request, response, true)___				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1467726769;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				_				delegateConnectionEstablished()___				handleRequestInternal(request, response, true)___				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1467730834;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				_				delegateConnectionEstablished()___				handleRequestInternal(request, response, true)___				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1477690459;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)__				disableShallowEtagHeaderFilter(request)__				_				delegateConnectionEstablished()__				handleRequestInternal(request, response, true)__				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1496837955;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)__				disableShallowEtagHeaderFilter(request)__				_				delegateConnectionEstablished()__				handleRequestInternal(request, response, true)__				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1498780456;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				ServerHttpAsyncRequestControl control = request.getAsyncRequestControl(response)__				this.asyncRequestControl = control__				control.start(-1)__				disableShallowEtagHeaderFilter(request)__				_				delegateConnectionEstablished()__				handleRequestInternal(request, response, true)__				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,server,http,async,request,control,control,request,get,async,request,control,response,this,async,request,control,control,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1500495740;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				ServerHttpAsyncRequestControl control = request.getAsyncRequestControl(response)__				this.asyncRequestControl = control__				control.start(-1)__				disableShallowEtagHeaderFilter(request)__				_				delegateConnectionEstablished()__				handleRequestInternal(request, response, true)__				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,server,http,async,request,control,control,request,get,async,request,control,response,this,async,request,control,control,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1504882582;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				ServerHttpAsyncRequestControl control = request.getAsyncRequestControl(response)__				this.asyncRequestControl = control__				control.start(-1)__				disableShallowEtagHeaderFilter(request)__				_				delegateConnectionEstablished()__				handleRequestInternal(request, response, true)__				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,server,http,async,request,control,control,request,get,async,request,control,response,this,async,request,control,control,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1520529117;Handle the first request for receiving messages on a SockJS HTTP transport_based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing the open frame. Streaming-based transports ("xhr_streaming",_"eventsource", and "htmlfile") leave the response open longer for further_streaming of message frames but will also close it eventually after some_amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		try {_			this.localAddress = request.getLocalAddress()__		}_		catch (Exception ex) {_			_		}_		try {_			this.remoteAddress = request.getRemoteAddress()__		}_		catch (Exception ex) {_			_		}__		synchronized (this.responseLock) {_			try {_				this.response = response__				this.frameFormat = frameFormat__				ServerHttpAsyncRequestControl control = request.getAsyncRequestControl(response)__				this.asyncRequestControl = control__				control.start(-1)__				disableShallowEtagHeaderFilter(request)__				_				delegateConnectionEstablished()__				handleRequestInternal(request, response, true)__				_				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to open session", getId(), ex)__			}_		}_	};handle,the,first,request,for,receiving,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,the,open,frame,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,try,this,local,address,request,get,local,address,catch,exception,ex,try,this,remote,address,request,get,remote,address,catch,exception,ex,synchronized,this,response,lock,try,this,response,response,this,frame,format,frame,format,server,http,async,request,control,control,request,get,async,request,control,response,this,async,request,control,control,control,start,1,disable,shallow,etag,header,filter,request,delegate,connection,established,handle,request,internal,request,response,true,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,open,session,get,id,ex
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1375542207;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1375543262;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1376429280;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1376429281;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1377218103;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1380503379;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1383014491;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1383071981;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1385507478;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1386021191;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1386462352;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1389893234;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1395246308;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1395543588;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1395550899;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1395721625;Only called if the connection is currently active;protected abstract void flushCache() throws SockJsTransportFailureException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1403719829;Called when the connection is active and ready to write to the response._Sub-classes should implement but never call this method directly.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,sub,classes,should,implement,but,never,call,this,method,directly;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1403856366;Called when the connection is active and ready to write to the response._Sub-classes should implement but never call this method directly.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,sub,classes,should,implement,but,never,call,this,method,directly;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1404323603;Called when the connection is active and ready to write to the response._Sub-classes should implement but never call this method directly.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,sub,classes,should,implement,but,never,call,this,method,directly;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1408740957;Called when the connection is active and ready to write to the response._Subclasses should implement but never call this method directly.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,implement,but,never,call,this,method,directly;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1411567635;Called when the connection is active and ready to write to the response._Subclasses should implement but never call this method directly.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,implement,but,never,call,this,method,directly;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1417986640;Called when the connection is active and ready to write to the response._Subclasses should implement but never call this method directly.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,implement,but,never,call,this,method,directly;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1421092089;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1421162819;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1430734105;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1437512314;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1463913402;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1467726769;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1467730834;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1477690459;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1496837955;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1498780456;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1500495740;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1504882582;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws SockJsTransportFailureException_;1520529117;Called when the connection is active and ready to write to the response._Subclasses should only call this method from a method where the_"responseLock" is acquired.;protected abstract void flushCache() throws SockJsTransportFailureException_;called,when,the,connection,is,active,and,ready,to,write,to,the,response,subclasses,should,only,call,this,method,from,a,method,where,the,response,lock,is,acquired;protected,abstract,void,flush,cache,throws,sock,js,transport,failure,exception
AbstractHttpSockJsSession -> public void setAcceptedProtocol(@Nullable String protocol);1500495740;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(@Nullable String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,nullable,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(@Nullable String protocol);1504882582;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(@Nullable String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,nullable,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(@Nullable String protocol);1520529117;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(@Nullable String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,nullable,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> @Nullable 	public String getAcceptedProtocol();1500495740;Return the selected sub-protocol to use.;@Nullable_	public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;nullable,public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> @Nullable 	public String getAcceptedProtocol();1504882582;Return the selected sub-protocol to use.;@Nullable_	public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;nullable,public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> @Nullable 	public String getAcceptedProtocol();1520529117;Return the selected sub-protocol to use.;@Nullable_	public String getAcceptedProtocol() {_		return this.acceptedProtocol__	};return,the,selected,sub,protocol,to,use;nullable,public,string,get,accepted,protocol,return,this,accepted,protocol
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, 			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException;1395543588;Handle all HTTP requests part of the same SockJS session except for the very_first, initial request. Write a prelude (if needed) and keep the request_open and ready to send a message from the server to the client._<p>_The "xhr" and "jsonp" (polling-based) transports completes the request when_the next message is sent, which could be an array of messages cached during_the time between successive requests, or it could be a heartbeat message_sent if no other messages were sent (by default within 25 seconds)._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the request open longer in order to stream messages over_a period of time. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleInitialRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public void handleSuccessiveRequest(ServerHttpRequest request,_			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)__		try {_			writePrelude(request, response)__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}_		startAsyncRequest()__	};handle,all,http,requests,part,of,the,same,sock,js,session,except,for,the,very,first,initial,request,write,a,prelude,if,needed,and,keep,the,request,open,and,ready,to,send,a,message,from,the,server,to,the,client,p,the,xhr,and,jsonp,polling,based,transports,completes,the,request,when,the,next,message,is,sent,which,could,be,an,array,of,messages,cached,during,the,time,between,successive,requests,or,it,could,be,a,heartbeat,message,sent,if,no,other,messages,were,sent,by,default,within,25,seconds,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,request,open,longer,in,order,to,stream,messages,over,a,period,of,time,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,initial,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,try,write,prelude,request,response,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,start,async,request
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, 			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException;1395550899;Handle all HTTP requests part of the same SockJS session except for the very_first, initial request. Write a prelude (if needed) and keep the request_open and ready to send a message from the server to the client._<p>_The "xhr" and "jsonp" (polling-based) transports completes the request when_the next message is sent, which could be an array of messages cached during_the time between successive requests, or it could be a heartbeat message_sent if no other messages were sent (by default within 25 seconds)._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the request open longer in order to stream messages over_a period of time. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleInitialRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public void handleSuccessiveRequest(ServerHttpRequest request,_			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)__		try {_			writePrelude(request, response)__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}_		startAsyncRequest()__	};handle,all,http,requests,part,of,the,same,sock,js,session,except,for,the,very,first,initial,request,write,a,prelude,if,needed,and,keep,the,request,open,and,ready,to,send,a,message,from,the,server,to,the,client,p,the,xhr,and,jsonp,polling,based,transports,completes,the,request,when,the,next,message,is,sent,which,could,be,an,array,of,messages,cached,during,the,time,between,successive,requests,or,it,could,be,a,heartbeat,message,sent,if,no,other,messages,were,sent,by,default,within,25,seconds,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,request,open,longer,in,order,to,stream,messages,over,a,period,of,time,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,initial,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,try,write,prelude,request,response,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,start,async,request
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, 			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException;1395721625;Handle all HTTP requests part of the same SockJS session except for the very_first, initial request. Write a prelude (if needed) and keep the request_open and ready to send a message from the server to the client._<p>_The "xhr" and "jsonp" (polling-based) transports completes the request when_the next message is sent, which could be an array of messages cached during_the time between successive requests, or it could be a heartbeat message_sent if no other messages were sent (by default within 25 seconds)._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the request open longer in order to stream messages over_a period of time. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleInitialRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public void handleSuccessiveRequest(ServerHttpRequest request,_			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)__		try {_			writePrelude(request, response)__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}_		startAsyncRequest()__	};handle,all,http,requests,part,of,the,same,sock,js,session,except,for,the,very,first,initial,request,write,a,prelude,if,needed,and,keep,the,request,open,and,ready,to,send,a,message,from,the,server,to,the,client,p,the,xhr,and,jsonp,polling,based,transports,completes,the,request,when,the,next,message,is,sent,which,could,be,an,array,of,messages,cached,during,the,time,between,successive,requests,or,it,could,be,a,heartbeat,message,sent,if,no,other,messages,were,sent,by,default,within,25,seconds,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,request,open,longer,in,order,to,stream,messages,over,a,period,of,time,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,initial,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,try,write,prelude,request,response,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,start,async,request
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, 			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException;1403719829;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session.__<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request,_			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				writePrelude(request, response)__				startAsyncRequest()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,write,prelude,request,response,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, 			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException;1403856366;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session.__<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request,_			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				writePrelude(request, response)__				startAsyncRequest()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,write,prelude,request,response,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> @Deprecated 	protected abstract boolean isStreaming()_;1421092089;@deprecated as of 4.2 this method is no longer used for anything;@Deprecated_	protected abstract boolean isStreaming()_;deprecated,as,of,4,2,this,method,is,no,longer,used,for,anything;deprecated,protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> @Deprecated 	protected abstract boolean isStreaming()_;1421162819;@deprecated as of 4.2 this method is no longer used.;@Deprecated_	protected abstract boolean isStreaming()_;deprecated,as,of,4,2,this,method,is,no,longer,used;deprecated,protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> @Deprecated 	protected abstract boolean isStreaming()_;1430734105;@deprecated as of 4.2 this method is no longer used.;@Deprecated_	protected abstract boolean isStreaming()_;deprecated,as,of,4,2,this,method,is,no,longer,used;deprecated,protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> @Deprecated 	protected abstract boolean isStreaming()_;1437512314;@deprecated as of 4.2, since this method is no longer used.;@Deprecated_	protected abstract boolean isStreaming()_;deprecated,as,of,4,2,since,this,method,is,no,longer,used;deprecated,protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> @Deprecated 	protected abstract boolean isStreaming()_;1463913402;@deprecated as of 4.2, since this method is no longer used.;@Deprecated_	protected abstract boolean isStreaming()_;deprecated,as,of,4,2,since,this,method,is,no,longer,used;deprecated,protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> protected abstract void flushCache() throws IOException_;1375321376;Only called if the connection is currently active;protected abstract void flushCache() throws IOException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,ioexception
AbstractHttpSockJsSession -> protected abstract void flushCache() throws IOException_;1375470740;Only called if the connection is currently active;protected abstract void flushCache() throws IOException_;only,called,if,the,connection,is,currently,active;protected,abstract,void,flush,cache,throws,ioexception
AbstractHttpSockJsSession -> public synchronized void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1389893234;Handle the first HTTP request, i.e. the one that starts a SockJS session._Write a prelude to the response (if needed), send the SockJS "open" frame_to indicate to the client the session is opened, and invoke the_delegate WebSocketHandler to provide it with the newly opened session._<p>_The "xhr" and "jsonp" (polling-based) transports completes the initial request_as soon as the open frame is sent. Following that the client should start a_successive polling request within the same SockJS session._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the initial request open in order to stream one or_more messages. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleSuccessiveRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public synchronized void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)___		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		try {_			writePrelude()__			writeFrame(SockJsFrame.openFrame())__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}__		try {_			delegateConnectionEstablished()__		}_		catch (Throwable ex) {_			throw new SockJsException("Unhandled exception from WebSocketHandler", getId(), ex)__		}_	};handle,the,first,http,request,i,e,the,one,that,starts,a,sock,js,session,write,a,prelude,to,the,response,if,needed,send,the,sock,js,open,frame,to,indicate,to,the,client,the,session,is,opened,and,invoke,the,delegate,web,socket,handler,to,provide,it,with,the,newly,opened,session,p,the,xhr,and,jsonp,polling,based,transports,completes,the,initial,request,as,soon,as,the,open,frame,is,sent,following,that,the,client,should,start,a,successive,polling,request,within,the,same,sock,js,session,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,initial,request,open,in,order,to,stream,one,or,more,messages,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,successive,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,synchronized,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,try,write,prelude,write,frame,sock,js,frame,open,frame,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,try,delegate,connection,established,catch,throwable,ex,throw,new,sock,js,exception,unhandled,exception,from,web,socket,handler,get,id,ex
AbstractHttpSockJsSession -> public synchronized void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1395246308;Handle the first HTTP request, i.e. the one that starts a SockJS session._Write a prelude to the response (if needed), send the SockJS "open" frame_to indicate to the client the session is opened, and invoke the_delegate WebSocketHandler to provide it with the newly opened session._<p>_The "xhr" and "jsonp" (polling-based) transports completes the initial request_as soon as the open frame is sent. Following that the client should start a_successive polling request within the same SockJS session._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the initial request open in order to stream one or_more messages. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleSuccessiveRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public synchronized void handleInitialRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)___		this.uri = request.getURI()__		this.handshakeHeaders = request.getHeaders()__		this.principal = request.getPrincipal()__		this.localAddress = request.getLocalAddress()__		this.remoteAddress = request.getRemoteAddress()___		try {_			writePrelude()__			writeFrame(SockJsFrame.openFrame())__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}__		try {_			delegateConnectionEstablished()__		}_		catch (Throwable ex) {_			throw new SockJsException("Unhandled exception from WebSocketHandler", getId(), ex)__		}_	};handle,the,first,http,request,i,e,the,one,that,starts,a,sock,js,session,write,a,prelude,to,the,response,if,needed,send,the,sock,js,open,frame,to,indicate,to,the,client,the,session,is,opened,and,invoke,the,delegate,web,socket,handler,to,provide,it,with,the,newly,opened,session,p,the,xhr,and,jsonp,polling,based,transports,completes,the,initial,request,as,soon,as,the,open,frame,is,sent,following,that,the,client,should,start,a,successive,polling,request,within,the,same,sock,js,session,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,initial,request,open,in,order,to,stream,one,or,more,messages,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,successive,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,synchronized,void,handle,initial,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,this,uri,request,get,uri,this,handshake,headers,request,get,headers,this,principal,request,get,principal,this,local,address,request,get,local,address,this,remote,address,request,get,remote,address,try,write,prelude,write,frame,sock,js,frame,open,frame,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,try,delegate,connection,established,catch,throwable,ex,throw,new,sock,js,exception,unhandled,exception,from,web,socket,handler,get,id,ex
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1375321376;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.protocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1375470740;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.protocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1375542207;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.protocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1375543262;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.protocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1376429280;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.protocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1376429281;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1377218103;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1380503379;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1383014491;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1383071981;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter.__@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1385507478;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1386021191;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1386462352;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1389893234;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1395246308;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1395543588;Unlike WebSocket where sub-protocol negotiation is part of the_initial handshake, in HTTP transports the same negotiation must_be emulated and the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1395550899;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1395721625;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1403719829;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1403856366;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1404323603;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1408740957;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1411567635;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1417986640;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1421092089;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1421162819;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1430734105;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1437512314;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1463913402;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1467726769;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1467730834;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1477690459;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1496837955;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public void setAcceptedProtocol(String protocol);1498780456;Unlike WebSocket where sub-protocol negotiation is part of the initial_handshake, in HTTP transports the same negotiation must be emulated and_the selected protocol set through this setter._@param protocol the sub-protocol to set;public void setAcceptedProtocol(String protocol) {_		this.acceptedProtocol = protocol__	};unlike,web,socket,where,sub,protocol,negotiation,is,part,of,the,initial,handshake,in,http,transports,the,same,negotiation,must,be,emulated,and,the,selected,protocol,set,through,this,setter,param,protocol,the,sub,protocol,to,set;public,void,set,accepted,protocol,string,protocol,this,accepted,protocol,protocol
AbstractHttpSockJsSession -> public synchronized void handleSuccessiveRequest(ServerHttpRequest request, 			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException;1389893234;Handle all HTTP requests part of the same SockJS session except for the very_first, initial request. Write a prelude (if needed) and keep the request_open and ready to send a message from the server to the client._<p>_The "xhr" and "jsonp" (polling-based) transports completes the request when_the next message is sent, which could be an array of messages cached during_the time between successive requests, or it could be a heartbeat message_sent if no other messages were sent (by default within 25 seconds)._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the request open longer in order to stream messages over_a period of time. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleInitialRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public synchronized void handleSuccessiveRequest(ServerHttpRequest request,_			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)__		try {_			writePrelude()__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}_		startAsyncRequest()__	};handle,all,http,requests,part,of,the,same,sock,js,session,except,for,the,very,first,initial,request,write,a,prelude,if,needed,and,keep,the,request,open,and,ready,to,send,a,message,from,the,server,to,the,client,p,the,xhr,and,jsonp,polling,based,transports,completes,the,request,when,the,next,message,is,sent,which,could,be,an,array,of,messages,cached,during,the,time,between,successive,requests,or,it,could,be,a,heartbeat,message,sent,if,no,other,messages,were,sent,by,default,within,25,seconds,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,request,open,longer,in,order,to,stream,messages,over,a,period,of,time,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,initial,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,synchronized,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,try,write,prelude,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,start,async,request
AbstractHttpSockJsSession -> public synchronized void handleSuccessiveRequest(ServerHttpRequest request, 			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException;1395246308;Handle all HTTP requests part of the same SockJS session except for the very_first, initial request. Write a prelude (if needed) and keep the request_open and ready to send a message from the server to the client._<p>_The "xhr" and "jsonp" (polling-based) transports completes the request when_the next message is sent, which could be an array of messages cached during_the time between successive requests, or it could be a heartbeat message_sent if no other messages were sent (by default within 25 seconds)._<p>_The "xhr_streaming", "eventsource", and "htmlfile" transports are streaming_based and will leave the request open longer in order to stream messages over_a period of time. However, even streaming based transports eventually recycle_the long running request, after a certain number of bytes have been streamed_(128K by default), and allow the client to start a successive request within_the same SockJS session.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use__@see #handleInitialRequest(org.springframework.http.server.ServerHttpRequest, org.springframework.http.server.ServerHttpResponse, org.springframework.web.socket.sockjs.frame.SockJsFrameFormat);public synchronized void handleSuccessiveRequest(ServerHttpRequest request,_			ServerHttpResponse response, SockJsFrameFormat frameFormat) throws SockJsException {__		initRequest(request, response, frameFormat)__		try {_			writePrelude()__		}_		catch (Throwable ex) {_			tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__			throw new SockJsTransportFailureException("Failed to send \"open\" frame", getId(), ex)__		}_		startAsyncRequest()__	};handle,all,http,requests,part,of,the,same,sock,js,session,except,for,the,very,first,initial,request,write,a,prelude,if,needed,and,keep,the,request,open,and,ready,to,send,a,message,from,the,server,to,the,client,p,the,xhr,and,jsonp,polling,based,transports,completes,the,request,when,the,next,message,is,sent,which,could,be,an,array,of,messages,cached,during,the,time,between,successive,requests,or,it,could,be,a,heartbeat,message,sent,if,no,other,messages,were,sent,by,default,within,25,seconds,p,the,eventsource,and,htmlfile,transports,are,streaming,based,and,will,leave,the,request,open,longer,in,order,to,stream,messages,over,a,period,of,time,however,even,streaming,based,transports,eventually,recycle,the,long,running,request,after,a,certain,number,of,bytes,have,been,streamed,128k,by,default,and,allow,the,client,to,start,a,successive,request,within,the,same,sock,js,session,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use,see,handle,initial,request,org,springframework,http,server,server,http,request,org,springframework,http,server,server,http,response,org,springframework,web,socket,sockjs,frame,sock,js,frame,format;public,synchronized,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,init,request,request,response,frame,format,try,write,prelude,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,send,open,frame,get,id,ex,start,async,request
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1395550899;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_will be closed.__@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,will,be,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1395721625;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_will be closed.__@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,will,be,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1403719829;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1403856366;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1404323603;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1408740957;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1411567635;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1417986640;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1421092089;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1421162819;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1430734105;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1437512314;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1463913402;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1467726769;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1467730834;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1477690459;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1496837955;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1498780456;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1500495740;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1504882582;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected Queue<String> getMessageCache();1520529117;Return the SockJS buffer for messages stored transparently between polling_requests. If the polling request takes longer than 5 seconds, the session_is closed._@see org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService;protected Queue<String> getMessageCache() {_		return this.messageCache__	};return,the,sock,js,buffer,for,messages,stored,transparently,between,polling,requests,if,the,polling,request,takes,longer,than,5,seconds,the,session,is,closed,see,org,springframework,web,socket,sockjs,transport,transport,handling,sock,js,service;protected,queue,string,get,message,cache,return,this,message,cache
AbstractHttpSockJsSession -> protected abstract boolean isStreaming()_;1403719829;Whether this HTTP transport streams message frames vs closing the response_after each frame written (long polling).;protected abstract boolean isStreaming()_;whether,this,http,transport,streams,message,frames,vs,closing,the,response,after,each,frame,written,long,polling;protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> protected abstract boolean isStreaming()_;1403856366;Whether this HTTP transport streams message frames vs closing the response_after each frame written (long polling).;protected abstract boolean isStreaming()_;whether,this,http,transport,streams,message,frames,vs,closing,the,response,after,each,frame,written,long,polling;protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> protected abstract boolean isStreaming()_;1404323603;Whether this HTTP transport streams message frames vs closing the response_after each frame written (long polling).;protected abstract boolean isStreaming()_;whether,this,http,transport,streams,message,frames,vs,closing,the,response,after,each,frame,written,long,polling;protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> protected abstract boolean isStreaming()_;1408740957;Whether this HTTP transport streams message frames vs closing the response_after each frame written (long polling).;protected abstract boolean isStreaming()_;whether,this,http,transport,streams,message,frames,vs,closing,the,response,after,each,frame,written,long,polling;protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> protected abstract boolean isStreaming()_;1411567635;Whether this HTTP transport streams message frames vs closing the response_after each frame written (long polling).;protected abstract boolean isStreaming()_;whether,this,http,transport,streams,message,frames,vs,closing,the,response,after,each,frame,written,long,polling;protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> protected abstract boolean isStreaming()_;1417986640;Whether this HTTP transport streams message frames vs closing the response_after each frame written (long polling).;protected abstract boolean isStreaming()_;whether,this,http,transport,streams,message,frames,vs,closing,the,response,after,each,frame,written,long,polling;protected,abstract,boolean,is,streaming
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1404323603;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session.__<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent.__@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				writePrelude(request, response)__				startAsyncRequest()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,write,prelude,request,response,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1408740957;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				writePrelude(request, response)__				startAsyncRequest()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,write,prelude,request,response,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1411567635;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				writePrelude(request, response)__				startAsyncRequest()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,write,prelude,request,response,start,async,request,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1417986640;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				if (isStreaming()) {_					writePrelude(request, response)__					flushCache()__					this.readyToSend = true__				}_				else {_					if (this.messageCache.isEmpty()) {_						scheduleHeartbeat()__						this.readyToSend = true__					}_					else {_						flushCache()__					}_				}_			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,if,is,streaming,write,prelude,request,response,flush,cache,this,ready,to,send,true,else,if,this,message,cache,is,empty,schedule,heartbeat,this,ready,to,send,true,else,flush,cache,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1421092089;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1421162819;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1430734105;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1437512314;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1463913402;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1467726769;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1467730834;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)___				disableShallowEtagHeaderFilter(request)___				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1477690459;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)__				disableShallowEtagHeaderFilter(request)__				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1496837955;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				this.asyncRequestControl = request.getAsyncRequestControl(response)__				this.asyncRequestControl.start(-1)__				disableShallowEtagHeaderFilter(request)__				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,this,async,request,control,request,get,async,request,control,response,this,async,request,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1498780456;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				ServerHttpAsyncRequestControl control = request.getAsyncRequestControl(response)__				this.asyncRequestControl = control__				control.start(-1)__				disableShallowEtagHeaderFilter(request)__				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,server,http,async,request,control,control,request,get,async,request,control,response,this,async,request,control,control,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1500495740;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				ServerHttpAsyncRequestControl control = request.getAsyncRequestControl(response)__				this.asyncRequestControl = control__				control.start(-1)__				disableShallowEtagHeaderFilter(request)__				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,server,http,async,request,control,control,request,get,async,request,control,response,this,async,request,control,control,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1504882582;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				ServerHttpAsyncRequestControl control = request.getAsyncRequestControl(response)__				this.asyncRequestControl = control__				control.start(-1)__				disableShallowEtagHeaderFilter(request)__				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,server,http,async,request,control,control,request,get,async,request,control,response,this,async,request,control,control,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
AbstractHttpSockJsSession -> public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response, 			SockJsFrameFormat frameFormat) throws SockJsException;1520529117;Handle all requests, except the first one, to receive messages on a SockJS_HTTP transport based session._<p>Long polling-based transports (e.g. "xhr", "jsonp") complete the request_after writing any buffered message frames (or the next one). Streaming-based_transports ("xhr_streaming", "eventsource", and "htmlfile") leave the_response open longer for further streaming of message frames but will also_close it eventually after some amount of data has been sent._@param request the current request_@param response the current response_@param frameFormat the transport-specific SocksJS frame format to use;public void handleSuccessiveRequest(ServerHttpRequest request, ServerHttpResponse response,_			SockJsFrameFormat frameFormat) throws SockJsException {__		synchronized (this.responseLock) {_			try {_				if (isClosed()) {_					response.getBody().write(SockJsFrame.closeFrameGoAway().getContentBytes())__					return__				}_				this.response = response__				this.frameFormat = frameFormat__				ServerHttpAsyncRequestControl control = request.getAsyncRequestControl(response)__				this.asyncRequestControl = control__				control.start(-1)__				disableShallowEtagHeaderFilter(request)__				handleRequestInternal(request, response, false)__				this.readyToSend = isActive()__			}_			catch (Throwable ex) {_				tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR)__				throw new SockJsTransportFailureException("Failed to handle SockJS receive request", getId(), ex)__			}_		}_	};handle,all,requests,except,the,first,one,to,receive,messages,on,a,sock,js,http,transport,based,session,p,long,polling,based,transports,e,g,xhr,jsonp,complete,the,request,after,writing,any,buffered,message,frames,or,the,next,one,streaming,based,transports,eventsource,and,htmlfile,leave,the,response,open,longer,for,further,streaming,of,message,frames,but,will,also,close,it,eventually,after,some,amount,of,data,has,been,sent,param,request,the,current,request,param,response,the,current,response,param,frame,format,the,transport,specific,socks,js,frame,format,to,use;public,void,handle,successive,request,server,http,request,request,server,http,response,response,sock,js,frame,format,frame,format,throws,sock,js,exception,synchronized,this,response,lock,try,if,is,closed,response,get,body,write,sock,js,frame,close,frame,go,away,get,content,bytes,return,this,response,response,this,frame,format,frame,format,server,http,async,request,control,control,request,get,async,request,control,response,this,async,request,control,control,control,start,1,disable,shallow,etag,header,filter,request,handle,request,internal,request,response,false,this,ready,to,send,is,active,catch,throwable,ex,try,close,with,sock,js,transport,error,ex,close,status,throw,new,sock,js,transport,failure,exception,failed,to,handle,sock,js,receive,request,get,id,ex
