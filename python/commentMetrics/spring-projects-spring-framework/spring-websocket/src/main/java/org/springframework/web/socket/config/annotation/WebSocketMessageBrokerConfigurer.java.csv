commented;modifiers;parameterAmount;loc;comment;code
true;default;1;2;/**  * Register STOMP endpoints mapping each to a specific URL and (optionally)  * enabling and configuring SockJS fallback options.  */ ;/**  * Register STOMP endpoints mapping each to a specific URL and (optionally)  * enabling and configuring SockJS fallback options.  */ default void registerStompEndpoints(StompEndpointRegistry registry) { }
true;default;1;2;/**  * Configure options related to the processing of messages received from and  * sent to WebSocket clients.  */ ;/**  * Configure options related to the processing of messages received from and  * sent to WebSocket clients.  */ default void configureWebSocketTransport(WebSocketTransportRegistration registry) { }
true;default;1;2;/**  * Configure the {@link org.springframework.messaging.MessageChannel} used for  * incoming messages from WebSocket clients. By default the channel is backed  * by a thread pool of size 1. It is recommended to customize thread pool  * settings for production use.  */ ;/**  * Configure the {@link org.springframework.messaging.MessageChannel} used for  * incoming messages from WebSocket clients. By default the channel is backed  * by a thread pool of size 1. It is recommended to customize thread pool  * settings for production use.  */ default void configureClientInboundChannel(ChannelRegistration registration) { }
true;default;1;2;/**  * Configure the {@link org.springframework.messaging.MessageChannel} used for  * outbound messages to WebSocket clients. By default the channel is backed  * by a thread pool of size 1. It is recommended to customize thread pool  * settings for production use.  */ ;/**  * Configure the {@link org.springframework.messaging.MessageChannel} used for  * outbound messages to WebSocket clients. By default the channel is backed  * by a thread pool of size 1. It is recommended to customize thread pool  * settings for production use.  */ default void configureClientOutboundChannel(ChannelRegistration registration) { }
true;default;1;2;/**  * Add resolvers to support custom controller method argument types.  * <p>This does not override the built-in support for resolving handler  * method arguments. To customize the built-in support for argument  * resolution, configure {@code SimpAnnotationMethodMessageHandler} directly.  * @param argumentResolvers the resolvers to register (initially an empty list)  * @since 4.1.1  */ ;/**  * Add resolvers to support custom controller method argument types.  * <p>This does not override the built-in support for resolving handler  * method arguments. To customize the built-in support for argument  * resolution, configure {@code SimpAnnotationMethodMessageHandler} directly.  * @param argumentResolvers the resolvers to register (initially an empty list)  * @since 4.1.1  */ default void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) { }
true;default;1;2;/**  * Add handlers to support custom controller method return value types.  * <p>Using this option does not override the built-in support for handling  * return values. To customize the built-in support for handling return  * values, configure  {@code SimpAnnotationMethodMessageHandler} directly.  * @param returnValueHandlers the handlers to register (initially an empty list)  * @since 4.1.1  */ ;/**  * Add handlers to support custom controller method return value types.  * <p>Using this option does not override the built-in support for handling  * return values. To customize the built-in support for handling return  * values, configure  {@code SimpAnnotationMethodMessageHandler} directly.  * @param returnValueHandlers the handlers to register (initially an empty list)  * @since 4.1.1  */ default void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> returnValueHandlers) { }
true;default;1;3;/**  * Configure the message converters to use when extracting the payload of  * messages in annotated methods and when sending messages (e.g. through the  * "broker" SimpMessagingTemplate).  * <p>The provided list, initially empty, can be used to add message converters  * while the boolean return value is used to determine if default message should  * be added as well.  * @param messageConverters the converters to configure (initially an empty list)  * @return whether to also add default converter or not  */ ;/**  * Configure the message converters to use when extracting the payload of  * messages in annotated methods and when sending messages (e.g. through the  * "broker" SimpMessagingTemplate).  * <p>The provided list, initially empty, can be used to add message converters  * while the boolean return value is used to determine if default message should  * be added as well.  * @param messageConverters the converters to configure (initially an empty list)  * @return whether to also add default converter or not  */ default boolean configureMessageConverters(List<MessageConverter> messageConverters) {     return true. }
true;default;1;2;/**  * Configure message broker options.  */ ;/**  * Configure message broker options.  */ default void configureMessageBroker(MessageBrokerRegistry registry) { }
