commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public WebSocketSession getDelegate() {     return this.delegate. }
false;public;0;7;;public WebSocketSession getLastSession() {     WebSocketSession result = this.delegate.     while (result instanceof WebSocketSessionDecorator) {         result = ((WebSocketSessionDecorator) result).getDelegate().     }     return result. }
false;public,static;1;8;;public static WebSocketSession unwrap(WebSocketSession session) {     if (session instanceof WebSocketSessionDecorator) {         return ((WebSocketSessionDecorator) session).getLastSession().     } else {         return session.     } }
false;public;0;4;;@Override public String getId() {     return this.delegate.getId(). }
false;public;0;5;;@Override @Nullable public URI getUri() {     return this.delegate.getUri(). }
false;public;0;4;;@Override public HttpHeaders getHandshakeHeaders() {     return this.delegate.getHandshakeHeaders(). }
false;public;0;4;;@Override public Map<String, Object> getAttributes() {     return this.delegate.getAttributes(). }
false;public;0;4;;@Override public Principal getPrincipal() {     return this.delegate.getPrincipal(). }
false;public;0;4;;@Override public InetSocketAddress getLocalAddress() {     return this.delegate.getLocalAddress(). }
false;public;0;4;;@Override public InetSocketAddress getRemoteAddress() {     return this.delegate.getRemoteAddress(). }
false;public;0;4;;@Override public String getAcceptedProtocol() {     return this.delegate.getAcceptedProtocol(). }
false;public;0;4;;@Override public List<WebSocketExtension> getExtensions() {     return this.delegate.getExtensions(). }
false;public;1;4;;@Override public void setTextMessageSizeLimit(int messageSizeLimit) {     this.delegate.setTextMessageSizeLimit(messageSizeLimit). }
false;public;0;4;;@Override public int getTextMessageSizeLimit() {     return this.delegate.getTextMessageSizeLimit(). }
false;public;1;4;;@Override public void setBinaryMessageSizeLimit(int messageSizeLimit) {     this.delegate.setBinaryMessageSizeLimit(messageSizeLimit). }
false;public;0;4;;@Override public int getBinaryMessageSizeLimit() {     return this.delegate.getBinaryMessageSizeLimit(). }
false;public;0;4;;@Override public boolean isOpen() {     return this.delegate.isOpen(). }
false;public;1;4;;@Override public void sendMessage(WebSocketMessage<?> message) throws IOException {     this.delegate.sendMessage(message). }
false;public;0;4;;@Override public void close() throws IOException {     this.delegate.close(). }
false;public;1;4;;@Override public void close(CloseStatus status) throws IOException {     this.delegate.close(status). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + " [delegate=" + this.delegate + "]". }
