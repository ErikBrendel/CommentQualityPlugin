# id;timestamp;commentText;codeText;commentWords;codeWords
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler sessionHandler);1426211309;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'uri' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,uri,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler sessionHandler);1437512314;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'uri' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,uri,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler sessionHandler);1450295040;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'uri' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,uri,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler sessionHandler);1462186904;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler sessionHandler);1467730834;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler sessionHandler);1474905889;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler sessionHandler);1496259743;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public void setPhase(int phase);1426211309;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1437512314;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1450295040;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1462186904;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1467730834;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1474905889;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1496259743;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1496837955;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1497341397;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1500495740;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1518770299;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1521123475;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1530174524;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1530174524;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1530174524;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> public void setPhase(int phase);1534414082;Specify the phase in which the WebSocket client should be started and_subsequently closed. The startup order proceeds from lowest to highest,_and the shutdown order is the reverse of that._<p>By default this is Integer.MAX_VALUE meaning that the WebSocket client_is started as late as possible and stopped as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,the,web,socket,client,should,be,started,and,subsequently,closed,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,p,by,default,this,is,integer,meaning,that,the,web,socket,client,is,started,as,late,as,possible,and,stopped,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1426211309;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (taskScheduler != null && !isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,task,scheduler,null,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1437512314;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (taskScheduler != null && !isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,task,scheduler,null,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1450295040;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (taskScheduler != null && !isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,task,scheduler,null,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1462186904;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (taskScheduler != null && !isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,task,scheduler,null,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1467730834;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (taskScheduler != null && !isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,task,scheduler,null,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1474905889;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (taskScheduler != null && !isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,task,scheduler,null,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1496259743;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (taskScheduler != null && !isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,task,scheduler,null,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1496837955;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(TaskScheduler taskScheduler);1497341397;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public int getPhase();1426211309;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1437512314;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1450295040;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1462186904;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1467730834;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1474905889;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1496259743;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1496837955;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1497341397;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1500495740;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1518770299;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1521123475;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1530174524;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1530174524;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1530174524;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> @Override 	public int getPhase();1534414082;Return the configured phase.;@Override_	public int getPhase() {_		return this.phase__	};return,the,configured,phase;override,public,int,get,phase,return,this,phase
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1426211309;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1437512314;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1450295040;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1462186904;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1467730834;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1474905889;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1426211309;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1437512314;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1450295040;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1462186904;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1467730834;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1474905889;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1496259743;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1496837955;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1497341397;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1500495740;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1518770299;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1521123475;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1530174524;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1530174524;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1530174524;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public void setInboundMessageSizeLimit(int inboundMessageSizeLimit);1534414082;Configure the maximum size allowed for inbound STOMP message._Since a STOMP message can be received in multiple WebSocket messages,_buffering may be required and this property determines the maximum buffer_size per message._<p>By default this is set to 64 * 1024 (64K).;public void setInboundMessageSizeLimit(int inboundMessageSizeLimit) {_		this.inboundMessageSizeLimit = inboundMessageSizeLimit__	};configure,the,maximum,size,allowed,for,inbound,stomp,message,since,a,stomp,message,can,be,received,in,multiple,web,socket,messages,buffering,may,be,required,and,this,property,determines,the,maximum,buffer,size,per,message,p,by,default,this,is,set,to,64,1024,64k;public,void,set,inbound,message,size,limit,int,inbound,message,size,limit,this,inbound,message,size,limit,inbound,message,size,limit
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1426211309;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured.__@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "'webSocketClient' is required.")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1437512314;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "'webSocketClient' is required.")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1450295040;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "'webSocketClient' is required.")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1462186904;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1467730834;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1474905889;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1496259743;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1496837955;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1497341397;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1500495740;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1518770299;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1521123475;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1530174524;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1530174524;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1530174524;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public WebSocketStompClient(WebSocketClient webSocketClient);1534414082;Class constructor. Sets {@link #setDefaultHeartbeat} to "0,0" but will_reset it back to the preferred "10000,10000" when a_{@link #setTaskScheduler} is configured._@param webSocketClient the WebSocket client to connect with;public WebSocketStompClient(WebSocketClient webSocketClient) {_		Assert.notNull(webSocketClient, "WebSocketClient is required")__		this.webSocketClient = webSocketClient__		setDefaultHeartbeat(new long[] {0, 0})__	};class,constructor,sets,link,set,default,heartbeat,to,0,0,but,will,reset,it,back,to,the,preferred,10000,10000,when,a,link,set,task,scheduler,is,configured,param,web,socket,client,the,web,socket,client,to,connect,with;public,web,socket,stomp,client,web,socket,client,web,socket,client,assert,not,null,web,socket,client,web,socket,client,is,required,this,web,socket,client,web,socket,client,set,default,heartbeat,new,long,0,0
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1496837955;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1497341397;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1500495740;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1518770299;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1521123475;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1530174524;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1530174524;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1530174524;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler);1534414082;An overloaded version of_{@link #connect(String, WebSocketHttpHeaders, StompSessionHandler, Object...)}_that accepts a fully prepared {@link java.net.URI}._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param sessionHandler the STOMP session handler_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(URI url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler sessionHandler) {__		Assert.notNull(url, "'url' must not be null")__		ConnectionHandlingStompSession session = createSession(connectHeaders, sessionHandler)__		WebSocketTcpConnectionHandlerAdapter adapter = new WebSocketTcpConnectionHandlerAdapter(session)__		getWebSocketClient().doHandshake(adapter, handshakeHeaders, url).addCallback(adapter)__		return session.getSessionFuture()__	};an,overloaded,version,of,link,connect,string,web,socket,http,headers,stomp,session,handler,object,that,accepts,a,fully,prepared,link,java,net,uri,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,session,handler,the,stomp,session,handler,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,uri,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,session,handler,assert,not,null,url,url,must,not,be,null,connection,handling,stomp,session,session,create,session,connect,headers,session,handler,web,socket,tcp,connection,handler,adapter,adapter,new,web,socket,tcp,connection,handler,adapter,session,get,web,socket,client,do,handshake,adapter,handshake,headers,url,add,callback,adapter,return,session,get,session,future
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1426211309;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1437512314;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1450295040;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1462186904;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1467730834;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1474905889;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1496259743;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1496837955;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1497341397;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1500495740;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1518770299;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1521123475;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1530174524;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1530174524;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1530174524;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public WebSocketClient getWebSocketClient();1534414082;Return the configured WebSocketClient.;public WebSocketClient getWebSocketClient() {_		return this.webSocketClient__	};return,the,configured,web,socket,client;public,web,socket,client,get,web,socket,client,return,this,web,socket,client
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1426211309;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1437512314;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1450295040;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1462186904;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1467730834;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1474905889;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1496259743;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1496837955;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1497341397;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1500495740;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1518770299;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1521123475;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1530174524;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1530174524;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1530174524;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> public void setAutoStartup(boolean autoStartup);1534414082;Set whether to auto-start the contained WebSocketClient when the Spring_context has been refreshed._<p>Default is "true".;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,auto,start,the,contained,web,socket,client,when,the,spring,context,has,been,refreshed,p,default,is,true;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
WebSocketStompClient -> @Override 	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1500495740;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1518770299;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1521123475;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1530174524;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1530174524;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1530174524;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> @Override 	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler);1534414082;{@inheritDoc}_<p>Also automatically sets the {@link #setDefaultHeartbeat defaultHeartbeat}_property to "10000,10000" if it is currently set to "0,0".;@Override_	public void setTaskScheduler(@Nullable TaskScheduler taskScheduler) {_		if (!isDefaultHeartbeatEnabled()) {_			setDefaultHeartbeat(new long[] {10000, 10000})__		}_		super.setTaskScheduler(taskScheduler)__	};inherit,doc,p,also,automatically,sets,the,link,set,default,heartbeat,default,heartbeat,property,to,10000,10000,if,it,is,currently,set,to,0,0;override,public,void,set,task,scheduler,nullable,task,scheduler,task,scheduler,if,is,default,heartbeat,enabled,set,default,heartbeat,new,long,10000,10000,super,set,task,scheduler,task,scheduler
WebSocketStompClient -> public int getInboundMessageSizeLimit();1426211309;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1437512314;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1450295040;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1462186904;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1467730834;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1474905889;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1496259743;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1496837955;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1497341397;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1500495740;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1518770299;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1521123475;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1530174524;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1530174524;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1530174524;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> public int getInboundMessageSizeLimit();1534414082;Get the configured inbound message buffer size in bytes.;public int getInboundMessageSizeLimit() {_		return this.inboundMessageSizeLimit__	};get,the,configured,inbound,message,buffer,size,in,bytes;public,int,get,inbound,message,size,limit,return,this,inbound,message,size,limit
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1426211309;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1437512314;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1450295040;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1462186904;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1467730834;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1474905889;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1496259743;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1496837955;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1497341397;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1500495740;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1518770299;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1521123475;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1530174524;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1530174524;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1530174524;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> @Override 	public boolean isAutoStartup();1534414082;Return the value for the 'autoStartup' property. If "true", this client_will automatically start and stop the contained WebSocketClient.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,the,value,for,the,auto,startup,property,if,true,this,client,will,automatically,start,and,stop,the,contained,web,socket,client;override,public,boolean,is,auto,startup,return,this,auto,startup
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1426211309;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "uriTemplate must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,uri,template,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1437512314;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "uriTemplate must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,uri,template,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1450295040;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "uriTemplate must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,uri,template,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1462186904;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1467730834;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders, 			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1474905889;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, WebSocketHttpHeaders handshakeHeaders,_			StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,web,socket,http,headers,handshake,headers,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1426211309;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1437512314;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1450295040;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1462186904;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1467730834;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1474905889;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1496259743;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1496837955;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1497341397;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1500495740;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1518770299;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1521123475;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1530174524;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1530174524;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1530174524;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars);1534414082;Connect to the given WebSocket URL and notify the given_{@link org.springframework.messaging.simp.stomp.StompSessionHandler}_when connected on the STOMP level after the CONNECTED frame is received._@param url the url to connect to_@param handler the session handler_@param uriVars the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, StompSessionHandler handler, Object... uriVars) {_		return connect(url, null, handler, uriVars)__	};connect,to,the,given,web,socket,url,and,notify,the,given,link,org,springframework,messaging,simp,stomp,stomp,session,handler,when,connected,on,the,stomp,level,after,the,connected,frame,is,received,param,url,the,url,to,connect,to,param,handler,the,session,handler,param,uri,vars,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,stomp,session,handler,handler,object,uri,vars,return,connect,url,null,handler,uri,vars
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1496259743;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1496837955;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1497341397;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1500495740;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1518770299;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1521123475;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1530174524;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1530174524;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1530174524;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			StompSessionHandler handler, Object... uriVariables);1534414082;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also_accepts {@link WebSocketHttpHeaders} to use for the WebSocket handshake._@param url the url to connect to_@param handshakeHeaders the headers for the WebSocket handshake_@param handler the session handler_@param uriVariables the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			StompSessionHandler handler, Object... uriVariables) {__		return connect(url, handshakeHeaders, null, handler, uriVariables)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,param,url,the,url,to,connect,to,param,handshake,headers,the,headers,for,the,web,socket,handshake,param,handler,the,session,handler,param,uri,variables,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,stomp,session,handler,handler,object,uri,variables,return,connect,url,handshake,headers,null,handler,uri,variables
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1496837955;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1497341397;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1500495740;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1518770299;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1521123475;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables URI variables to expand into the URL_@return ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,uri,variables,to,expand,into,the,url,return,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1530174524;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1530174524;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1530174524;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
WebSocketStompClient -> public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders, 			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables);1534414082;An overloaded version of_{@link #connect(String, StompSessionHandler, Object...)} that also accepts_{@link WebSocketHttpHeaders} to use for the WebSocket handshake and_{@link StompHeaders} for the STOMP CONNECT frame._@param url the url to connect to_@param handshakeHeaders headers for the WebSocket handshake_@param connectHeaders headers for the STOMP CONNECT frame_@param handler the session handler_@param uriVariables the URI variables to expand into the URL_@return a ListenableFuture for access to the session when ready for use;public ListenableFuture<StompSession> connect(String url, @Nullable WebSocketHttpHeaders handshakeHeaders,_			@Nullable StompHeaders connectHeaders, StompSessionHandler handler, Object... uriVariables) {__		Assert.notNull(url, "'url' must not be null")__		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri()__		return connect(uri, handshakeHeaders, connectHeaders, handler)__	};an,overloaded,version,of,link,connect,string,stomp,session,handler,object,that,also,accepts,link,web,socket,http,headers,to,use,for,the,web,socket,handshake,and,link,stomp,headers,for,the,stomp,connect,frame,param,url,the,url,to,connect,to,param,handshake,headers,headers,for,the,web,socket,handshake,param,connect,headers,headers,for,the,stomp,connect,frame,param,handler,the,session,handler,param,uri,variables,the,uri,variables,to,expand,into,the,url,return,a,listenable,future,for,access,to,the,session,when,ready,for,use;public,listenable,future,stomp,session,connect,string,url,nullable,web,socket,http,headers,handshake,headers,nullable,stomp,headers,connect,headers,stomp,session,handler,handler,object,uri,variables,assert,not,null,url,url,must,not,be,null,uri,uri,uri,components,builder,from,uri,string,url,build,and,expand,uri,variables,encode,to,uri,return,connect,uri,handshake,headers,connect,headers,handler
