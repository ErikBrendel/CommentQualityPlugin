commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getId() {     return this.id. }
false;public;0;6;;@Override @Nullable public URI getUri() {     checkNativeSessionInitialized().     return this.uri. }
false;public;0;4;;@Override public HttpHeaders getHandshakeHeaders() {     return this.handshakeHeaders. }
false;public;0;5;;@Override public String getAcceptedProtocol() {     checkNativeSessionInitialized().     return this.acceptedProtocol. }
false;public;0;5;;@Override public List<WebSocketExtension> getExtensions() {     Assert.state(this.extensions != null, "WebSocket session is not yet initialized").     return this.extensions. }
false;public;0;3;;public Principal getPrincipal() {     return this.user. }
false;public;0;5;;@Override @Nullable public InetSocketAddress getLocalAddress() {     return this.localAddress. }
false;public;0;5;;@Override @Nullable public InetSocketAddress getRemoteAddress() {     return this.remoteAddress. }
false;public;1;5;;@Override public void setTextMessageSizeLimit(int messageSizeLimit) {     checkNativeSessionInitialized().     getNativeSession().setMaxTextMessageBufferSize(messageSizeLimit). }
false;public;0;5;;@Override public int getTextMessageSizeLimit() {     checkNativeSessionInitialized().     return getNativeSession().getMaxTextMessageBufferSize(). }
false;public;1;5;;@Override public void setBinaryMessageSizeLimit(int messageSizeLimit) {     checkNativeSessionInitialized().     getNativeSession().setMaxBinaryMessageBufferSize(messageSizeLimit). }
false;public;0;5;;@Override public int getBinaryMessageSizeLimit() {     checkNativeSessionInitialized().     return getNativeSession().getMaxBinaryMessageBufferSize(). }
false;public;0;4;;@Override public boolean isOpen() {     return getNativeSession().isOpen(). }
false;public;1;23;;@Override public void initializeNativeSession(Session session) {     super.initializeNativeSession(session).     this.uri = session.getRequestURI().     this.acceptedProtocol = session.getNegotiatedSubprotocol().     List<Extension> standardExtensions = getNativeSession().getNegotiatedExtensions().     if (!CollectionUtils.isEmpty(standardExtensions)) {         this.extensions = new ArrayList<>(standardExtensions.size()).         for (Extension standardExtension : standardExtensions) {             this.extensions.add(new StandardToWebSocketExtensionAdapter(standardExtension)).         }         this.extensions = Collections.unmodifiableList(this.extensions).     } else {         this.extensions = Collections.emptyList().     }     if (this.user == null) {         this.user = session.getUserPrincipal().     } }
false;protected;1;4;;@Override protected void sendTextMessage(TextMessage message) throws IOException {     getNativeSession().getBasicRemote().sendText(message.getPayload(), message.isLast()). }
false;protected;1;4;;@Override protected void sendBinaryMessage(BinaryMessage message) throws IOException {     getNativeSession().getBasicRemote().sendBinary(message.getPayload(), message.isLast()). }
false;protected;1;4;;@Override protected void sendPingMessage(PingMessage message) throws IOException {     getNativeSession().getBasicRemote().sendPing(message.getPayload()). }
false;protected;1;4;;@Override protected void sendPongMessage(PongMessage message) throws IOException {     getNativeSession().getBasicRemote().sendPong(message.getPayload()). }
false;protected;1;4;;@Override protected void closeInternal(CloseStatus status) throws IOException {     getNativeSession().close(new CloseReason(CloseCodes.getCloseCode(status.getCode()), status.getReason())). }
