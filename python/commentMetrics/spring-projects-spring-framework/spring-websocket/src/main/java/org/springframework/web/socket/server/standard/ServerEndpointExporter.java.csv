commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Explicitly list annotated endpoint types that should be registered on startup. This  * can be done if you wish to turn off a Servlet container's scan for endpoints, which  * goes through all 3rd party jars in the, and rely on Spring configuration instead.  * @param annotatedEndpointClasses {@link ServerEndpoint}-annotated types  */ ;/**  * Explicitly list annotated endpoint types that should be registered on startup. This  * can be done if you wish to turn off a Servlet container's scan for endpoints, which  * goes through all 3rd party jars in the, and rely on Spring configuration instead.  * @param annotatedEndpointClasses {@link ServerEndpoint}-annotated types  */ public void setAnnotatedEndpointClasses(Class<?>... annotatedEndpointClasses) {     this.annotatedEndpointClasses = Arrays.asList(annotatedEndpointClasses). }
true;public;1;3;/**  * Set the JSR-356 {@link ServerContainer} to use for endpoint registration.  * If not set, the container is going to be retrieved via the {@code ServletContext}.  */ ;/**  * Set the JSR-356 {@link ServerContainer} to use for endpoint registration.  * If not set, the container is going to be retrieved via the {@code ServletContext}.  */ public void setServerContainer(@Nullable ServerContainer serverContainer) {     this.serverContainer = serverContainer. }
true;protected;0;4;/**  * Return the JSR-356 {@link ServerContainer} to use for endpoint registration.  */ ;/**  * Return the JSR-356 {@link ServerContainer} to use for endpoint registration.  */ @Nullable protected ServerContainer getServerContainer() {     return this.serverContainer. }
false;protected;1;7;;@Override protected void initServletContext(ServletContext servletContext) {     if (this.serverContainer == null) {         this.serverContainer = (ServerContainer) servletContext.getAttribute("javax.websocket.server.ServerContainer").     } }
false;protected;0;4;;@Override protected boolean isContextRequired() {     return false. }
false;public;0;4;;@Override public void afterPropertiesSet() {     Assert.state(getServerContainer() != null, "javax.websocket.server.ServerContainer not available"). }
false;public;0;4;;@Override public void afterSingletonsInstantiated() {     registerEndpoints(). }
true;protected;0;25;/**  * Actually register the endpoints. Called by {@link #afterSingletonsInstantiated()}.  */ ;/**  * Actually register the endpoints. Called by {@link #afterSingletonsInstantiated()}.  */ protected void registerEndpoints() {     Set<Class<?>> endpointClasses = new LinkedHashSet<>().     if (this.annotatedEndpointClasses != null) {         endpointClasses.addAll(this.annotatedEndpointClasses).     }     ApplicationContext context = getApplicationContext().     if (context != null) {         String[] endpointBeanNames = context.getBeanNamesForAnnotation(ServerEndpoint.class).         for (String beanName : endpointBeanNames) {             endpointClasses.add(context.getType(beanName)).         }     }     for (Class<?> endpointClass : endpointClasses) {         registerEndpoint(endpointClass).     }     if (context != null) {         Map<String, ServerEndpointConfig> endpointConfigMap = context.getBeansOfType(ServerEndpointConfig.class).         for (ServerEndpointConfig endpointConfig : endpointConfigMap.values()) {             registerEndpoint(endpointConfig).         }     } }
false;private;1;17;;private void registerEndpoint(Class<?> endpointClass) {     ServerContainer serverContainer = getServerContainer().     Assert.state(serverContainer != null, "No ServerContainer set. Most likely the server's own WebSocket ServletContainerInitializer " + "has not run yet. Was the Spring ApplicationContext refreshed through a " + "org.springframework.web.context.ContextLoaderListener, " + "i.e. after the ServletContext has been fully initialized?").     try {         if (logger.isDebugEnabled()) {             logger.debug("Registering @ServerEndpoint class: " + endpointClass).         }         serverContainer.addEndpoint(endpointClass).     } catch (DeploymentException ex) {         throw new IllegalStateException("Failed to register @ServerEndpoint class: " + endpointClass, ex).     } }
false;private;1;13;;private void registerEndpoint(ServerEndpointConfig endpointConfig) {     ServerContainer serverContainer = getServerContainer().     Assert.state(serverContainer != null, "No ServerContainer set").     try {         if (logger.isDebugEnabled()) {             logger.debug("Registering ServerEndpointConfig: " + endpointConfig).         }         serverContainer.addEndpoint(endpointConfig).     } catch (DeploymentException ex) {         throw new IllegalStateException("Failed to register ServerEndpointConfig: " + endpointConfig, ex).     } }
