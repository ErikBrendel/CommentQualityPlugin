commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;9;;private static Constructor<?> getEndpointConstructor() {     for (Constructor<?> current : TyrusEndpointWrapper.class.getConstructors()) {         Class<?>[] types = current.getParameterTypes().         if (Endpoint.class == types[0] && EndpointConfig.class == types[1]) {             return current.         }     }     throw new IllegalStateException("No compatible Tyrus version found"). }
false;public;0;4;;@Override public String[] getSupportedVersions() {     return StringUtils.tokenizeToStringArray(Version.getSupportedWireProtocolVersions(), ","). }
false;protected;1;9;;@Override protected List<WebSocketExtension> getInstalledExtensions(WebSocketContainer container) {     try {         return super.getInstalledExtensions(container).     } catch (UnsupportedOperationException ex) {         return new ArrayList<>(0).     } }
false;public;5;41;;@Override public void upgradeInternal(ServerHttpRequest request, ServerHttpResponse response, @Nullable String selectedProtocol, List<Extension> extensions, Endpoint endpoint) throws HandshakeFailureException {     HttpServletRequest servletRequest = getHttpServletRequest(request).     HttpServletResponse servletResponse = getHttpServletResponse(response).     TyrusServerContainer serverContainer = (TyrusServerContainer) getContainer(servletRequest).     TyrusWebSocketEngine engine = (TyrusWebSocketEngine) serverContainer.getWebSocketEngine().     Object tyrusEndpoint = null.     boolean success.     try {         // Shouldn't matter for processing but must be unique         String path = "/" + random.nextLong().         tyrusEndpoint = createTyrusEndpoint(endpoint, path, selectedProtocol, extensions, serverContainer, engine).         register(engine, tyrusEndpoint).         HttpHeaders headers = request.getHeaders().         RequestContext requestContext = createRequestContext(servletRequest, path, headers).         TyrusUpgradeResponse upgradeResponse = new TyrusUpgradeResponse().         UpgradeInfo upgradeInfo = engine.upgrade(requestContext, upgradeResponse).         success = SUCCESS.equals(upgradeInfo.getStatus()).         if (success) {             if (logger.isTraceEnabled()) {                 logger.trace("Successful request upgrade: " + upgradeResponse.getHeaders()).             }             handleSuccess(servletRequest, servletResponse, upgradeInfo, upgradeResponse).         }     } catch (Exception ex) {         unregisterTyrusEndpoint(engine, tyrusEndpoint).         throw new HandshakeFailureException("Error during handshake: " + request.getURI(), ex).     }     unregisterTyrusEndpoint(engine, tyrusEndpoint).     if (!success) {         throw new HandshakeFailureException("Unexpected handshake failure: " + request.getURI()).     } }
false;private;6;9;;private Object createTyrusEndpoint(Endpoint endpoint, String endpointPath, @Nullable String protocol, List<Extension> extensions, WebSocketContainer container, TyrusWebSocketEngine engine) throws DeploymentException {     ServerEndpointRegistration endpointConfig = new ServerEndpointRegistration(endpointPath, endpoint).     endpointConfig.setSubprotocols(Collections.singletonList(protocol)).     endpointConfig.setExtensions(extensions).     return createEndpoint(endpointConfig, this.componentProvider, container, engine). }
false;private;3;11;;private RequestContext createRequestContext(HttpServletRequest request, String endpointPath, HttpHeaders headers) {     RequestContext context = RequestContext.Builder.create().requestURI(URI.create(endpointPath)).userPrincipal(request.getUserPrincipal()).secure(request.isSecure()).remoteAddr(request.getRemoteAddr()).build().     headers.forEach((header, value) -> context.getHeaders().put(header, value)).     return context. }
false;private;2;10;;private void unregisterTyrusEndpoint(TyrusWebSocketEngine engine, @Nullable Object tyrusEndpoint) {     if (tyrusEndpoint != null) {         try {             unregister(engine, tyrusEndpoint).         } catch (Throwable ex) {         // ignore         }     } }
false;private;4;21;;private Object createEndpoint(ServerEndpointRegistration registration, ComponentProviderService provider, WebSocketContainer container, TyrusWebSocketEngine engine) throws DeploymentException {     DirectFieldAccessor accessor = new DirectFieldAccessor(engine).     Object sessionListener = accessor.getPropertyValue("sessionListener").     Object clusterContext = accessor.getPropertyValue("clusterContext").     try {         if (constructorWithBooleanArgument) {             // Tyrus 1.11+             return constructor.newInstance(registration.getEndpoint(), registration, provider, container, "/", registration.getConfigurator(), sessionListener, clusterContext, null, Boolean.TRUE).         } else {             return constructor.newInstance(registration.getEndpoint(), registration, provider, container, "/", registration.getConfigurator(), sessionListener, clusterContext, null).         }     } catch (Exception ex) {         throw new HandshakeFailureException("Failed to register " + registration, ex).     } }
false;private;2;8;;private void register(TyrusWebSocketEngine engine, Object endpoint) {     try {         registerMethod.invoke(engine, endpoint).     } catch (Exception ex) {         throw new HandshakeFailureException("Failed to register " + endpoint, ex).     } }
false;private;2;8;;private void unregister(TyrusWebSocketEngine engine, Object endpoint) {     try {         unRegisterMethod.invoke(engine, endpoint).     } catch (Exception ex) {         throw new HandshakeFailureException("Failed to unregister " + endpoint, ex).     } }
false;protected,abstract;4;2;;protected abstract void handleSuccess(HttpServletRequest request, HttpServletResponse response, UpgradeInfo upgradeInfo, TyrusUpgradeResponse upgradeResponse) throws IOException, ServletException.
