commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return information about the SockJS URL including server and session ID.  */ ;/**  * Return information about the SockJS URL including server and session ID.  */ SockJsUrlInfo getSockJsUrlInfo().
true;;0;1;/**  * Return the headers to send with the connect request.  */ ;/**  * Return the headers to send with the connect request.  */ HttpHeaders getHandshakeHeaders().
true;;0;1;/**  * Return the headers to add to all other HTTP requests besides the handshake  * request such as XHR receive and send requests.  * @since 4.2  */ ;/**  * Return the headers to add to all other HTTP requests besides the handshake  * request such as XHR receive and send requests.  * @since 4.2  */ HttpHeaders getHttpRequestHeaders().
true;;0;1;/**  * Return the transport URL for the given transport.  * <p>For an {@link XhrTransport} this is the URL for receiving messages.  */ ;/**  * Return the transport URL for the given transport.  * <p>For an {@link XhrTransport} this is the URL for receiving messages.  */ URI getTransportUrl().
true;;0;2;/**  * Return the user associated with the request, if any.  */ ;/**  * Return the user associated with the request, if any.  */ @Nullable Principal getUser().
true;;0;1;/**  * Return the message codec to use for encoding SockJS messages.  */ ;/**  * Return the message codec to use for encoding SockJS messages.  */ SockJsMessageCodec getMessageCodec().
true;;1;1;/**  * Register a timeout cleanup task to invoke if the SockJS session is not  * fully established within the calculated retransmission timeout period.  */ ;/**  * Register a timeout cleanup task to invoke if the SockJS session is not  * fully established within the calculated retransmission timeout period.  */ void addTimeoutTask(Runnable runnable).
