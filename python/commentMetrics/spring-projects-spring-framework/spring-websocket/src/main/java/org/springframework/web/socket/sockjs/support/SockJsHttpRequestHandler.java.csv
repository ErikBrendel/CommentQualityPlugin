commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the {@link SockJsService}.  */ ;/**  * Return the {@link SockJsService}.  */ public SockJsService getSockJsService() {     return this.sockJsService. }
true;public;0;3;/**  * Return the {@link WebSocketHandler}.  */ ;/**  * Return the {@link WebSocketHandler}.  */ public WebSocketHandler getWebSocketHandler() {     return this.webSocketHandler. }
false;public;1;6;;@Override public void setServletContext(ServletContext servletContext) {     if (this.sockJsService instanceof ServletContextAware) {         ((ServletContextAware) this.sockJsService).setServletContext(servletContext).     } }
false;public;0;9;;@Override public void start() {     if (!isRunning()) {         this.running = true.         if (this.sockJsService instanceof Lifecycle) {             ((Lifecycle) this.sockJsService).start().         }     } }
false;public;0;9;;@Override public void stop() {     if (isRunning()) {         this.running = false.         if (this.sockJsService instanceof Lifecycle) {             ((Lifecycle) this.sockJsService).stop().         }     } }
false;public;0;4;;@Override public boolean isRunning() {     return this.running. }
false;public;2;14;;@Override public void handleRequest(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {     ServerHttpRequest request = new ServletServerHttpRequest(servletRequest).     ServerHttpResponse response = new ServletServerHttpResponse(servletResponse).     try {         this.sockJsService.handleRequest(request, response, getSockJsPath(servletRequest), this.webSocketHandler).     } catch (Throwable ex) {         throw new SockJsException("Uncaught failure in SockJS request, uri=" + request.getURI(), ex).     } }
false;private;1;5;;private String getSockJsPath(HttpServletRequest servletRequest) {     String attribute = HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE.     String path = (String) servletRequest.getAttribute(attribute).     return (path.length() > 0 && path.charAt(0) != '/' ? "/" + path : path). }
false;public;1;8;;@Override @Nullable public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {     if (this.sockJsService instanceof CorsConfigurationSource) {         return ((CorsConfigurationSource) this.sockJsService).getCorsConfiguration(request).     }     return null. }
