# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSockJsService -> protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods);1414354684;Check the {@code Origin} header value and eventually call {@link #addCorsHeaders(ServerHttpRequest, ServerHttpResponse, HttpMethod...)}._If the request origin is not allowed, the request is rejected._@return false if the request is rejected, else true_@since 4.1.2;protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		String origin = requestHeaders.getOrigin()___		if(!this.allowedOrigins.contains("*") && (origin == null || !this.allowedOrigins.contains(origin))) {_			logger.debug("Request rejected, Origin header value " + origin + " not allowed")__			response.setStatusCode(HttpStatus.FORBIDDEN)__			return false__		}__		boolean hasCorsResponseHeaders = false__		try {_			_			hasCorsResponseHeaders = !CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))__		}_		catch (NullPointerException npe) {_			_		}__		if(origin != null && !hasCorsResponseHeaders) {_			addCorsHeaders(request, response, httpMethods)__		}_		return true__	};check,the,code,origin,header,value,and,eventually,call,link,add,cors,headers,server,http,request,server,http,response,http,method,if,the,request,origin,is,not,allowed,the,request,is,rejected,return,false,if,the,request,is,rejected,else,true,since,4,1,2;protected,boolean,check,and,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,string,origin,request,headers,get,origin,if,this,allowed,origins,contains,origin,null,this,allowed,origins,contains,origin,logger,debug,request,rejected,origin,header,value,origin,not,allowed,response,set,status,code,http,status,forbidden,return,false,boolean,has,cors,response,headers,false,try,has,cors,response,headers,collection,utils,is,empty,response,headers,get,access,control,allow,origin,catch,null,pointer,exception,npe,if,origin,null,has,cors,response,headers,add,cors,headers,request,response,http,methods,return,true
AbstractSockJsService -> protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods);1414354853;Check the {@code Origin} header value and eventually call {@link #addCorsHeaders(ServerHttpRequest, ServerHttpResponse, HttpMethod...)}._If the request origin is not allowed, the request is rejected._@return false if the request is rejected, else true_@since 4.1.2;protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		String origin = requestHeaders.getOrigin()___		if(!this.allowedOrigins.contains("*") && (origin == null || !this.allowedOrigins.contains(origin))) {_			logger.debug("Request rejected, Origin header value " + origin + " not allowed")__			response.setStatusCode(HttpStatus.FORBIDDEN)__			return false__		}__		boolean hasCorsResponseHeaders = false__		try {_			_			hasCorsResponseHeaders = !CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))__		}_		catch (NullPointerException npe) {_			_		}__		if(!this.suppressCors && origin != null && !hasCorsResponseHeaders) {_			addCorsHeaders(request, response, httpMethods)__		}_		return true__	};check,the,code,origin,header,value,and,eventually,call,link,add,cors,headers,server,http,request,server,http,response,http,method,if,the,request,origin,is,not,allowed,the,request,is,rejected,return,false,if,the,request,is,rejected,else,true,since,4,1,2;protected,boolean,check,and,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,string,origin,request,headers,get,origin,if,this,allowed,origins,contains,origin,null,this,allowed,origins,contains,origin,logger,debug,request,rejected,origin,header,value,origin,not,allowed,response,set,status,code,http,status,forbidden,return,false,boolean,has,cors,response,headers,false,try,has,cors,response,headers,collection,utils,is,empty,response,headers,get,access,control,allow,origin,catch,null,pointer,exception,npe,if,this,suppress,cors,origin,null,has,cors,response,headers,add,cors,headers,request,response,http,methods,return,true
AbstractSockJsService -> protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods);1414412881;Check the {@code Origin} header value and eventually call {@link #addCorsHeaders(ServerHttpRequest, ServerHttpResponse, HttpMethod...)}._If the request origin is not allowed, the request is rejected._@return false if the request is rejected, else true_@since 4.1.2;protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		String origin = requestHeaders.getOrigin()___		if(!this.allowedOrigins.contains("*") && (origin == null || !this.allowedOrigins.contains(origin))) {_			logger.debug("Request rejected, Origin header value " + origin + " not allowed")__			response.setStatusCode(HttpStatus.FORBIDDEN)__			return false__		}__		boolean hasCorsResponseHeaders = false__		try {_			_			hasCorsResponseHeaders = !CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))__		}_		catch (NullPointerException npe) {_			_		}__		if(!this.suppressCors && origin != null && !hasCorsResponseHeaders) {_			addCorsHeaders(request, response, httpMethods)__		}_		return true__	};check,the,code,origin,header,value,and,eventually,call,link,add,cors,headers,server,http,request,server,http,response,http,method,if,the,request,origin,is,not,allowed,the,request,is,rejected,return,false,if,the,request,is,rejected,else,true,since,4,1,2;protected,boolean,check,and,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,string,origin,request,headers,get,origin,if,this,allowed,origins,contains,origin,null,this,allowed,origins,contains,origin,logger,debug,request,rejected,origin,header,value,origin,not,allowed,response,set,status,code,http,status,forbidden,return,false,boolean,has,cors,response,headers,false,try,has,cors,response,headers,collection,utils,is,empty,response,headers,get,access,control,allow,origin,catch,null,pointer,exception,npe,if,this,suppress,cors,origin,null,has,cors,response,headers,add,cors,headers,request,response,http,methods,return,true
AbstractSockJsService -> protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods);1414415063;Check the {@code Origin} header value and eventually call {@link #addCorsHeaders(ServerHttpRequest, ServerHttpResponse, HttpMethod...)}._If the request origin is not allowed, the request is rejected._@return false if the request is rejected, else true_@since 4.1.2;protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		String origin = requestHeaders.getOrigin()___		if (!this.allowedOrigins.contains("*") && (origin == null || !this.allowedOrigins.contains(origin))) {_			logger.debug("Request rejected, Origin header value " + origin + " not allowed")__			response.setStatusCode(HttpStatus.FORBIDDEN)__			return false__		}__		boolean hasCorsResponseHeaders = false__		try {_			_			hasCorsResponseHeaders = !CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))__		}_		catch (NullPointerException npe) {_			_		}__		if (!this.suppressCors && origin != null && !hasCorsResponseHeaders) {_			addCorsHeaders(request, response, httpMethods)__		}_		return true__	};check,the,code,origin,header,value,and,eventually,call,link,add,cors,headers,server,http,request,server,http,response,http,method,if,the,request,origin,is,not,allowed,the,request,is,rejected,return,false,if,the,request,is,rejected,else,true,since,4,1,2;protected,boolean,check,and,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,string,origin,request,headers,get,origin,if,this,allowed,origins,contains,origin,null,this,allowed,origins,contains,origin,logger,debug,request,rejected,origin,header,value,origin,not,allowed,response,set,status,code,http,status,forbidden,return,false,boolean,has,cors,response,headers,false,try,has,cors,response,headers,collection,utils,is,empty,response,headers,get,access,control,allow,origin,catch,null,pointer,exception,npe,if,this,suppress,cors,origin,null,has,cors,response,headers,add,cors,headers,request,response,http,methods,return,true
AbstractSockJsService -> protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods);1415669910;Check the {@code Origin} header value and eventually call {@link #addCorsHeaders(ServerHttpRequest, ServerHttpResponse, HttpMethod...)}._If the request origin is not allowed, the request is rejected._@return false if the request is rejected, else true_@since 4.1.2;protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		String origin = requestHeaders.getOrigin()___		if (!this.allowedOrigins.contains("*") && (origin == null || !this.allowedOrigins.contains(origin))) {_			logger.debug("Request rejected, Origin header value " + origin + " not allowed")__			response.setStatusCode(HttpStatus.FORBIDDEN)__			return false__		}__		boolean hasCorsResponseHeaders = false__		try {_			_			hasCorsResponseHeaders = !CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))__		}_		catch (NullPointerException npe) {_			_		}__		if (!this.suppressCors && origin != null && !hasCorsResponseHeaders) {_			addCorsHeaders(request, response, httpMethods)__		}_		return true__	};check,the,code,origin,header,value,and,eventually,call,link,add,cors,headers,server,http,request,server,http,response,http,method,if,the,request,origin,is,not,allowed,the,request,is,rejected,return,false,if,the,request,is,rejected,else,true,since,4,1,2;protected,boolean,check,and,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,string,origin,request,headers,get,origin,if,this,allowed,origins,contains,origin,null,this,allowed,origins,contains,origin,logger,debug,request,rejected,origin,header,value,origin,not,allowed,response,set,status,code,http,status,forbidden,return,false,boolean,has,cors,response,headers,false,try,has,cors,response,headers,collection,utils,is,empty,response,headers,get,access,control,allow,origin,catch,null,pointer,exception,npe,if,this,suppress,cors,origin,null,has,cors,response,headers,add,cors,headers,request,response,http,methods,return,true
AbstractSockJsService -> protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods);1423479411;Check the {@code Origin} header value and eventually call {@link #addCorsHeaders(ServerHttpRequest, ServerHttpResponse, HttpMethod...)}._If the request origin is not allowed, the request is rejected._@return false if the request is rejected, else true_@since 4.1.2;protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		String origin = requestHeaders.getOrigin()__		String host = requestHeaders.getFirst(HttpHeaders.HOST)___		if (origin == null) {_			return true__		}__		if (!this.allowedOrigins.contains("*") && !this.allowedOrigins.contains(origin)) {_			logger.debug("Request rejected, Origin header value " + origin + " not allowed")__			response.setStatusCode(HttpStatus.FORBIDDEN)__			return false__		}__		boolean hasCorsResponseHeaders = false__		try {_			_			hasCorsResponseHeaders = !CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))__		}_		catch (NullPointerException npe) {_			_		}__		if (!this.suppressCors && !hasCorsResponseHeaders) {_			addCorsHeaders(request, response, httpMethods)__		}_		return true__	};check,the,code,origin,header,value,and,eventually,call,link,add,cors,headers,server,http,request,server,http,response,http,method,if,the,request,origin,is,not,allowed,the,request,is,rejected,return,false,if,the,request,is,rejected,else,true,since,4,1,2;protected,boolean,check,and,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,string,origin,request,headers,get,origin,string,host,request,headers,get,first,http,headers,host,if,origin,null,return,true,if,this,allowed,origins,contains,this,allowed,origins,contains,origin,logger,debug,request,rejected,origin,header,value,origin,not,allowed,response,set,status,code,http,status,forbidden,return,false,boolean,has,cors,response,headers,false,try,has,cors,response,headers,collection,utils,is,empty,response,headers,get,access,control,allow,origin,catch,null,pointer,exception,npe,if,this,suppress,cors,has,cors,response,headers,add,cors,headers,request,response,http,methods,return,true
AbstractSockJsService -> protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods);1424248215;Check the {@code Origin} header value and eventually call {@link #addCorsHeaders(ServerHttpRequest, ServerHttpResponse, HttpMethod...)}._If the request origin is not allowed, the request is rejected._@return false if the request is rejected, else true_@since 4.1.2;protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		String origin = requestHeaders.getOrigin()___		if (origin == null) {_			return true__		}__		if (!WebUtils.isValidOrigin(request, this.allowedOrigins)) {_			logger.debug("Request rejected, Origin header value " + origin + " not allowed")__			response.setStatusCode(HttpStatus.FORBIDDEN)__			return false__		}__		boolean hasCorsResponseHeaders = false__		try {_			_			hasCorsResponseHeaders = !CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))__		}_		catch (NullPointerException npe) {_			_		}__		if (!this.suppressCors && !hasCorsResponseHeaders) {_			addCorsHeaders(request, response, httpMethods)__		}_		return true__	};check,the,code,origin,header,value,and,eventually,call,link,add,cors,headers,server,http,request,server,http,response,http,method,if,the,request,origin,is,not,allowed,the,request,is,rejected,return,false,if,the,request,is,rejected,else,true,since,4,1,2;protected,boolean,check,and,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,string,origin,request,headers,get,origin,if,origin,null,return,true,if,web,utils,is,valid,origin,request,this,allowed,origins,logger,debug,request,rejected,origin,header,value,origin,not,allowed,response,set,status,code,http,status,forbidden,return,false,boolean,has,cors,response,headers,false,try,has,cors,response,headers,collection,utils,is,empty,response,headers,get,access,control,allow,origin,catch,null,pointer,exception,npe,if,this,suppress,cors,has,cors,response,headers,add,cors,headers,request,response,http,methods,return,true
AbstractSockJsService -> protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods);1424361139;Check the {@code Origin} header value and eventually call {@link #addCorsHeaders(ServerHttpRequest, ServerHttpResponse, HttpMethod...)}._If the request origin is not allowed, the request is rejected._@return false if the request is rejected, else true_@since 4.1.2;protected boolean checkAndAddCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		String origin = requestHeaders.getOrigin()___		if (origin == null) {_			return true__		}__		if (!WebUtils.isValidOrigin(request, this.allowedOrigins)) {_			logger.debug("Request rejected, Origin header value " + origin + " not allowed")__			response.setStatusCode(HttpStatus.FORBIDDEN)__			return false__		}__		boolean hasCorsResponseHeaders = false__		try {_			_			hasCorsResponseHeaders = !CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))__		}_		catch (NullPointerException npe) {_			_		}__		if (!this.suppressCors && !hasCorsResponseHeaders) {_			addCorsHeaders(request, response, httpMethods)__		}_		return true__	};check,the,code,origin,header,value,and,eventually,call,link,add,cors,headers,server,http,request,server,http,response,http,method,if,the,request,origin,is,not,allowed,the,request,is,rejected,return,false,if,the,request,is,rejected,else,true,since,4,1,2;protected,boolean,check,and,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,string,origin,request,headers,get,origin,if,origin,null,return,true,if,web,utils,is,valid,origin,request,this,allowed,origins,logger,debug,request,rejected,origin,header,value,origin,not,allowed,response,set,status,code,http,status,forbidden,return,false,boolean,has,cors,response,headers,false,try,has,cors,response,headers,collection,utils,is,empty,response,headers,get,access,control,allow,origin,catch,null,pointer,exception,npe,if,this,suppress,cors,has,cors,response,headers,add,cors,headers,request,response,http,methods,return,true
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1375321376;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1375461043;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1375479608;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1375542207;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1376429281;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1377100811;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1377218103;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1380214379;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1380590369;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1380591979;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1383881295;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1385412762;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports.__<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1385507478;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1386462352;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1394071606;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1395630903;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1398144543;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1402065124;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1403819230;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1403856366;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1404211929;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be send over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,send,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1404762340;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1404880799;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1404881166;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1411760528;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1412779070;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1414354684;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1414354853;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1414412881;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1414415063;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1415669910;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1423479411;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1424248215;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1424361139;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1427983931;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1430734105;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1435844316;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1442848138;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1444217152;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1444241178;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1444898007;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1449242513;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1449660404;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1467730834;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1468964586;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1496837955;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1502974979;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1516036044;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1518987682;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1520537868;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1525511255;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1528452948;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1530174524;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1530174524;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setStreamBytesLimit(int streamBytesLimit);1530174524;Streaming transports save responses on the client side and don't free_memory used by delivered messages. Such transports need to recycle the_connection once in a while. This property sets a minimum number of bytes_that can be sent over a single HTTP streaming request before it will be_closed. After that client will open a new request. Setting this value to_one effectively disables streaming and will make streaming transports to_behave like polling transports._<p>The default value is 128K (i.e. 128 * 1024).;public void setStreamBytesLimit(int streamBytesLimit) {_		this.streamBytesLimit = streamBytesLimit__	};streaming,transports,save,responses,on,the,client,side,and,don,t,free,memory,used,by,delivered,messages,such,transports,need,to,recycle,the,connection,once,in,a,while,this,property,sets,a,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed,after,that,client,will,open,a,new,request,setting,this,value,to,one,effectively,disables,streaming,and,will,make,streaming,transports,to,behave,like,polling,transports,p,the,default,value,is,128k,i,e,128,1024;public,void,set,stream,bytes,limit,int,stream,bytes,limit,this,stream,bytes,limit,stream,bytes,limit
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1375321376;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1375461043;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1375479608;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1375542207;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1376429281;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1377100811;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1377218103;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1380214379;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1380590369;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1380591979;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1383881295;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1385412762;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1385507478;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url._<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1386462352;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url._<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1394071606;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring its_url._<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,its,url,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1395630903;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring that url._For more details see the reference documentation.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,that,url,for,more,details,see,the,reference,documentation,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1398144543;Transports which don't support cross-domain communication natively (e.g._"eventsource", "htmlfile") rely on serving a simple page (using the_"foreign" domain) from an invisible iframe. Code run from this iframe_doesn't need to worry about cross-domain issues since it is running from_a domain local to the SockJS server. The iframe does need to load the_SockJS javascript client library and this option allows configuring that url._For more details see the reference documentation.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js".;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,which,don,t,support,cross,domain,communication,natively,e,g,eventsource,htmlfile,rely,on,serving,a,simple,page,using,the,foreign,domain,from,an,invisible,iframe,code,run,from,this,iframe,doesn,t,need,to,worry,about,cross,domain,issues,since,it,is,running,from,a,domain,local,to,the,sock,js,server,the,iframe,does,need,to,load,the,sock,js,javascript,client,library,and,this,option,allows,configuring,that,url,for,more,details,see,the,reference,documentation,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1402065124;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js". However it can_also be set to point to a URL served by the application.__<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1403819230;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js". However it can_also be set to point to a URL served by the application.__<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1403856366;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from.__<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js". However it can_also be set to point to a URL served by the application.__<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1404211929;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1404762340;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1404880799;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1404881166;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1411760528;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://d1fxtkz8shb9d2.cloudfront.net/sockjs-0.3.4.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,d1fxtkz8shb9d2,cloudfront,net,sockjs,0,3,4,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1412779070;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1414354684;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1414354853;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1414412881;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1414415063;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1415669910;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1423479411;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1424248215;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1424361139;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1427983931;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1430734105;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,0,3,4,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1435844316;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1442848138;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1444217152;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1444241178;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1444898007;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1449242513;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1449660404;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1467730834;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1468964586;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1496837955;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1502974979;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1516036044;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1518987682;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1520537868;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1525511255;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1528452948;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1530174524;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1530174524;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public void setSockJsClientLibraryUrl(String clientLibraryUrl);1530174524;Transports with no native cross-domain communication (e.g. "eventsource",_"htmlfile") must get a simple page from the "foreign" domain in an invisible_iframe so that code in the iframe can run from  a domain local to the SockJS_server. Since the iframe needs to load the SockJS javascript client library,_this property allows specifying where to load it from._<p>By default this is set to point to_"https://cdn.jsdelivr.net/sockjs/1.0.0/sockjs.min.js"._However, it can also be set to point to a URL served by the application._<p>Note that it's possible to specify a relative URL in which case the URL_must be relative to the iframe URL. For example assuming a SockJS endpoint_mapped to "/sockjs", and resulting iframe URL "/sockjs/iframe.html", then the_the relative URL must start with "../../" to traverse up to the location_above the SockJS mapping. In case of a prefix-based Servlet mapping one more_traversal may be needed.;public void setSockJsClientLibraryUrl(String clientLibraryUrl) {_		this.clientLibraryUrl = clientLibraryUrl__	};transports,with,no,native,cross,domain,communication,e,g,eventsource,htmlfile,must,get,a,simple,page,from,the,foreign,domain,in,an,invisible,iframe,so,that,code,in,the,iframe,can,run,from,a,domain,local,to,the,sock,js,server,since,the,iframe,needs,to,load,the,sock,js,javascript,client,library,this,property,allows,specifying,where,to,load,it,from,p,by,default,this,is,set,to,point,to,https,cdn,jsdelivr,net,sockjs,1,0,0,sockjs,min,js,however,it,can,also,be,set,to,point,to,a,url,served,by,the,application,p,note,that,it,s,possible,to,specify,a,relative,url,in,which,case,the,url,must,be,relative,to,the,iframe,url,for,example,assuming,a,sock,js,endpoint,mapped,to,sockjs,and,resulting,iframe,url,sockjs,iframe,html,then,the,the,relative,url,must,start,with,to,traverse,up,to,the,location,above,the,sock,js,mapping,in,case,of,a,prefix,based,servlet,mapping,one,more,traversal,may,be,needed;public,void,set,sock,js,client,library,url,string,client,library,url,this,client,library,url,client,library,url
AbstractSockJsService -> public boolean isDummySessionCookieEnabled();1375461043;Whether setting JSESSIONID cookie is necessary._@see #setDummySessionCookieEnabled(boolean);public boolean isDummySessionCookieEnabled() {_		return this.sessionCookieEnabled__	};whether,setting,jsessionid,cookie,is,necessary,see,set,dummy,session,cookie,enabled,boolean;public,boolean,is,dummy,session,cookie,enabled,return,this,session,cookie,enabled
AbstractSockJsService -> public boolean isDummySessionCookieEnabled();1375479608;Whether setting JSESSIONID cookie is necessary._@see #setDummySessionCookieEnabled(boolean);public boolean isDummySessionCookieEnabled() {_		return this.sessionCookieEnabled__	};whether,setting,jsessionid,cookie,is,necessary,see,set,dummy,session,cookie,enabled,boolean;public,boolean,is,dummy,session,cookie,enabled,return,this,session,cookie,enabled
AbstractSockJsService -> public boolean isDummySessionCookieEnabled();1375542207;Whether setting JSESSIONID cookie is necessary._@see #setDummySessionCookieEnabled(boolean);public boolean isDummySessionCookieEnabled() {_		return this.sessionCookieEnabled__	};whether,setting,jsessionid,cookie,is,necessary,see,set,dummy,session,cookie,enabled,boolean;public,boolean,is,dummy,session,cookie,enabled,return,this,session,cookie,enabled
AbstractSockJsService -> public boolean isDummySessionCookieEnabled();1376429281;Whether setting JSESSIONID cookie is necessary._@see #setDummySessionCookieEnabled(boolean);public boolean isDummySessionCookieEnabled() {_		return this.sessionCookieEnabled__	};whether,setting,jsessionid,cookie,is,necessary,see,set,dummy,session,cookie,enabled,boolean;public,boolean,is,dummy,session,cookie,enabled,return,this,session,cookie,enabled
AbstractSockJsService -> public boolean isDummySessionCookieEnabled();1377100811;Whether setting JSESSIONID cookie is necessary._@see #setDummySessionCookieEnabled(boolean);public boolean isDummySessionCookieEnabled() {_		return this.sessionCookieEnabled__	};whether,setting,jsessionid,cookie,is,necessary,see,set,dummy,session,cookie,enabled,boolean;public,boolean,is,dummy,session,cookie,enabled,return,this,session,cookie,enabled
AbstractSockJsService -> public boolean isDummySessionCookieEnabled();1377218103;Whether setting JSESSIONID cookie is necessary._@see #setDummySessionCookieEnabled(boolean);public boolean isDummySessionCookieEnabled() {_		return this.sessionCookieEnabled__	};whether,setting,jsessionid,cookie,is,necessary,see,set,dummy,session,cookie,enabled,boolean;public,boolean,is,dummy,session,cookie,enabled,return,this,session,cookie,enabled
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1375321376;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1375461043;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1375479608;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1375542207;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1376429281;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1377100811;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1377218103;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1380214379;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1380590369;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1380591979;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1383881295;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1385412762;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1385507478;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1386462352;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1394071606;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1395630903;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1398144543;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1402065124;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1403819230;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1403856366;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1404211929;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1404762340;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1404880799;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1404881166;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1411760528;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1412779070;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1414354684;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1414354853;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1414412881;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1414415063;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1415669910;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1423479411;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1424248215;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1424361139;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1427983931;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1430734105;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1435844316;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1442848138;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1444217152;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1444241178;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1444898007;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1449242513;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1449660404;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1467730834;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1468964586;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1496837955;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1502974979;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1516036044;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1518987682;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1520537868;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1525511255;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1528452948;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1530174524;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1530174524;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public TaskScheduler getTaskScheduler();1530174524;A scheduler instance to use for scheduling heart-beat messages.;public TaskScheduler getTaskScheduler() {_		return this.taskScheduler__	};a,scheduler,instance,to,use,for,scheduling,heart,beat,messages;public,task,scheduler,get,task,scheduler,return,this,task,scheduler
AbstractSockJsService -> public long getDisconnectDelay();1375321376;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1375461043;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1375479608;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1375542207;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1376429281;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1377100811;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1377218103;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1380214379;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1380590369;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1380591979;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1383881295;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1385412762;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1385507478;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1386462352;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1394071606;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1395630903;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1398144543;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1402065124;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1403819230;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1403856366;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1404211929;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1404762340;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1404880799;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1404881166;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1411760528;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1412779070;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1414354684;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1414354853;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1414412881;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1414415063;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1415669910;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1423479411;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1424248215;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1424361139;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1427983931;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1430734105;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1435844316;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1442848138;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1444217152;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1444241178;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1444898007;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1449242513;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1449660404;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1467730834;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1468964586;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1496837955;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1502974979;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1516036044;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1518987682;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1520537868;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1525511255;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1528452948;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1530174524;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1530174524;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public long getDisconnectDelay();1530174524;Return the amount of time in milliseconds before a client is considered disconnected.;public long getDisconnectDelay() {_		return this.disconnectDelay__	};return,the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected;public,long,get,disconnect,delay,return,this,disconnect,delay
AbstractSockJsService -> public void setDummySessionCookieEnabled(boolean sessionCookieEnabled);1375461043;Some load balancers do sticky sessions, but only if there is a "JSESSIONID"_cookie. Even if it is set to a dummy value, it doesn't matter since_session information is added by the load balancer.__<p>The default value is "false" since Java servers set the session cookie.;public void setDummySessionCookieEnabled(boolean sessionCookieEnabled) {_		this.sessionCookieEnabled = sessionCookieEnabled__	};some,load,balancers,do,sticky,sessions,but,only,if,there,is,a,jsessionid,cookie,even,if,it,is,set,to,a,dummy,value,it,doesn,t,matter,since,session,information,is,added,by,the,load,balancer,p,the,default,value,is,false,since,java,servers,set,the,session,cookie;public,void,set,dummy,session,cookie,enabled,boolean,session,cookie,enabled,this,session,cookie,enabled,session,cookie,enabled
AbstractSockJsService -> public void setDummySessionCookieEnabled(boolean sessionCookieEnabled);1375479608;Some load balancers do sticky sessions, but only if there is a "JSESSIONID"_cookie. Even if it is set to a dummy value, it doesn't matter since_session information is added by the load balancer.__<p>The default value is "false" since Java servers set the session cookie.;public void setDummySessionCookieEnabled(boolean sessionCookieEnabled) {_		this.sessionCookieEnabled = sessionCookieEnabled__	};some,load,balancers,do,sticky,sessions,but,only,if,there,is,a,jsessionid,cookie,even,if,it,is,set,to,a,dummy,value,it,doesn,t,matter,since,session,information,is,added,by,the,load,balancer,p,the,default,value,is,false,since,java,servers,set,the,session,cookie;public,void,set,dummy,session,cookie,enabled,boolean,session,cookie,enabled,this,session,cookie,enabled,session,cookie,enabled
AbstractSockJsService -> public void setDummySessionCookieEnabled(boolean sessionCookieEnabled);1375542207;Some load balancers do sticky sessions, but only if there is a "JSESSIONID"_cookie. Even if it is set to a dummy value, it doesn't matter since_session information is added by the load balancer.__<p>The default value is "false" since Java servers set the session cookie.;public void setDummySessionCookieEnabled(boolean sessionCookieEnabled) {_		this.sessionCookieEnabled = sessionCookieEnabled__	};some,load,balancers,do,sticky,sessions,but,only,if,there,is,a,jsessionid,cookie,even,if,it,is,set,to,a,dummy,value,it,doesn,t,matter,since,session,information,is,added,by,the,load,balancer,p,the,default,value,is,false,since,java,servers,set,the,session,cookie;public,void,set,dummy,session,cookie,enabled,boolean,session,cookie,enabled,this,session,cookie,enabled,session,cookie,enabled
AbstractSockJsService -> public void setDummySessionCookieEnabled(boolean sessionCookieEnabled);1376429281;Some load balancers do sticky sessions, but only if there is a "JSESSIONID"_cookie. Even if it is set to a dummy value, it doesn't matter since_session information is added by the load balancer.__<p>The default value is "false" since Java servers set the session cookie.;public void setDummySessionCookieEnabled(boolean sessionCookieEnabled) {_		this.sessionCookieEnabled = sessionCookieEnabled__	};some,load,balancers,do,sticky,sessions,but,only,if,there,is,a,jsessionid,cookie,even,if,it,is,set,to,a,dummy,value,it,doesn,t,matter,since,session,information,is,added,by,the,load,balancer,p,the,default,value,is,false,since,java,servers,set,the,session,cookie;public,void,set,dummy,session,cookie,enabled,boolean,session,cookie,enabled,this,session,cookie,enabled,session,cookie,enabled
AbstractSockJsService -> public void setDummySessionCookieEnabled(boolean sessionCookieEnabled);1377100811;Some load balancers do sticky sessions, but only if there is a "JSESSIONID"_cookie. Even if it is set to a dummy value, it doesn't matter since_session information is added by the load balancer.__<p>The default value is "false" since Java servers set the session cookie.;public void setDummySessionCookieEnabled(boolean sessionCookieEnabled) {_		this.sessionCookieEnabled = sessionCookieEnabled__	};some,load,balancers,do,sticky,sessions,but,only,if,there,is,a,jsessionid,cookie,even,if,it,is,set,to,a,dummy,value,it,doesn,t,matter,since,session,information,is,added,by,the,load,balancer,p,the,default,value,is,false,since,java,servers,set,the,session,cookie;public,void,set,dummy,session,cookie,enabled,boolean,session,cookie,enabled,this,session,cookie,enabled,session,cookie,enabled
AbstractSockJsService -> public void setDummySessionCookieEnabled(boolean sessionCookieEnabled);1377218103;Some load balancers do sticky sessions, but only if there is a "JSESSIONID"_cookie. Even if it is set to a dummy value, it doesn't matter since_session information is added by the load balancer.__<p>The default value is "false" since Java servers set the session cookie.;public void setDummySessionCookieEnabled(boolean sessionCookieEnabled) {_		this.sessionCookieEnabled = sessionCookieEnabled__	};some,load,balancers,do,sticky,sessions,but,only,if,there,is,a,jsessionid,cookie,even,if,it,is,set,to,a,dummy,value,it,doesn,t,matter,since,session,information,is,added,by,the,load,balancer,p,the,default,value,is,false,since,java,servers,set,the,session,cookie;public,void,set,dummy,session,cookie,enabled,boolean,session,cookie,enabled,this,session,cookie,enabled,session,cookie,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1386462352;Some load balancers don't support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,don,t,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1394071606;Some load balancers don't support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,don,t,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1395630903;Some load balancers don't support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,don,t,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1398144543;Some load balancers don't support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,don,t,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1402065124;Some load balancers don't support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,don,t,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1403819230;Some load balancers don't support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,don,t,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1403856366;Some load balancers don't support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,don,t,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1404211929;Some load balancers don't support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,don,t,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1404762340;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1404880799;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1404881166;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1411760528;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1412779070;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1414354684;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1414354853;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1414412881;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1414415063;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1415669910;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1423479411;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1424248215;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1424361139;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1427983931;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1430734105;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1435844316;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1442848138;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1444217152;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1444241178;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1444898007;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1449242513;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1449660404;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1467730834;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1468964586;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1496837955;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1502974979;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1516036044;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1518987682;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1520537868;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1525511255;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1528452948;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1530174524;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1530174524;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setWebSocketEnabled(boolean webSocketEnabled);1530174524;Some load balancers do not support WebSocket. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketEnabled(boolean webSocketEnabled) {_		this.webSocketEnabled = webSocketEnabled__	};some,load,balancers,do,not,support,web,socket,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,socket,enabled,boolean,web,socket,enabled,this,web,socket,enabled,web,socket,enabled
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1377218103;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>_The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>_The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1380214379;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>_The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>_The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1380590369;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>_The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>_The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1380591979;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>_The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>_The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1383881295;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>_The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>_The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1385412762;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>_The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>_The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1385507478;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1386462352;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1394071606;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1395630903;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1398144543;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1402065124;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1403819230;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1403856366;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1404211929;The number of server-to-client messages that a session can cache while waiting for_the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will not_exceed the allows disconnect delay (see_{@link #setDisconnectDelay(long)}), 5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1404762340;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1404880799;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1404881166;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1411760528;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1412779070;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1414354684;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1414354853;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1414412881;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1414415063;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1415669910;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1423479411;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1424248215;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1424361139;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1427983931;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1430734105;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1435844316;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1442848138;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1444217152;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1444241178;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1444898007;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1449242513;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1449660404;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1467730834;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1468964586;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1496837955;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1502974979;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1516036044;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1518987682;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1520537868;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1525511255;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1528452948;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1530174524;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1530174524;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public void setHttpMessageCacheSize(int httpMessageCacheSize);1530174524;The number of server-to-client messages that a session can cache while waiting_for the next HTTP polling request from the client. All HTTP transports use this_property since even streaming transports recycle HTTP requests periodically._<p>The amount of time between HTTP requests should be relatively brief and will_not exceed the allows disconnect delay (see {@link #setDisconnectDelay(long)})__5 seconds by default._<p>The default size is 100.;public void setHttpMessageCacheSize(int httpMessageCacheSize) {_		this.httpMessageCacheSize = httpMessageCacheSize__	};the,number,of,server,to,client,messages,that,a,session,can,cache,while,waiting,for,the,next,http,polling,request,from,the,client,all,http,transports,use,this,property,since,even,streaming,transports,recycle,http,requests,periodically,p,the,amount,of,time,between,http,requests,should,be,relatively,brief,and,will,not,exceed,the,allows,disconnect,delay,see,link,set,disconnect,delay,long,5,seconds,by,default,p,the,default,size,is,100;public,void,set,http,message,cache,size,int,http,message,cache,size,this,http,message,cache,size,http,message,cache,size
AbstractSockJsService -> public List<String> getAllowedOrigins();1414354684;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1414354853;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1414412881;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1414415063;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1415669910;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1423479411;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1424248215;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1424361139;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1427983931;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1430734105;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1435844316;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1442848138;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1444217152;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1444241178;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> public List<String> getAllowedOrigins();1444898007;@since 4.1.2_@see #setAllowedOrigins(List);public List<String> getAllowedOrigins() {_		return Collections.unmodifiableList(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins,list;public,list,string,get,allowed,origins,return,collections,unmodifiable,list,this,allowed,origins
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1375321376;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.indexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1375461043;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.indexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1375479608;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.indexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1375542207;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.indexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1376429281;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.indexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1377100811;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.indexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1377218103;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.indexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1380214379;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.indexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1380590369;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.lastIndexOf(prefix)__				if (index != -1) {_					this.knownSockJsPrefixes.add(path.substring(0, index + prefix.length()))__					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			this.knownSockJsPrefixes.add(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			this.knownSockJsPrefixes.add(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,last,index,of,prefix,if,index,1,this,known,sock,js,prefixes,add,path,substring,0,index,prefix,length,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,this,known,sock,js,prefixes,add,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,this,known,sock,js,prefixes,add,path,return,return,null
AbstractSockJsService -> private String getSockJsPath(ServerHttpRequest request);1380591979;Return the SockJS path or null if the path could not be determined.;private String getSockJsPath(ServerHttpRequest request) {__		String path = request.getURI().getPath()___		_		if (!this.validSockJsPrefixes.isEmpty()) {_			for (String prefix : this.validSockJsPrefixes) {_				int index = path.lastIndexOf(prefix)__				if (index != -1) {_					return path.substring(index + prefix.length())__				}_			}_			return null__		}__		_		if (path.endsWith("/info")) {_			addKnownSockJsPrefix(path.substring(0, path.length() - "/info".length()))__			return "/info"__		}__		_		String match = null__		for (String sockJsPath : this.knownSockJsPrefixes) {_			if (path.startsWith(sockJsPath)) {_				if ((match == null) || (match.length() < sockJsPath.length())) {_					match = sockJsPath__				}_			}_		}_		if (match != null) {_			String result = path.substring(match.length())__			Assert.isTrue(result.charAt(0)  == '/', "Invalid SockJS path extracted from incoming path \"" +_					path + "\". The extracted SockJS path is \"" + result +_					"\". It was extracted from these known SockJS prefixes " + this.knownSockJsPrefixes +_					". Consider setting 'validSockJsPrefixes' on DefaultSockJsService.")__			return result__		}__		_		String pathNoSlash = path.endsWith("/")  ? path.substring(0, path.length() - 1) : path__		String lastSegment = pathNoSlash.substring(pathNoSlash.lastIndexOf('/') + 1)___		if (!isValidTransportType(lastSegment) && !lastSegment.startsWith("iframe")) {_			addKnownSockJsPrefix(path)__			return ""__		}__		return null__	};return,the,sock,js,path,or,null,if,the,path,could,not,be,determined;private,string,get,sock,js,path,server,http,request,request,string,path,request,get,uri,get,path,if,this,valid,sock,js,prefixes,is,empty,for,string,prefix,this,valid,sock,js,prefixes,int,index,path,last,index,of,prefix,if,index,1,return,path,substring,index,prefix,length,return,null,if,path,ends,with,info,add,known,sock,js,prefix,path,substring,0,path,length,info,length,return,info,string,match,null,for,string,sock,js,path,this,known,sock,js,prefixes,if,path,starts,with,sock,js,path,if,match,null,match,length,sock,js,path,length,match,sock,js,path,if,match,null,string,result,path,substring,match,length,assert,is,true,result,char,at,0,invalid,sock,js,path,extracted,from,incoming,path,path,the,extracted,sock,js,path,is,result,it,was,extracted,from,these,known,sock,js,prefixes,this,known,sock,js,prefixes,consider,setting,valid,sock,js,prefixes,on,default,sock,js,service,return,result,string,path,no,slash,path,ends,with,path,substring,0,path,length,1,path,string,last,segment,path,no,slash,substring,path,no,slash,last,index,of,1,if,is,valid,transport,type,last,segment,last,segment,starts,with,iframe,add,known,sock,js,prefix,path,return,return,null
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1380214379;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>_This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>_The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>_The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1380590369;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>_This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>_The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>_The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1380591979;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>_This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>_The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>_The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1383881295;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>_This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>_The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>_The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1385412762;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>_This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>_The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>_The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1385507478;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1386462352;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1394071606;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1395630903;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session.__<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies.__<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it.__<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1398144543;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session.__<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies.__<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it.__<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1402065124;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session.__<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies.__<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it.__<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1403819230;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session.__<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies.__<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it.__<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1403856366;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session.__<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies.__<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it.__<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1404211929;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1404762340;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1404880799;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1404881166;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1411760528;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1412779070;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1414354684;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1414354853;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1414412881;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1414415063;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1415669910;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1423479411;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1424248215;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1424361139;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1427983931;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1430734105;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1435844316;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1442848138;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1444217152;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1444241178;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1444898007;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1449242513;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1449660404;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1467730834;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1468964586;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1496837955;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1502974979;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1516036044;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1518987682;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1520537868;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1525511255;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1528452948;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1530174524;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1530174524;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> public void setSessionCookieNeeded(boolean sessionCookieNeeded);1530174524;The SockJS protocol requires a server to respond to an initial "/info" request from_clients with a "cookie_needed" boolean property that indicates whether the use of a_JSESSIONID cookie is required for the application to function correctly, e.g. for_load balancing or in Java Servlet containers for the use of an HTTP session._<p>This is especially important for IE 8,9 that support XDomainRequest -- a modified_AJAX/XHR -- that can do requests across domains but does not send any cookies. In_those cases, the SockJS client prefers the "iframe-htmlfile" transport over_"xdr-streaming" in order to be able to send cookies._<p>The SockJS protocol also expects a SockJS service to echo back the JSESSIONID_cookie when this property is set to true. However, when running in a Servlet_container this is not necessary since the container takes care of it._<p>The default value is "true" to maximize the chance for applications to work_correctly in IE 8,9 with support for cookies (and the JSESSIONID cookie in_particular). However, an application can choose to set this to "false" if_the use of cookies (and HTTP session) is not required.;public void setSessionCookieNeeded(boolean sessionCookieNeeded) {_		this.sessionCookieNeeded = sessionCookieNeeded__	};the,sock,js,protocol,requires,a,server,to,respond,to,an,initial,info,request,from,clients,with,a,boolean,property,that,indicates,whether,the,use,of,a,jsessionid,cookie,is,required,for,the,application,to,function,correctly,e,g,for,load,balancing,or,in,java,servlet,containers,for,the,use,of,an,http,session,p,this,is,especially,important,for,ie,8,9,that,support,xdomain,request,a,modified,ajax,xhr,that,can,do,requests,across,domains,but,does,not,send,any,cookies,in,those,cases,the,sock,js,client,prefers,the,iframe,htmlfile,transport,over,xdr,streaming,in,order,to,be,able,to,send,cookies,p,the,sock,js,protocol,also,expects,a,sock,js,service,to,echo,back,the,jsessionid,cookie,when,this,property,is,set,to,true,however,when,running,in,a,servlet,container,this,is,not,necessary,since,the,container,takes,care,of,it,p,the,default,value,is,true,to,maximize,the,chance,for,applications,to,work,correctly,in,ie,8,9,with,support,for,cookies,and,the,jsessionid,cookie,in,particular,however,an,application,can,choose,to,set,this,to,false,if,the,use,of,cookies,and,http,session,is,not,required;public,void,set,session,cookie,needed,boolean,session,cookie,needed,this,session,cookie,needed,session,cookie,needed
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1375542207;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1376429281;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1377100811;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1377218103;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1380214379;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1380590369;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1380591979;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1383881295;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1385412762;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> protected abstract boolean isValidTransportType(String transportType)_;1385507478;Validate whether the given transport String extracted from the URL is a valid_SockJS transport type (regardless of whether a transport handler is configured).;protected abstract boolean isValidTransportType(String transportType)_;validate,whether,the,given,transport,string,extracted,from,the,url,is,a,valid,sock,js,transport,type,regardless,of,whether,a,transport,handler,is,configured;protected,abstract,boolean,is,valid,transport,type,string,transport,type
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1375321376;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1375461043;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1375479608;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1375542207;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1376429281;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1377100811;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1377218103;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1380214379;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1380590369;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setValidSockJsPrefixes(String... prefixes);1380591979;Use this property to configure one or more prefixes that this SockJS service is_allowed to serve. The prefix (e.g. "/echo") is needed to extract the SockJS_specific portion of the URL (e.g. "${prefix}/info", "${prefix}/iframe.html", etc).__<p>This property is not strictly required. In most cases, the SockJS path can be_auto-detected since the initial request from the SockJS client is of the form_"{prefix}/info". Assuming the SockJS service is mapped correctly (e.g. using_Ant-style pattern "/echo/**") this should work fine. This property can be used_to configure explicitly the prefixes this service is allowed to service.__@param prefixes the prefixes to use_ prefixes do not need to include the portions_of the path that represent Servlet container context or Servlet path.;public void setValidSockJsPrefixes(String... prefixes) {__		this.validSockJsPrefixes.clear()__		for (String prefix : prefixes) {_			if (prefix.endsWith("/") && (prefix.length() > 1)) {_				prefix = prefix.substring(0, prefix.length() - 1)__			}_			this.validSockJsPrefixes.add(prefix)__		}__		_		Collections.sort(this.validSockJsPrefixes, Collections.reverseOrder(new Comparator<String>() {_			@Override_			public int compare(String o1, String o2) {_				return new Integer(o1.length()).compareTo(new Integer(o2.length()))__			}_		}))__	};use,this,property,to,configure,one,or,more,prefixes,that,this,sock,js,service,is,allowed,to,serve,the,prefix,e,g,echo,is,needed,to,extract,the,sock,js,specific,portion,of,the,url,e,g,prefix,info,prefix,iframe,html,etc,p,this,property,is,not,strictly,required,in,most,cases,the,sock,js,path,can,be,auto,detected,since,the,initial,request,from,the,sock,js,client,is,of,the,form,prefix,info,assuming,the,sock,js,service,is,mapped,correctly,e,g,using,ant,style,pattern,echo,this,should,work,fine,this,property,can,be,used,to,configure,explicitly,the,prefixes,this,service,is,allowed,to,service,param,prefixes,the,prefixes,to,use,prefixes,do,not,need,to,include,the,portions,of,the,path,that,represent,servlet,container,context,or,servlet,path;public,void,set,valid,sock,js,prefixes,string,prefixes,this,valid,sock,js,prefixes,clear,for,string,prefix,prefixes,if,prefix,ends,with,prefix,length,1,prefix,prefix,substring,0,prefix,length,1,this,valid,sock,js,prefixes,add,prefix,collections,sort,this,valid,sock,js,prefixes,collections,reverse,order,new,comparator,string,override,public,int,compare,string,o1,string,o2,return,new,integer,o1,length,compare,to,new,integer,o2,length
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1414354684;Configure allowed {@code Origin} header values. This check is mostly designed for browser_clients. There is noting preventing other types of client to modify the Origin header value.__<p>When SockJS is enabled and allowed origins are restricted, transport types that do not_use {@code Origin} headers for cross origin requests (jsonp-polling, iframe-xhr-polling,_iframe-eventsource and iframe-htmlfile) are disabled. As a consequence, IE6/IE7 won't be_supported anymore and IE8/IE9 will only be supported without cookies.__<p>By default, all origins are allowed.__@since 4.1.2_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		this.allowedOrigins.clear()__		if (allowedOrigins != null) {_			this.allowedOrigins.addAll(allowedOrigins)__		}_	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,noting,preventing,other,types,of,client,to,modify,the,origin,header,value,p,when,sock,js,is,enabled,and,allowed,origins,are,restricted,transport,types,that,do,not,use,code,origin,headers,for,cross,origin,requests,jsonp,polling,iframe,xhr,polling,iframe,eventsource,and,iframe,htmlfile,are,disabled,as,a,consequence,ie6,ie7,won,t,be,supported,anymore,and,ie8,ie9,will,only,be,supported,without,cookies,p,by,default,all,origins,are,allowed,since,4,1,2,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,this,allowed,origins,clear,if,allowed,origins,null,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1414354853;Configure allowed {@code Origin} header values. This check is mostly designed for browser_clients. There is noting preventing other types of client to modify the Origin header value.__<p>When SockJS is enabled and allowed origins are restricted, transport types that do not_use {@code Origin} headers for cross origin requests (jsonp-polling, iframe-xhr-polling,_iframe-eventsource and iframe-htmlfile) are disabled. As a consequence, IE6/IE7 won't be_supported anymore and IE8/IE9 will only be supported without cookies.__<p>By default, all origins are allowed.__@since 4.1.2_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		this.allowedOrigins.clear()__		if (allowedOrigins != null) {_			this.allowedOrigins.addAll(allowedOrigins)__		}_	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,noting,preventing,other,types,of,client,to,modify,the,origin,header,value,p,when,sock,js,is,enabled,and,allowed,origins,are,restricted,transport,types,that,do,not,use,code,origin,headers,for,cross,origin,requests,jsonp,polling,iframe,xhr,polling,iframe,eventsource,and,iframe,htmlfile,are,disabled,as,a,consequence,ie6,ie7,won,t,be,supported,anymore,and,ie8,ie9,will,only,be,supported,without,cookies,p,by,default,all,origins,are,allowed,since,4,1,2,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,this,allowed,origins,clear,if,allowed,origins,null,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1414412881;Configure allowed {@code Origin} header values. This check is mostly designed for browser_clients. There is noting preventing other types of client to modify the Origin header value.__<p>When SockJS is enabled and allowed origins are restricted, transport types that do not_use {@code Origin} headers for cross origin requests (jsonp-polling, iframe-xhr-polling,_iframe-eventsource and iframe-htmlfile) are disabled. As a consequence, IE6/IE7 won't be_supported anymore and IE8/IE9 will only be supported without cookies.__<p>By default, all origins are allowed.__@since 4.1.2_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		this.allowedOrigins.clear()__		if (allowedOrigins != null) {_			this.allowedOrigins.addAll(allowedOrigins)__		}_	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,noting,preventing,other,types,of,client,to,modify,the,origin,header,value,p,when,sock,js,is,enabled,and,allowed,origins,are,restricted,transport,types,that,do,not,use,code,origin,headers,for,cross,origin,requests,jsonp,polling,iframe,xhr,polling,iframe,eventsource,and,iframe,htmlfile,are,disabled,as,a,consequence,ie6,ie7,won,t,be,supported,anymore,and,ie8,ie9,will,only,be,supported,without,cookies,p,by,default,all,origins,are,allowed,since,4,1,2,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,this,allowed,origins,clear,if,allowed,origins,null,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1414415063;Configure allowed {@code Origin} header values. This check is mostly designed for browser_clients. There is noting preventing other types of client to modify the Origin header value.__<p>When SockJS is enabled and allowed origins are restricted, transport types that do not_use {@code Origin} headers for cross origin requests (jsonp-polling, iframe-xhr-polling,_iframe-eventsource and iframe-htmlfile) are disabled. As a consequence, IE6/IE7 won't be_supported anymore and IE8/IE9 will only be supported without cookies.__<p>By default, all origins are allowed.__@since 4.1.2_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		this.allowedOrigins.clear()__		if (allowedOrigins != null) {_			this.allowedOrigins.addAll(allowedOrigins)__		}_	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,noting,preventing,other,types,of,client,to,modify,the,origin,header,value,p,when,sock,js,is,enabled,and,allowed,origins,are,restricted,transport,types,that,do,not,use,code,origin,headers,for,cross,origin,requests,jsonp,polling,iframe,xhr,polling,iframe,eventsource,and,iframe,htmlfile,are,disabled,as,a,consequence,ie6,ie7,won,t,be,supported,anymore,and,ie8,ie9,will,only,be,supported,without,cookies,p,by,default,all,origins,are,allowed,since,4,1,2,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,this,allowed,origins,clear,if,allowed,origins,null,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1415669910;Configure allowed {@code Origin} header values. This check is mostly designed for browser_clients. There is noting preventing other types of client to modify the Origin header value.__<p>When SockJS is enabled and allowed origins are restricted, transport types that do not_use {@code Origin} headers for cross origin requests (jsonp-polling, iframe-xhr-polling,_iframe-eventsource and iframe-htmlfile) are disabled. As a consequence, IE6/IE7 won't be_supported anymore and IE8/IE9 will only be supported without cookies.__<p>By default, all origins are allowed.__@since 4.1.2_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		this.allowedOrigins.clear()__		if (allowedOrigins != null) {_			this.allowedOrigins.addAll(allowedOrigins)__		}_	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,noting,preventing,other,types,of,client,to,modify,the,origin,header,value,p,when,sock,js,is,enabled,and,allowed,origins,are,restricted,transport,types,that,do,not,use,code,origin,headers,for,cross,origin,requests,jsonp,polling,iframe,xhr,polling,iframe,eventsource,and,iframe,htmlfile,are,disabled,as,a,consequence,ie6,ie7,won,t,be,supported,anymore,and,ie8,ie9,will,only,be,supported,without,cookies,p,by,default,all,origins,are,allowed,since,4,1,2,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,this,allowed,origins,clear,if,allowed,origins,null,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1423479411;Configure allowed {@code Origin} header values. This check is mostly designed for_browser clients. There is nothing preventing other types of client to modify the_{@code Origin} header value.__<p>When SockJS is enabled and origins are restricted, transport types that do not_allow to check request origin (JSONP and Iframe based transports) are disabled._As a consequence, IE 6 to 9 are not supported when origins are restricted.__<p>Each provided allowed origin must start by "http://", "https://" or be "*"_(means that all origins are allowed). Empty allowed origin list is not supported._By default, all origins are allowed.__@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notEmpty(allowedOrigins, "Allowed origin List must not be empty")__		for (String allowedOrigin : allowedOrigins) {_			Assert.isTrue(_					allowedOrigin.equals("*") || allowedOrigin.startsWith("http://") ||_							allowedOrigin.startsWith("https://"),_					"Invalid allowed origin provided: \"" +_							allowedOrigin +_							"\". It must start with \"http://\", \"https://\" or be \"*\"")__		}_		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,start,by,http,https,or,be,means,that,all,origins,are,allowed,empty,allowed,origin,list,is,not,supported,by,default,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,empty,allowed,origins,allowed,origin,list,must,not,be,empty,for,string,allowed,origin,allowed,origins,assert,is,true,allowed,origin,equals,allowed,origin,starts,with,http,allowed,origin,starts,with,https,invalid,allowed,origin,provided,allowed,origin,it,must,start,with,http,https,or,be,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1424248215;Configure allowed {@code Origin} header values. This check is mostly designed for_browser clients. There is nothing preventing other types of client to modify the_{@code Origin} header value.__<p>When SockJS is enabled and origins are restricted, transport types that do not_allow to check request origin (JSONP and Iframe based transports) are disabled._As a consequence, IE 6 to 9 are not supported when origins are restricted.__<p>Each provided allowed origin must start by "http://", "https://" or be "*"_(means that all origins are allowed).__@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		for (String allowedOrigin : allowedOrigins) {_			Assert.isTrue(_					allowedOrigin.equals("*") || allowedOrigin.startsWith("http://") ||_							allowedOrigin.startsWith("https://"),_					"Invalid allowed origin provided: \"" +_							allowedOrigin +_							"\". It must start with \"http://\", \"https://\" or be \"*\"")__		}_		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,start,by,http,https,or,be,means,that,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,for,string,allowed,origin,allowed,origins,assert,is,true,allowed,origin,equals,allowed,origin,starts,with,http,allowed,origin,starts,with,https,invalid,allowed,origin,provided,allowed,origin,it,must,start,with,http,https,or,be,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1424361139;Configure allowed {@code Origin} header values. This check is mostly designed for_browser clients. There is nothing preventing other types of client to modify the_{@code Origin} header value.__<p>When SockJS is enabled and origins are restricted, transport types that do not_allow to check request origin (JSONP and Iframe based transports) are disabled._As a consequence, IE 6 to 9 are not supported when origins are restricted.__<p>Each provided allowed origin must start by "http://", "https://" or be "*"_(means that all origins are allowed).__@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		for (String allowedOrigin : allowedOrigins) {_			Assert.isTrue(_					allowedOrigin.equals("*") || allowedOrigin.startsWith("http://") ||_							allowedOrigin.startsWith("https://"),_					"Invalid allowed origin provided: \"" +_							allowedOrigin +_							"\". It must start with \"http://\", \"https://\" or be \"*\"")__		}_		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,start,by,http,https,or,be,means,that,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,for,string,allowed,origin,allowed,origins,assert,is,true,allowed,origin,equals,allowed,origin,starts,with,http,allowed,origin,starts,with,https,invalid,allowed,origin,provided,allowed,origin,it,must,start,with,http,https,or,be,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1427983931;Configure allowed {@code Origin} header values. This check is mostly designed for_browser clients. There is nothing preventing other types of client to modify the_{@code Origin} header value.__<p>When SockJS is enabled and origins are restricted, transport types that do not_allow to check request origin (JSONP and Iframe based transports) are disabled._As a consequence, IE 6 to 9 are not supported when origins are restricted.__<p>Each provided allowed origin must start by "http://", "https://" or be "*"_(means that all origins are allowed).__@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		for (String allowedOrigin : allowedOrigins) {_			Assert.isTrue(_					allowedOrigin.equals("*") || allowedOrigin.startsWith("http://") ||_							allowedOrigin.startsWith("https://"),_					"Invalid allowed origin provided: \"" +_							allowedOrigin +_							"\". It must start with \"http://\", \"https://\" or be \"*\"")__		}_		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browser,clients,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,start,by,http,https,or,be,means,that,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,for,string,allowed,origin,allowed,origins,assert,is,true,allowed,origin,equals,allowed,origin,starts,with,http,allowed,origin,starts,with,https,invalid,allowed,origin,provided,allowed,origin,it,must,start,with,http,https,or,be,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1430734105;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value.__<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted.__<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed.__@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1435844316;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value.__<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted.__<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed.__@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1442848138;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value.__<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted.__<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed.__@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1444217152;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1444241178;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(List<String> allowedOrigins);1444898007;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(List<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origin List must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,list,string,allowed,origins,assert,not,null,allowed,origins,allowed,origin,list,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public boolean isWebSocketEnabled();1375321376;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1375461043;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1375479608;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1375542207;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1376429281;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1377100811;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1377218103;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1380214379;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1380590369;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1380591979;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1383881295;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1385412762;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1385507478;Whether WebSocket transport is enabled._@see #setWebSocketsEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketsEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,sockets,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,sockets,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1386462352;Whether WebSocket transport is enabled._@see #setWebSocketEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,socket,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1394071606;Whether WebSocket transport is enabled._@see #setWebSocketEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,socket,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1395630903;Whether WebSocket transport is enabled._@see #setWebSocketEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,socket,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1398144543;Whether WebSocket transport is enabled._@see #setWebSocketEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,socket,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1402065124;Whether WebSocket transport is enabled._@see #setWebSocketEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,socket,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1403819230;Whether WebSocket transport is enabled._@see #setWebSocketEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,socket,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1403856366;Whether WebSocket transport is enabled._@see #setWebSocketEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,socket,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1404211929;Whether WebSocket transport is enabled._@see #setWebSocketEnabled(boolean);public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};whether,web,socket,transport,is,enabled,see,set,web,socket,enabled,boolean;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1404762340;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1404880799;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1404881166;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1411760528;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1412779070;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1414354684;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1414354853;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1414412881;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1414415063;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1415669910;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1423479411;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1424248215;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1424361139;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1427983931;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1430734105;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1435844316;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1442848138;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1444217152;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1444241178;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1444898007;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1449242513;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1449660404;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1467730834;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1468964586;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1496837955;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1502974979;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1516036044;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1518987682;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1520537868;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1525511255;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1528452948;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1530174524;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1530174524;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> public boolean isWebSocketEnabled();1530174524;Return whether WebSocket transport is enabled.;public boolean isWebSocketEnabled() {_		return this.webSocketEnabled__	};return,whether,web,socket,transport,is,enabled;public,boolean,is,web,socket,enabled,return,this,web,socket,enabled
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1375542207;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1376429281;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1377100811;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1377218103;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1380214379;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1380590369;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1380591979;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1383881295;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1385412762;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1385507478;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1386462352;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1394071606;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1395630903;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1398144543;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1402065124;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1403819230;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1403856366;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1404211929;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1404762340;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1404881166;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1411760528;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1412779070;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1414354684;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1414354853;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1414412881;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1414415063;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1415669910;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1423479411;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1424248215;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1424361139;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1427983931;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1430734105;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1435844316;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1442848138;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1444217152;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1444241178;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1444898007;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1449242513;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1449660404;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1467730834;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1468964586;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1496837955;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1502974979;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1516036044;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1518987682;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1520537868;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1525511255;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1528452948;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1530174524;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1530174524;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;1530174524;Handle a SockJS session URL (i.e. transport-specific request).;protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException_;handle,a,sock,js,session,url,i,e,transport,specific,request;protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1449242513;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1449660404;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1467730834;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1468964586;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1496837955;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1502974979;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1516036044;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1518987682;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1520537868;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1525511255;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1528452948;@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1530174524;Return configure allowed {@code Origin} header values._@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};return,configure,allowed,code,origin,header,values,since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1530174524;Return configure allowed {@code Origin} header values._@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};return,configure,allowed,code,origin,header,values,since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> public Collection<String> getAllowedOrigins();1530174524;Return configure allowed {@code Origin} header values._@since 4.1.2_@see #setAllowedOrigins;public Collection<String> getAllowedOrigins() {_		return Collections.unmodifiableSet(this.allowedOrigins)__	};return,configure,allowed,code,origin,header,values,since,4,1,2,see,set,allowed,origins;public,collection,string,get,allowed,origins,return,collections,unmodifiable,set,this,allowed,origins
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1375542207;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1376429281;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1377100811;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1377218103;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1380214379;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1380590369;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1380591979;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1383881295;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1385412762;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1385507478;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1386462352;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1394071606;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1395630903;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1398144543;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1402065124;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1403819230;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1403856366;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1404211929;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1404762340;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1404881166;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1411760528;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1412779070;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1414354684;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1414354853;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1414412881;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1414415063;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1415669910;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1423479411;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1424248215;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1424361139;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1427983931;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1430734105;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1435844316;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1442848138;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1444217152;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1444241178;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1444898007;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1449242513;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1449660404;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1467730834;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1468964586;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1496837955;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1502974979;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1516036044;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1518987682;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1520537868;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1525511255;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1528452948;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1530174524;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1530174524;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> protected abstract void handleRawWebSocketRequest(ServerHttpRequest request, 			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;1530174524;Handle request for raw WebSocket communication, i.e. without any SockJS message framing.;protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException_;handle,request,for,raw,web,socket,communication,i,e,without,any,sock,js,message,framing;protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1375321376;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1375461043;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1375479608;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1375542207;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1376429281;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1377100811;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1377218103;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1380214379;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1380590369;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1380591979;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1383881295;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1385412762;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client.__<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1385507478;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1386462352;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1394071606;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1395630903;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1398144543;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1402065124;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1403819230;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1403856366;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1404211929;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1404762340;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1404880799;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1404881166;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1411760528;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1412779070;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1414354684;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1414354853;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1414412881;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1414415063;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1415669910;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1423479411;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1424248215;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1424361139;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1427983931;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1430734105;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1435844316;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1442848138;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1444217152;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1444241178;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1444898007;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1449242513;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1449660404;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1467730834;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1468964586;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1496837955;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1502974979;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1516036044;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1518987682;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1520537868;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1525511255;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1528452948;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1530174524;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1530174524;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> public void setDisconnectDelay(long disconnectDelay);1530174524;The amount of time in milliseconds before a client is considered_disconnected after not having a receiving connection, i.e. an active_connection over which the server can send data to the client._<p>The default value is 5000.;public void setDisconnectDelay(long disconnectDelay) {_		this.disconnectDelay = disconnectDelay__	};the,amount,of,time,in,milliseconds,before,a,client,is,considered,disconnected,after,not,having,a,receiving,connection,i,e,an,active,connection,over,which,the,server,can,send,data,to,the,client,p,the,default,value,is,5000;public,void,set,disconnect,delay,long,disconnect,delay,this,disconnect,delay,disconnect,delay
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler wsHandler) throws SockJsException;1376429281;{@inheritDoc}_<p>_This method determines the SockJS path and handles SockJS static URLs. Session URLs_and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler wsHandler) throws SockJsException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}__			response.flush()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,ws,handler,throws,sock,js,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,flush,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler wsHandler) throws SockJsException;1377100811;{@inheritDoc}_<p>_This method determines the SockJS path and handles SockJS static URLs. Session URLs_and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler wsHandler) throws SockJsException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,ws,handler,throws,sock,js,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler wsHandler) throws SockJsException;1377218103;{@inheritDoc}_<p>_This method determines the SockJS path and handles SockJS static URLs. Session URLs_and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler wsHandler) throws SockJsException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,ws,handler,throws,sock,js,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler wsHandler) throws SockJsException;1380214379;{@inheritDoc}_<p>_This method determines the SockJS path and handles SockJS static URLs. Session URLs_and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler wsHandler) throws SockJsException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,ws,handler,throws,sock,js,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler wsHandler) throws SockJsException;1380590369;{@inheritDoc}_<p>_This method determines the SockJS path and handles SockJS static URLs. Session URLs_and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler wsHandler) throws SockJsException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,ws,handler,throws,sock,js,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			WebSocketHandler wsHandler) throws SockJsException;1380591979;{@inheritDoc}_<p>_This method determines the SockJS path and handles SockJS static URLs. Session URLs_and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler wsHandler) throws SockJsException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,ws,handler,throws,sock,js,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1414354853;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1414412881;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1414415063;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1415669910;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1423479411;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1424248215;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1424361139;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1427983931;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1430734105;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1435844316;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1442848138;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1444217152;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1444241178;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1444898007;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1449242513;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1449660404;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1467730834;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1468964586;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1496837955;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1502974979;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1516036044;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1518987682;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1520537868;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1525511255;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1528452948;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1530174524;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1530174524;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> public void setSuppressCors(boolean suppressCors);1530174524;This option can be used to disable automatic addition of CORS headers for_SockJS requests._<p>The default value is "false"._@since 4.1.2;public void setSuppressCors(boolean suppressCors) {_		this.suppressCors = suppressCors__	};this,option,can,be,used,to,disable,automatic,addition,of,cors,headers,for,sock,js,requests,p,the,default,value,is,false,since,4,1,2;public,void,set,suppress,cors,boolean,suppress,cors,this,suppress,cors,suppress,cors
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1383881295;{@inheritDoc}_<p>_This method determines the SockJS path and handles SockJS static URLs. Session URLs_and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1385412762;{@inheritDoc}_<p>_This method determines the SockJS path and handles SockJS static URLs. Session URLs_and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1385507478;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, wsHandler)__			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1386462352;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isDebugEnabled()) {_			logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,if,logger,is,debug,enabled,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,warn,enabled,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1394071606;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isDebugEnabled()) {_			logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,if,logger,is,debug,enabled,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,warn,enabled,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1395630903;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isDebugEnabled()) {_			logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,if,logger,is,debug,enabled,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,warn,enabled,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1398144543;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isDebugEnabled()) {_			logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,if,logger,is,debug,enabled,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,warn,enabled,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1402065124;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isDebugEnabled()) {_			logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,if,logger,is,debug,enabled,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,warn,enabled,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1403819230;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("No SockJS path provided, URI=\"" + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isDebugEnabled()) {_			logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,no,sock,js,path,provided,uri,request,get,uri,response,set,status,code,http,status,return,if,logger,is,debug,enabled,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,warn,enabled,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1403856366;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isTraceEnabled()) {_			logger.trace(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isErrorEnabled()) {_						logger.error("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,error,enabled,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,if,logger,is,trace,enabled,logger,trace,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,debug,enabled,logger,debug,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,error,enabled,logger,error,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1404211929;{@inheritDoc}_<p>This method determines the SockJS path and handles SockJS static URLs. Session_URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isTraceEnabled()) {_			logger.trace(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isErrorEnabled()) {_						logger.error("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};inherit,doc,p,this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,error,enabled,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,if,logger,is,trace,enabled,logger,trace,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,debug,enabled,logger,debug,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,error,enabled,logger,error,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1404762340;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isErrorEnabled()) {_				logger.error("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		if (logger.isTraceEnabled()) {_			logger.trace(request.getMethod() + " with SockJS path [" + sockJsPath + "]")__		}_		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			if (logger.isDebugEnabled()) {_				logger.debug("Invalid media type ignored: " + ex.getMediaType())__			}_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					handleRawWebSocketRequest(request, response, wsHandler)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isErrorEnabled()) {_						logger.error("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]__				if (!validateRequest(serverId, sessionId, transport)) {_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,error,enabled,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,if,logger,is,trace,enabled,logger,trace,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,if,logger,is,debug,enabled,logger,debug,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,handle,raw,web,socket,request,request,response,ws,handler,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,error,enabled,logger,error,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1404880799;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]__<<<<<<< HEAD_				if (!validateRequest(serverId, sessionId, transport)) {_=======__				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__>>>>>>> STOMP and WebSocket messaging related logging updates_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	}__	protected boolean validateRequest(String serverId, String sessionId, String transport) {_		if (!StringUtils.hasText(serverId) || !StringUtils.hasText(sessionId) || !StringUtils.hasText(transport)) {_			logger.error("No server, session, or transport path segment")__			return false__		}_		_		if (serverId.contains(".") || sessionId.contains(".")) {_<<<<<<< HEAD_			logger.error("Server or session contain a \".\"")__			return false__		}__		if (!isWebSocketEnabled() && transport.equals("websocket")) {_			logger.debug("Ignoring WebSocket request (transport disabled via SockJsService property)")__=======_			logger.error("Either server or session contains a \".\" which is not allowed by SockJS protocol.")__>>>>>>> STOMP and WebSocket messaging related logging updates_			return false__		}_		return true__	}___	_	protected abstract void handleRawWebSocketRequest(ServerHttpRequest request,_			ServerHttpResponse response, WebSocketHandler webSocketHandler) throws IOException___	_	protected abstract void handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response,_			WebSocketHandler webSocketHandler, String sessionId, String transport) throws SockJsException____	protected void addCorsHeaders(ServerHttpRequest request, ServerHttpResponse response, HttpMethod... httpMethods) {_		HttpHeaders requestHeaders = request.getHeaders()__		HttpHeaders responseHeaders = response.getHeaders()__		try {_			_			if (!CollectionUtils.isEmpty(responseHeaders.get("Access-Control-Allow-Origin"))) {_				return__			}_		}_		catch (NullPointerException npe) {_			_		}__		String origin = requestHeaders.getFirst("origin")__		origin = (origin == null || origin.equals("null") ? "*" : origin)__		responseHeaders.add("Access-Control-Allow-Origin", origin)__		responseHeaders.add("Access-Control-Allow-Credentials", "true")___		List<String> accessControllerHeaders = requestHeaders.get("Access-Control-Request-Headers")__		if (accessControllerHeaders != null) {_			for (String header : accessControllerHeaders) {_				responseHeaders.add("Access-Control-Allow-Headers", header)__			}_		}__		if (!ObjectUtils.isEmpty(httpMethods)) {_			responseHeaders.add("Access-Control-Allow-Methods", StringUtils.arrayToDelimitedString(httpMethods, ", "))__			responseHeaders.add("Access-Control-Max-Age", String.valueOf(ONE_YEAR))__		}_	}__	protected void addCacheHeaders(ServerHttpResponse response) {_		response.getHeaders().setCacheControl("public, max-age=" + ONE_YEAR)__		response.getHeaders().setExpires(new Date().getTime() + ONE_YEAR * 1000)__	}__	protected void addNoCacheHeaders(ServerHttpResponse response) {_		response.getHeaders().setCacheControl("no-store, no-cache, must-revalidate, max-age=0")__	}__	protected void sendMethodNotAllowed(ServerHttpResponse response, HttpMethod... httpMethods) {_		logger.error("Sending Method Not Allowed (405)")__		response.setStatusCode(HttpStatus.METHOD_NOT_ALLOWED)__		response.getHeaders().setAllow(new HashSet<HttpMethod>(Arrays.asList(httpMethods)))__	}___	private interface SockJsRequestHandler {__		void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException__	}___	private final SockJsRequestHandler infoHandler = new SockJsRequestHandler() {__		private static final String INFO_CONTENT =_				"{\"entropy\":%s,\"origins\":[\"*:*\"],\"cookie_needed\":%s,\"websocket\":%s}"___		@Override_		public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException {_			if (HttpMethod.GET.equals(request.getMethod())) {_				response.getHeaders().setContentType(new MediaType("application", "json", UTF8_CHARSET))__				addCorsHeaders(request, response)__				addNoCacheHeaders(response)__				String content = String.format(INFO_CONTENT, random.nextInt(), isSessionCookieNeeded(), isWebSocketEnabled())__				response.getBody().write(content.getBytes())__			}_			else if (HttpMethod.OPTIONS.equals(request.getMethod())) {_				response.setStatusCode(HttpStatus.NO_CONTENT)__				addCorsHeaders(request, response, HttpMethod.OPTIONS, HttpMethod.GET)__				addCacheHeaders(response)__			}_			else {_				sendMethodNotAllowed(response, HttpMethod.OPTIONS, HttpMethod.GET)__			}_		}_	}____	private final SockJsRequestHandler iframeHandler = new SockJsRequestHandler() {__		private static final String IFRAME_CONTENT =_				"<!DOCTYPE html>\n" +_		        "<html>\n" +_		        "<head>\n" +_		        "  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n" +_		        "  <meta http-equiv=\"Content-Type\" content=\"text/html_ charset=UTF-8\" />\n" +_		        "  <script>\n" +_		        "    document.domain = document.domain_\n" +_		        "    _sockjs_onload = function(){SockJS.bootstrap_iframe()_}_\n" +_		        "  </script>\n" +_		        "  <script src=\"%s\"></script>\n" +_		        "</head>\n" +_		        "<body>\n" +_		        "  <h2>Don't panic!</h2>\n" +_		        "  <p>This is a SockJS hidden iframe. It's used for cross domain magic.</p>\n" +_		        "</body>\n" +_		        "</html>"___		@Override_		public void handle(ServerHttpRequest request, ServerHttpResponse response) throws IOException {_			if (!HttpMethod.GET.equals(request.getMethod())) {_				sendMethodNotAllowed(response, HttpMethod.GET)__				return__			}__			String content = String.format(IFRAME_CONTENT, getSockJsClientLibraryUrl())__			byte[] contentBytes = content.getBytes(UTF8_CHARSET)__			StringBuilder builder = new StringBuilder("\"0")__			DigestUtils.appendMd5DigestAsHex(contentBytes, builder)__			builder.append('"')__			String etagValue = builder.toString()___			List<String> ifNoneMatch = request.getHeaders().getIfNoneMatch()__			if (!CollectionUtils.isEmpty(ifNoneMatch) && ifNoneMatch.get(0).equals(etagValue)) {_				response.setStatusCode(HttpStatus.NOT_MODIFIED)__				return__			}__			response.getHeaders().setContentType(new MediaType("text", "html", UTF8_CHARSET))__			response.getHeaders().setContentLength(contentBytes.length)___			addCacheHeaders(response)__			response.getHeaders().setETag(etagValue)__			response.getBody().write(contentBytes)__		}_	}___};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,head,if,validate,request,server,id,session,id,transport,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,stomp,and,web,socket,messaging,related,logging,updates,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex,protected,boolean,validate,request,string,server,id,string,session,id,string,transport,if,string,utils,has,text,server,id,string,utils,has,text,session,id,string,utils,has,text,transport,logger,error,no,server,session,or,transport,path,segment,return,false,if,server,id,contains,session,id,contains,head,logger,error,server,or,session,contain,a,return,false,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,ignoring,web,socket,request,transport,disabled,via,sock,js,service,property,logger,error,either,server,or,session,contains,a,which,is,not,allowed,by,sock,js,protocol,stomp,and,web,socket,messaging,related,logging,updates,return,false,return,true,protected,abstract,void,handle,raw,web,socket,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,throws,ioexception,protected,abstract,void,handle,transport,request,server,http,request,request,server,http,response,response,web,socket,handler,web,socket,handler,string,session,id,string,transport,throws,sock,js,exception,protected,void,add,cors,headers,server,http,request,request,server,http,response,response,http,method,http,methods,http,headers,request,headers,request,get,headers,http,headers,response,headers,response,get,headers,try,if,collection,utils,is,empty,response,headers,get,access,control,allow,origin,return,catch,null,pointer,exception,npe,string,origin,request,headers,get,first,origin,origin,origin,null,origin,equals,null,origin,response,headers,add,access,control,allow,origin,origin,response,headers,add,access,control,allow,credentials,true,list,string,access,controller,headers,request,headers,get,access,control,request,headers,if,access,controller,headers,null,for,string,header,access,controller,headers,response,headers,add,access,control,allow,headers,header,if,object,utils,is,empty,http,methods,response,headers,add,access,control,allow,methods,string,utils,array,to,delimited,string,http,methods,response,headers,add,access,control,max,age,string,value,of,protected,void,add,cache,headers,server,http,response,response,response,get,headers,set,cache,control,public,max,age,response,get,headers,set,expires,new,date,get,time,1000,protected,void,add,no,cache,headers,server,http,response,response,response,get,headers,set,cache,control,no,store,no,cache,must,revalidate,max,age,0,protected,void,send,method,not,allowed,server,http,response,response,http,method,http,methods,logger,error,sending,method,not,allowed,405,response,set,status,code,http,status,response,get,headers,set,allow,new,hash,set,http,method,arrays,as,list,http,methods,private,interface,sock,js,request,handler,void,handle,server,http,request,request,server,http,response,response,throws,ioexception,private,final,sock,js,request,handler,info,handler,new,sock,js,request,handler,private,static,final,string,entropy,s,origins,s,websocket,s,override,public,void,handle,server,http,request,request,server,http,response,response,throws,ioexception,if,http,method,get,equals,request,get,method,response,get,headers,set,content,type,new,media,type,application,json,add,cors,headers,request,response,add,no,cache,headers,response,string,content,string,format,random,next,int,is,session,cookie,needed,is,web,socket,enabled,response,get,body,write,content,get,bytes,else,if,http,method,options,equals,request,get,method,response,set,status,code,http,status,add,cors,headers,request,response,http,method,options,http,method,get,add,cache,headers,response,else,send,method,not,allowed,response,http,method,options,http,method,get,private,final,sock,js,request,handler,iframe,handler,new,sock,js,request,handler,private,static,final,string,doctype,html,n,html,n,head,n,meta,http,equiv,x,ua,compatible,content,ie,edge,n,meta,http,equiv,content,type,content,text,html,charset,utf,8,n,script,n,document,domain,document,domain,n,function,sock,js,n,script,n,script,src,s,script,n,head,n,body,n,h2,don,t,panic,h2,n,p,this,is,a,sock,js,hidden,iframe,it,s,used,for,cross,domain,magic,p,n,body,n,html,override,public,void,handle,server,http,request,request,server,http,response,response,throws,ioexception,if,http,method,get,equals,request,get,method,send,method,not,allowed,response,http,method,get,return,string,content,string,format,get,sock,js,client,library,url,byte,content,bytes,content,get,bytes,string,builder,builder,new,string,builder,0,digest,utils,append,md5digest,as,hex,content,bytes,builder,builder,append,string,etag,value,builder,to,string,list,string,if,none,match,request,get,headers,get,if,none,match,if,collection,utils,is,empty,if,none,match,if,none,match,get,0,equals,etag,value,response,set,status,code,http,status,return,response,get,headers,set,content,type,new,media,type,text,html,response,get,headers,set,content,length,content,bytes,length,add,cache,headers,response,response,get,headers,set,etag,etag,value,response,get,body,write,content,bytes
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1404881166;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1411760528;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1412779070;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1414354684;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if(!this.allowedOrigins.contains("*") && !TransportType.fromValue(transport).supportsOrigin()) {_					logger.debug("Origin check has been enabled, but this transport does not support it, ignoring "_							+ requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,this,allowed,origins,contains,transport,type,from,value,transport,supports,origin,logger,debug,origin,check,has,been,enabled,but,this,transport,does,not,support,it,ignoring,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1414354853;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if(!this.allowedOrigins.contains("*") && !TransportType.fromValue(transport).supportsOrigin()) {_					logger.debug("Origin check has been enabled, but this transport does not support it, ignoring "_							+ requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,this,allowed,origins,contains,transport,type,from,value,transport,supports,origin,logger,debug,origin,check,has,been,enabled,but,this,transport,does,not,support,it,ignoring,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1414412881;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1414415063;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1415669910;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1423479411;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					logger.debug("Iframe support is disabled when an origin check is required, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,request,info,response,set,status,code,http,status,return,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1424248215;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			logger.error("Expected SockJS path. Failing request: " + request.getURI())__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					logger.debug("Iframe support is disabled when an origin check is required, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					logger.error("Ignoring invalid transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					logger.error("Ignoring transport request " + requestInfo)__					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,logger,error,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,error,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,logger,error,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1424361139;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (logger.isDebugEnabled()) {_						logger.debug("Iframe support is disabled when an origin check is required, ignoring " +_										requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring invalid transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (logger.isDebugEnabled()) {_						logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,logger,is,debug,enabled,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,logger,is,debug,enabled,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,if,logger,is,warn,enabled,logger,warn,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1427983931;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (logger.isDebugEnabled()) {_						logger.debug("Iframe support is disabled when an origin check is required, ignoring " +_										requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring invalid transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (logger.isDebugEnabled()) {_						logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,logger,is,debug,enabled,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,logger,is,debug,enabled,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,if,logger,is,warn,enabled,logger,warn,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1430734105;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (logger.isDebugEnabled()) {_						logger.debug("Iframe support is disabled when an origin check is required, ignoring " +_										requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring invalid transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (logger.isDebugEnabled()) {_						logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,logger,is,debug,enabled,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,logger,is,debug,enabled,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,if,logger,is,warn,enabled,logger,warn,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1435844316;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (logger.isDebugEnabled()) {_						logger.debug("Iframe support is disabled when an origin check is required, ignoring " +_										requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring invalid transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (logger.isDebugEnabled()) {_						logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,logger,is,debug,enabled,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,logger,is,debug,enabled,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,if,logger,is,warn,enabled,logger,warn,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1442848138;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : ""__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				logger.debug(requestInfo)__				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				logger.debug(requestInfo)__				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (logger.isDebugEnabled()) {_						logger.debug("Iframe support is disabled when an origin check is required, ignoring " +_										requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				logger.debug(requestInfo)__				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					logger.debug(requestInfo)__					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (logger.isDebugEnabled()) {_					logger.debug("WebSocket disabled, ignoring " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring invalid transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (logger.isDebugEnabled()) {_						logger.debug("WebSocket transport is disabled, ignoring " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					if (logger.isWarnEnabled()) {_						logger.warn("Ignoring transport request " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,try,if,sock,js,path,equals,sock,js,path,equals,logger,debug,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,logger,debug,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,logger,is,debug,enabled,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,logger,debug,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,logger,debug,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,logger,is,debug,enabled,logger,debug,web,socket,disabled,ignoring,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,ignoring,invalid,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,logger,is,debug,enabled,logger,debug,web,socket,transport,is,disabled,ignoring,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,if,logger,is,warn,enabled,logger,warn,ignoring,transport,request,request,info,response,set,status,code,http,status,return,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1444217152;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}_			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}_			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}_			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1444241178;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1444898007;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1449242513;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1449660404;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1467730834;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))__				response.getBody().write("Welcome to SockJS!\n".getBytes(UTF8_CHARSET))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,response,get,body,write,welcome,to,sock,js,n,get,bytes,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1468964586;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1375321376;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1375461043;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1375479608;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1375542207;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1376429281;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1377100811;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1377218103;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1380214379;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1380590369;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1380591979;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1383881295;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1385412762;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking.__<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1385507478;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1386462352;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1394071606;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1395630903;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1398144543;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1402065124;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1403819230;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1403856366;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1404211929;The amount of time in milliseconds when the server has not sent any_messages and after which the server should send a heartbeat frame to the_client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1404762340;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1404880799;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1404881166;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1411760528;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1412779070;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1414354684;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1414354853;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1414412881;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1414415063;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1415669910;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1423479411;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1424248215;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1424361139;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1427983931;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1430734105;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1435844316;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1442848138;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1444217152;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1444241178;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1444898007;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1449242513;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1449660404;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1467730834;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1468964586;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1496837955;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1502974979;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1516036044;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1518987682;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1520537868;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1525511255;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1528452948;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1530174524;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1530174524;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public void setHeartbeatTime(long heartbeatTime);1530174524;Specify the amount of time in milliseconds when the server has not sent_any messages and after which the server should send a heartbeat frame_to the client in order to keep the connection from breaking._<p>The default value is 25,000 (25 seconds).;public void setHeartbeatTime(long heartbeatTime) {_		this.heartbeatTime = heartbeatTime__	};specify,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages,and,after,which,the,server,should,send,a,heartbeat,frame,to,the,client,in,order,to,keep,the,connection,from,breaking,p,the,default,value,is,25,000,25,seconds;public,void,set,heartbeat,time,long,heartbeat,time,this,heartbeat,time,heartbeat,time
AbstractSockJsService -> public boolean isSessionCookieNeeded();1380214379;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1380590369;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1380591979;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1383881295;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1385412762;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1385507478;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1386462352;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1394071606;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1395630903;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1398144543;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1402065124;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1403819230;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1403856366;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1404211929;Whether JSESSIONID cookie is required for the application to function. For_more detail see {@link #setSessionCookieNeeded(boolean)}.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};whether,jsessionid,cookie,is,required,for,the,application,to,function,for,more,detail,see,link,set,session,cookie,needed,boolean;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1404762340;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1404880799;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1404881166;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1411760528;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1412779070;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1414354684;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1414354853;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1414412881;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1414415063;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1415669910;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1423479411;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1424248215;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1424361139;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1427983931;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1430734105;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1435844316;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1442848138;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1444217152;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1444241178;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1444898007;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1449242513;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1449660404;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1467730834;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1468964586;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1496837955;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1502974979;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1516036044;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1518987682;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1520537868;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1525511255;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1528452948;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1530174524;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1530174524;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> public boolean isSessionCookieNeeded();1530174524;Return whether the JSESSIONID cookie is required for the application to function.;public boolean isSessionCookieNeeded() {_		return this.sessionCookieNeeded__	};return,whether,the,jsessionid,cookie,is,required,for,the,application,to,function;public,boolean,is,session,cookie,needed,return,this,session,cookie,needed
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler) 			throws IOException, SockJsProcessingException;1375321376;TODO;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler)_			throws IOException, SockJsProcessingException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (IllegalArgumentException ex) {_			_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__				return__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__				return__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__				return__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, handler)__				return__			}__			String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__			if (pathSegments.length != 3) {_				logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__				response.setStatusCode(HttpStatus.NOT_FOUND)__				return__			}__			String serverId = pathSegments[0]__			String sessionId = pathSegments[1]__			String transport = pathSegments[2]___			if (!validateRequest(serverId, sessionId, transport)) {_				response.setStatusCode(HttpStatus.NOT_FOUND)__				return__			}__			handleTransportRequest(request, response, handler, sessionId, transport)__		}_		finally {_			response.flush()__		}_	};todo;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,handler,throws,ioexception,sock,js,processing,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,illegal,argument,exception,ex,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,return,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,return,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,return,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,handler,return,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,handler,session,id,transport,finally,response,flush
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler) 			throws IOException, SockJsProcessingException;1375461043;TODO;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler)_			throws IOException, SockJsProcessingException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (IllegalArgumentException ex) {_			_		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__				return__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__				return__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__				return__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, handler)__				return__			}__			String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__			if (pathSegments.length != 3) {_				logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__				response.setStatusCode(HttpStatus.NOT_FOUND)__				return__			}__			String serverId = pathSegments[0]__			String sessionId = pathSegments[1]__			String transport = pathSegments[2]___			if (!validateRequest(serverId, sessionId, transport)) {_				response.setStatusCode(HttpStatus.NOT_FOUND)__				return__			}__			handleTransportRequest(request, response, handler, sessionId, transport)__		}_		finally {_			response.flush()__		}_	};todo;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,handler,throws,ioexception,sock,js,processing,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,illegal,argument,exception,ex,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,return,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,return,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,return,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,handler,return,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,handler,session,id,transport,finally,response,flush
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler) 			throws IOException, SockJsProcessingException;1375479608;TODO;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler)_			throws IOException, SockJsProcessingException {__		String sockJsPath = getSockJsPath(request)__		if (sockJsPath == null) {_			logger.warn("Could not determine SockJS path for URL \"" + request.getURI().getPath() +_					". Consider setting validSockJsPrefixes.")__			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		logger.debug(request.getMethod() + " with SockJS path [" + sockJsPath + "]")___		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			logger.warn("Invalid media type ignored: " + ex.getMediaType())__		}__		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				response.getHeaders().setContentType(new MediaType("text", "plain", Charset.forName("UTF-8")))__				response.getBody().write("Welcome to SockJS!\n".getBytes("UTF-8"))__				return__			}_			else if (sockJsPath.equals("/info")) {_				this.infoHandler.handle(request, response)__				return__			}_			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				this.iframeHandler.handle(request, response)__				return__			}_			else if (sockJsPath.equals("/websocket")) {_				handleRawWebSocketRequest(request, response, handler)__				return__			}__			String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__			if (pathSegments.length != 3) {_				logger.warn("Expected \"/{server}/{session}/{transport}\" but got \"" + sockJsPath + "\"")__				response.setStatusCode(HttpStatus.NOT_FOUND)__				return__			}__			String serverId = pathSegments[0]__			String sessionId = pathSegments[1]__			String transport = pathSegments[2]___			if (!validateRequest(serverId, sessionId, transport)) {_				response.setStatusCode(HttpStatus.NOT_FOUND)__				return__			}__			handleTransportRequest(request, response, handler, sessionId, transport)__		}_		finally {_			response.flush()__		}_	};todo;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,web,socket,handler,handler,throws,ioexception,sock,js,processing,exception,string,sock,js,path,get,sock,js,path,request,if,sock,js,path,null,logger,warn,could,not,determine,sock,js,path,for,url,request,get,uri,get,path,consider,setting,valid,sock,js,prefixes,response,set,status,code,http,status,return,logger,debug,request,get,method,with,sock,js,path,sock,js,path,try,request,get,headers,catch,invalid,media,type,exception,ex,logger,warn,invalid,media,type,ignored,ex,get,media,type,try,if,sock,js,path,equals,sock,js,path,equals,response,get,headers,set,content,type,new,media,type,text,plain,charset,for,name,utf,8,response,get,body,write,welcome,to,sock,js,n,get,bytes,utf,8,return,else,if,sock,js,path,equals,info,this,info,handler,handle,request,response,return,else,if,sock,js,path,matches,iframe,0,9,a,html,this,iframe,handler,handle,request,response,return,else,if,sock,js,path,equals,websocket,handle,raw,web,socket,request,request,response,handler,return,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,logger,warn,expected,server,session,transport,but,got,sock,js,path,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,validate,request,server,id,session,id,transport,response,set,status,code,http,status,return,handle,transport,request,request,response,handler,session,id,transport,finally,response,flush
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1449242513;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1449660404;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1467730834;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1468964586;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1496837955;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1502974979;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1516036044;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1518987682;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1520537868;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1525511255;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (JSONP and Iframe based_transports) are disabled. As a consequence, IE 6 to 9 are not supported_when origins are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,jsonp,and,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1528452948;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (Iframe based transports)_are disabled. As a consequence, IE 6 to 9 are not supported when origins_are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1530174524;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (Iframe based transports)_are disabled. As a consequence, IE 6 to 9 are not supported when origins_are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1530174524;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (Iframe based transports)_are disabled. As a consequence, IE 6 to 9 are not supported when origins_are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public void setAllowedOrigins(Collection<String> allowedOrigins);1530174524;Configure allowed {@code Origin} header values. This check is mostly_designed for browsers. There is nothing preventing other types of client_to modify the {@code Origin} header value._<p>When SockJS is enabled and origins are restricted, transport types_that do not allow to check request origin (Iframe based transports)_are disabled. As a consequence, IE 6 to 9 are not supported when origins_are restricted._<p>Each provided allowed origin must have a scheme, and optionally a port_(e.g. "http://example.org", "http://example.org:9090"). An allowed origin_string may also be "*" in which case all origins are allowed._@since 4.1.2_@see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>_@see <a href="https://github.com/sockjs/sockjs-client#supported-transports-by-browser-html-served-from-http-or-https">SockJS supported transports by browser</a>;public void setAllowedOrigins(Collection<String> allowedOrigins) {_		Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null")__		this.allowedOrigins.clear()__		this.allowedOrigins.addAll(allowedOrigins)__	};configure,allowed,code,origin,header,values,this,check,is,mostly,designed,for,browsers,there,is,nothing,preventing,other,types,of,client,to,modify,the,code,origin,header,value,p,when,sock,js,is,enabled,and,origins,are,restricted,transport,types,that,do,not,allow,to,check,request,origin,iframe,based,transports,are,disabled,as,a,consequence,ie,6,to,9,are,not,supported,when,origins,are,restricted,p,each,provided,allowed,origin,must,have,a,scheme,and,optionally,a,port,e,g,http,example,org,http,example,org,9090,an,allowed,origin,string,may,also,be,in,which,case,all,origins,are,allowed,since,4,1,2,see,a,href,https,tools,ietf,org,html,rfc6454,rfc,6454,the,web,origin,concept,a,see,a,href,https,github,com,sockjs,sockjs,client,supported,transports,by,browser,html,served,from,http,or,https,sock,js,supported,transports,by,browser,a;public,void,set,allowed,origins,collection,string,allowed,origins,assert,not,null,allowed,origins,allowed,origins,collection,must,not,be,null,this,allowed,origins,clear,this,allowed,origins,add,all,allowed,origins
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1375321376;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1375461043;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1375479608;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1375542207;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1376429281;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1377100811;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1377218103;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1380214379;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1380590369;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1380591979;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1383881295;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1385412762;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1385507478;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1386462352;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1394071606;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1395630903;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1398144543;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1402065124;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1403819230;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1403856366;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1404211929;The URL to the SockJS JavaScript client library._@see #setSockJsClientLibraryUrl(String);public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};the,url,to,the,sock,js,java,script,client,library,see,set,sock,js,client,library,url,string;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1404762340;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1404880799;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1404881166;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1411760528;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1412779070;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1414354684;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1414354853;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1414412881;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1414415063;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1415669910;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1423479411;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1424248215;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1424361139;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1427983931;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1430734105;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1435844316;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1442848138;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1444217152;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1444241178;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1444898007;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1449242513;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1449660404;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1467730834;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1468964586;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1496837955;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1502974979;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1516036044;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1518987682;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1520537868;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1525511255;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1528452948;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1530174524;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1530174524;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public String getSockJsClientLibraryUrl();1530174524;Return he URL to the SockJS JavaScript client library.;public String getSockJsClientLibraryUrl() {_		return this.clientLibraryUrl__	};return,he,url,to,the,sock,js,java,script,client,library;public,string,get,sock,js,client,library,url,return,this,client,library,url
AbstractSockJsService -> public int getHttpMessageCacheSize();1377218103;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1380214379;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1380590369;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1380591979;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1383881295;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1385412762;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1385507478;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1386462352;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1394071606;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1395630903;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1398144543;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1402065124;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1403819230;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1403856366;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1404211929;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1404762340;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1404880799;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1404881166;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1411760528;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1412779070;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1414354684;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1414354853;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1414412881;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1414415063;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1415669910;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1423479411;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1424248215;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1424361139;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1427983931;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1430734105;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1435844316;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1442848138;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1444217152;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1444241178;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1444898007;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1449242513;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1449660404;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1467730834;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1468964586;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1496837955;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1502974979;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1516036044;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1518987682;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1520537868;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1525511255;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1528452948;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1530174524;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1530174524;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getHttpMessageCacheSize();1530174524;Return the size of the HTTP message cache.;public int getHttpMessageCacheSize() {_		return this.httpMessageCacheSize__	};return,the,size,of,the,http,message,cache;public,int,get,http,message,cache,size,return,this,http,message,cache,size
AbstractSockJsService -> public int getStreamBytesLimit();1404762340;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1404880799;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1404881166;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1411760528;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1412779070;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1414354684;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1414354853;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1414412881;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1414415063;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1415669910;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1423479411;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1424248215;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1424361139;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1427983931;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1430734105;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1435844316;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1442848138;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1444217152;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1444241178;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1444898007;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1449242513;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1449660404;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1467730834;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1468964586;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1496837955;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1502974979;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1516036044;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1518987682;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1520537868;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1525511255;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1528452948;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1530174524;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1530174524;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> public int getStreamBytesLimit();1530174524;Return the minimum number of bytes that can be sent over a single HTTP_streaming request before it will be closed.;public int getStreamBytesLimit() {_		return this.streamBytesLimit__	};return,the,minimum,number,of,bytes,that,can,be,sent,over,a,single,http,streaming,request,before,it,will,be,closed;public,int,get,stream,bytes,limit,return,this,stream,bytes,limit
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1496837955;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1502974979;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1516036044;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1518987682;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1520537868;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1525511255;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1528452948;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1530174524;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1530174524;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> @Override 	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, 			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException;1530174524;This method determines the SockJS path and handles SockJS static URLs._Session URLs and raw WebSocket requests are delegated to abstract methods.;@Override_	public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response,_			@Nullable String sockJsPath, WebSocketHandler wsHandler) throws SockJsException {__		if (sockJsPath == null) {_			if (logger.isWarnEnabled()) {_				logger.warn("Expected SockJS path. Failing request: " + request.getURI())__			}_			response.setStatusCode(HttpStatus.NOT_FOUND)__			return__		}__		try {_			request.getHeaders()__		}_		catch (InvalidMediaTypeException ex) {_			_		}__		String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null)___		try {_			if (sockJsPath.equals("") || sockJsPath.equals("/")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8))__				response.getBody().write("Welcome to SockJS!\n".getBytes(StandardCharsets.UTF_8))__			}__			else if (sockJsPath.equals("/info")) {_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.infoHandler.handle(request, response)__			}__			else if (sockJsPath.matches("/iframe[0-9-.a-z_]*.html")) {_				if (!this.allowedOrigins.isEmpty() && !this.allowedOrigins.contains("*")) {_					if (requestInfo != null) {_						logger.debug("Iframe support is disabled when an origin check is required. " +_								"Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				if (this.allowedOrigins.isEmpty()) {_					response.getHeaders().add(XFRAME_OPTIONS_HEADER, "SAMEORIGIN")__				}_				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				this.iframeHandler.handle(request, response)__			}__			else if (sockJsPath.equals("/websocket")) {_				if (isWebSocketEnabled()) {_					if (requestInfo != null) {_						logger.debug("Processing transport request: " + requestInfo)__					}_					handleRawWebSocketRequest(request, response, wsHandler)__				}_				else if (requestInfo != null) {_					logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__				}_			}__			else {_				String[] pathSegments = StringUtils.tokenizeToStringArray(sockJsPath.substring(1), "/")__				if (pathSegments.length != 3) {_					if (logger.isWarnEnabled()) {_						logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments")__					}_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				String serverId = pathSegments[0]__				String sessionId = pathSegments[1]__				String transport = pathSegments[2]___				if (!isWebSocketEnabled() && transport.equals("websocket")) {_					if (requestInfo != null) {_						logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}_				else if (!validateRequest(serverId, sessionId, transport) || !validatePath(request)) {_					if (requestInfo != null) {_						logger.debug("Ignoring transport request: " + requestInfo)__					}_					response.setStatusCode(HttpStatus.NOT_FOUND)__					return__				}__				if (requestInfo != null) {_					logger.debug("Processing transport request: " + requestInfo)__				}_				handleTransportRequest(request, response, wsHandler, sessionId, transport)__			}_			response.close()__		}_		catch (IOException ex) {_			throw new SockJsException("Failed to write to the response", null, ex)__		}_	};this,method,determines,the,sock,js,path,and,handles,sock,js,static,urls,session,urls,and,raw,web,socket,requests,are,delegated,to,abstract,methods;override,public,final,void,handle,request,server,http,request,request,server,http,response,response,nullable,string,sock,js,path,web,socket,handler,ws,handler,throws,sock,js,exception,if,sock,js,path,null,if,logger,is,warn,enabled,logger,warn,expected,sock,js,path,failing,request,request,get,uri,response,set,status,code,http,status,return,try,request,get,headers,catch,invalid,media,type,exception,ex,string,request,info,logger,is,debug,enabled,request,get,method,request,get,uri,null,try,if,sock,js,path,equals,sock,js,path,equals,if,request,info,null,logger,debug,processing,transport,request,request,info,response,get,headers,set,content,type,new,media,type,text,plain,standard,charsets,response,get,body,write,welcome,to,sock,js,n,get,bytes,standard,charsets,else,if,sock,js,path,equals,info,if,request,info,null,logger,debug,processing,transport,request,request,info,this,info,handler,handle,request,response,else,if,sock,js,path,matches,iframe,0,9,a,html,if,this,allowed,origins,is,empty,this,allowed,origins,contains,if,request,info,null,logger,debug,iframe,support,is,disabled,when,an,origin,check,is,required,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,this,allowed,origins,is,empty,response,get,headers,add,sameorigin,if,request,info,null,logger,debug,processing,transport,request,request,info,this,iframe,handler,handle,request,response,else,if,sock,js,path,equals,websocket,if,is,web,socket,enabled,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,raw,web,socket,request,request,response,ws,handler,else,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,else,string,path,segments,string,utils,tokenize,to,string,array,sock,js,path,substring,1,if,path,segments,length,3,if,logger,is,warn,enabled,logger,warn,invalid,sock,js,path,sock,js,path,required,to,have,3,path,segments,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,string,server,id,path,segments,0,string,session,id,path,segments,1,string,transport,path,segments,2,if,is,web,socket,enabled,transport,equals,websocket,if,request,info,null,logger,debug,web,socket,disabled,ignoring,transport,request,request,info,response,set,status,code,http,status,return,else,if,validate,request,server,id,session,id,transport,validate,path,request,if,request,info,null,logger,debug,ignoring,transport,request,request,info,response,set,status,code,http,status,return,if,request,info,null,logger,debug,processing,transport,request,request,info,handle,transport,request,request,response,ws,handler,session,id,transport,response,close,catch,ioexception,ex,throw,new,sock,js,exception,failed,to,write,to,the,response,null,ex
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1444898007;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return filename.indexOf('_') == -1__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1449242513;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1449660404;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1467730834;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1468964586;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1496837955;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1502974979;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1516036044;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1518987682;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1520537868;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1525511255;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1528452948;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1530174524;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1530174524;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> private boolean validatePath(ServerHttpRequest request);1530174524;Ensure the path does not contain a file extension, either in the filename_(e.g. "/jsonp.bat") or possibly after path parameters ("/jsonp_Setup.bat")_which could be used for RFD exploits._<p>Since the last part of the path is expected to be a transport type, the_presence of an extension would not work. All we need to do is check if_there are any path parameters, which would have been removed from the_SockJS path during request mapping, and if found reject the request.;private boolean validatePath(ServerHttpRequest request) {_		String path = request.getURI().getPath()__		int index = path.lastIndexOf('/') + 1__		String filename = path.substring(index)__		return (filename.indexOf('_') == -1)__	};ensure,the,path,does,not,contain,a,file,extension,either,in,the,filename,e,g,jsonp,bat,or,possibly,after,path,parameters,jsonp,setup,bat,which,could,be,used,for,rfd,exploits,p,since,the,last,part,of,the,path,is,expected,to,be,a,transport,type,the,presence,of,an,extension,would,not,work,all,we,need,to,do,is,check,if,there,are,any,path,parameters,which,would,have,been,removed,from,the,sock,js,path,during,request,mapping,and,if,found,reject,the,request;private,boolean,validate,path,server,http,request,request,string,path,request,get,uri,get,path,int,index,path,last,index,of,1,string,filename,path,substring,index,return,filename,index,of,1
AbstractSockJsService -> public void setName(String name);1375321376;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1375461043;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1375479608;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1375542207;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1376429281;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1377100811;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1377218103;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1380214379;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1380590369;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1380591979;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1383881295;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1385412762;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1385507478;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1386462352;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1394071606;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1395630903;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1398144543;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1402065124;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1403819230;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1403856366;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1404211929;A unique name for the service mainly for logging purposes.;public void setName(String name) {_		this.name = name__	};a,unique,name,for,the,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1404762340;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1404880799;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1404881166;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1411760528;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1412779070;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1414354684;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1414354853;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1414412881;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1414415063;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1415669910;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1423479411;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1424248215;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1424361139;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1427983931;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1430734105;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1435844316;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1442848138;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1444217152;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1444241178;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1444898007;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1449242513;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1449660404;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1467730834;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1468964586;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1496837955;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1502974979;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1516036044;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1518987682;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1520537868;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1525511255;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1528452948;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1530174524;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1530174524;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public void setName(String name);1530174524;Set a unique name for this service (mainly for logging purposes).;public void setName(String name) {_		this.name = name__	};set,a,unique,name,for,this,service,mainly,for,logging,purposes;public,void,set,name,string,name,this,name,name
AbstractSockJsService -> public long getHeartbeatTime();1404762340;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1404880799;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1404881166;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1411760528;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1412779070;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1414354684;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1414354853;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1414412881;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1414415063;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1415669910;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1423479411;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1424248215;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1424361139;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1427983931;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1430734105;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1435844316;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1442848138;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1444217152;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1444241178;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1444898007;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1449242513;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1449660404;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1467730834;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1468964586;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1496837955;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1502974979;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1516036044;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1518987682;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1520537868;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1525511255;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1528452948;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1530174524;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1530174524;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public long getHeartbeatTime();1530174524;Return the amount of time in milliseconds when the server has not sent_any messages.;public long getHeartbeatTime() {_		return this.heartbeatTime__	};return,the,amount,of,time,in,milliseconds,when,the,server,has,not,sent,any,messages;public,long,get,heartbeat,time,return,this,heartbeat,time
AbstractSockJsService -> public boolean shouldSuppressCors();1414354853;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1414412881;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1414415063;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1415669910;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1423479411;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1424248215;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1424361139;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1427983931;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1430734105;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1435844316;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1442848138;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1444217152;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1444241178;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1444898007;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1449242513;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1449660404;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1467730834;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1468964586;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1496837955;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1502974979;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1516036044;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1518987682;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1520537868;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1525511255;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1528452948;@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1530174524;Return if automatic addition of CORS headers has been disabled._@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};return,if,automatic,addition,of,cors,headers,has,been,disabled,since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1530174524;Return if automatic addition of CORS headers has been disabled._@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};return,if,automatic,addition,of,cors,headers,has,been,disabled,since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public boolean shouldSuppressCors();1530174524;Return if automatic addition of CORS headers has been disabled._@since 4.1.2_@see #setSuppressCors(boolean);public boolean shouldSuppressCors() {_		return this.suppressCors__	};return,if,automatic,addition,of,cors,headers,has,been,disabled,since,4,1,2,see,set,suppress,cors,boolean;public,boolean,should,suppress,cors,return,this,suppress,cors
AbstractSockJsService -> public String getName();1404762340;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1404880799;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1404881166;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1411760528;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1412779070;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1414354684;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1414354853;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1414412881;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1414415063;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1415669910;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1423479411;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1424248215;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1424361139;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1427983931;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1430734105;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1435844316;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1442848138;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1444217152;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1444241178;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1444898007;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1449242513;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1449660404;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1467730834;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1468964586;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1496837955;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1502974979;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1516036044;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1518987682;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1520537868;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1525511255;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1528452948;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1530174524;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1530174524;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public String getName();1530174524;Return the unique name associated with this service.;public String getName() {_		return this.name__	};return,the,unique,name,associated,with,this,service;public,string,get,name,return,this,name
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1375321376;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1375461043;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1375479608;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1375542207;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1376429281;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1377100811;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1377218103;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1380214379;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1380590369;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1380591979;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1383881295;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1385412762;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side.__<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
AbstractSockJsService -> public void setWebSocketsEnabled(boolean webSocketsEnabled);1385507478;Some load balancers don't support websockets. This option can be used to_disable the WebSocket transport on the server side._<p>The default value is "true".;public void setWebSocketsEnabled(boolean webSocketsEnabled) {_		this.webSocketsEnabled = webSocketsEnabled__	};some,load,balancers,don,t,support,websockets,this,option,can,be,used,to,disable,the,web,socket,transport,on,the,server,side,p,the,default,value,is,true;public,void,set,web,sockets,enabled,boolean,web,sockets,enabled,this,web,sockets,enabled,web,sockets,enabled
