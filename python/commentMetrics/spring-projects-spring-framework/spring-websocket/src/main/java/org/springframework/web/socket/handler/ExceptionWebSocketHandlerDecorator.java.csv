commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void afterConnectionEstablished(WebSocketSession session) {     try {         getDelegate().afterConnectionEstablished(session).     } catch (Throwable ex) {         tryCloseWithError(session, ex, logger).     } }
false;public;2;9;;@Override public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) {     try {         getDelegate().handleMessage(session, message).     } catch (Throwable ex) {         tryCloseWithError(session, ex, logger).     } }
false;public;2;9;;@Override public void handleTransportError(WebSocketSession session, Throwable exception) {     try {         getDelegate().handleTransportError(session, exception).     } catch (Throwable ex) {         tryCloseWithError(session, ex, logger).     } }
false;public;2;11;;@Override public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) {     try {         getDelegate().afterConnectionClosed(session, closeStatus).     } catch (Throwable ex) {         if (logger.isWarnEnabled()) {             logger.warn("Unhandled exception after connection closed for " + this, ex).         }     } }
false;public,static;3;13;;public static void tryCloseWithError(WebSocketSession session, Throwable exception, Log logger) {     if (logger.isErrorEnabled()) {         logger.error("Closing session due to exception for " + session, exception).     }     if (session.isOpen()) {         try {             session.close(CloseStatus.SERVER_ERROR).         } catch (Throwable ex) {         // ignore         }     } }
