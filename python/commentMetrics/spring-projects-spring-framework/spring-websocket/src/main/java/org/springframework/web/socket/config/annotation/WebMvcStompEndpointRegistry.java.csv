commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static SubProtocolWebSocketHandler unwrapSubProtocolWebSocketHandler(WebSocketHandler handler) {     WebSocketHandler actual = WebSocketHandlerDecorator.unwrap(handler).     if (!(actual instanceof SubProtocolWebSocketHandler)) {         throw new IllegalArgumentException("No SubProtocolWebSocketHandler in " + handler).     }     return (SubProtocolWebSocketHandler) actual. }
false;public;1;8;;@Override public StompWebSocketEndpointRegistration addEndpoint(String... paths) {     this.subProtocolWebSocketHandler.addProtocolHandler(this.stompHandler).     WebMvcStompWebSocketEndpointRegistration registration = new WebMvcStompWebSocketEndpointRegistration(paths, this.webSocketHandler, this.sockJsScheduler).     this.registrations.add(registration).     return registration. }
true;public;1;4;/**  * Set the order for the resulting  * {@link org.springframework.web.servlet.HandlerMapping}  * relative to other handler mappings configured in Spring MVC.  * <p>The default value is 1.  */ ;/**  * Set the order for the resulting  * {@link org.springframework.web.servlet.HandlerMapping}  * relative to other handler mappings configured in Spring MVC.  * <p>The default value is 1.  */ @Override public void setOrder(int order) {     this.order = order. }
false;protected;0;3;;protected int getOrder() {     return this.order. }
true;public;1;4;/**  * Set the UrlPathHelper to configure on the {@code HandlerMapping}  * used to map handshake requests.  */ ;/**  * Set the UrlPathHelper to configure on the {@code HandlerMapping}  * used to map handshake requests.  */ @Override public void setUrlPathHelper(@Nullable UrlPathHelper urlPathHelper) {     this.urlPathHelper = urlPathHelper. }
false;protected;0;4;;@Nullable protected UrlPathHelper getUrlPathHelper() {     return this.urlPathHelper. }
false;public;1;5;;@Override public WebMvcStompEndpointRegistry setErrorHandler(StompSubProtocolErrorHandler errorHandler) {     this.stompHandler.setErrorHandler(errorHandler).     return this. }
false;protected;1;3;;protected void setApplicationContext(ApplicationContext applicationContext) {     this.stompHandler.setApplicationEventPublisher(applicationContext). }
true;public;0;18;/**  * Return a handler mapping with the mapped ViewControllers.  */ ;/**  * Return a handler mapping with the mapped ViewControllers.  */ public AbstractHandlerMapping getHandlerMapping() {     Map<String, Object> urlMap = new LinkedHashMap<>().     for (WebMvcStompWebSocketEndpointRegistration registration : this.registrations) {         MultiValueMap<HttpRequestHandler, String> mappings = registration.getMappings().         mappings.forEach((httpHandler, patterns) -> {             for (String pattern : patterns) {                 urlMap.put(pattern, httpHandler).             }         }).     }     WebSocketHandlerMapping hm = new WebSocketHandlerMapping().     hm.setUrlMap(urlMap).     hm.setOrder(this.order).     if (this.urlPathHelper != null) {         hm.setUrlPathHelper(this.urlPathHelper).     }     return hm. }
