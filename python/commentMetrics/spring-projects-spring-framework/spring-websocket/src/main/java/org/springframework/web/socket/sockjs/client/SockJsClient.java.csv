# id;timestamp;commentText;codeText;commentWords;codeWords
SockJsClient -> @Nullable 	protected Principal getUser();1495868221;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});@Nullable_	protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;nullable,protected,principal,get,user,return,null
SockJsClient -> @Nullable 	protected Principal getUser();1496259743;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});@Nullable_	protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;nullable,protected,principal,get,user,return,null
SockJsClient -> @Nullable 	protected Principal getUser();1496837955;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});@Nullable_	protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;nullable,protected,principal,get,user,return,null
SockJsClient -> @Nullable 	protected Principal getUser();1498780456;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});@Nullable_	protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;nullable,protected,principal,get,user,return,null
SockJsClient -> @Nullable 	protected Principal getUser();1500448076;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});@Nullable_	protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;nullable,protected,principal,get,user,return,null
SockJsClient -> @Nullable 	protected Principal getUser();1520529117;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});@Nullable_	protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;nullable,protected,principal,get,user,return,null
SockJsClient -> @Nullable 	protected Principal getUser();1530174524;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});@Nullable_	protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;nullable,protected,principal,get,user,return,null
SockJsClient -> public void clearServerInfoCache();1406748586;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1406749141;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1413848647;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1414533075;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1415376890;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1438107753;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1467730834;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1495868221;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1496259743;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1496837955;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1498780456;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1500448076;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1520529117;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void clearServerInfoCache();1530174524;By default the result of a SockJS "Info" request, including whether the_server has WebSocket disabled and how long the request took (used for_calculating transport timeout time) is cached. This method can be used to_clear that cache hence causing it to re-populate.;public void clearServerInfoCache() {_		this.serverInfoCache.clear()__	};by,default,the,result,of,a,sock,js,info,request,including,whether,the,server,has,web,socket,disabled,and,how,long,the,request,took,used,for,calculating,transport,timeout,time,is,cached,this,method,can,be,used,to,clear,that,cache,hence,causing,it,to,re,populate;public,void,clear,server,info,cache,this,server,info,cache,clear
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1406748586;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1406749141;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1413848647;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1414533075;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1415376890;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1438107753;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1467730834;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1495868221;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1496259743;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1496837955;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1498780456;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1500448076;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1520529117;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler);1530174524;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS "Info" request. The connect timeout task ensures a more timely_fallback but is otherwise entirely optional._<p>By default this is not configured in which case a fallback may take longer._@param connectTimeoutScheduler the task scheduler to use;public void setConnectTimeoutScheduler(TaskScheduler connectTimeoutScheduler) {_		this.connectTimeoutScheduler = connectTimeoutScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,the,connect,timeout,task,ensures,a,more,timely,fallback,but,is,otherwise,entirely,optional,p,by,default,this,is,not,configured,in,which,case,a,fallback,may,take,longer,param,connect,timeout,scheduler,the,task,scheduler,to,use;public,void,set,connect,timeout,scheduler,task,scheduler,connect,timeout,scheduler,this,connect,timeout,scheduler,connect,timeout,scheduler
SockJsClient -> public String[] getHttpHeaderNames();1438107753;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> public String[] getHttpHeaderNames();1467730834;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> public String[] getHttpHeaderNames();1495868221;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> public String[] getHttpHeaderNames();1496259743;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> @Nullable 	public String[] getHttpHeaderNames();1496837955;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;@Nullable_	public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;nullable,public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> @Nullable 	public String[] getHttpHeaderNames();1498780456;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;@Nullable_	public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;nullable,public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> @Nullable 	public String[] getHttpHeaderNames();1500448076;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;@Nullable_	public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;nullable,public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> @Nullable 	public String[] getHttpHeaderNames();1520529117;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;@Nullable_	public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;nullable,public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> @Nullable 	public String[] getHttpHeaderNames();1530174524;The configured HTTP header names to be copied from the handshake_headers and also included in other HTTP requests.;@Nullable_	public String[] getHttpHeaderNames() {_		return this.httpHeaderNames__	};the,configured,http,header,names,to,be,copied,from,the,handshake,headers,and,also,included,in,other,http,requests;nullable,public,string,get,http,header,names,return,this,http,header,names
SockJsClient -> public void setHttpHeaderNames(@Nullable String... httpHeaderNames);1500448076;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests.__<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests.__@param httpHeaderNames HTTP header names;public void setHttpHeaderNames(@Nullable String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,http,header,names;public,void,set,http,header,names,nullable,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> public void setHttpHeaderNames(@Nullable String... httpHeaderNames);1520529117;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests.__<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests.__@param httpHeaderNames HTTP header names;public void setHttpHeaderNames(@Nullable String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,http,header,names;public,void,set,http,header,names,nullable,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> public void setHttpHeaderNames(@Nullable String... httpHeaderNames);1530174524;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests._<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests._@param httpHeaderNames the HTTP header names;public void setHttpHeaderNames(@Nullable String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,the,http,header,names;public,void,set,http,header,names,nullable,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> protected Principal getUser();1403719829;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()_WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session, possibly {@code null};protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> protected Principal getUser();1405011419;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()_WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session, possibly {@code null};protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> protected Principal getUser();1406748586;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()_WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session, possibly {@code null};protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> protected Principal getUser();1406749141;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()_WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session, possibly {@code null};protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> protected Principal getUser();1413848647;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()_WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session, possibly {@code null};protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> protected Principal getUser();1414533075;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()_WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session, possibly {@code null};protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> protected Principal getUser();1415376890;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> protected Principal getUser();1438107753;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> protected Principal getUser();1467730834;Return the user to associate with the SockJS session and make available via_{@link org.springframework.web.socket.WebSocketSession#getPrincipal()}._<p>By default this method returns {@code null}._@return the user to associate with the session (possibly {@code null});protected Principal getUser() {_		return null__	};return,the,user,to,associate,with,the,sock,js,session,and,make,available,via,link,org,springframework,web,socket,web,socket,session,get,principal,p,by,default,this,method,returns,code,null,return,the,user,to,associate,with,the,session,possibly,code,null;protected,principal,get,user,return,null
SockJsClient -> public InfoReceiver getInfoReceiver();1406748586;Return the configured {@code InfoReceiver}, never {@code null}.;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1406749141;Return the configured {@code InfoReceiver}, never {@code null}.;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1413848647;Return the configured {@code InfoReceiver}, never {@code null}.;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1414533075;Return the configured {@code InfoReceiver}, never {@code null}.;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1415376890;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1438107753;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1467730834;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1495868221;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1496259743;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1496837955;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1498780456;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1500448076;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1520529117;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public InfoReceiver getInfoReceiver();1530174524;Return the configured {@code InfoReceiver} (never {@code null}).;public InfoReceiver getInfoReceiver() {_		return this.infoReceiver__	};return,the,configured,code,info,receiver,never,code,null;public,info,receiver,get,info,receiver,return,this,info,receiver
SockJsClient -> public void setTaskScheduler(TaskScheduler taskScheduler);1403719829;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS info request. Having a connect timeout task is optional but can_improve the speed with which the client falls back to alternative_transport options.__<p>By default no task scheduler is configured in which case it may take_longer before a fallback transport can be used.__@param taskScheduler the scheduler to use;public void setTaskScheduler(TaskScheduler taskScheduler) {_		this.taskScheduler = taskScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,having,a,connect,timeout,task,is,optional,but,can,improve,the,speed,with,which,the,client,falls,back,to,alternative,transport,options,p,by,default,no,task,scheduler,is,configured,in,which,case,it,may,take,longer,before,a,fallback,transport,can,be,used,param,task,scheduler,the,scheduler,to,use;public,void,set,task,scheduler,task,scheduler,task,scheduler,this,task,scheduler,task,scheduler
SockJsClient -> public void setTaskScheduler(TaskScheduler taskScheduler);1405011419;Configure a {@code TaskScheduler} for scheduling a connect timeout task_where the timeout value is calculated based on the duration of the initial_SockJS info request. Having a connect timeout task is optional but can_improve the speed with which the client falls back to alternative_transport options.__<p>By default no task scheduler is configured in which case it may take_longer before a fallback transport can be used.__@param taskScheduler the scheduler to use;public void setTaskScheduler(TaskScheduler taskScheduler) {_		this.taskScheduler = taskScheduler__	};configure,a,code,task,scheduler,for,scheduling,a,connect,timeout,task,where,the,timeout,value,is,calculated,based,on,the,duration,of,the,initial,sock,js,info,request,having,a,connect,timeout,task,is,optional,but,can,improve,the,speed,with,which,the,client,falls,back,to,alternative,transport,options,p,by,default,no,task,scheduler,is,configured,in,which,case,it,may,take,longer,before,a,fallback,transport,can,be,used,param,task,scheduler,the,scheduler,to,use;public,void,set,task,scheduler,task,scheduler,task,scheduler,this,task,scheduler,task,scheduler
SockJsClient -> public void setHttpHeaderNames(String... httpHeaderNames);1438107753;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests.__<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests.__@param httpHeaderNames HTTP header names;public void setHttpHeaderNames(String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,http,header,names;public,void,set,http,header,names,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> public void setHttpHeaderNames(String... httpHeaderNames);1467730834;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests.__<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests.__@param httpHeaderNames HTTP header names;public void setHttpHeaderNames(String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,http,header,names;public,void,set,http,header,names,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> public void setHttpHeaderNames(String... httpHeaderNames);1495868221;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests.__<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests.__@param httpHeaderNames HTTP header names;public void setHttpHeaderNames(String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,http,header,names;public,void,set,http,header,names,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> public void setHttpHeaderNames(String... httpHeaderNames);1496259743;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests.__<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests.__@param httpHeaderNames HTTP header names;public void setHttpHeaderNames(String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,http,header,names;public,void,set,http,header,names,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> public void setHttpHeaderNames(String... httpHeaderNames);1496837955;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests.__<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests.__@param httpHeaderNames HTTP header names;public void setHttpHeaderNames(String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,http,header,names;public,void,set,http,header,names,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> public void setHttpHeaderNames(String... httpHeaderNames);1498780456;The names of HTTP headers that should be copied from the handshake headers_of each call to {@link SockJsClient#doHandshake(WebSocketHandler, WebSocketHttpHeaders, URI)}_and also used with other HTTP requests issued as part of that SockJS_connection, e.g. the initial info request, XHR send or receive requests.__<p>By default if this property is not set, all handshake headers are also_used for other HTTP requests. Set it if you want only a subset of handshake_headers (e.g. auth headers) to be used for other HTTP requests.__@param httpHeaderNames HTTP header names;public void setHttpHeaderNames(String... httpHeaderNames) {_		this.httpHeaderNames = httpHeaderNames__	};the,names,of,http,headers,that,should,be,copied,from,the,handshake,headers,of,each,call,to,link,sock,js,client,do,handshake,web,socket,handler,web,socket,http,headers,uri,and,also,used,with,other,http,requests,issued,as,part,of,that,sock,js,connection,e,g,the,initial,info,request,xhr,send,or,receive,requests,p,by,default,if,this,property,is,not,set,all,handshake,headers,are,also,used,for,other,http,requests,set,it,if,you,want,only,a,subset,of,handshake,headers,e,g,auth,headers,to,be,used,for,other,http,requests,param,http,header,names,http,header,names;public,void,set,http,header,names,string,http,header,names,this,http,header,names,http,header,names
SockJsClient -> public SockJsMessageCodec getMessageCodec();1415376890;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1438107753;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1467730834;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1495868221;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1496259743;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1496837955;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1498780456;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		Assert.state(this.messageCodec != null, "No SockJsMessageCodec set")__		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,assert,state,this,message,codec,null,no,sock,js,message,codec,set,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1500448076;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		Assert.state(this.messageCodec != null, "No SockJsMessageCodec set")__		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,assert,state,this,message,codec,null,no,sock,js,message,codec,set,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1520529117;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		Assert.state(this.messageCodec != null, "No SockJsMessageCodec set")__		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,assert,state,this,message,codec,null,no,sock,js,message,codec,set,return,this,message,codec
SockJsClient -> public SockJsMessageCodec getMessageCodec();1530174524;Return the SockJsMessageCodec to use.;public SockJsMessageCodec getMessageCodec() {_		Assert.state(this.messageCodec != null, "No SockJsMessageCodec set")__		return this.messageCodec__	};return,the,sock,js,message,codec,to,use;public,sock,js,message,codec,get,message,codec,assert,state,this,message,codec,null,no,sock,js,message,codec,set,return,this,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1403719829;Set the SockJsMessageCodec to use.__<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.__@param messageCodec the message messageCodec to use;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath,param,message,codec,the,message,message,codec,to,use;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1405011419;Set the SockJsMessageCodec to use.__<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.__@param messageCodec the message messageCodec to use;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath,param,message,codec,the,message,message,codec,to,use;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1406748586;Set the SockJsMessageCodec to use.__<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.__@param messageCodec the message messageCodec to use;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath,param,message,codec,the,message,message,codec,to,use;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1406749141;Set the SockJsMessageCodec to use.__<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.__@param messageCodec the message messageCodec to use;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath,param,message,codec,the,message,message,codec,to,use;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1413848647;Set the SockJsMessageCodec to use.__<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.__@param messageCodec the message messageCodec to use;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath,param,message,codec,the,message,message,codec,to,use;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1414533075;Set the SockJsMessageCodec to use.__<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.__@param messageCodec the message messageCodec to use;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath,param,message,codec,the,message,message,codec,to,use;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1415376890;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1438107753;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1467730834;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1495868221;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1496259743;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1496837955;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "'messageCodec' is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1498780456;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "SockJsMessageCodec is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,sock,js,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1500448076;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "SockJsMessageCodec is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,sock,js,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1520529117;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "SockJsMessageCodec is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,sock,js,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public void setMessageCodec(SockJsMessageCodec messageCodec);1530174524;Set the SockJsMessageCodec to use._<p>By default {@link org.springframework.web.socket.sockjs.frame.Jackson2SockJsMessageCodec_Jackson2SockJsMessageCodec} is used if Jackson is on the classpath.;public void setMessageCodec(SockJsMessageCodec messageCodec) {_		Assert.notNull(messageCodec, "SockJsMessageCodec is required")__		this.messageCodec = messageCodec__	};set,the,sock,js,message,codec,to,use,p,by,default,link,org,springframework,web,socket,sockjs,frame,jackson2sock,js,message,codec,jackson2sock,js,message,codec,is,used,if,jackson,is,on,the,classpath;public,void,set,message,codec,sock,js,message,codec,message,codec,assert,not,null,message,codec,sock,js,message,codec,is,required,this,message,codec,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1403719829;Create a {@code SockJsClient} with the given transports._@param transports the transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<Transport>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,param,transports,the,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transport,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1405011419;Create a {@code SockJsClient} with the given transports._@param transports the transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<Transport>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,param,transports,the,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transport,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1406748586;Create a {@code SockJsClient} with the given transports.__<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}.__@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.infoReceiver = initInfoReceiver(transports)__		this.transports = new ArrayList<Transport>(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,info,receiver,init,info,receiver,transports,this,transports,new,array,list,transport,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1406749141;Create a {@code SockJsClient} with the given transports.__<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}.__@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.infoReceiver = initInfoReceiver(transports)__		this.transports = new ArrayList<Transport>(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,info,receiver,init,info,receiver,transports,this,transports,new,array,list,transport,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1413848647;Create a {@code SockJsClient} with the given transports.__<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}.__@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.infoReceiver = initInfoReceiver(transports)__		this.transports = new ArrayList<Transport>(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,info,receiver,init,info,receiver,transports,this,transports,new,array,list,transport,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1414533075;Create a {@code SockJsClient} with the given transports.__<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}.__@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.infoReceiver = initInfoReceiver(transports)__		this.transports = new ArrayList<Transport>(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,info,receiver,init,info,receiver,transports,this,transports,new,array,list,transport,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1415376890;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<Transport>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transport,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1438107753;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<Transport>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transport,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1467730834;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1495868221;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1496259743;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1496837955;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1498780456;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1500448076;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1520529117;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public SockJsClient(List<Transport> transports);1530174524;Create a {@code SockJsClient} with the given transports._<p>If the list includes an {@link XhrTransport} (or more specifically an_implementation of {@link InfoReceiver}) the instance is used to initialize_the {@link #setInfoReceiver(InfoReceiver) infoReceiver} property, or_otherwise is defaulted to {@link RestTemplateXhrTransport}._@param transports the (non-empty) list of transports to use;public SockJsClient(List<Transport> transports) {_		Assert.notEmpty(transports, "No transports provided")__		this.transports = new ArrayList<>(transports)__		this.infoReceiver = initInfoReceiver(transports)__		if (jackson2Present) {_			this.messageCodec = new Jackson2SockJsMessageCodec()__		}_	};create,a,code,sock,js,client,with,the,given,transports,p,if,the,list,includes,an,link,xhr,transport,or,more,specifically,an,implementation,of,link,info,receiver,the,instance,is,used,to,initialize,the,link,set,info,receiver,info,receiver,info,receiver,property,or,otherwise,is,defaulted,to,link,rest,template,xhr,transport,param,transports,the,non,empty,list,of,transports,to,use;public,sock,js,client,list,transport,transports,assert,not,empty,transports,no,transports,provided,this,transports,new,array,list,transports,this,info,receiver,init,info,receiver,transports,if,jackson2present,this,message,codec,new,jackson2sock,js,message,codec
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1403719829;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts.__<p>By default this is initialized either by looking through the configured_transports to find the first {@code XhrTransport} or by creating an_instance of {@code RestTemplateXhrTransport}.__@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,by,default,this,is,initialized,either,by,looking,through,the,configured,transports,to,find,the,first,code,xhr,transport,or,by,creating,an,instance,of,code,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1405011419;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts.__<p>By default this is initialized either by looking through the configured_transports to find the first {@code XhrTransport} or by creating an_instance of {@code RestTemplateXhrTransport}.__@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,by,default,this,is,initialized,either,by,looking,through,the,configured,transports,to,find,the,first,code,xhr,transport,or,by,creating,an,instance,of,code,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1406748586;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts.__<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}.__@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "'infoReceiver' is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1406749141;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts.__<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}.__@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "'infoReceiver' is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1413848647;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts.__<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}.__@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "'infoReceiver' is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1414533075;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts.__<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}.__@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "'infoReceiver' is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1415376890;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1438107753;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1467730834;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1495868221;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1496259743;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1496837955;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1498780456;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1500448076;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1520529117;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
SockJsClient -> public void setInfoReceiver(InfoReceiver infoReceiver);1530174524;Configure the {@code InfoReceiver} to use to perform the SockJS "Info"_request before the SockJS session starts._<p>If the list of transports provided to the constructor contained an_{@link XhrTransport} or an implementation of {@link InfoReceiver} that_instance would have been used to initialize this property, or otherwise_it defaults to {@link RestTemplateXhrTransport}._@param infoReceiver the transport to use for the SockJS "Info" request;public void setInfoReceiver(InfoReceiver infoReceiver) {_		Assert.notNull(infoReceiver, "InfoReceiver is required")__		this.infoReceiver = infoReceiver__	};configure,the,code,info,receiver,to,use,to,perform,the,sock,js,info,request,before,the,sock,js,session,starts,p,if,the,list,of,transports,provided,to,the,constructor,contained,an,link,xhr,transport,or,an,implementation,of,link,info,receiver,that,instance,would,have,been,used,to,initialize,this,property,or,otherwise,it,defaults,to,link,rest,template,xhr,transport,param,info,receiver,the,transport,to,use,for,the,sock,js,info,request;public,void,set,info,receiver,info,receiver,info,receiver,assert,not,null,info,receiver,info,receiver,is,required,this,info,receiver,info,receiver
