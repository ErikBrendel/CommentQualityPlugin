commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TransportType getTransportType() {     return TransportType.HTML_FILE. }
false;protected;0;4;;@Override protected MediaType getContentType() {     return new MediaType("text", "html", StandardCharsets.UTF_8). }
false;public;1;4;;@Override public boolean checkSessionType(SockJsSession session) {     return session instanceof HtmlFileStreamingSockJsSession. }
false;public;3;6;;@Override public StreamingSockJsSession createSession(String sessionId, WebSocketHandler handler, Map<String, Object> attributes) {     return new HtmlFileStreamingSockJsSession(sessionId, getServiceConfig(), handler, attributes). }
false;public;3;19;;@Override public void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, AbstractHttpSockJsSession sockJsSession) throws SockJsException {     String callback = getCallbackParam(request).     if (!StringUtils.hasText(callback)) {         response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR).         try {             response.getBody().write("\"callback\" parameter required".getBytes(StandardCharsets.UTF_8)).         } catch (IOException ex) {             sockJsSession.tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR).             throw new SockJsTransportFailureException("Failed to write to response", sockJsSession.getId(), ex).         }         return.     }     super.handleRequestInternal(request, response, sockJsSession). }
false;protected;1;4;;@Override protected String preProcessContent(String content) {     return JavaScriptUtils.javaScriptEscape(content). }
false;protected;1;9;;@Override protected SockJsFrameFormat getFrameFormat(ServerHttpRequest request) {     return new DefaultSockJsFrameFormat("<script>\np(\"%s\").\n</script>\r\n") {          @Override         protected String preProcessContent(String content) {             return JavaScriptUtils.javaScriptEscape(content).         }     }. }
false;protected;1;7;;@Override protected byte[] getPrelude(ServerHttpRequest request) {     // We already validated the parameter above...     String callback = getCallbackParam(request).     String html = String.format(PARTIAL_HTML_CONTENT, callback).     return html.getBytes(StandardCharsets.UTF_8). }
