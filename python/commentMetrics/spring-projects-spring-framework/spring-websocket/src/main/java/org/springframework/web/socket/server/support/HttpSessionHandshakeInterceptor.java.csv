commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the configured attribute names to copy (read-only).  */ ;/**  * Return the configured attribute names to copy (read-only).  */ public Collection<String> getAttributeNames() {     return this.attributeNames. }
true;public;1;3;/**  * Whether to copy all attributes from the HTTP session. If set to "true",  * any explicitly configured attribute names are ignored.  * <p>By default this is set to either "true" or "false" depending on which  * constructor was used (default or with attribute names respectively).  * @param copyAllAttributes whether to copy all attributes  */ ;/**  * Whether to copy all attributes from the HTTP session. If set to "true",  * any explicitly configured attribute names are ignored.  * <p>By default this is set to either "true" or "false" depending on which  * constructor was used (default or with attribute names respectively).  * @param copyAllAttributes whether to copy all attributes  */ public void setCopyAllAttributes(boolean copyAllAttributes) {     this.copyAllAttributes = copyAllAttributes. }
true;public;0;3;/**  * Whether to copy all HTTP session attributes.  */ ;/**  * Whether to copy all HTTP session attributes.  */ public boolean isCopyAllAttributes() {     return this.copyAllAttributes. }
true;public;1;3;/**  * Whether the HTTP session id should be copied to the handshake attributes  * under the key {@link #HTTP_SESSION_ID_ATTR_NAME}.  * <p>By default this is "true".  * @param copyHttpSessionId whether to copy the HTTP session id.  */ ;/**  * Whether the HTTP session id should be copied to the handshake attributes  * under the key {@link #HTTP_SESSION_ID_ATTR_NAME}.  * <p>By default this is "true".  * @param copyHttpSessionId whether to copy the HTTP session id.  */ public void setCopyHttpSessionId(boolean copyHttpSessionId) {     this.copyHttpSessionId = copyHttpSessionId. }
true;public;0;3;/**  * Whether to copy the HTTP session id to the handshake attributes.  */ ;/**  * Whether to copy the HTTP session id to the handshake attributes.  */ public boolean isCopyHttpSessionId() {     return this.copyHttpSessionId. }
true;public;1;3;/**  * Whether to allow the HTTP session to be created while accessing it.  * <p>By default set to {@code false}.  * @see javax.servlet.http.HttpServletRequest#getSession(boolean)  */ ;/**  * Whether to allow the HTTP session to be created while accessing it.  * <p>By default set to {@code false}.  * @see javax.servlet.http.HttpServletRequest#getSession(boolean)  */ public void setCreateSession(boolean createSession) {     this.createSession = createSession. }
true;public;0;3;/**  * Whether the HTTP session is allowed to be created.  */ ;/**  * Whether the HTTP session is allowed to be created.  */ public boolean isCreateSession() {     return this.createSession. }
false;public;4;19;;@Override public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map<String, Object> attributes) throws Exception {     HttpSession session = getSession(request).     if (session != null) {         if (isCopyHttpSessionId()) {             attributes.put(HTTP_SESSION_ID_ATTR_NAME, session.getId()).         }         Enumeration<String> names = session.getAttributeNames().         while (names.hasMoreElements()) {             String name = names.nextElement().             if (isCopyAllAttributes() || getAttributeNames().contains(name)) {                 attributes.put(name, session.getAttribute(name)).             }         }     }     return true. }
false;private;1;8;;@Nullable private HttpSession getSession(ServerHttpRequest request) {     if (request instanceof ServletServerHttpRequest) {         ServletServerHttpRequest serverRequest = (ServletServerHttpRequest) request.         return serverRequest.getServletRequest().getSession(isCreateSession()).     }     return null. }
false;public;4;4;;@Override public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, @Nullable Exception ex) { }
