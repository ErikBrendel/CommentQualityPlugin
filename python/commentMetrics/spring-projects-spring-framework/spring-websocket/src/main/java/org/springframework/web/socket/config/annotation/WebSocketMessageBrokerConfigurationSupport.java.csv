commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;@Override protected SimpAnnotationMethodMessageHandler createAnnotationMethodMessageHandler() {     return new WebSocketAnnotationMethodMessageHandler(clientInboundChannel(), clientOutboundChannel(), brokerMessagingTemplate()). }
false;protected;1;8;;@Override protected SimpUserRegistry createLocalUserRegistry(@Nullable Integer order) {     DefaultSimpUserRegistry registry = new DefaultSimpUserRegistry().     if (order != null) {         registry.setOrder(order).     }     return registry. }
false;public;0;12;;@Bean public HandlerMapping stompWebSocketHandlerMapping() {     WebSocketHandler handler = decorateWebSocketHandler(subProtocolWebSocketHandler()).     WebMvcStompEndpointRegistry registry = new WebMvcStompEndpointRegistry(handler, getTransportRegistration(), messageBrokerTaskScheduler()).     ApplicationContext applicationContext = getApplicationContext().     if (applicationContext != null) {         registry.setApplicationContext(applicationContext).     }     registerStompEndpoints(registry).     return registry.getHandlerMapping(). }
false;public;0;4;;@Bean public WebSocketHandler subProtocolWebSocketHandler() {     return new SubProtocolWebSocketHandler(clientInboundChannel(), clientOutboundChannel()). }
false;protected;1;6;;protected WebSocketHandler decorateWebSocketHandler(WebSocketHandler handler) {     for (WebSocketHandlerDecoratorFactory factory : getTransportRegistration().getDecoratorFactories()) {         handler = factory.decorate(handler).     }     return handler. }
false;protected,final;0;7;;protected final WebSocketTransportRegistration getTransportRegistration() {     if (this.transportRegistration == null) {         this.transportRegistration = new WebSocketTransportRegistration().         configureWebSocketTransport(this.transportRegistration).     }     return this.transportRegistration. }
false;protected;1;2;;protected void configureWebSocketTransport(WebSocketTransportRegistration registry) { }
false;protected,abstract;1;1;;protected abstract void registerStompEndpoints(StompEndpointRegistry registry).
false;public,static;0;6;;@Bean public static CustomScopeConfigurer webSocketScopeConfigurer() {     CustomScopeConfigurer configurer = new CustomScopeConfigurer().     configurer.addScope("websocket", new SimpSessionScope()).     return configurer. }
false;public;0;17;;@Bean public WebSocketMessageBrokerStats webSocketMessageBrokerStats() {     AbstractBrokerMessageHandler relayBean = stompBrokerRelayMessageHandler().     // Ensure STOMP endpoints are registered     stompWebSocketHandlerMapping().     WebSocketMessageBrokerStats stats = new WebSocketMessageBrokerStats().     stats.setSubProtocolWebSocketHandler((SubProtocolWebSocketHandler) subProtocolWebSocketHandler()).     if (relayBean instanceof StompBrokerRelayMessageHandler) {         stats.setStompBrokerRelay((StompBrokerRelayMessageHandler) relayBean).     }     stats.setInboundChannelExecutor(clientInboundChannelExecutor()).     stats.setOutboundChannelExecutor(clientOutboundChannelExecutor()).     stats.setSockJsTaskScheduler(messageBrokerTaskScheduler()).     return stats. }
false;protected;0;12;;@Override protected MappingJackson2MessageConverter createJacksonConverter() {     MappingJackson2MessageConverter messageConverter = super.createJacksonConverter().     // Use Jackson builder in order to have JSR-310 and Joda-Time modules registered automatically     Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.json().     ApplicationContext applicationContext = getApplicationContext().     if (applicationContext != null) {         builder.applicationContext(applicationContext).     }     messageConverter.setObjectMapper(builder.build()).     return messageConverter. }
