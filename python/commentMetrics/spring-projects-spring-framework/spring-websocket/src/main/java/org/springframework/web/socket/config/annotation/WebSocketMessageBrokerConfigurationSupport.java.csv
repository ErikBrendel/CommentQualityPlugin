# id;timestamp;commentText;codeText;commentWords;codeWords
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1386024878;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1395551070;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1395703237;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1395703238;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1395703238;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1398144543;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1399825877;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1401465872;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1401465872;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1403719829;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		@SuppressWarnings("serial")_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler() {_			@Override_			protected ExecutorService initializeExecutor(ThreadFactory factory, RejectedExecutionHandler handler) {_				ExecutorService service = super.initializeExecutor(factory, handler)__				((ScheduledThreadPoolExecutor) service).setRemoveOnCancelPolicy(true)__				return service__			}_		}__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,suppress,warnings,serial,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,override,protected,executor,service,initialize,executor,thread,factory,factory,rejected,execution,handler,handler,executor,service,service,super,initialize,executor,factory,handler,scheduled,thread,pool,executor,service,set,remove,on,cancel,policy,true,return,service,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1403723322;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new SockJsThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,sock,js,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1404066532;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1404077700;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		if (hasRemoveOnCancelPolicyMethod) {_			scheduler.setRemoveOnCancelPolicy(true)__		}_		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,if,has,remove,on,cancel,policy,method,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1404094194;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		if (hasRemoveOnCancelPolicyMethod) {_			scheduler.setRemoveOnCancelPolicy(true)__		}_		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,if,has,remove,on,cancel,policy,method,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1404097013;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1404880787;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...___</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1411601493;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...__</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1413207351;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...__</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1413225428;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...__</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1413848647;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...__</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1417596581;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...__</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1417797448;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...__</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
WebSocketMessageBrokerConfigurationSupport -> @Bean 	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler();1426789284;The default TaskScheduler to use if none is configured via_{@link SockJsServiceRegistration#setTaskScheduler(org.springframework.scheduling.TaskScheduler)}, i.e._<pre class="code">_&#064_Configuration_&#064_EnableWebSocketMessageBroker_public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {__public void registerStompEndpoints(StompEndpointRegistry registry) {_registry.addEndpoint("/stomp").withSockJS().setTaskScheduler(myScheduler())____// ...__</pre>;@Bean_	public ThreadPoolTaskScheduler messageBrokerSockJsTaskScheduler() {_		ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler()__		scheduler.setThreadNamePrefix("MessageBrokerSockJS-")__		scheduler.setPoolSize(Runtime.getRuntime().availableProcessors())__		scheduler.setRemoveOnCancelPolicy(true)__		return scheduler__	};the,default,task,scheduler,to,use,if,none,is,configured,via,link,sock,js,service,registration,set,task,scheduler,org,springframework,scheduling,task,scheduler,i,e,pre,class,code,064,configuration,064,enable,web,socket,message,broker,public,class,web,socket,config,implements,web,socket,message,broker,configurer,public,void,register,stomp,endpoints,stomp,endpoint,registry,registry,registry,add,endpoint,stomp,with,sock,js,set,task,scheduler,my,scheduler,pre;bean,public,thread,pool,task,scheduler,message,broker,sock,js,task,scheduler,thread,pool,task,scheduler,scheduler,new,thread,pool,task,scheduler,scheduler,set,thread,name,prefix,message,broker,sock,js,scheduler,set,pool,size,runtime,get,runtime,available,processors,scheduler,set,remove,on,cancel,policy,true,return,scheduler
