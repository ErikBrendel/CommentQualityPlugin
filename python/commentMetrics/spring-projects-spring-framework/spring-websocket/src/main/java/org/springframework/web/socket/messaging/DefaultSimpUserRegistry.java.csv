commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the order value for this registry.  * <p>Default is {@link Ordered#LOWEST_PRECEDENCE}.  * @since 5.0.8  */ ;/**  * Specify the order value for this registry.  * <p>Default is {@link Ordered#LOWEST_PRECEDENCE}.  * @since 5.0.8  */ public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;4;;// SmartApplicationListener methods @Override public boolean supportsEventType(Class<? extends ApplicationEvent> eventType) {     return AbstractSubProtocolEvent.class.isAssignableFrom(eventType). }
false;public;1;64;;@Override public void onApplicationEvent(ApplicationEvent event) {     AbstractSubProtocolEvent subProtocolEvent = (AbstractSubProtocolEvent) event.     Message<?> message = subProtocolEvent.getMessage().     SimpMessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, SimpMessageHeaderAccessor.class).     Assert.state(accessor != null, "No SimpMessageHeaderAccessor").     String sessionId = accessor.getSessionId().     Assert.state(sessionId != null, "No session id").     if (event instanceof SessionSubscribeEvent) {         LocalSimpSession session = this.sessions.get(sessionId).         if (session != null) {             String id = accessor.getSubscriptionId().             String destination = accessor.getDestination().             if (id != null && destination != null) {                 session.addSubscription(id, destination).             }         }     } else if (event instanceof SessionConnectedEvent) {         Principal user = subProtocolEvent.getUser().         if (user == null) {             return.         }         String name = user.getName().         if (user instanceof DestinationUserNameProvider) {             name = ((DestinationUserNameProvider) user).getDestinationUserName().         }         synchronized (this.sessionLock) {             LocalSimpUser simpUser = this.users.get(name).             if (simpUser == null) {                 simpUser = new LocalSimpUser(name).                 this.users.put(name, simpUser).             }             LocalSimpSession session = new LocalSimpSession(sessionId, simpUser).             simpUser.addSession(session).             this.sessions.put(sessionId, session).         }     } else if (event instanceof SessionDisconnectEvent) {         synchronized (this.sessionLock) {             LocalSimpSession session = this.sessions.remove(sessionId).             if (session != null) {                 LocalSimpUser user = session.getUser().                 user.removeSession(sessionId).                 if (!user.hasSessions()) {                     this.users.remove(user.getName()).                 }             }         }     } else if (event instanceof SessionUnsubscribeEvent) {         LocalSimpSession session = this.sessions.get(sessionId).         if (session != null) {             String subscriptionId = accessor.getSubscriptionId().             if (subscriptionId != null) {                 session.removeSubscription(subscriptionId).             }         }     } }
false;public;1;4;;@Override public boolean supportsSourceType(@Nullable Class<?> sourceType) {     return true. }
false;public;1;5;;// SimpUserRegistry methods @Override @Nullable public SimpUser getUser(String userName) {     return this.users.get(userName). }
false;public;0;4;;@Override public Set<SimpUser> getUsers() {     return new HashSet<>(this.users.values()). }
false;public;0;4;;@Override public int getUserCount() {     return this.users.size(). }
false;public;1;11;;public Set<SimpSubscription> findSubscriptions(SimpSubscriptionMatcher matcher) {     Set<SimpSubscription> result = new HashSet<>().     for (LocalSimpSession session : this.sessions.values()) {         for (SimpSubscription subscription : session.subscriptions.values()) {             if (matcher.match(subscription)) {                 result.add(subscription).             }         }     }     return result. }
false;public;0;4;;@Override public String toString() {     return "users=" + this.users. }
false;public;0;4;;@Override public String getName() {     return this.name. }
false;public;0;4;;@Override public boolean hasSessions() {     return !this.userSessions.isEmpty(). }
false;public;1;5;;@Override @Nullable public SimpSession getSession(@Nullable String sessionId) {     return (sessionId != null ? this.userSessions.get(sessionId) : null). }
false;public;0;4;;@Override public Set<SimpSession> getSessions() {     return new HashSet<>(this.userSessions.values()). }
false;;1;3;;void addSession(SimpSession session) {     this.userSessions.put(session.getId(), session). }
false;;1;3;;void removeSession(String sessionId) {     this.userSessions.remove(sessionId). }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof SimpUser && getName().equals(((SimpUser) other).getName()))). }
false;public;0;4;;@Override public int hashCode() {     return getName().hashCode(). }
false;public;0;4;;@Override public String toString() {     return "name=" + getName() + ", sessions=" + this.userSessions. }
false;public;0;4;;@Override public String getId() {     return this.id. }
false;public;0;4;;@Override public LocalSimpUser getUser() {     return this.user. }
false;public;0;4;;@Override public Set<SimpSubscription> getSubscriptions() {     return new HashSet<>(this.subscriptions.values()). }
false;;2;3;;void addSubscription(String id, String destination) {     this.subscriptions.put(id, new LocalSimpSubscription(id, destination, this)). }
false;;1;3;;void removeSubscription(String id) {     this.subscriptions.remove(id). }
false;public;1;5;;@Override public boolean equals(Object other) {     return (this == other || (other instanceof SimpSubscription && getId().equals(((SimpSubscription) other).getId()))). }
false;public;0;4;;@Override public int hashCode() {     return getId().hashCode(). }
false;public;0;4;;@Override public String toString() {     return "id=" + getId() + ", subscriptions=" + this.subscriptions. }
false;public;0;4;;@Override public String getId() {     return this.id. }
false;public;0;4;;@Override public LocalSimpSession getSession() {     return this.session. }
false;public;0;4;;@Override public String getDestination() {     return this.destination. }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof SimpSubscription)) {         return false.     }     SimpSubscription otherSubscription = (SimpSubscription) other.     return (getId().equals(otherSubscription.getId()) && getSession().getId().equals(otherSubscription.getSession().getId())). }
false;public;0;4;;@Override public int hashCode() {     return getId().hashCode() * 31 + getSession().getId().hashCode(). }
false;public;0;4;;@Override public String toString() {     return "destination=" + this.destination. }
