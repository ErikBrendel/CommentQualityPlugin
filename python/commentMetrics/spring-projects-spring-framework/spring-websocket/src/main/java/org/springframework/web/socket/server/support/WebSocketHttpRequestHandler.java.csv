commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the WebSocketHandler.  */ ;/**  * Return the WebSocketHandler.  */ public WebSocketHandler getWebSocketHandler() {     return this.wsHandler. }
true;public;0;3;/**  * Return the HandshakeHandler.  */ ;/**  * Return the HandshakeHandler.  */ public HandshakeHandler getHandshakeHandler() {     return this.handshakeHandler. }
true;public;1;6;/**  * Configure one or more WebSocket handshake request interceptors.  */ ;/**  * Configure one or more WebSocket handshake request interceptors.  */ public void setHandshakeInterceptors(@Nullable List<HandshakeInterceptor> interceptors) {     this.interceptors.clear().     if (interceptors != null) {         this.interceptors.addAll(interceptors).     } }
true;public;0;3;/**  * Return the configured WebSocket handshake request interceptors.  */ ;/**  * Return the configured WebSocket handshake request interceptors.  */ public List<HandshakeInterceptor> getHandshakeInterceptors() {     return this.interceptors. }
false;public;1;6;;@Override public void setServletContext(ServletContext servletContext) {     if (this.handshakeHandler instanceof ServletContextAware) {         ((ServletContextAware) this.handshakeHandler).setServletContext(servletContext).     } }
false;public;0;9;;@Override public void start() {     if (!isRunning()) {         this.running = true.         if (this.handshakeHandler instanceof Lifecycle) {             ((Lifecycle) this.handshakeHandler).start().         }     } }
false;public;0;9;;@Override public void stop() {     if (isRunning()) {         this.running = false.         if (this.handshakeHandler instanceof Lifecycle) {             ((Lifecycle) this.handshakeHandler).stop().         }     } }
false;public;0;4;;@Override public boolean isRunning() {     return this.running. }
false;public;2;35;;@Override public void handleRequest(HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws ServletException, IOException {     ServerHttpRequest request = new ServletServerHttpRequest(servletRequest).     ServerHttpResponse response = new ServletServerHttpResponse(servletResponse).     HandshakeInterceptorChain chain = new HandshakeInterceptorChain(this.interceptors, this.wsHandler).     HandshakeFailureException failure = null.     try {         if (logger.isDebugEnabled()) {             logger.debug(servletRequest.getMethod() + " " + servletRequest.getRequestURI()).         }         Map<String, Object> attributes = new HashMap<>().         if (!chain.applyBeforeHandshake(request, response, attributes)) {             return.         }         this.handshakeHandler.doHandshake(request, response, this.wsHandler, attributes).         chain.applyAfterHandshake(request, response, null).         response.close().     } catch (HandshakeFailureException ex) {         failure = ex.     } catch (Throwable ex) {         failure = new HandshakeFailureException("Uncaught failure for request " + request.getURI(), ex).     } finally {         if (failure != null) {             chain.applyAfterHandshake(request, response, failure).             throw failure.         }     } }
