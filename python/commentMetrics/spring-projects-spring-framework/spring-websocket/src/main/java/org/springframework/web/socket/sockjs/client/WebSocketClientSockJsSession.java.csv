commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public Object getNativeSession() {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     return this.webSocketSession. }
false;public;1;6;;@SuppressWarnings("unchecked") @Override @Nullable public <T> T getNativeSession(@Nullable Class<T> requiredType) {     return (requiredType == null || requiredType.isInstance(this.webSocketSession) ? (T) this.webSocketSession : null). }
false;public;0;5;;@Override public InetSocketAddress getLocalAddress() {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     return this.webSocketSession.getLocalAddress(). }
false;public;0;5;;@Override public InetSocketAddress getRemoteAddress() {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     return this.webSocketSession.getRemoteAddress(). }
false;public;0;5;;@Override public String getAcceptedProtocol() {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     return this.webSocketSession.getAcceptedProtocol(). }
false;public;1;5;;@Override public void setTextMessageSizeLimit(int messageSizeLimit) {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     this.webSocketSession.setTextMessageSizeLimit(messageSizeLimit). }
false;public;0;5;;@Override public int getTextMessageSizeLimit() {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     return this.webSocketSession.getTextMessageSizeLimit(). }
false;public;1;5;;@Override public void setBinaryMessageSizeLimit(int messageSizeLimit) {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     this.webSocketSession.setBinaryMessageSizeLimit(messageSizeLimit). }
false;public;0;5;;@Override public int getBinaryMessageSizeLimit() {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     return this.webSocketSession.getBinaryMessageSizeLimit(). }
false;public;0;5;;@Override public List<WebSocketExtension> getExtensions() {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     return this.webSocketSession.getExtensions(). }
false;public;1;3;;public void initializeDelegateSession(WebSocketSession session) {     this.webSocketSession = session. }
false;protected;1;5;;@Override protected void sendInternal(TextMessage textMessage) throws IOException {     Assert.state(this.webSocketSession != null, "WebSocketSession not yet initialized").     this.webSocketSession.sendMessage(textMessage). }
false;protected;1;6;;@Override protected void disconnect(CloseStatus status) throws IOException {     if (this.webSocketSession != null) {         this.webSocketSession.close(status).     } }
