commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public WebSocketHandler getDelegate() {     return this.delegate. }
false;public;0;7;;public WebSocketHandler getLastHandler() {     WebSocketHandler result = this.delegate.     while (result instanceof WebSocketHandlerDecorator) {         result = ((WebSocketHandlerDecorator) result).getDelegate().     }     return result. }
false;public,static;1;8;;public static WebSocketHandler unwrap(WebSocketHandler handler) {     if (handler instanceof WebSocketHandlerDecorator) {         return ((WebSocketHandlerDecorator) handler).getLastHandler().     } else {         return handler.     } }
false;public;1;4;;@Override public void afterConnectionEstablished(WebSocketSession session) throws Exception {     this.delegate.afterConnectionEstablished(session). }
false;public;2;4;;@Override public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {     this.delegate.handleMessage(session, message). }
false;public;2;4;;@Override public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {     this.delegate.handleTransportError(session, exception). }
false;public;2;4;;@Override public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {     this.delegate.afterConnectionClosed(session, closeStatus). }
false;public;0;4;;@Override public boolean supportsPartialMessages() {     return this.delegate.supportsPartialMessages(). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + " [delegate=" + this.delegate + "]". }
