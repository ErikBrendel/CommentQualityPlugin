commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.provider.setBeanFactory(beanFactory). }
false;public;1;6;;@Override public void afterConnectionEstablished(WebSocketSession session) throws Exception {     WebSocketHandler handler = this.provider.getHandler().     this.handlers.put(session, handler).     handler.afterConnectionEstablished(session). }
false;public;2;4;;@Override public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {     getHandler(session).handleMessage(session, message). }
false;public;2;4;;@Override public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {     getHandler(session).handleTransportError(session, exception). }
false;public;2;9;;@Override public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {     try {         getHandler(session).afterConnectionClosed(session, closeStatus).     } finally {         destroyHandler(session).     } }
false;public;0;4;;@Override public boolean supportsPartialMessages() {     return this.supportsPartialMessages. }
false;private;1;7;;private WebSocketHandler getHandler(WebSocketSession session) {     WebSocketHandler handler = this.handlers.get(session).     if (handler == null) {         throw new IllegalStateException("WebSocketHandler not found for " + session).     }     return handler. }
false;private;1;13;;private void destroyHandler(WebSocketSession session) {     WebSocketHandler handler = this.handlers.remove(session).     try {         if (handler != null) {             this.provider.destroy(handler).         }     } catch (Throwable ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error while destroying " + handler, ex).         }     } }
false;public;0;4;;@Override public String toString() {     return "PerConnectionWebSocketHandlerProxy[handlerType=" + this.provider.getHandlerType() + "]". }
