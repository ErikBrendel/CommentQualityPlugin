# id;timestamp;commentText;codeText;commentWords;codeWords
SubProtocolErrorHandler -> Message<P> handleClientMessageProcessingError(Message<P> clientMessage, Throwable ex)_;1431728285;Handle errors thrown while processing client messages providing an_opportunity to prepare the error message or to prevent one from being sent.__<p>Note that the STOMP protocol requires a server to close the connection_after sending an ERROR frame. To prevent that, a handler could return_{@code null} and send a message through the broker instead, e.g. via a_user destination targeting the user.__@param clientMessage the client message related to the error, possibly_{@code null} if error occurred while parsing a WebSocket message_@param ex the cause for the error, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;Message<P> handleClientMessageProcessingError(Message<P> clientMessage, Throwable ex)_;handle,errors,thrown,while,processing,client,messages,providing,an,opportunity,to,prepare,the,error,message,or,to,prevent,one,from,being,sent,p,note,that,the,stomp,protocol,requires,a,server,to,close,the,connection,after,sending,an,error,frame,to,prevent,that,a,handler,could,return,code,null,and,send,a,message,through,the,broker,instead,e,g,via,a,user,destination,targeting,the,user,param,client,message,the,client,message,related,to,the,error,possibly,code,null,if,error,occurred,while,parsing,a,web,socket,message,param,ex,the,cause,for,the,error,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;message,p,handle,client,message,processing,error,message,p,client,message,throwable,ex
SubProtocolErrorHandler -> Message<P> handleClientMessageProcessingError(Message<P> clientMessage, Throwable ex)_;1435026644;Handle errors thrown while processing client messages providing an_opportunity to prepare the error message or to prevent one from being sent.__<p>Note that the STOMP protocol requires a server to close the connection_after sending an ERROR frame. To prevent an ERROR frame from being sent,_a handler could return {@code null} and send a notification message_through the broker instead, e.g. via a user destination.__@param clientMessage the client message related to the error, possibly_{@code null} if error occurred while parsing a WebSocket message_@param ex the cause for the error, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;Message<P> handleClientMessageProcessingError(Message<P> clientMessage, Throwable ex)_;handle,errors,thrown,while,processing,client,messages,providing,an,opportunity,to,prepare,the,error,message,or,to,prevent,one,from,being,sent,p,note,that,the,stomp,protocol,requires,a,server,to,close,the,connection,after,sending,an,error,frame,to,prevent,an,error,frame,from,being,sent,a,handler,could,return,code,null,and,send,a,notification,message,through,the,broker,instead,e,g,via,a,user,destination,param,client,message,the,client,message,related,to,the,error,possibly,code,null,if,error,occurred,while,parsing,a,web,socket,message,param,ex,the,cause,for,the,error,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;message,p,handle,client,message,processing,error,message,p,client,message,throwable,ex
SubProtocolErrorHandler -> Message<P> handleClientMessageProcessingError(Message<P> clientMessage, Throwable ex)_;1437512314;Handle errors thrown while processing client messages providing an_opportunity to prepare the error message or to prevent one from being sent._<p>Note that the STOMP protocol requires a server to close the connection_after sending an ERROR frame. To prevent an ERROR frame from being sent,_a handler could return {@code null} and send a notification message_through the broker instead, e.g. via a user destination._@param clientMessage the client message related to the error, possibly_{@code null} if error occurred while parsing a WebSocket message_@param ex the cause for the error, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;Message<P> handleClientMessageProcessingError(Message<P> clientMessage, Throwable ex)_;handle,errors,thrown,while,processing,client,messages,providing,an,opportunity,to,prepare,the,error,message,or,to,prevent,one,from,being,sent,p,note,that,the,stomp,protocol,requires,a,server,to,close,the,connection,after,sending,an,error,frame,to,prevent,an,error,frame,from,being,sent,a,handler,could,return,code,null,and,send,a,notification,message,through,the,broker,instead,e,g,via,a,user,destination,param,client,message,the,client,message,related,to,the,error,possibly,code,null,if,error,occurred,while,parsing,a,web,socket,message,param,ex,the,cause,for,the,error,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;message,p,handle,client,message,processing,error,message,p,client,message,throwable,ex
SubProtocolErrorHandler -> @Nullable 	Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;1495868221;Handle errors sent from the server side to clients, e.g. errors from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler_"broke relay"} because connectivity failed or the external broker sent an_error message, etc._@param errorMessage the error message, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;@Nullable_	Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;handle,errors,sent,from,the,server,side,to,clients,e,g,errors,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler,broke,relay,because,connectivity,failed,or,the,external,broker,sent,an,error,message,etc,param,error,message,the,error,message,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;nullable,message,p,handle,error,message,to,client,message,p,error,message
SubProtocolErrorHandler -> @Nullable 	Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;1530174524;Handle errors sent from the server side to clients, e.g. errors from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler_"broke relay"} because connectivity failed or the external broker sent an_error message, etc._@param errorMessage the error message, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;@Nullable_	Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;handle,errors,sent,from,the,server,side,to,clients,e,g,errors,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler,broke,relay,because,connectivity,failed,or,the,external,broker,sent,an,error,message,etc,param,error,message,the,error,message,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;nullable,message,p,handle,error,message,to,client,message,p,error,message
SubProtocolErrorHandler -> Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;1431728285;Handle errors sent from the server side to clients, e.g. errors from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler_"broke relay"} because connectivity failed or the external broker sent an_error message, etc._@param errorMessage the error message, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;handle,errors,sent,from,the,server,side,to,clients,e,g,errors,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler,broke,relay,because,connectivity,failed,or,the,external,broker,sent,an,error,message,etc,param,error,message,the,error,message,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;message,p,handle,error,message,to,client,message,p,error,message
SubProtocolErrorHandler -> Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;1435026644;Handle errors sent from the server side to clients, e.g. errors from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler_"broke relay"} because connectivity failed or the external broker sent an_error message, etc._@param errorMessage the error message, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;handle,errors,sent,from,the,server,side,to,clients,e,g,errors,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler,broke,relay,because,connectivity,failed,or,the,external,broker,sent,an,error,message,etc,param,error,message,the,error,message,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;message,p,handle,error,message,to,client,message,p,error,message
SubProtocolErrorHandler -> Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;1437512314;Handle errors sent from the server side to clients, e.g. errors from the_{@link org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler_"broke relay"} because connectivity failed or the external broker sent an_error message, etc._@param errorMessage the error message, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;Message<P> handleErrorMessageToClient(Message<P> errorMessage)_;handle,errors,sent,from,the,server,side,to,clients,e,g,errors,from,the,link,org,springframework,messaging,simp,stomp,stomp,broker,relay,message,handler,broke,relay,because,connectivity,failed,or,the,external,broker,sent,an,error,message,etc,param,error,message,the,error,message,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;message,p,handle,error,message,to,client,message,p,error,message
SubProtocolErrorHandler -> @Nullable 	Message<P> handleClientMessageProcessingError(@Nullable Message<P> clientMessage, Throwable ex)_;1495868221;Handle errors thrown while processing client messages providing an_opportunity to prepare the error message or to prevent one from being sent._<p>Note that the STOMP protocol requires a server to close the connection_after sending an ERROR frame. To prevent an ERROR frame from being sent,_a handler could return {@code null} and send a notification message_through the broker instead, e.g. via a user destination._@param clientMessage the client message related to the error, possibly_{@code null} if error occurred while parsing a WebSocket message_@param ex the cause for the error, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;@Nullable_	Message<P> handleClientMessageProcessingError(@Nullable Message<P> clientMessage, Throwable ex)_;handle,errors,thrown,while,processing,client,messages,providing,an,opportunity,to,prepare,the,error,message,or,to,prevent,one,from,being,sent,p,note,that,the,stomp,protocol,requires,a,server,to,close,the,connection,after,sending,an,error,frame,to,prevent,an,error,frame,from,being,sent,a,handler,could,return,code,null,and,send,a,notification,message,through,the,broker,instead,e,g,via,a,user,destination,param,client,message,the,client,message,related,to,the,error,possibly,code,null,if,error,occurred,while,parsing,a,web,socket,message,param,ex,the,cause,for,the,error,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;nullable,message,p,handle,client,message,processing,error,nullable,message,p,client,message,throwable,ex
SubProtocolErrorHandler -> @Nullable 	Message<P> handleClientMessageProcessingError(@Nullable Message<P> clientMessage, Throwable ex)_;1530174524;Handle errors thrown while processing client messages providing an_opportunity to prepare the error message or to prevent one from being sent._<p>Note that the STOMP protocol requires a server to close the connection_after sending an ERROR frame. To prevent an ERROR frame from being sent,_a handler could return {@code null} and send a notification message_through the broker instead, e.g. via a user destination._@param clientMessage the client message related to the error, possibly_{@code null} if error occurred while parsing a WebSocket message_@param ex the cause for the error, never {@code null}_@return the error message to send to the client, or {@code null} in which_case no message will be sent.;@Nullable_	Message<P> handleClientMessageProcessingError(@Nullable Message<P> clientMessage, Throwable ex)_;handle,errors,thrown,while,processing,client,messages,providing,an,opportunity,to,prepare,the,error,message,or,to,prevent,one,from,being,sent,p,note,that,the,stomp,protocol,requires,a,server,to,close,the,connection,after,sending,an,error,frame,to,prevent,an,error,frame,from,being,sent,a,handler,could,return,code,null,and,send,a,notification,message,through,the,broker,instead,e,g,via,a,user,destination,param,client,message,the,client,message,related,to,the,error,possibly,code,null,if,error,occurred,while,parsing,a,web,socket,message,param,ex,the,cause,for,the,error,never,code,null,return,the,error,message,to,send,to,the,client,or,code,null,in,which,case,no,message,will,be,sent;nullable,message,p,handle,client,message,processing,error,nullable,message,p,client,message,throwable,ex
