# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSubProtocolEvent -> public Message<byte[]> getMessage();1403968062;Return the Message associated with the event. Here is an example of_obtaining information about the session id or any headers in the_message:__<pre class="code">_StompHeaderAccessor headers = StompHeaderAccessor.wrap(message)__headers.getSessionId()__headers.getSessionAttributes()__headers.getPrincipal()__</pre>;public Message<byte[]> getMessage() {_		return this.message__	};return,the,message,associated,with,the,event,here,is,an,example,of,obtaining,information,about,the,session,id,or,any,headers,in,the,message,pre,class,code,stomp,header,accessor,headers,stomp,header,accessor,wrap,message,headers,get,session,id,headers,get,session,attributes,headers,get,principal,pre;public,message,byte,get,message,return,this,message
AbstractSubProtocolEvent -> public Message<byte[]> getMessage();1413848647;Return the Message associated with the event. Here is an example of_obtaining information about the session id or any headers in the_message:__<pre class="code">_StompHeaderAccessor headers = StompHeaderAccessor.wrap(message)__headers.getSessionId()__headers.getSessionAttributes()__headers.getPrincipal()__</pre>;public Message<byte[]> getMessage() {_		return this.message__	};return,the,message,associated,with,the,event,here,is,an,example,of,obtaining,information,about,the,session,id,or,any,headers,in,the,message,pre,class,code,stomp,header,accessor,headers,stomp,header,accessor,wrap,message,headers,get,session,id,headers,get,session,attributes,headers,get,principal,pre;public,message,byte,get,message,return,this,message
AbstractSubProtocolEvent -> public Message<byte[]> getMessage();1417192618;Return the Message associated with the event. Here is an example of_obtaining information about the session id or any headers in the_message:_<pre class="code">_StompHeaderAccessor headers = StompHeaderAccessor.wrap(message)__headers.getSessionId()__headers.getSessionAttributes()__headers.getPrincipal()__</pre>;public Message<byte[]> getMessage() {_		return this.message__	};return,the,message,associated,with,the,event,here,is,an,example,of,obtaining,information,about,the,session,id,or,any,headers,in,the,message,pre,class,code,stomp,header,accessor,headers,stomp,header,accessor,wrap,message,headers,get,session,id,headers,get,session,attributes,headers,get,principal,pre;public,message,byte,get,message,return,this,message
AbstractSubProtocolEvent -> public Message<byte[]> getMessage();1431458952;Return the Message associated with the event. Here is an example of_obtaining information about the session id or any headers in the_message:_<pre class="code">_StompHeaderAccessor headers = StompHeaderAccessor.wrap(message)__headers.getSessionId()__headers.getSessionAttributes()__headers.getPrincipal()__</pre>;public Message<byte[]> getMessage() {_		return this.message__	};return,the,message,associated,with,the,event,here,is,an,example,of,obtaining,information,about,the,session,id,or,any,headers,in,the,message,pre,class,code,stomp,header,accessor,headers,stomp,header,accessor,wrap,message,headers,get,session,id,headers,get,session,attributes,headers,get,principal,pre;public,message,byte,get,message,return,this,message
AbstractSubProtocolEvent -> public Message<byte[]> getMessage();1496837955;Return the Message associated with the event. Here is an example of_obtaining information about the session id or any headers in the_message:_<pre class="code">_StompHeaderAccessor headers = StompHeaderAccessor.wrap(message)__headers.getSessionId()__headers.getSessionAttributes()__headers.getPrincipal()__</pre>;public Message<byte[]> getMessage() {_		return this.message__	};return,the,message,associated,with,the,event,here,is,an,example,of,obtaining,information,about,the,session,id,or,any,headers,in,the,message,pre,class,code,stomp,header,accessor,headers,stomp,header,accessor,wrap,message,headers,get,session,id,headers,get,session,attributes,headers,get,principal,pre;public,message,byte,get,message,return,this,message
AbstractSubProtocolEvent -> public Message<byte[]> getMessage();1498780456;Return the Message associated with the event. Here is an example of_obtaining information about the session id or any headers in the_message:_<pre class="code">_StompHeaderAccessor headers = StompHeaderAccessor.wrap(message)__headers.getSessionId()__headers.getSessionAttributes()__headers.getPrincipal()__</pre>;public Message<byte[]> getMessage() {_		return this.message__	};return,the,message,associated,with,the,event,here,is,an,example,of,obtaining,information,about,the,session,id,or,any,headers,in,the,message,pre,class,code,stomp,header,accessor,headers,stomp,header,accessor,wrap,message,headers,get,session,id,headers,get,session,attributes,headers,get,principal,pre;public,message,byte,get,message,return,this,message
AbstractSubProtocolEvent -> protected AbstractSubProtocolEvent(Object source, Message<byte[]> message);1403968062;Create a new SessionConnectEvent.__@param source the component that published the event (never {@code null})_@param message the connect message;protected AbstractSubProtocolEvent(Object source, Message<byte[]> message) {_		super(source)__		Assert.notNull(message, "'message' must not be null")__		this.message = message__	};create,a,new,session,connect,event,param,source,the,component,that,published,the,event,never,code,null,param,message,the,connect,message;protected,abstract,sub,protocol,event,object,source,message,byte,message,super,source,assert,not,null,message,message,must,not,be,null,this,message,message
AbstractSubProtocolEvent -> protected AbstractSubProtocolEvent(Object source, Message<byte[]> message);1413848647;Create a new SessionConnectEvent.__@param source the component that published the event (never {@code null})_@param message the connect message;protected AbstractSubProtocolEvent(Object source, Message<byte[]> message) {_		super(source)__		Assert.notNull(message, "'message' must not be null")__		this.message = message__	};create,a,new,session,connect,event,param,source,the,component,that,published,the,event,never,code,null,param,message,the,connect,message;protected,abstract,sub,protocol,event,object,source,message,byte,message,super,source,assert,not,null,message,message,must,not,be,null,this,message,message
AbstractSubProtocolEvent -> protected AbstractSubProtocolEvent(Object source, Message<byte[]> message);1417192618;Create a new AbstractSubProtocolEvent._@param source the component that published the event (never {@code null})_@param message the incoming message;protected AbstractSubProtocolEvent(Object source, Message<byte[]> message) {_		super(source)__		Assert.notNull(message, "Message must not be null")__		this.message = message__	};create,a,new,abstract,sub,protocol,event,param,source,the,component,that,published,the,event,never,code,null,param,message,the,incoming,message;protected,abstract,sub,protocol,event,object,source,message,byte,message,super,source,assert,not,null,message,message,must,not,be,null,this,message,message
AbstractSubProtocolEvent -> protected AbstractSubProtocolEvent(Object source, Message<byte[]> message);1431458952;Create a new AbstractSubProtocolEvent._@param source the component that published the event (never {@code null})_@param message the incoming message;protected AbstractSubProtocolEvent(Object source, Message<byte[]> message) {_		super(source)__		Assert.notNull(message, "Message must not be null")__		this.message = message__		this.user = null__	};create,a,new,abstract,sub,protocol,event,param,source,the,component,that,published,the,event,never,code,null,param,message,the,incoming,message;protected,abstract,sub,protocol,event,object,source,message,byte,message,super,source,assert,not,null,message,message,must,not,be,null,this,message,message,this,user,null
AbstractSubProtocolEvent -> protected AbstractSubProtocolEvent(Object source, Message<byte[]> message);1496837955;Create a new AbstractSubProtocolEvent._@param source the component that published the event (never {@code null})_@param message the incoming message (never {@code null});protected AbstractSubProtocolEvent(Object source, Message<byte[]> message) {_		this(source, message, null)__	};create,a,new,abstract,sub,protocol,event,param,source,the,component,that,published,the,event,never,code,null,param,message,the,incoming,message,never,code,null;protected,abstract,sub,protocol,event,object,source,message,byte,message,this,source,message,null
AbstractSubProtocolEvent -> protected AbstractSubProtocolEvent(Object source, Message<byte[]> message);1498780456;Create a new AbstractSubProtocolEvent._@param source the component that published the event (never {@code null})_@param message the incoming message (never {@code null});protected AbstractSubProtocolEvent(Object source, Message<byte[]> message) {_		this(source, message, null)__	};create,a,new,abstract,sub,protocol,event,param,source,the,component,that,published,the,event,never,code,null,param,message,the,incoming,message,never,code,null;protected,abstract,sub,protocol,event,object,source,message,byte,message,this,source,message,null
AbstractSubProtocolEvent -> @Nullable 	public Principal getUser();1496837955;Return the user for the session associated with the event.;@Nullable_	public Principal getUser() {_		return this.user__	};return,the,user,for,the,session,associated,with,the,event;nullable,public,principal,get,user,return,this,user
AbstractSubProtocolEvent -> @Nullable 	public Principal getUser();1498780456;Return the user for the session associated with the event.;@Nullable_	public Principal getUser() {_		return this.user__	};return,the,user,for,the,session,associated,with,the,event;nullable,public,principal,get,user,return,this,user
AbstractSubProtocolEvent -> protected AbstractSubProtocolEvent(Object source, Message<byte[]> message, @Nullable Principal user);1496837955;Create a new AbstractSubProtocolEvent._@param source the component that published the event (never {@code null})_@param message the incoming message (never {@code null});protected AbstractSubProtocolEvent(Object source, Message<byte[]> message, @Nullable Principal user) {_		super(source)__		Assert.notNull(message, "Message must not be null")__		this.message = message__		this.user = user__	};create,a,new,abstract,sub,protocol,event,param,source,the,component,that,published,the,event,never,code,null,param,message,the,incoming,message,never,code,null;protected,abstract,sub,protocol,event,object,source,message,byte,message,nullable,principal,user,super,source,assert,not,null,message,message,must,not,be,null,this,message,message,this,user,user
AbstractSubProtocolEvent -> protected AbstractSubProtocolEvent(Object source, Message<byte[]> message, @Nullable Principal user);1498780456;Create a new AbstractSubProtocolEvent._@param source the component that published the event (never {@code null})_@param message the incoming message (never {@code null});protected AbstractSubProtocolEvent(Object source, Message<byte[]> message, @Nullable Principal user) {_		super(source)__		Assert.notNull(message, "Message must not be null")__		this.message = message__		this.user = user__	};create,a,new,abstract,sub,protocol,event,param,source,the,component,that,published,the,event,never,code,null,param,message,the,incoming,message,never,code,null;protected,abstract,sub,protocol,event,object,source,message,byte,message,nullable,principal,user,super,source,assert,not,null,message,message,must,not,be,null,this,message,message,this,user,user
