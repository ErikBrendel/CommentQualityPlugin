commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onMessage(String message) {     handleTextMessage(session, message, true). }
false;public;1;4;;@Override public void onMessage(ByteBuffer message) {     handleBinaryMessage(session, message, true). }
false;public;2;4;;@Override public void onMessage(String message, boolean isLast) {     handleTextMessage(session, message, isLast). }
false;public;2;4;;@Override public void onMessage(ByteBuffer message, boolean isLast) {     handleBinaryMessage(session, message, isLast). }
false;public;1;4;;@Override public void onMessage(javax.websocket.PongMessage message) {     handlePongMessage(session, message.getApplicationData()). }
false;public;2;50;;@Override public void onOpen(final javax.websocket.Session session, EndpointConfig config) {     this.wsSession.initializeNativeSession(session).     if (this.handler.supportsPartialMessages()) {         session.addMessageHandler(new MessageHandler.Partial<String>() {              @Override             public void onMessage(String message, boolean isLast) {                 handleTextMessage(session, message, isLast).             }         }).         session.addMessageHandler(new MessageHandler.Partial<ByteBuffer>() {              @Override             public void onMessage(ByteBuffer message, boolean isLast) {                 handleBinaryMessage(session, message, isLast).             }         }).     } else {         session.addMessageHandler(new MessageHandler.Whole<String>() {              @Override             public void onMessage(String message) {                 handleTextMessage(session, message, true).             }         }).         session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>() {              @Override             public void onMessage(ByteBuffer message) {                 handleBinaryMessage(session, message, true).             }         }).     }     session.addMessageHandler(new MessageHandler.Whole<javax.websocket.PongMessage>() {          @Override         public void onMessage(javax.websocket.PongMessage message) {             handlePongMessage(session, message.getApplicationData()).         }     }).     try {         this.handler.afterConnectionEstablished(this.wsSession).     } catch (Throwable ex) {         ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger).     } }
false;private;3;9;;private void handleTextMessage(javax.websocket.Session session, String payload, boolean isLast) {     TextMessage textMessage = new TextMessage(payload, isLast).     try {         this.handler.handleMessage(this.wsSession, textMessage).     } catch (Throwable ex) {         ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger).     } }
false;private;3;9;;private void handleBinaryMessage(javax.websocket.Session session, ByteBuffer payload, boolean isLast) {     BinaryMessage binaryMessage = new BinaryMessage(payload, isLast).     try {         this.handler.handleMessage(this.wsSession, binaryMessage).     } catch (Throwable ex) {         ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger).     } }
false;private;2;9;;private void handlePongMessage(javax.websocket.Session session, ByteBuffer payload) {     PongMessage pongMessage = new PongMessage(payload).     try {         this.handler.handleMessage(this.wsSession, pongMessage).     } catch (Throwable ex) {         ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger).     } }
false;public;2;12;;@Override public void onClose(javax.websocket.Session session, CloseReason reason) {     CloseStatus closeStatus = new CloseStatus(reason.getCloseCode().getCode(), reason.getReasonPhrase()).     try {         this.handler.afterConnectionClosed(this.wsSession, closeStatus).     } catch (Throwable ex) {         if (logger.isWarnEnabled()) {             logger.warn("Unhandled on-close exception for " + this.wsSession, ex).         }     } }
false;public;2;9;;@Override public void onError(javax.websocket.Session session, Throwable exception) {     try {         this.handler.handleTransportError(this.wsSession, exception).     } catch (Throwable ex) {         ExceptionWebSocketHandlerDecorator.tryCloseWithError(this.wsSession, ex, logger).     } }
