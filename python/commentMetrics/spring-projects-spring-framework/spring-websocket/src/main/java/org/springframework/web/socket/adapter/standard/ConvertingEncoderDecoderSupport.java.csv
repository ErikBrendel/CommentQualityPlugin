commented;modifiers;parameterAmount;loc;comment;code
true;public;1;8;/**  * Called to initialize the encoder/decoder.  * @see javax.websocket.Encoder#init(EndpointConfig)  * @see javax.websocket.Decoder#init(EndpointConfig)  */ ;/**  * Called to initialize the encoder/decoder.  * @see javax.websocket.Encoder#init(EndpointConfig)  * @see javax.websocket.Decoder#init(EndpointConfig)  */ public void init(EndpointConfig config) {     ApplicationContext applicationContext = getApplicationContext().     if (applicationContext != null && applicationContext instanceof ConfigurableApplicationContext) {         ConfigurableListableBeanFactory beanFactory = ((ConfigurableApplicationContext) applicationContext).getBeanFactory().         beanFactory.autowireBean(this).     } }
true;public;0;2;/**  * Called to destroy the encoder/decoder.  * @see javax.websocket.Encoder#destroy()  * @see javax.websocket.Decoder#destroy()  */ ;/**  * Called to destroy the encoder/decoder.  * @see javax.websocket.Encoder#destroy()  * @see javax.websocket.Decoder#destroy()  */ public void destroy() { }
true;protected;0;11;/**  * Strategy method used to obtain the {@link ConversionService}. By default this  * method expects a bean named {@code 'webSocketConversionService'} in the  * {@link #getApplicationContext() active ApplicationContext}.  * @return the {@link ConversionService} (never null)  */ ;/**  * Strategy method used to obtain the {@link ConversionService}. By default this  * method expects a bean named {@code 'webSocketConversionService'} in the  * {@link #getApplicationContext() active ApplicationContext}.  * @return the {@link ConversionService} (never null)  */ protected ConversionService getConversionService() {     ApplicationContext applicationContext = getApplicationContext().     Assert.state(applicationContext != null, "Unable to locate the Spring ApplicationContext").     try {         return applicationContext.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class).     } catch (BeansException ex) {         throw new IllegalStateException("Unable to find ConversionService: please configure a '" + CONVERSION_SERVICE_BEAN_NAME + "' or override the getConversionService() method", ex).     } }
true;protected;0;4;/**  * Returns the active {@link ApplicationContext}. Be default this method obtains  * the context via {@link ContextLoader#getCurrentWebApplicationContext()}, which  * finds the ApplicationContext loaded via {@link ContextLoader} typically in a  * Servlet container environment. When not running in a Servlet container and  * not using {@link ContextLoader}, this method should be overridden.  * @return the {@link ApplicationContext} or {@code null}  */ ;/**  * Returns the active {@link ApplicationContext}. Be default this method obtains  * the context via {@link ContextLoader#getCurrentWebApplicationContext()}, which  * finds the ApplicationContext loaded via {@link ContextLoader} typically in a  * Servlet container environment. When not running in a Servlet container and  * not using {@link ContextLoader}, this method should be overridden.  * @return the {@link ApplicationContext} or {@code null}  */ @Nullable protected ApplicationContext getApplicationContext() {     return ContextLoader.getCurrentWebApplicationContext(). }
true;protected;0;3;/**  * Returns the type being converted. By default the type is resolved using  * the generic arguments of the class.  */ ;/**  * Returns the type being converted. By default the type is resolved using  * the generic arguments of the class.  */ protected TypeDescriptor getType() {     return TypeDescriptor.valueOf(resolveTypeArguments()[0]). }
true;protected;0;3;/**  * Returns the websocket message type. By default the type is resolved using  * the generic arguments of the class.  */ ;/**  * Returns the websocket message type. By default the type is resolved using  * the generic arguments of the class.  */ protected TypeDescriptor getMessageType() {     return TypeDescriptor.valueOf(resolveTypeArguments()[1]). }
false;private;0;8;;private Class<?>[] resolveTypeArguments() {     Class<?>[] resolved = GenericTypeResolver.resolveTypeArguments(getClass(), ConvertingEncoderDecoderSupport.class).     if (resolved == null) {         throw new IllegalStateException("ConvertingEncoderDecoderSupport's generic types T and M " + "need to be substituted in subclass: " + getClass()).     }     return resolved. }
true;public;1;10;/**  * Encode an object to a message.  * @see javax.websocket.Encoder.Text#encode(Object)  * @see javax.websocket.Encoder.Binary#encode(Object)  */ ;/**  * Encode an object to a message.  * @see javax.websocket.Encoder.Text#encode(Object)  * @see javax.websocket.Encoder.Binary#encode(Object)  */ @SuppressWarnings("unchecked") @Nullable public M encode(T object) throws EncodeException {     try {         return (M) getConversionService().convert(object, getType(), getMessageType()).     } catch (ConversionException ex) {         throw new EncodeException(object, "Unable to encode websocket message using ConversionService", ex).     } }
true;public;1;3;/**  * Determine if a given message can be decoded.  * @see #decode(Object)  * @see javax.websocket.Decoder.Text#willDecode(String)  * @see javax.websocket.Decoder.Binary#willDecode(ByteBuffer)  */ ;/**  * Determine if a given message can be decoded.  * @see #decode(Object)  * @see javax.websocket.Decoder.Text#willDecode(String)  * @see javax.websocket.Decoder.Binary#willDecode(ByteBuffer)  */ public boolean willDecode(M bytes) {     return getConversionService().canConvert(getType(), getMessageType()). }
true;public;1;18;/**  * Decode the a message into an object.  * @see javax.websocket.Decoder.Text#decode(String)  * @see javax.websocket.Decoder.Binary#decode(ByteBuffer)  */ ;/**  * Decode the a message into an object.  * @see javax.websocket.Decoder.Text#decode(String)  * @see javax.websocket.Decoder.Binary#decode(ByteBuffer)  */ @SuppressWarnings("unchecked") @Nullable public T decode(M message) throws DecodeException {     try {         return (T) getConversionService().convert(message, getMessageType(), getType()).     } catch (ConversionException ex) {         if (message instanceof String) {             throw new DecodeException((String) message, "Unable to decode websocket message using ConversionService", ex).         }         if (message instanceof ByteBuffer) {             throw new DecodeException((ByteBuffer) message, "Unable to decode websocket message using ConversionService", ex).         }         throw ex.     } }
