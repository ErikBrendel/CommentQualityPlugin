commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public WebSocketHandlerRegistration addHandler(WebSocketHandler handler, String... paths) {     Assert.notNull(handler, "WebSocketHandler must not be null").     Assert.notEmpty(paths, "Paths must not be empty").     this.handlerMap.put(handler, Arrays.asList(paths)).     return this. }
false;public;1;5;;@Override public WebSocketHandlerRegistration setHandshakeHandler(@Nullable HandshakeHandler handshakeHandler) {     this.handshakeHandler = handshakeHandler.     return this. }
false;protected;0;4;;@Nullable protected HandshakeHandler getHandshakeHandler() {     return this.handshakeHandler. }
false;public;1;7;;@Override public WebSocketHandlerRegistration addInterceptors(HandshakeInterceptor... interceptors) {     if (!ObjectUtils.isEmpty(interceptors)) {         this.interceptors.addAll(Arrays.asList(interceptors)).     }     return this. }
false;public;1;8;;@Override public WebSocketHandlerRegistration setAllowedOrigins(String... allowedOrigins) {     this.allowedOrigins.clear().     if (!ObjectUtils.isEmpty(allowedOrigins)) {         this.allowedOrigins.addAll(Arrays.asList(allowedOrigins)).     }     return this. }
false;public;0;16;;@Override public SockJsServiceRegistration withSockJS() {     this.sockJsServiceRegistration = new SockJsServiceRegistration().     HandshakeInterceptor[] interceptors = getInterceptors().     if (interceptors.length > 0) {         this.sockJsServiceRegistration.setInterceptors(interceptors).     }     if (this.handshakeHandler != null) {         WebSocketTransportHandler transportHandler = new WebSocketTransportHandler(this.handshakeHandler).         this.sockJsServiceRegistration.setTransportHandlerOverrides(transportHandler).     }     if (!this.allowedOrigins.isEmpty()) {         this.sockJsServiceRegistration.setAllowedOrigins(StringUtils.toStringArray(this.allowedOrigins)).     }     return this.sockJsServiceRegistration. }
false;protected;0;6;;protected HandshakeInterceptor[] getInterceptors() {     List<HandshakeInterceptor> interceptors = new ArrayList<>(this.interceptors.size() + 1).     interceptors.addAll(this.interceptors).     interceptors.add(new OriginHandshakeInterceptor(this.allowedOrigins)).     return interceptors.toArray(new HandshakeInterceptor[0]). }
true;protected;0;4;/**  * Expose the {@code SockJsServiceRegistration} -- if SockJS is enabled or  * {@code null} otherwise -- so that it can be configured with a TaskScheduler  * if the application did not provide one. This should be done prior to  * calling {@link #getMappings()}.  */ ;/**  * Expose the {@code SockJsServiceRegistration} -- if SockJS is enabled or  * {@code null} otherwise -- so that it can be configured with a TaskScheduler  * if the application did not provide one. This should be done prior to  * calling {@link #getMappings()}.  */ @Nullable protected SockJsServiceRegistration getSockJsServiceRegistration() {     return this.sockJsServiceRegistration. }
false;protected,final;0;23;;protected final M getMappings() {     M mappings = createMappings().     if (this.sockJsServiceRegistration != null) {         SockJsService sockJsService = this.sockJsServiceRegistration.getSockJsService().         this.handlerMap.forEach((wsHandler, paths) -> {             for (String path : paths) {                 String pathPattern = (path.endsWith("/") ? path + "**" : path + "/**").                 addSockJsServiceMapping(mappings, sockJsService, wsHandler, pathPattern).             }         }).     } else {         HandshakeHandler handshakeHandler = getOrCreateHandshakeHandler().         HandshakeInterceptor[] interceptors = getInterceptors().         this.handlerMap.forEach((wsHandler, paths) -> {             for (String path : paths) {                 addWebSocketHandlerMapping(mappings, wsHandler, handshakeHandler, interceptors, path).             }         }).     }     return mappings. }
false;private;0;3;;private HandshakeHandler getOrCreateHandshakeHandler() {     return (this.handshakeHandler != null ? this.handshakeHandler : new DefaultHandshakeHandler()). }
false;protected,abstract;0;1;;protected abstract M createMappings().
false;protected,abstract;4;2;;protected abstract void addSockJsServiceMapping(M mappings, SockJsService sockJsService, WebSocketHandler handler, String pathPattern).
false;protected,abstract;5;2;;protected abstract void addWebSocketHandlerMapping(M mappings, WebSocketHandler wsHandler, HandshakeHandler handshakeHandler, HandshakeInterceptor[] interceptors, String path).
