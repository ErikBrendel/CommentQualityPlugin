commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean checkSessionType(SockJsSession session) {     return (session instanceof AbstractHttpSockJsSession). }
false;public,final;4;9;;@Override public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, SockJsSession wsSession) throws SockJsException {     Assert.notNull(wsSession, "No session").     AbstractHttpSockJsSession sockJsSession = (AbstractHttpSockJsSession) wsSession.     handleRequestInternal(request, response, wsHandler, sockJsSession). }
false;protected;4;35;;protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException {     String[] messages.     try {         messages = readMessages(request).     } catch (IOException ex) {         logger.error("Failed to read message", ex).         if (ex.getClass().getName().contains("Mapping")) {             // e.g. Jackson's JsonMappingException, indicating an incomplete payload             handleReadError(response, "Payload expected.", sockJsSession.getId()).         } else {             handleReadError(response, "Broken JSON encoding.", sockJsSession.getId()).         }         return.     } catch (Throwable ex) {         logger.error("Failed to read message", ex).         handleReadError(response, "Failed to read message(s)", sockJsSession.getId()).         return.     }     if (messages == null) {         handleReadError(response, "Payload expected.", sockJsSession.getId()).         return.     }     if (logger.isTraceEnabled()) {         logger.trace("Received message(s): " + Arrays.asList(messages)).     }     response.setStatusCode(getResponseStatus()).     response.getHeaders().setContentType(new MediaType("text", "plain", StandardCharsets.UTF_8)).     sockJsSession.delegateMessages(messages). }
false;private;3;9;;private void handleReadError(ServerHttpResponse response, String error, String sessionId) {     try {         response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR).         response.getBody().write(error.getBytes(StandardCharsets.UTF_8)).     } catch (IOException ex) {         throw new SockJsException("Failed to send error: " + error, sessionId, ex).     } }
false;protected,abstract;1;2;;@Nullable protected abstract String[] readMessages(ServerHttpRequest request) throws IOException.
false;protected,abstract;0;1;;protected abstract HttpStatus getResponseStatus().
