commented;modifiers;parameterAmount;loc;comment;code
false;public;2;44;;@Override @Nullable public BeanDefinition parse(Element element, ParserContext context) {     Object source = context.extractSource(element).     CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source).     context.pushContainingComponent(compDefinition).     String orderAttribute = element.getAttribute("order").     int order = orderAttribute.isEmpty() ? DEFAULT_MAPPING_ORDER : Integer.valueOf(orderAttribute).     RootBeanDefinition handlerMappingDef = new RootBeanDefinition(WebSocketHandlerMapping.class).     handlerMappingDef.setSource(source).     handlerMappingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     handlerMappingDef.getPropertyValues().add("order", order).     String handlerMappingName = context.getReaderContext().registerWithGeneratedName(handlerMappingDef).     RuntimeBeanReference sockJsService = WebSocketNamespaceUtils.registerSockJsService(element, SOCK_JS_SCHEDULER_NAME, context, source).     HandlerMappingStrategy strategy.     if (sockJsService != null) {         strategy = new SockJsHandlerMappingStrategy(sockJsService).     } else {         RuntimeBeanReference handler = WebSocketNamespaceUtils.registerHandshakeHandler(element, context, source).         Element interceptElem = DomUtils.getChildElementByTagName(element, "handshake-interceptors").         ManagedList<Object> interceptors = WebSocketNamespaceUtils.parseBeanSubElements(interceptElem, context).         String allowedOrigins = element.getAttribute("allowed-origins").         List<String> origins = Arrays.asList(StringUtils.tokenizeToStringArray(allowedOrigins, ",")).         interceptors.add(new OriginHandshakeInterceptor(origins)).         strategy = new WebSocketHandlerMappingStrategy(handler, interceptors).     }     ManagedMap<String, Object> urlMap = new ManagedMap<>().     urlMap.setSource(source).     for (Element mappingElement : DomUtils.getChildElementsByTagName(element, "mapping")) {         strategy.addMapping(mappingElement, urlMap, context).     }     handlerMappingDef.getPropertyValues().add("urlMap", urlMap).     context.registerComponent(new BeanComponentDefinition(handlerMappingDef, handlerMappingName)).     context.popAndRegisterContainingComponent().     return null. }
false;;3;1;;void addMapping(Element mappingElement, ManagedMap<String, Object> map, ParserContext context).
false;public;3;20;;@Override public void addMapping(Element element, ManagedMap<String, Object> urlMap, ParserContext context) {     String pathAttribute = element.getAttribute("path").     String[] mappings = StringUtils.tokenizeToStringArray(pathAttribute, ",").     RuntimeBeanReference handlerReference = new RuntimeBeanReference(element.getAttribute("handler")).     ConstructorArgumentValues cargs = new ConstructorArgumentValues().     cargs.addIndexedArgumentValue(0, handlerReference).     cargs.addIndexedArgumentValue(1, this.handshakeHandlerReference).     RootBeanDefinition requestHandlerDef = new RootBeanDefinition(WebSocketHttpRequestHandler.class, cargs, null).     requestHandlerDef.setSource(context.extractSource(element)).     requestHandlerDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     requestHandlerDef.getPropertyValues().add("handshakeInterceptors", this.interceptorsList).     String requestHandlerName = context.getReaderContext().registerWithGeneratedName(requestHandlerDef).     RuntimeBeanReference requestHandlerRef = new RuntimeBeanReference(requestHandlerName).     for (String mapping : mappings) {         urlMap.put(mapping, requestHandlerRef).     } }
false;public;3;21;;@Override public void addMapping(Element element, ManagedMap<String, Object> urlMap, ParserContext context) {     String pathAttribute = element.getAttribute("path").     String[] mappings = StringUtils.tokenizeToStringArray(pathAttribute, ",").     RuntimeBeanReference handlerReference = new RuntimeBeanReference(element.getAttribute("handler")).     ConstructorArgumentValues cargs = new ConstructorArgumentValues().     cargs.addIndexedArgumentValue(0, this.sockJsService, "SockJsService").     cargs.addIndexedArgumentValue(1, handlerReference, "WebSocketHandler").     RootBeanDefinition requestHandlerDef = new RootBeanDefinition(SockJsHttpRequestHandler.class, cargs, null).     requestHandlerDef.setSource(context.extractSource(element)).     requestHandlerDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     String requestHandlerName = context.getReaderContext().registerWithGeneratedName(requestHandlerDef).     RuntimeBeanReference requestHandlerRef = new RuntimeBeanReference(requestHandlerName).     for (String mapping : mappings) {         String pathPattern = (mapping.endsWith("/") ? mapping + "**" : mapping + "/**").         urlMap.put(pathPattern, requestHandlerRef).     } }
