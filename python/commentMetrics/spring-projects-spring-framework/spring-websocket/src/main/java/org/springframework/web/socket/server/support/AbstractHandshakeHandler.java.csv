commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;33;;private static RequestUpgradeStrategy initRequestUpgradeStrategy() {     String className.     if (tomcatWsPresent) {         className = "org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy".     } else if (jettyWsPresent) {         className = "org.springframework.web.socket.server.jetty.JettyRequestUpgradeStrategy".     } else if (undertowWsPresent) {         className = "org.springframework.web.socket.server.standard.UndertowRequestUpgradeStrategy".     } else if (glassfishWsPresent) {         className = "org.springframework.web.socket.server.standard.GlassFishRequestUpgradeStrategy".     } else if (weblogicWsPresent) {         className = "org.springframework.web.socket.server.standard.WebLogicRequestUpgradeStrategy".     } else if (websphereWsPresent) {         className = "org.springframework.web.socket.server.standard.WebSphereRequestUpgradeStrategy".     } else {         throw new IllegalStateException("No suitable default RequestUpgradeStrategy found").     }     try {         Class<?> clazz = ClassUtils.forName(className, AbstractHandshakeHandler.class.getClassLoader()).         return (RequestUpgradeStrategy) ReflectionUtils.accessibleConstructor(clazz).newInstance().     } catch (Throwable ex) {         throw new IllegalStateException("Failed to instantiate RequestUpgradeStrategy: " + className, ex).     } }
true;public;0;3;/**  * Return the {@link RequestUpgradeStrategy} for WebSocket requests.  */ ;/**  * Return the {@link RequestUpgradeStrategy} for WebSocket requests.  */ public RequestUpgradeStrategy getRequestUpgradeStrategy() {     return this.requestUpgradeStrategy. }
true;public;1;6;/**  * Use this property to configure the list of supported sub-protocols.  * The first configured sub-protocol that matches a client-requested sub-protocol  * is accepted. If there are no matches the response will not contain a  * {@literal Sec-WebSocket-Protocol} header.  * <p>Note that if the WebSocketHandler passed in at runtime is an instance of  * {@link SubProtocolCapable} then there is not need to explicitly configure  * this property. That is certainly the case with the built-in STOMP over  * WebSocket support. Therefore this property should be configured explicitly  * only if the WebSocketHandler does not implement {@code SubProtocolCapable}.  */ ;/**  * Use this property to configure the list of supported sub-protocols.  * The first configured sub-protocol that matches a client-requested sub-protocol  * is accepted. If there are no matches the response will not contain a  * {@literal Sec-WebSocket-Protocol} header.  * <p>Note that if the WebSocketHandler passed in at runtime is an instance of  * {@link SubProtocolCapable} then there is not need to explicitly configure  * this property. That is certainly the case with the built-in STOMP over  * WebSocket support. Therefore this property should be configured explicitly  * only if the WebSocketHandler does not implement {@code SubProtocolCapable}.  */ public void setSupportedProtocols(String... protocols) {     this.supportedProtocols.clear().     for (String protocol : protocols) {         this.supportedProtocols.add(protocol.toLowerCase()).     } }
true;public;0;3;/**  * Return the list of supported sub-protocols.  */ ;/**  * Return the list of supported sub-protocols.  */ public String[] getSupportedProtocols() {     return StringUtils.toStringArray(this.supportedProtocols). }
false;public;0;7;;@Override public void start() {     if (!isRunning()) {         this.running = true.         doStart().     } }
false;protected;0;5;;protected void doStart() {     if (this.requestUpgradeStrategy instanceof Lifecycle) {         ((Lifecycle) this.requestUpgradeStrategy).start().     } }
false;public;0;7;;@Override public void stop() {     if (isRunning()) {         this.running = false.         doStop().     } }
false;protected;0;5;;protected void doStop() {     if (this.requestUpgradeStrategy instanceof Lifecycle) {         ((Lifecycle) this.requestUpgradeStrategy).stop().     } }
false;public;0;4;;@Override public boolean isRunning() {     return this.running. }
false;public,final;4;59;;@Override public final boolean doHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map<String, Object> attributes) throws HandshakeFailureException {     WebSocketHttpHeaders headers = new WebSocketHttpHeaders(request.getHeaders()).     if (logger.isTraceEnabled()) {         logger.trace("Processing request " + request.getURI() + " with headers=" + headers).     }     try {         if (HttpMethod.GET != request.getMethod()) {             response.setStatusCode(HttpStatus.METHOD_NOT_ALLOWED).             response.getHeaders().setAllow(Collections.singleton(HttpMethod.GET)).             if (logger.isErrorEnabled()) {                 logger.error("Handshake failed due to unexpected HTTP method: " + request.getMethod()).             }             return false.         }         if (!"WebSocket".equalsIgnoreCase(headers.getUpgrade())) {             handleInvalidUpgradeHeader(request, response).             return false.         }         if (!headers.getConnection().contains("Upgrade") && !headers.getConnection().contains("upgrade")) {             handleInvalidConnectHeader(request, response).             return false.         }         if (!isWebSocketVersionSupported(headers)) {             handleWebSocketVersionNotSupported(request, response).             return false.         }         if (!isValidOrigin(request)) {             response.setStatusCode(HttpStatus.FORBIDDEN).             return false.         }         String wsKey = headers.getSecWebSocketKey().         if (wsKey == null) {             if (logger.isErrorEnabled()) {                 logger.error("Missing \"Sec-WebSocket-Key\" header").             }             response.setStatusCode(HttpStatus.BAD_REQUEST).             return false.         }     } catch (IOException ex) {         throw new HandshakeFailureException("Response update failed during upgrade to WebSocket: " + request.getURI(), ex).     }     String subProtocol = selectProtocol(headers.getSecWebSocketProtocol(), wsHandler).     List<WebSocketExtension> requested = headers.getSecWebSocketExtensions().     List<WebSocketExtension> supported = this.requestUpgradeStrategy.getSupportedExtensions(request).     List<WebSocketExtension> extensions = filterRequestedExtensions(request, requested, supported).     Principal user = determineUser(request, wsHandler, attributes).     if (logger.isTraceEnabled()) {         logger.trace("Upgrading to WebSocket, subProtocol=" + subProtocol + ", extensions=" + extensions).     }     this.requestUpgradeStrategy.upgrade(request, response, subProtocol, extensions, user, wsHandler, attributes).     return true. }
false;protected;2;7;;protected void handleInvalidUpgradeHeader(ServerHttpRequest request, ServerHttpResponse response) throws IOException {     if (logger.isErrorEnabled()) {         logger.error("Handshake failed due to invalid Upgrade header: " + request.getHeaders().getUpgrade()).     }     response.setStatusCode(HttpStatus.BAD_REQUEST).     response.getBody().write("Can \"Upgrade\" only to \"WebSocket\".".getBytes(StandardCharsets.UTF_8)). }
false;protected;2;7;;protected void handleInvalidConnectHeader(ServerHttpRequest request, ServerHttpResponse response) throws IOException {     if (logger.isErrorEnabled()) {         logger.error("Handshake failed due to invalid Connection header " + request.getHeaders().getConnection()).     }     response.setStatusCode(HttpStatus.BAD_REQUEST).     response.getBody().write("\"Connection\" must be \"upgrade\".".getBytes(StandardCharsets.UTF_8)). }
false;protected;1;10;;protected boolean isWebSocketVersionSupported(WebSocketHttpHeaders httpHeaders) {     String version = httpHeaders.getSecWebSocketVersion().     String[] supportedVersions = getSupportedVersions().     for (String supportedVersion : supportedVersions) {         if (supportedVersion.trim().equals(version)) {             return true.         }     }     return false. }
false;protected;0;3;;protected String[] getSupportedVersions() {     return this.requestUpgradeStrategy.getSupportedVersions(). }
false;protected;2;10;;protected void handleWebSocketVersionNotSupported(ServerHttpRequest request, ServerHttpResponse response) {     if (logger.isErrorEnabled()) {         String version = request.getHeaders().getFirst("Sec-WebSocket-Version").         logger.error("Handshake failed due to unsupported WebSocket version: " + version + ". Supported versions: " + Arrays.toString(getSupportedVersions())).     }     response.setStatusCode(HttpStatus.UPGRADE_REQUIRED).     response.getHeaders().set(WebSocketHttpHeaders.SEC_WEBSOCKET_VERSION, StringUtils.arrayToCommaDelimitedString(getSupportedVersions())). }
true;protected;1;3;/**  * Return whether the request {@code Origin} header value is valid or not.  * By default, all origins as considered as valid. Consider using an  * {@link OriginHandshakeInterceptor} for filtering origins if needed.  */ ;/**  * Return whether the request {@code Origin} header value is valid or not.  * By default, all origins as considered as valid. Consider using an  * {@link OriginHandshakeInterceptor} for filtering origins if needed.  */ protected boolean isValidOrigin(ServerHttpRequest request) {     return true. }
true;protected;2;13;/**  * Perform the sub-protocol negotiation based on requested and supported sub-protocols.  * For the list of supported sub-protocols, this method first checks if the target  * WebSocketHandler is a {@link SubProtocolCapable} and then also checks if any  * sub-protocols have been explicitly configured with  * {@link #setSupportedProtocols(String...)}.  * @param requestedProtocols the requested sub-protocols  * @param webSocketHandler the WebSocketHandler that will be used  * @return the selected protocols or {@code null}  * @see #determineHandlerSupportedProtocols(WebSocketHandler)  */ ;/**  * Perform the sub-protocol negotiation based on requested and supported sub-protocols.  * For the list of supported sub-protocols, this method first checks if the target  * WebSocketHandler is a {@link SubProtocolCapable} and then also checks if any  * sub-protocols have been explicitly configured with  * {@link #setSupportedProtocols(String...)}.  * @param requestedProtocols the requested sub-protocols  * @param webSocketHandler the WebSocketHandler that will be used  * @return the selected protocols or {@code null}  * @see #determineHandlerSupportedProtocols(WebSocketHandler)  */ @Nullable protected String selectProtocol(List<String> requestedProtocols, WebSocketHandler webSocketHandler) {     List<String> handlerProtocols = determineHandlerSupportedProtocols(webSocketHandler).     for (String protocol : requestedProtocols) {         if (handlerProtocols.contains(protocol.toLowerCase())) {             return protocol.         }         if (this.supportedProtocols.contains(protocol.toLowerCase())) {             return protocol.         }     }     return null. }
true;protected,final;1;8;/**  * Determine the sub-protocols supported by the given WebSocketHandler by  * checking whether it is an instance of {@link SubProtocolCapable}.  * @param handler the handler to check  * @return a list of supported protocols, or an empty list if none available  */ ;/**  * Determine the sub-protocols supported by the given WebSocketHandler by  * checking whether it is an instance of {@link SubProtocolCapable}.  * @param handler the handler to check  * @return a list of supported protocols, or an empty list if none available  */ protected final List<String> determineHandlerSupportedProtocols(WebSocketHandler handler) {     WebSocketHandler handlerToCheck = WebSocketHandlerDecorator.unwrap(handler).     List<String> subProtocols = null.     if (handlerToCheck instanceof SubProtocolCapable) {         subProtocols = ((SubProtocolCapable) handlerToCheck).getSubProtocols().     }     return (subProtocols != null ? subProtocols : Collections.emptyList()). }
true;protected;3;11;/**  * Filter the list of requested WebSocket extensions.  * <p>As of 4.1, the default implementation of this method filters the list to  * leave only extensions that are both requested and supported.  * @param request the current request  * @param requestedExtensions the list of extensions requested by the client  * @param supportedExtensions the list of extensions supported by the server  * @return the selected extensions or an empty list  */ ;/**  * Filter the list of requested WebSocket extensions.  * <p>As of 4.1, the default implementation of this method filters the list to  * leave only extensions that are both requested and supported.  * @param request the current request  * @param requestedExtensions the list of extensions requested by the client  * @param supportedExtensions the list of extensions supported by the server  * @return the selected extensions or an empty list  */ protected List<WebSocketExtension> filterRequestedExtensions(ServerHttpRequest request, List<WebSocketExtension> requestedExtensions, List<WebSocketExtension> supportedExtensions) {     List<WebSocketExtension> result = new ArrayList<>(requestedExtensions.size()).     for (WebSocketExtension extension : requestedExtensions) {         if (supportedExtensions.contains(extension)) {             result.add(extension).         }     }     return result. }
true;protected;3;6;/**  * A method that can be used to associate a user with the WebSocket session  * in the process of being established. The default implementation calls  * {@link ServerHttpRequest#getPrincipal()}  * <p>Subclasses can provide custom logic for associating a user with a session,  * for example for assigning a name to anonymous users (i.e. not fully authenticated).  * @param request the handshake request  * @param wsHandler the WebSocket handler that will handle messages  * @param attributes handshake attributes to pass to the WebSocket session  * @return the user for the WebSocket session, or {@code null} if not available  */ ;/**  * A method that can be used to associate a user with the WebSocket session  * in the process of being established. The default implementation calls  * {@link ServerHttpRequest#getPrincipal()}  * <p>Subclasses can provide custom logic for associating a user with a session,  * for example for assigning a name to anonymous users (i.e. not fully authenticated).  * @param request the handshake request  * @param wsHandler the WebSocket handler that will handle messages  * @param attributes handshake attributes to pass to the WebSocket session  * @return the user for the WebSocket session, or {@code null} if not available  */ @Nullable protected Principal determineUser(ServerHttpRequest request, WebSocketHandler wsHandler, Map<String, Object> attributes) {     return request.getPrincipal(). }
