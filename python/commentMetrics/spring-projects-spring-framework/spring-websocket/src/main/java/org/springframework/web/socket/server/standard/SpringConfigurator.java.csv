commented;modifiers;parameterAmount;loc;comment;code
false;public;1;38;;@SuppressWarnings("unchecked") @Override public <T> T getEndpointInstance(Class<T> endpointClass) throws InstantiationException {     WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext().     if (wac == null) {         String message = "Failed to find the root WebApplicationContext. Was ContextLoaderListener not used?".         logger.error(message).         throw new IllegalStateException(message).     }     String beanName = ClassUtils.getShortNameAsProperty(endpointClass).     if (wac.containsBean(beanName)) {         T endpoint = wac.getBean(beanName, endpointClass).         if (logger.isTraceEnabled()) {             logger.trace("Using @ServerEndpoint singleton " + endpoint).         }         return endpoint.     }     Component ann = AnnotationUtils.findAnnotation(endpointClass, Component.class).     if (ann != null && wac.containsBean(ann.value())) {         T endpoint = wac.getBean(ann.value(), endpointClass).         if (logger.isTraceEnabled()) {             logger.trace("Using @ServerEndpoint singleton " + endpoint).         }         return endpoint.     }     beanName = getBeanNameByType(wac, endpointClass).     if (beanName != null) {         return (T) wac.getBean(beanName).     }     if (logger.isTraceEnabled()) {         logger.trace("Creating new @ServerEndpoint instance of type " + endpointClass).     }     return wac.getAutowireCapableBeanFactory().createBean(endpointClass). }
false;private;2;27;;@Nullable private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) {     String wacId = wac.getId().     Map<Class<?>, String> beanNamesByType = cache.get(wacId).     if (beanNamesByType == null) {         beanNamesByType = new ConcurrentHashMap<>().         cache.put(wacId, beanNamesByType).     }     if (!beanNamesByType.containsKey(endpointClass)) {         String[] names = wac.getBeanNamesForType(endpointClass).         if (names.length == 1) {             beanNamesByType.put(endpointClass, names[0]).         } else {             beanNamesByType.put(endpointClass, NO_VALUE).             if (names.length > 1) {                 throw new IllegalStateException("Found multiple @ServerEndpoint's of type [" + endpointClass.getName() + "]: bean names " + Arrays.asList(names)).             }         }     }     String beanName = beanNamesByType.get(endpointClass).     return (NO_VALUE.equals(beanName) ? null : beanName). }
