# id;timestamp;commentText;codeText;commentWords;codeWords
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1395703238;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux.__<p>The default value is 10 seconds (i.e. 10 * 10000).__@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1395703238;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux.__<p>The default value is 10 seconds (i.e. 10 * 10000).__@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1413207351;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux.__<p>The default value is 10 seconds (i.e. 10 * 10000).__@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1413848647;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux.__<p>The default value is 10 seconds (i.e. 10 * 10000).__@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1467730834;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux.__<p>The default value is 10 seconds (i.e. 10 * 10000).__@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1496837955;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux._<p>The default value is 10 seconds (i.e. 10 * 10000)._@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1500495740;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux._<p>The default value is 10 seconds (i.e. 10 * 10000)._@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1526479437;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux._<p>The default value is 10 seconds (i.e. 10 * 10000)._@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1532520962;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux._<p>The default value is 10 seconds (i.e. 10 * 10000)._@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendTimeLimit(int timeLimit);1542769187;Configure a time limit (in milliseconds) for the maximum amount of a time_allowed when sending messages to a WebSocket session or writing to an_HTTP response when SockJS fallback option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that the session time limit is checked only_on attempts to send additional messages. So if only a single message is_sent and it hangs, the session will not time out until another message is_sent or the underlying physical socket times out. So this is not a_replacement for WebSocket server or HTTP connection timeout but is rather_intended to control the extent of buffering of unsent messages._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_that is used by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector that_is used by default on Tomcat 8. If you must use blocking IO consider_customizing OS-level TCP settings, for example_{@code /proc/sys/net/ipv4/tcp_retries2} on Linux._<p>The default value is 10 seconds (i.e. 10 * 10000)._@param timeLimit the timeout value in milliseconds_ the value must be_greater than 0, otherwise it is ignored.;public WebSocketTransportRegistration setSendTimeLimit(int timeLimit) {_		this.sendTimeLimit = timeLimit__		return this__	};configure,a,time,limit,in,milliseconds,for,the,maximum,amount,of,a,time,allowed,when,sending,messages,to,a,web,socket,session,or,writing,to,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,the,session,time,limit,is,checked,only,on,attempts,to,send,additional,messages,so,if,only,a,single,message,is,sent,and,it,hangs,the,session,will,not,time,out,until,another,message,is,sent,or,the,underlying,physical,socket,times,out,so,this,is,not,a,replacement,for,web,socket,server,or,http,connection,timeout,but,is,rather,intended,to,control,the,extent,of,buffering,of,unsent,messages,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,that,is,used,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,that,is,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,10,seconds,i,e,10,10000,param,time,limit,the,timeout,value,in,milliseconds,the,value,must,be,greater,than,0,otherwise,it,is,ignored;public,web,socket,transport,registration,set,send,time,limit,int,time,limit,this,send,time,limit,time,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage);1526479437;Set the maximum time allowed in milliseconds after the WebSocket_connection is established and before the first sub-protocol message is_received.__<p>This handler is for WebSocket connections that use a sub-protocol._Therefore, we expect the client to send at least one sub-protocol message_in the beginning, or else we assume the connection isn't doing well, e.g._proxy issue, slow network, and can be closed.__<p>By default this is set to {@code 60,000} (1 minute).__@param timeToFirstMessage the maximum time allowed in milliseconds_@since 5.1;public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage) {_		this.timeToFirstMessage = timeToFirstMessage__		return this__	};set,the,maximum,time,allowed,in,milliseconds,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,is,received,p,this,handler,is,for,web,socket,connections,that,use,a,sub,protocol,therefore,we,expect,the,client,to,send,at,least,one,sub,protocol,message,in,the,beginning,or,else,we,assume,the,connection,isn,t,doing,well,e,g,proxy,issue,slow,network,and,can,be,closed,p,by,default,this,is,set,to,code,60,000,1,minute,param,time,to,first,message,the,maximum,time,allowed,in,milliseconds,since,5,1;public,web,socket,transport,registration,set,time,to,first,message,int,time,to,first,message,this,time,to,first,message,time,to,first,message,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage);1532520962;Set the maximum time allowed in milliseconds after the WebSocket connection_is established and before the first sub-protocol message is received._<p>This handler is for WebSocket connections that use a sub-protocol._Therefore, we expect the client to send at least one sub-protocol message_in the beginning, or else we assume the connection isn't doing well, e.g._proxy issue, slow network, and can be closed._<p>By default this is set to {@code 60,000} (1 minute)._@param timeToFirstMessage the maximum time allowed in milliseconds_@since 5.1;public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage) {_		this.timeToFirstMessage = timeToFirstMessage__		return this__	};set,the,maximum,time,allowed,in,milliseconds,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,is,received,p,this,handler,is,for,web,socket,connections,that,use,a,sub,protocol,therefore,we,expect,the,client,to,send,at,least,one,sub,protocol,message,in,the,beginning,or,else,we,assume,the,connection,isn,t,doing,well,e,g,proxy,issue,slow,network,and,can,be,closed,p,by,default,this,is,set,to,code,60,000,1,minute,param,time,to,first,message,the,maximum,time,allowed,in,milliseconds,since,5,1;public,web,socket,transport,registration,set,time,to,first,message,int,time,to,first,message,this,time,to,first,message,time,to,first,message,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage);1542769187;Set the maximum time allowed in milliseconds after the WebSocket connection_is established and before the first sub-protocol message is received._<p>This handler is for WebSocket connections that use a sub-protocol._Therefore, we expect the client to send at least one sub-protocol message_in the beginning, or else we assume the connection isn't doing well, e.g._proxy issue, slow network, and can be closed._<p>By default this is set to {@code 60,000} (1 minute)._@param timeToFirstMessage the maximum time allowed in milliseconds_@since 5.1;public WebSocketTransportRegistration setTimeToFirstMessage(int timeToFirstMessage) {_		this.timeToFirstMessage = timeToFirstMessage__		return this__	};set,the,maximum,time,allowed,in,milliseconds,after,the,web,socket,connection,is,established,and,before,the,first,sub,protocol,message,is,received,p,this,handler,is,for,web,socket,connections,that,use,a,sub,protocol,therefore,we,expect,the,client,to,send,at,least,one,sub,protocol,message,in,the,beginning,or,else,we,assume,the,connection,isn,t,doing,well,e,g,proxy,issue,slow,network,and,can,be,closed,p,by,default,this,is,set,to,code,60,000,1,minute,param,time,to,first,message,the,maximum,time,allowed,in,milliseconds,since,5,1;public,web,socket,transport,registration,set,time,to,first,message,int,time,to,first,message,this,time,to,first,message,time,to,first,message,return,this
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendTimeLimit();1496837955;Protected accessor for internal use.;@Nullable_	protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendTimeLimit();1500495740;Protected accessor for internal use.;@Nullable_	protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendTimeLimit();1526479437;Protected accessor for internal use.;@Nullable_	protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendTimeLimit();1532520962;Protected accessor for internal use.;@Nullable_	protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendTimeLimit();1542769187;Protected accessor for internal use.;@Nullable_	protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1395703238;Configure the maximum size for an incoming sub-protocol message._For example a STOMP message may be received as multiple WebSocket messages_or multiple HTTP POST requests when SockJS fallback options are in use.__<p>In theory a WebSocket message can be almost unlimited in size._In practice WebSocket servers impose limits on incoming message size._STOMP clients for example tend to split large messages around 16K_boundaries. Therefore a server must be able to buffer partial content_and decode when enough data is received. Use this property to configure_the max size of the buffer to use.__<p>The default value is 64K (i.e. 64 * 1024).__<p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec_does not specifically discuss how to send STOMP messages over WebSocket._Version 2 of the spec will but in the mean time existing client libraries_have already established a practice that servers must handle.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,for,an,incoming,sub,protocol,message,for,example,a,stomp,message,may,be,received,as,multiple,web,socket,messages,or,multiple,http,post,requests,when,sock,js,fallback,options,are,in,use,p,in,theory,a,web,socket,message,can,be,almost,unlimited,in,size,in,practice,web,socket,servers,impose,limits,on,incoming,message,size,stomp,clients,for,example,tend,to,split,large,messages,around,16k,boundaries,therefore,a,server,must,be,able,to,buffer,partial,content,and,decode,when,enough,data,is,received,use,this,property,to,configure,the,max,size,of,the,buffer,to,use,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,that,the,current,version,1,2,of,the,stomp,spec,does,not,specifically,discuss,how,to,send,stomp,messages,over,web,socket,version,2,of,the,spec,will,but,in,the,mean,time,existing,client,libraries,have,already,established,a,practice,that,servers,must,handle;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1413207351;Configure the maximum size for an incoming sub-protocol message._For example a STOMP message may be received as multiple WebSocket messages_or multiple HTTP POST requests when SockJS fallback options are in use.__<p>In theory a WebSocket message can be almost unlimited in size._In practice WebSocket servers impose limits on incoming message size._STOMP clients for example tend to split large messages around 16K_boundaries. Therefore a server must be able to buffer partial content_and decode when enough data is received. Use this property to configure_the max size of the buffer to use.__<p>The default value is 64K (i.e. 64 * 1024).__<p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec_does not specifically discuss how to send STOMP messages over WebSocket._Version 2 of the spec will but in the mean time existing client libraries_have already established a practice that servers must handle.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,for,an,incoming,sub,protocol,message,for,example,a,stomp,message,may,be,received,as,multiple,web,socket,messages,or,multiple,http,post,requests,when,sock,js,fallback,options,are,in,use,p,in,theory,a,web,socket,message,can,be,almost,unlimited,in,size,in,practice,web,socket,servers,impose,limits,on,incoming,message,size,stomp,clients,for,example,tend,to,split,large,messages,around,16k,boundaries,therefore,a,server,must,be,able,to,buffer,partial,content,and,decode,when,enough,data,is,received,use,this,property,to,configure,the,max,size,of,the,buffer,to,use,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,that,the,current,version,1,2,of,the,stomp,spec,does,not,specifically,discuss,how,to,send,stomp,messages,over,web,socket,version,2,of,the,spec,will,but,in,the,mean,time,existing,client,libraries,have,already,established,a,practice,that,servers,must,handle;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1413848647;Configure the maximum size for an incoming sub-protocol message._For example a STOMP message may be received as multiple WebSocket messages_or multiple HTTP POST requests when SockJS fallback options are in use.__<p>In theory a WebSocket message can be almost unlimited in size._In practice WebSocket servers impose limits on incoming message size._STOMP clients for example tend to split large messages around 16K_boundaries. Therefore a server must be able to buffer partial content_and decode when enough data is received. Use this property to configure_the max size of the buffer to use.__<p>The default value is 64K (i.e. 64 * 1024).__<p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec_does not specifically discuss how to send STOMP messages over WebSocket._Version 2 of the spec will but in the mean time existing client libraries_have already established a practice that servers must handle.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,for,an,incoming,sub,protocol,message,for,example,a,stomp,message,may,be,received,as,multiple,web,socket,messages,or,multiple,http,post,requests,when,sock,js,fallback,options,are,in,use,p,in,theory,a,web,socket,message,can,be,almost,unlimited,in,size,in,practice,web,socket,servers,impose,limits,on,incoming,message,size,stomp,clients,for,example,tend,to,split,large,messages,around,16k,boundaries,therefore,a,server,must,be,able,to,buffer,partial,content,and,decode,when,enough,data,is,received,use,this,property,to,configure,the,max,size,of,the,buffer,to,use,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,that,the,current,version,1,2,of,the,stomp,spec,does,not,specifically,discuss,how,to,send,stomp,messages,over,web,socket,version,2,of,the,spec,will,but,in,the,mean,time,existing,client,libraries,have,already,established,a,practice,that,servers,must,handle;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1467730834;Configure the maximum size for an incoming sub-protocol message._For example a STOMP message may be received as multiple WebSocket messages_or multiple HTTP POST requests when SockJS fallback options are in use.__<p>In theory a WebSocket message can be almost unlimited in size._In practice WebSocket servers impose limits on incoming message size._STOMP clients for example tend to split large messages around 16K_boundaries. Therefore a server must be able to buffer partial content_and decode when enough data is received. Use this property to configure_the max size of the buffer to use.__<p>The default value is 64K (i.e. 64 * 1024).__<p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec_does not specifically discuss how to send STOMP messages over WebSocket._Version 2 of the spec will but in the mean time existing client libraries_have already established a practice that servers must handle.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,for,an,incoming,sub,protocol,message,for,example,a,stomp,message,may,be,received,as,multiple,web,socket,messages,or,multiple,http,post,requests,when,sock,js,fallback,options,are,in,use,p,in,theory,a,web,socket,message,can,be,almost,unlimited,in,size,in,practice,web,socket,servers,impose,limits,on,incoming,message,size,stomp,clients,for,example,tend,to,split,large,messages,around,16k,boundaries,therefore,a,server,must,be,able,to,buffer,partial,content,and,decode,when,enough,data,is,received,use,this,property,to,configure,the,max,size,of,the,buffer,to,use,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,that,the,current,version,1,2,of,the,stomp,spec,does,not,specifically,discuss,how,to,send,stomp,messages,over,web,socket,version,2,of,the,spec,will,but,in,the,mean,time,existing,client,libraries,have,already,established,a,practice,that,servers,must,handle;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1496837955;Configure the maximum size for an incoming sub-protocol message._For example a STOMP message may be received as multiple WebSocket messages_or multiple HTTP POST requests when SockJS fallback options are in use._<p>In theory a WebSocket message can be almost unlimited in size._In practice WebSocket servers impose limits on incoming message size._STOMP clients for example tend to split large messages around 16K_boundaries. Therefore a server must be able to buffer partial content_and decode when enough data is received. Use this property to configure_the max size of the buffer to use._<p>The default value is 64K (i.e. 64 * 1024)._<p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec_does not specifically discuss how to send STOMP messages over WebSocket._Version 2 of the spec will but in the mean time existing client libraries_have already established a practice that servers must handle.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,for,an,incoming,sub,protocol,message,for,example,a,stomp,message,may,be,received,as,multiple,web,socket,messages,or,multiple,http,post,requests,when,sock,js,fallback,options,are,in,use,p,in,theory,a,web,socket,message,can,be,almost,unlimited,in,size,in,practice,web,socket,servers,impose,limits,on,incoming,message,size,stomp,clients,for,example,tend,to,split,large,messages,around,16k,boundaries,therefore,a,server,must,be,able,to,buffer,partial,content,and,decode,when,enough,data,is,received,use,this,property,to,configure,the,max,size,of,the,buffer,to,use,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,that,the,current,version,1,2,of,the,stomp,spec,does,not,specifically,discuss,how,to,send,stomp,messages,over,web,socket,version,2,of,the,spec,will,but,in,the,mean,time,existing,client,libraries,have,already,established,a,practice,that,servers,must,handle;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1500495740;Configure the maximum size for an incoming sub-protocol message._For example a STOMP message may be received as multiple WebSocket messages_or multiple HTTP POST requests when SockJS fallback options are in use._<p>In theory a WebSocket message can be almost unlimited in size._In practice WebSocket servers impose limits on incoming message size._STOMP clients for example tend to split large messages around 16K_boundaries. Therefore a server must be able to buffer partial content_and decode when enough data is received. Use this property to configure_the max size of the buffer to use._<p>The default value is 64K (i.e. 64 * 1024)._<p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec_does not specifically discuss how to send STOMP messages over WebSocket._Version 2 of the spec will but in the mean time existing client libraries_have already established a practice that servers must handle.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,for,an,incoming,sub,protocol,message,for,example,a,stomp,message,may,be,received,as,multiple,web,socket,messages,or,multiple,http,post,requests,when,sock,js,fallback,options,are,in,use,p,in,theory,a,web,socket,message,can,be,almost,unlimited,in,size,in,practice,web,socket,servers,impose,limits,on,incoming,message,size,stomp,clients,for,example,tend,to,split,large,messages,around,16k,boundaries,therefore,a,server,must,be,able,to,buffer,partial,content,and,decode,when,enough,data,is,received,use,this,property,to,configure,the,max,size,of,the,buffer,to,use,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,that,the,current,version,1,2,of,the,stomp,spec,does,not,specifically,discuss,how,to,send,stomp,messages,over,web,socket,version,2,of,the,spec,will,but,in,the,mean,time,existing,client,libraries,have,already,established,a,practice,that,servers,must,handle;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1526479437;Configure the maximum size for an incoming sub-protocol message._For example a STOMP message may be received as multiple WebSocket messages_or multiple HTTP POST requests when SockJS fallback options are in use._<p>In theory a WebSocket message can be almost unlimited in size._In practice WebSocket servers impose limits on incoming message size._STOMP clients for example tend to split large messages around 16K_boundaries. Therefore a server must be able to buffer partial content_and decode when enough data is received. Use this property to configure_the max size of the buffer to use._<p>The default value is 64K (i.e. 64 * 1024)._<p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec_does not specifically discuss how to send STOMP messages over WebSocket._Version 2 of the spec will but in the mean time existing client libraries_have already established a practice that servers must handle.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,for,an,incoming,sub,protocol,message,for,example,a,stomp,message,may,be,received,as,multiple,web,socket,messages,or,multiple,http,post,requests,when,sock,js,fallback,options,are,in,use,p,in,theory,a,web,socket,message,can,be,almost,unlimited,in,size,in,practice,web,socket,servers,impose,limits,on,incoming,message,size,stomp,clients,for,example,tend,to,split,large,messages,around,16k,boundaries,therefore,a,server,must,be,able,to,buffer,partial,content,and,decode,when,enough,data,is,received,use,this,property,to,configure,the,max,size,of,the,buffer,to,use,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,that,the,current,version,1,2,of,the,stomp,spec,does,not,specifically,discuss,how,to,send,stomp,messages,over,web,socket,version,2,of,the,spec,will,but,in,the,mean,time,existing,client,libraries,have,already,established,a,practice,that,servers,must,handle;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1532520962;Configure the maximum size for an incoming sub-protocol message._For example a STOMP message may be received as multiple WebSocket messages_or multiple HTTP POST requests when SockJS fallback options are in use._<p>In theory a WebSocket message can be almost unlimited in size._In practice WebSocket servers impose limits on incoming message size._STOMP clients for example tend to split large messages around 16K_boundaries. Therefore a server must be able to buffer partial content_and decode when enough data is received. Use this property to configure_the max size of the buffer to use._<p>The default value is 64K (i.e. 64 * 1024)._<p><strong>NOTE</strong> that the current version 1.2 of the STOMP spec_does not specifically discuss how to send STOMP messages over WebSocket._Version 2 of the spec will but in the mean time existing client libraries_have already established a practice that servers must handle.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,for,an,incoming,sub,protocol,message,for,example,a,stomp,message,may,be,received,as,multiple,web,socket,messages,or,multiple,http,post,requests,when,sock,js,fallback,options,are,in,use,p,in,theory,a,web,socket,message,can,be,almost,unlimited,in,size,in,practice,web,socket,servers,impose,limits,on,incoming,message,size,stomp,clients,for,example,tend,to,split,large,messages,around,16k,boundaries,therefore,a,server,must,be,able,to,buffer,partial,content,and,decode,when,enough,data,is,received,use,this,property,to,configure,the,max,size,of,the,buffer,to,use,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,that,the,current,version,1,2,of,the,stomp,spec,does,not,specifically,discuss,how,to,send,stomp,messages,over,web,socket,version,2,of,the,spec,will,but,in,the,mean,time,existing,client,libraries,have,already,established,a,practice,that,servers,must,handle;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit);1542769187;Configure the maximum size of an inbound sub-protocol message, such as_a STOMP frame which may be aggregated from multiple WebSocket messages._<p>The default value is 64K (i.e. 64 * 1024)._<p><strong>Note:</strong> This is not the same as the size of an_individual WebSocket message which needs to be configured at the WebSocket_server level instead. See the reference documentation for details.;public WebSocketTransportRegistration setMessageSizeLimit(int messageSizeLimit) {_		this.messageSizeLimit = messageSizeLimit__		return this__	};configure,the,maximum,size,of,an,inbound,sub,protocol,message,such,as,a,stomp,frame,which,may,be,aggregated,from,multiple,web,socket,messages,p,the,default,value,is,64k,i,e,64,1024,p,strong,note,strong,this,is,not,the,same,as,the,size,of,an,individual,web,socket,message,which,needs,to,be,configured,at,the,web,socket,server,level,instead,see,the,reference,documentation,for,details;public,web,socket,transport,registration,set,message,size,limit,int,message,size,limit,this,message,size,limit,message,size,limit,return,this
WebSocketTransportRegistration -> @Nullable 	protected Integer getMessageSizeLimit();1496837955;Protected accessor for internal use.;@Nullable_	protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getMessageSizeLimit();1500495740;Protected accessor for internal use.;@Nullable_	protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getMessageSizeLimit();1526479437;Protected accessor for internal use.;@Nullable_	protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getMessageSizeLimit();1532520962;Protected accessor for internal use.;@Nullable_	protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getMessageSizeLimit();1542769187;Protected accessor for internal use.;@Nullable_	protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getTimeToFirstMessage();1526479437;Protected accessor for internal use.;@Nullable_	protected Integer getTimeToFirstMessage() {_		return this.timeToFirstMessage__	};protected,accessor,for,internal,use;nullable,protected,integer,get,time,to,first,message,return,this,time,to,first,message
WebSocketTransportRegistration -> @Nullable 	protected Integer getTimeToFirstMessage();1532520962;Protected accessor for internal use.;@Nullable_	protected Integer getTimeToFirstMessage() {_		return this.timeToFirstMessage__	};protected,accessor,for,internal,use;nullable,protected,integer,get,time,to,first,message,return,this,time,to,first,message
WebSocketTransportRegistration -> @Nullable 	protected Integer getTimeToFirstMessage();1542769187;Protected accessor for internal use.;@Nullable_	protected Integer getTimeToFirstMessage() {_		return this.timeToFirstMessage__	};protected,accessor,for,internal,use;nullable,protected,integer,get,time,to,first,message,return,this,time,to,first,message
WebSocketTransportRegistration -> public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories);1413207351;Configure one or more factories to decorate the handler used to process_WebSocket messages. This may be useful in some advanced use cases, for_example to allow Spring Security to forcibly close the WebSocket session_when the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {_		if (factories != null) {_			this.decoratorFactories.addAll(Arrays.asList(factories))__		}_		return this__	};configure,one,or,more,factories,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,in,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,set,decorator,factories,web,socket,handler,decorator,factory,factories,if,factories,null,this,decorator,factories,add,all,arrays,as,list,factories,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories);1413848647;Configure one or more factories to decorate the handler used to process_WebSocket messages. This may be useful in some advanced use cases, for_example to allow Spring Security to forcibly close the WebSocket session_when the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {_		if (factories != null) {_			this.decoratorFactories.addAll(Arrays.asList(factories))__		}_		return this__	};configure,one,or,more,factories,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,in,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,set,decorator,factories,web,socket,handler,decorator,factory,factories,if,factories,null,this,decorator,factories,add,all,arrays,as,list,factories,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories);1467730834;Configure one or more factories to decorate the handler used to process_WebSocket messages. This may be useful in some advanced use cases, for_example to allow Spring Security to forcibly close the WebSocket session_when the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {_		if (factories != null) {_			this.decoratorFactories.addAll(Arrays.asList(factories))__		}_		return this__	};configure,one,or,more,factories,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,in,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,set,decorator,factories,web,socket,handler,decorator,factory,factories,if,factories,null,this,decorator,factories,add,all,arrays,as,list,factories,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories);1496837955;Configure one or more factories to decorate the handler used to process_WebSocket messages. This may be useful in some advanced use cases, for_example to allow Spring Security to forcibly close the WebSocket session_when the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {_		this.decoratorFactories.addAll(Arrays.asList(factories))__		return this__	};configure,one,or,more,factories,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,in,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,set,decorator,factories,web,socket,handler,decorator,factory,factories,this,decorator,factories,add,all,arrays,as,list,factories,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories);1500495740;Configure one or more factories to decorate the handler used to process_WebSocket messages. This may be useful in some advanced use cases, for_example to allow Spring Security to forcibly close the WebSocket session_when the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {_		this.decoratorFactories.addAll(Arrays.asList(factories))__		return this__	};configure,one,or,more,factories,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,in,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,set,decorator,factories,web,socket,handler,decorator,factory,factories,this,decorator,factories,add,all,arrays,as,list,factories,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories);1526479437;Configure one or more factories to decorate the handler used to process_WebSocket messages. This may be useful in some advanced use cases, for_example to allow Spring Security to forcibly close the WebSocket session_when the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {_		this.decoratorFactories.addAll(Arrays.asList(factories))__		return this__	};configure,one,or,more,factories,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,in,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,set,decorator,factories,web,socket,handler,decorator,factory,factories,this,decorator,factories,add,all,arrays,as,list,factories,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories);1532520962;Configure one or more factories to decorate the handler used to process_WebSocket messages. This may be useful in some advanced use cases, for_example to allow Spring Security to forcibly close the WebSocket session_when the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {_		this.decoratorFactories.addAll(Arrays.asList(factories))__		return this__	};configure,one,or,more,factories,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,in,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,set,decorator,factories,web,socket,handler,decorator,factory,factories,this,decorator,factories,add,all,arrays,as,list,factories,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories);1542769187;Configure one or more factories to decorate the handler used to process_WebSocket messages. This may be useful in some advanced use cases, for_example to allow Spring Security to forcibly close the WebSocket session_when the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration setDecoratorFactories(WebSocketHandlerDecoratorFactory... factories) {_		this.decoratorFactories.addAll(Arrays.asList(factories))__		return this__	};configure,one,or,more,factories,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,in,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,set,decorator,factories,web,socket,handler,decorator,factory,factories,this,decorator,factories,add,all,arrays,as,list,factories,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1395703238;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux.__<p>The default value is 512K (i.e. 512 * 1024).__@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1395703238;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux.__<p>The default value is 512K (i.e. 512 * 1024).__@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1413207351;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux.__<p>The default value is 512K (i.e. 512 * 1024).__@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1413848647;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux.__<p>The default value is 512K (i.e. 512 * 1024).__@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1467730834;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use.__<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session.__<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux.__<p>The default value is 512K (i.e. 512 * 1024).__@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1496837955;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux._<p>The default value is 512K (i.e. 512 * 1024)._@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1500495740;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux._<p>The default value is 512K (i.e. 512 * 1024)._@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1526479437;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux._<p>The default value is 512K (i.e. 512 * 1024)._@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1532520962;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux._<p>The default value is 512K (i.e. 512 * 1024)._@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit);1542769187;Configure the maximum amount of data to buffer when sending messages_to a WebSocket session, or an HTTP response when SockJS fallback_option are in use._<p>In general WebSocket servers expect that messages to a single WebSocket_session are sent from a single thread at a time. This is automatically_guaranteed when using {@code @EnableWebSocketMessageBroker} configuration._If message sending is slow, or at least slower than rate of messages sending,_subsequent messages are buffered until either the {@code sendTimeLimit}_or the {@code sendBufferSizeLimit} are reached at which point the session_state is cleared and an attempt is made to close the session._<p><strong>NOTE</strong> that closing the session may not succeed in_actually closing the physical socket and may also hang. This is true_especially when using blocking IO such as the BIO connector in Tomcat_configured by default on Tomcat 7. Therefore it is recommended to ensure_the server is using non-blocking IO such as Tomcat's NIO connector used_by default on Tomcat 8. If you must use blocking IO consider customizing_OS-level TCP settings, for example {@code /proc/sys/net/ipv4/tcp_retries2}_on Linux._<p>The default value is 512K (i.e. 512 * 1024)._@param sendBufferSizeLimit the maximum number of bytes to buffer when_sending messages_ if the value is less than or equal to 0 then buffering_is effectively disabled.;public WebSocketTransportRegistration setSendBufferSizeLimit(int sendBufferSizeLimit) {_		this.sendBufferSizeLimit = sendBufferSizeLimit__		return this__	};configure,the,maximum,amount,of,data,to,buffer,when,sending,messages,to,a,web,socket,session,or,an,http,response,when,sock,js,fallback,option,are,in,use,p,in,general,web,socket,servers,expect,that,messages,to,a,single,web,socket,session,are,sent,from,a,single,thread,at,a,time,this,is,automatically,guaranteed,when,using,code,enable,web,socket,message,broker,configuration,if,message,sending,is,slow,or,at,least,slower,than,rate,of,messages,sending,subsequent,messages,are,buffered,until,either,the,code,send,time,limit,or,the,code,send,buffer,size,limit,are,reached,at,which,point,the,session,state,is,cleared,and,an,attempt,is,made,to,close,the,session,p,strong,note,strong,that,closing,the,session,may,not,succeed,in,actually,closing,the,physical,socket,and,may,also,hang,this,is,true,especially,when,using,blocking,io,such,as,the,bio,connector,in,tomcat,configured,by,default,on,tomcat,7,therefore,it,is,recommended,to,ensure,the,server,is,using,non,blocking,io,such,as,tomcat,s,nio,connector,used,by,default,on,tomcat,8,if,you,must,use,blocking,io,consider,customizing,os,level,tcp,settings,for,example,code,proc,sys,net,ipv4,on,linux,p,the,default,value,is,512k,i,e,512,1024,param,send,buffer,size,limit,the,maximum,number,of,bytes,to,buffer,when,sending,messages,if,the,value,is,less,than,or,equal,to,0,then,buffering,is,effectively,disabled;public,web,socket,transport,registration,set,send,buffer,size,limit,int,send,buffer,size,limit,this,send,buffer,size,limit,send,buffer,size,limit,return,this
WebSocketTransportRegistration -> protected Integer getSendTimeLimit();1395703238;Protected accessor for internal use.;protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> protected Integer getSendTimeLimit();1395703238;Protected accessor for internal use.;protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> protected Integer getSendTimeLimit();1413207351;Protected accessor for internal use.;protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> protected Integer getSendTimeLimit();1413848647;Protected accessor for internal use.;protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> protected Integer getSendTimeLimit();1467730834;Protected accessor for internal use.;protected Integer getSendTimeLimit() {_		return this.sendTimeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,time,limit,return,this,send,time,limit
WebSocketTransportRegistration -> protected Integer getMessageSizeLimit();1395703238;Protected accessor for internal use.;protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> protected Integer getMessageSizeLimit();1413207351;Protected accessor for internal use.;protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> protected Integer getMessageSizeLimit();1413848647;Protected accessor for internal use.;protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> protected Integer getMessageSizeLimit();1467730834;Protected accessor for internal use.;protected Integer getMessageSizeLimit() {_		return this.messageSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,message,size,limit,return,this,message,size,limit
WebSocketTransportRegistration -> public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory);1413207351;Add a factory that to decorate the handler used to process WebSocket_messages. This may be useful for some advanced use cases, for example_to allow Spring Security to forcibly close the WebSocket session when_the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {_		this.decoratorFactories.add(factory)__		return this__	};add,a,factory,that,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,for,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,add,decorator,factory,web,socket,handler,decorator,factory,factory,this,decorator,factories,add,factory,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory);1413848647;Add a factory that to decorate the handler used to process WebSocket_messages. This may be useful for some advanced use cases, for example_to allow Spring Security to forcibly close the WebSocket session when_the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {_		this.decoratorFactories.add(factory)__		return this__	};add,a,factory,that,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,for,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,add,decorator,factory,web,socket,handler,decorator,factory,factory,this,decorator,factories,add,factory,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory);1467730834;Add a factory that to decorate the handler used to process WebSocket_messages. This may be useful for some advanced use cases, for example_to allow Spring Security to forcibly close the WebSocket session when_the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {_		this.decoratorFactories.add(factory)__		return this__	};add,a,factory,that,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,for,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,add,decorator,factory,web,socket,handler,decorator,factory,factory,this,decorator,factories,add,factory,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory);1496837955;Add a factory that to decorate the handler used to process WebSocket_messages. This may be useful for some advanced use cases, for example_to allow Spring Security to forcibly close the WebSocket session when_the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {_		this.decoratorFactories.add(factory)__		return this__	};add,a,factory,that,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,for,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,add,decorator,factory,web,socket,handler,decorator,factory,factory,this,decorator,factories,add,factory,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory);1500495740;Add a factory that to decorate the handler used to process WebSocket_messages. This may be useful for some advanced use cases, for example_to allow Spring Security to forcibly close the WebSocket session when_the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {_		this.decoratorFactories.add(factory)__		return this__	};add,a,factory,that,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,for,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,add,decorator,factory,web,socket,handler,decorator,factory,factory,this,decorator,factories,add,factory,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory);1526479437;Add a factory that to decorate the handler used to process WebSocket_messages. This may be useful for some advanced use cases, for example_to allow Spring Security to forcibly close the WebSocket session when_the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {_		this.decoratorFactories.add(factory)__		return this__	};add,a,factory,that,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,for,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,add,decorator,factory,web,socket,handler,decorator,factory,factory,this,decorator,factories,add,factory,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory);1532520962;Add a factory that to decorate the handler used to process WebSocket_messages. This may be useful for some advanced use cases, for example_to allow Spring Security to forcibly close the WebSocket session when_the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {_		this.decoratorFactories.add(factory)__		return this__	};add,a,factory,that,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,for,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,add,decorator,factory,web,socket,handler,decorator,factory,factory,this,decorator,factories,add,factory,return,this
WebSocketTransportRegistration -> public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory);1542769187;Add a factory that to decorate the handler used to process WebSocket_messages. This may be useful for some advanced use cases, for example_to allow Spring Security to forcibly close the WebSocket session when_the corresponding HTTP session expires._@since 4.1.2;public WebSocketTransportRegistration addDecoratorFactory(WebSocketHandlerDecoratorFactory factory) {_		this.decoratorFactories.add(factory)__		return this__	};add,a,factory,that,to,decorate,the,handler,used,to,process,web,socket,messages,this,may,be,useful,for,some,advanced,use,cases,for,example,to,allow,spring,security,to,forcibly,close,the,web,socket,session,when,the,corresponding,http,session,expires,since,4,1,2;public,web,socket,transport,registration,add,decorator,factory,web,socket,handler,decorator,factory,factory,this,decorator,factories,add,factory,return,this
WebSocketTransportRegistration -> protected Integer getSendBufferSizeLimit();1395703238;Protected accessor for internal use.;protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> protected Integer getSendBufferSizeLimit();1395703238;Protected accessor for internal use.;protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> protected Integer getSendBufferSizeLimit();1413207351;Protected accessor for internal use.;protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> protected Integer getSendBufferSizeLimit();1413848647;Protected accessor for internal use.;protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> protected Integer getSendBufferSizeLimit();1467730834;Protected accessor for internal use.;protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendBufferSizeLimit();1496837955;Protected accessor for internal use.;@Nullable_	protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendBufferSizeLimit();1500495740;Protected accessor for internal use.;@Nullable_	protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendBufferSizeLimit();1526479437;Protected accessor for internal use.;@Nullable_	protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendBufferSizeLimit();1532520962;Protected accessor for internal use.;@Nullable_	protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
WebSocketTransportRegistration -> @Nullable 	protected Integer getSendBufferSizeLimit();1542769187;Protected accessor for internal use.;@Nullable_	protected Integer getSendBufferSizeLimit() {_		return this.sendBufferSizeLimit__	};protected,accessor,for,internal,use;nullable,protected,integer,get,send,buffer,size,limit,return,this,send,buffer,size,limit
