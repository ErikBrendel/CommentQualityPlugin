commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Configure allowed {@code Origin} header values. This check is mostly  * designed for browsers. There is nothing preventing other types of client  * to modify the {@code Origin} header value.  * <p>Each provided allowed origin must have a scheme, and optionally a port  * (e.g. "http://example.org", "http://example.org:9090"). An allowed origin  * string may also be "*" in which case all origins are allowed.  * @see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>  */ ;/**  * Configure allowed {@code Origin} header values. This check is mostly  * designed for browsers. There is nothing preventing other types of client  * to modify the {@code Origin} header value.  * <p>Each provided allowed origin must have a scheme, and optionally a port  * (e.g. "http://example.org", "http://example.org:9090"). An allowed origin  * string may also be "*" in which case all origins are allowed.  * @see <a href="https://tools.ietf.org/html/rfc6454">RFC 6454: The Web Origin Concept</a>  */ public void setAllowedOrigins(Collection<String> allowedOrigins) {     Assert.notNull(allowedOrigins, "Allowed origins Collection must not be null").     this.allowedOrigins.clear().     this.allowedOrigins.addAll(allowedOrigins). }
true;public;0;3;/**  * Return the allowed {@code Origin} header values.  * @since 4.1.5  * @see #setAllowedOrigins  */ ;/**  * Return the allowed {@code Origin} header values.  * @since 4.1.5  * @see #setAllowedOrigins  */ public Collection<String> getAllowedOrigins() {     return Collections.unmodifiableSet(this.allowedOrigins). }
false;public;4;14;;@Override public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map<String, Object> attributes) throws Exception {     if (!WebUtils.isSameOrigin(request) && !WebUtils.isValidOrigin(request, this.allowedOrigins)) {         response.setStatusCode(HttpStatus.FORBIDDEN).         if (logger.isDebugEnabled()) {             logger.debug("Handshake request rejected, Origin header value " + request.getHeaders().getOrigin() + " not allowed").         }         return false.     }     return true. }
false;public;4;4;;@Override public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, @Nullable Exception exception) { }
