commented;modifiers;parameterAmount;loc;comment;code
false;public,final;4;14;;@Override public final void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, SockJsSession wsSession) throws SockJsException {     AbstractHttpSockJsSession sockJsSession = (AbstractHttpSockJsSession) wsSession.     // https://github.com/sockjs/sockjs-client/issues/130     // sockJsSession.setAcceptedProtocol(protocol).     // Set content type before writing     response.getHeaders().setContentType(getContentType()).     handleRequestInternal(request, response, sockJsSession). }
false;protected;3;40;;protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, AbstractHttpSockJsSession sockJsSession) throws SockJsException {     if (sockJsSession.isNew()) {         if (logger.isDebugEnabled()) {             logger.debug(request.getMethod() + " " + request.getURI()).         }         sockJsSession.handleInitialRequest(request, response, getFrameFormat(request)).     } else if (sockJsSession.isClosed()) {         if (logger.isDebugEnabled()) {             logger.debug("Connection already closed (but not removed yet) for " + sockJsSession).         }         SockJsFrame frame = SockJsFrame.closeFrameGoAway().         try {             response.getBody().write(frame.getContentBytes()).         } catch (IOException ex) {             throw new SockJsException("Failed to send " + frame, sockJsSession.getId(), ex).         }     } else if (!sockJsSession.isActive()) {         if (logger.isTraceEnabled()) {             logger.trace("Starting " + getTransportType() + " async request.").         }         sockJsSession.handleSuccessiveRequest(request, response, getFrameFormat(request)).     } else {         if (logger.isDebugEnabled()) {             logger.debug("Another " + getTransportType() + " connection still open for " + sockJsSession).         }         String formattedFrame = getFrameFormat(request).format(SockJsFrame.closeFrameAnotherConnectionOpen()).         try {             response.getBody().write(formattedFrame.getBytes(SockJsFrame.CHARSET)).         } catch (IOException ex) {             throw new SockJsException("Failed to send " + formattedFrame, sockJsSession.getId(), ex).         }     } }
false;protected,abstract;0;1;;protected abstract MediaType getContentType().
false;protected,abstract;1;1;;protected abstract SockJsFrameFormat getFrameFormat(ServerHttpRequest request).
false;protected,final;1;11;;@Nullable protected final String getCallbackParam(ServerHttpRequest request) {     String query = request.getURI().getQuery().     MultiValueMap<String, String> params = UriComponentsBuilder.newInstance().query(query).build().getQueryParams().     String value = params.getFirst("c").     if (StringUtils.isEmpty(value)) {         return null.     }     String result = UriUtils.decode(value, StandardCharsets.UTF_8).     return (CALLBACK_PARAM_PATTERN.matcher(result).matches() ? result : null). }
