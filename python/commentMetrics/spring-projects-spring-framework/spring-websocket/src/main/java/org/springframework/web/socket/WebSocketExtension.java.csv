# id;timestamp;commentText;codeText;commentWords;codeWords
WebSocketExtension -> public Map<String, String> getParameters();1386021191;@return the parameters of the extension, never {@code null};public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1386087504;@return the parameters of the extension, never {@code null};public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1405696918;@return the parameters of the extension, never {@code null};public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1407415845;@return the parameters of the extension, never {@code null};public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1467730834;@return the parameters of the extension, never {@code null};public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1472594218;Return the parameters of the extension (never {@code null}).;public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1472602111;Return the parameters of the extension (never {@code null}).;public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1496837955;Return the parameters of the extension (never {@code null}).;public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1497251962;Return the parameters of the extension (never {@code null}).;public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public Map<String, String> getParameters();1522103912;Return the parameters of the extension (never {@code null}).;public Map<String, String> getParameters() {_		return this.parameters__	};return,the,parameters,of,the,extension,never,code,null;public,map,string,string,get,parameters,return,this,parameters
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1386021191;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" extensions._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (extensions == null || !StringUtils.hasText(extensions)) {_			return Collections.emptyList()__		}_		else {_			List<WebSocketExtension> result = new ArrayList<WebSocketExtension>()__			for(String token : extensions.split(",")) {_				result.add(parseExtension(token))__			}_			return result__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,extensions,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,extensions,null,string,utils,has,text,extensions,return,collections,empty,list,else,list,web,socket,extension,result,new,array,list,web,socket,extension,for,string,token,extensions,split,result,add,parse,extension,token,return,result
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1386087504;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" extensions._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (extensions == null || !StringUtils.hasText(extensions)) {_			return Collections.emptyList()__		}_		else {_			List<WebSocketExtension> result = new ArrayList<WebSocketExtension>()__			for(String token : extensions.split(",")) {_				result.add(parseExtension(token))__			}_			return result__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,extensions,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,extensions,null,string,utils,has,text,extensions,return,collections,empty,list,else,list,web,socket,extension,result,new,array,list,web,socket,extension,for,string,token,extensions,split,result,add,parse,extension,token,return,result
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1405696918;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" extensions._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (extensions == null || !StringUtils.hasText(extensions)) {_			return Collections.emptyList()__		}_		else {_			List<WebSocketExtension> result = new ArrayList<WebSocketExtension>()__			for (String token : extensions.split(",")) {_				result.add(parseExtension(token))__			}_			return result__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,extensions,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,extensions,null,string,utils,has,text,extensions,return,collections,empty,list,else,list,web,socket,extension,result,new,array,list,web,socket,extension,for,string,token,extensions,split,result,add,parse,extension,token,return,result
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1407415845;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" extensions._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (extensions == null || !StringUtils.hasText(extensions)) {_			return Collections.emptyList()__		}_		else {_			List<WebSocketExtension> result = new ArrayList<WebSocketExtension>()__			for (String token : extensions.split(",")) {_				result.add(parseExtension(token))__			}_			return result__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,extensions,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,extensions,null,string,utils,has,text,extensions,return,collections,empty,list,else,list,web,socket,extension,result,new,array,list,web,socket,extension,for,string,token,extensions,split,result,add,parse,extension,token,return,result
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1467730834;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" extensions._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (extensions == null || !StringUtils.hasText(extensions)) {_			return Collections.emptyList()__		}_		else {_			List<WebSocketExtension> result = new ArrayList<>()__			for (String token : extensions.split(",")) {_				result.add(parseExtension(token))__			}_			return result__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,extensions,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,extensions,null,string,utils,has,text,extensions,return,collections,empty,list,else,list,web,socket,extension,result,new,array,list,for,string,token,extensions,split,result,add,parse,extension,token,return,result
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1472594218;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" header._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (!StringUtils.hasText(extensions)) {_			return Collections.emptyList()__		}_		else {_			List<WebSocketExtension> result = new ArrayList<>()__			for (String token : StringUtils.tokenizeToStringArray(extensions, ",")) {_				result.add(parseExtension(token))__			}_			return result__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,header,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,string,utils,has,text,extensions,return,collections,empty,list,else,list,web,socket,extension,result,new,array,list,for,string,token,string,utils,tokenize,to,string,array,extensions,result,add,parse,extension,token,return,result
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1472602111;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" header._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (StringUtils.hasText(extensions)) {_			String[] tokens = StringUtils.tokenizeToStringArray(extensions, ",")__			List<WebSocketExtension> result = new ArrayList<WebSocketExtension>(tokens.length)__			for (String token : tokens) {_				result.add(parseExtension(token))__			}_			return result__		}_		else {_			return Collections.emptyList()__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,header,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,string,utils,has,text,extensions,string,tokens,string,utils,tokenize,to,string,array,extensions,list,web,socket,extension,result,new,array,list,web,socket,extension,tokens,length,for,string,token,tokens,result,add,parse,extension,token,return,result,else,return,collections,empty,list
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1496837955;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" header._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (StringUtils.hasText(extensions)) {_			String[] tokens = StringUtils.tokenizeToStringArray(extensions, ",")__			List<WebSocketExtension> result = new ArrayList<WebSocketExtension>(tokens.length)__			for (String token : tokens) {_				result.add(parseExtension(token))__			}_			return result__		}_		else {_			return Collections.emptyList()__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,header,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,string,utils,has,text,extensions,string,tokens,string,utils,tokenize,to,string,array,extensions,list,web,socket,extension,result,new,array,list,web,socket,extension,tokens,length,for,string,token,tokens,result,add,parse,extension,token,return,result,else,return,collections,empty,list
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1497251962;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" header._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (StringUtils.hasText(extensions)) {_			String[] tokens = StringUtils.tokenizeToStringArray(extensions, ",")__			List<WebSocketExtension> result = new ArrayList<>(tokens.length)__			for (String token : tokens) {_				result.add(parseExtension(token))__			}_			return result__		}_		else {_			return Collections.emptyList()__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,header,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,string,utils,has,text,extensions,string,tokens,string,utils,tokenize,to,string,array,extensions,list,web,socket,extension,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,extension,token,return,result,else,return,collections,empty,list
WebSocketExtension -> public static List<WebSocketExtension> parseExtensions(String extensions);1522103912;Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects._<p>This method can be used to parse a "Sec-WebSocket-Extension" header._@param extensions the string to parse_@return the list of extensions_@throws IllegalArgumentException if the string cannot be parsed;public static List<WebSocketExtension> parseExtensions(String extensions) {_		if (StringUtils.hasText(extensions)) {_			String[] tokens = StringUtils.tokenizeToStringArray(extensions, ",")__			List<WebSocketExtension> result = new ArrayList<>(tokens.length)__			for (String token : tokens) {_				result.add(parseExtension(token))__			}_			return result__		}_		else {_			return Collections.emptyList()__		}_	};parse,the,given,comma,separated,string,into,a,list,of,code,web,socket,extension,objects,p,this,method,can,be,used,to,parse,a,sec,web,socket,extension,header,param,extensions,the,string,to,parse,return,the,list,of,extensions,throws,illegal,argument,exception,if,the,string,cannot,be,parsed;public,static,list,web,socket,extension,parse,extensions,string,extensions,if,string,utils,has,text,extensions,string,tokens,string,utils,tokenize,to,string,array,extensions,list,web,socket,extension,result,new,array,list,tokens,length,for,string,token,tokens,result,add,parse,extension,token,return,result,else,return,collections,empty,list
WebSocketExtension -> public WebSocketExtension(String name, @Nullable Map<String, String> parameters);1496837955;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, @Nullable Map<String, String> parameters) {_		Assert.hasLength(name, "Extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			map.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,nullable,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,map,put,all,parameters,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name, @Nullable Map<String, String> parameters);1497251962;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, @Nullable Map<String, String> parameters) {_		Assert.hasLength(name, "Extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			map.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,nullable,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,map,put,all,parameters,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name, @Nullable Map<String, String> parameters);1522103912;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, @Nullable Map<String, String> parameters) {_		Assert.hasLength(name, "Extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			map.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,nullable,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,map,put,all,parameters,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name);1386021191;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1386087504;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1405696918;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1407415845;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1467730834;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1472594218;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1472602111;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1496837955;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1497251962;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public WebSocketExtension(String name);1522103912;Create a WebSocketExtension with the given name._@param name the name of the extension;public WebSocketExtension(String name) {_		this(name, null)__	};create,a,web,socket,extension,with,the,given,name,param,name,the,name,of,the,extension;public,web,socket,extension,string,name,this,name,null
WebSocketExtension -> public String getName();1386021191;@return the name of the extension;public String getName() {_		return this.name__	};return,the,name,of,the,extension;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1386087504;@return the name of the extension;public String getName() {_		return this.name__	};return,the,name,of,the,extension;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1405696918;@return the name of the extension;public String getName() {_		return this.name__	};return,the,name,of,the,extension;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1407415845;@return the name of the extension;public String getName() {_		return this.name__	};return,the,name,of,the,extension;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1467730834;@return the name of the extension;public String getName() {_		return this.name__	};return,the,name,of,the,extension;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1472594218;Return the name of the extension (never {@code null) or empty}.;public String getName() {_		return this.name__	};return,the,name,of,the,extension,never,code,null,or,empty;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1472602111;Return the name of the extension (never {@code null) or empty}.;public String getName() {_		return this.name__	};return,the,name,of,the,extension,never,code,null,or,empty;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1496837955;Return the name of the extension (never {@code null) or empty}.;public String getName() {_		return this.name__	};return,the,name,of,the,extension,never,code,null,or,empty;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1497251962;Return the name of the extension (never {@code null) or empty}.;public String getName() {_		return this.name__	};return,the,name,of,the,extension,never,code,null,or,empty;public,string,get,name,return,this,name
WebSocketExtension -> public String getName();1522103912;Return the name of the extension (never {@code null) or empty}.;public String getName() {_		return this.name__	};return,the,name,of,the,extension,never,code,null,or,empty;public,string,get,name,return,this,name
WebSocketExtension -> public WebSocketExtension(String name, Map<String, String> parameters);1386021191;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, Map<String, String> parameters) {_		Assert.hasLength(name, "extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			m.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,m,put,all,parameters,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name, Map<String, String> parameters);1386087504;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, Map<String, String> parameters) {_		Assert.hasLength(name, "extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			m.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,m,put,all,parameters,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name, Map<String, String> parameters);1405696918;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, Map<String, String> parameters) {_		Assert.hasLength(name, "extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			m.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,m,put,all,parameters,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name, Map<String, String> parameters);1407415845;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, Map<String, String> parameters) {_		Assert.hasLength(name, "extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<String>(parameters.size(), Locale.ENGLISH)__			m.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,string,parameters,size,locale,english,m,put,all,parameters,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name, Map<String, String> parameters);1467730834;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, Map<String, String> parameters) {_		Assert.hasLength(name, "extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> m = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			m.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(m)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,m,new,linked,case,insensitive,map,parameters,size,locale,english,m,put,all,parameters,this,parameters,collections,unmodifiable,map,m,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name, Map<String, String> parameters);1472594218;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, Map<String, String> parameters) {_		Assert.hasLength(name, "Extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			map.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,map,put,all,parameters,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
WebSocketExtension -> public WebSocketExtension(String name, Map<String, String> parameters);1472602111;Create a WebSocketExtension with the given name and parameters._@param name the name of the extension_@param parameters the parameters;public WebSocketExtension(String name, Map<String, String> parameters) {_		Assert.hasLength(name, "Extension name must not be empty")__		this.name = name__		if (!CollectionUtils.isEmpty(parameters)) {_			Map<String, String> map = new LinkedCaseInsensitiveMap<>(parameters.size(), Locale.ENGLISH)__			map.putAll(parameters)__			this.parameters = Collections.unmodifiableMap(map)__		}_		else {_			this.parameters = Collections.emptyMap()__		}_	};create,a,web,socket,extension,with,the,given,name,and,parameters,param,name,the,name,of,the,extension,param,parameters,the,parameters;public,web,socket,extension,string,name,map,string,string,parameters,assert,has,length,name,extension,name,must,not,be,empty,this,name,name,if,collection,utils,is,empty,parameters,map,string,string,map,new,linked,case,insensitive,map,parameters,size,locale,english,map,put,all,parameters,this,parameters,collections,unmodifiable,map,map,else,this,parameters,collections,empty,map
