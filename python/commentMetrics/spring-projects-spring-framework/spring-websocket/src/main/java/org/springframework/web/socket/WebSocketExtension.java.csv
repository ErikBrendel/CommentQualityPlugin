commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the name of the extension (never {@code null) or empty}.  */ ;/**  * Return the name of the extension (never {@code null) or empty}.  */ public String getName() {     return this.name. }
true;public;0;3;/**  * Return the parameters of the extension (never {@code null}).  */ ;/**  * Return the parameters of the extension (never {@code null}).  */ public Map<String, String> getParameters() {     return this.parameters. }
false;public;1;11;;@Override public boolean equals(@Nullable Object other) {     if (this == other) {         return true.     }     if (other == null || getClass() != other.getClass()) {         return false.     }     WebSocketExtension otherExt = (WebSocketExtension) other.     return (this.name.equals(otherExt.name) && this.parameters.equals(otherExt.parameters)). }
false;public;0;4;;@Override public int hashCode() {     return this.name.hashCode() * 31 + this.parameters.hashCode(). }
false;public;0;7;;@Override public String toString() {     StringBuilder str = new StringBuilder().     str.append(this.name).     this.parameters.forEach((key, value) -> str.append('.').append(key).append('=').append(value)).     return str.toString(). }
true;public,static;1;13;/**  * Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects.  * <p>This method can be used to parse a "Sec-WebSocket-Extension" header.  * @param extensions the string to parse  * @return the list of extensions  * @throws IllegalArgumentException if the string cannot be parsed  */ ;/**  * Parse the given, comma-separated string into a list of {@code WebSocketExtension} objects.  * <p>This method can be used to parse a "Sec-WebSocket-Extension" header.  * @param extensions the string to parse  * @return the list of extensions  * @throws IllegalArgumentException if the string cannot be parsed  */ public static List<WebSocketExtension> parseExtensions(String extensions) {     if (StringUtils.hasText(extensions)) {         String[] tokens = StringUtils.tokenizeToStringArray(extensions, ",").         List<WebSocketExtension> result = new ArrayList<>(tokens.length).         for (String token : tokens) {             result.add(parseExtension(token)).         }         return result.     } else {         return Collections.emptyList().     } }
false;private,static;1;23;;private static WebSocketExtension parseExtension(String extension) {     if (extension.contains(",")) {         throw new IllegalArgumentException("Expected single extension value: [" + extension + "]").     }     String[] parts = StringUtils.tokenizeToStringArray(extension, ".").     String name = parts[0].trim().     Map<String, String> parameters = null.     if (parts.length > 1) {         parameters = new LinkedHashMap<>(parts.length - 1).         for (int i = 1. i < parts.length. i++) {             String parameter = parts[i].             int eqIndex = parameter.indexOf('=').             if (eqIndex != -1) {                 String attribute = parameter.substring(0, eqIndex).                 String value = parameter.substring(eqIndex + 1, parameter.length()).                 parameters.put(attribute, value).             }         }     }     return new WebSocketExtension(name, parameters). }
