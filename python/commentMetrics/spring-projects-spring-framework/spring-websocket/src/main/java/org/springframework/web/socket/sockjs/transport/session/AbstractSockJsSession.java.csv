# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1395550293;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1395555177;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1399669297;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1403719829;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1403856366;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1404062102;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1404062121;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1404880799;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1409804590;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1411567635;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1412682307;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1413848647;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1419362683;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1432404288;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1466196894;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1467730834;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1472563575;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1477690459;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1479746164;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1479952164;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1480619507;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1485810955;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1489701726;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1493803888;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1496837955;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1498780456;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1498848981;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1500971411;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1530174524;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> protected abstract void disconnect(CloseStatus status) throws IOException_;1538409688;Actually close the underlying WebSocket session or in the case of HTTP_transports complete the underlying request.;protected abstract void disconnect(CloseStatus status) throws IOException_;actually,close,the,underlying,web,socket,session,or,in,the,case,of,http,transports,complete,the,underlying,request;protected,abstract,void,disconnect,close,status,status,throws,ioexception
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			@Nullable Map<String, Object> attributes);1496837955;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			@Nullable Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,nullable,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			@Nullable Map<String, Object> attributes);1498780456;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			@Nullable Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,nullable,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			@Nullable Map<String, Object> attributes);1498848981;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			@Nullable Map<String, Object> attributes) {__		Assert.notNull(id, "Session id must not be null")__		Assert.notNull(config, "SockJsServiceConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,nullable,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,service,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			@Nullable Map<String, Object> attributes);1500971411;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			@Nullable Map<String, Object> attributes) {__		Assert.notNull(id, "Session id must not be null")__		Assert.notNull(config, "SockJsServiceConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,nullable,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,service,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			@Nullable Map<String, Object> attributes);1530174524;Create a new instance._@param id the session ID_@param config the SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			@Nullable Map<String, Object> attributes) {__		Assert.notNull(id, "Session id must not be null")__		Assert.notNull(config, "SockJsServiceConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,the,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,nullable,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,service,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			@Nullable Map<String, Object> attributes);1538409688;Create a new instance._@param id the session ID_@param config the SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			@Nullable Map<String, Object> attributes) {__		Assert.notNull(id, "Session id must not be null")__		Assert.notNull(config, "SockJsServiceConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,the,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,nullable,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,service,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1375321376;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1375542207;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1376429280;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1376429281;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1377100811;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1378265360;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1385412762;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1385507478;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1386462352;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1388785441;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1389893234;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1393703204;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1393773708;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1394013846;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1394709692;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1395246308;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1395251140;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1395543588;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1395550293;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1395555177;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1399669297;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1403719829;Invoked in reaction to the underlying connection being closed by the remote side_(or the WebSocket container) in order to perform cleanup and notify the_{@link WebSocketHandler}. This is in contrast to {@link #close()} that pro-actively_closes the connection.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			if (logger.isDebugEnabled()) {_				logger.debug(this + " was closed, " + status)__			}_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,in,reaction,to,the,underlying,connection,being,closed,by,the,remote,side,or,the,web,socket,container,in,order,to,perform,cleanup,and,notify,the,link,web,socket,handler,this,is,in,contrast,to,link,close,that,pro,actively,closes,the,connection;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,if,logger,is,debug,enabled,logger,debug,this,was,closed,status,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1403856366;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1404062102;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1404062121;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1404880799;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1409804590;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1411567635;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1412682307;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1413848647;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1419362683;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1432404288;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1466196894;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1467730834;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1472563575;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1477690459;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1479746164;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				cancelHeartbeat()__			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,cancel,heartbeat,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1479952164;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1480619507;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1485810955;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1489701726;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1493803888;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1496837955;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1498780456;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1498848981;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1500971411;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1530174524;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public final void delegateConnectionClosed(CloseStatus status) throws Exception;1538409688;Invoked when the underlying connection is closed.;public final void delegateConnectionClosed(CloseStatus status) throws Exception {_		if (!isClosed()) {_			try {_				updateLastActiveTime()__				_				ScheduledFuture<?> future = this.heartbeatFuture__				if (future != null) {_					this.heartbeatFuture = null__					future.cancel(false)__				}_			}_			finally {_				this.state = State.CLOSED__				this.handler.afterConnectionClosed(this, status)__			}_		}_	};invoked,when,the,underlying,connection,is,closed;public,final,void,delegate,connection,closed,close,status,status,throws,exception,if,is,closed,try,update,last,active,time,scheduled,future,future,this,heartbeat,future,if,future,null,this,heartbeat,future,null,future,cancel,false,finally,this,state,state,closed,this,handler,after,connection,closed,this,status
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1375542207;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			try {_				close(closeStatus)__			}_			catch (Throwable closeEx) {_				_			}_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1376429280;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			try {_				close(closeStatus)__			}_			catch (Throwable closeEx) {_				_			}_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1376429281;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			try {_				close(closeStatus)__			}_			catch (Throwable closeEx) {_				_			}_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1377100811;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1378265360;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1385412762;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1385507478;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1386462352;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1388785441;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1389893234;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1393703204;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1393773708;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1394013846;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1394709692;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1395246308;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1395251140;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1395543588;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1395550293;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1395555177;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1399669297;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus);1403719829;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable ex, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(ex)__		}_		catch (Throwable delegateEx) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeEx) {_			_		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,ex,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,ex,catch,throwable,delegate,ex,try,close,close,status,catch,throwable,close,ex
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes);1376429281;@param id the session ID_@param config SockJS service configuration options_@param wsHandler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "sessionId is required")__		Assert.notNull(config, "sockJsConfig is required")__		Assert.notNull(wsHandler, "webSocketHandler is required")___		this.id = id__		this.config = config__		this.handler = wsHandler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,ws,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,ws,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,is,required,assert,not,null,config,sock,js,config,is,required,assert,not,null,ws,handler,web,socket,handler,is,required,this,id,id,this,config,config,this,handler,ws,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes);1377100811;@param id the session ID_@param config SockJS service configuration options_@param wsHandler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "sessionId is required")__		Assert.notNull(config, "sockJsConfig is required")__		Assert.notNull(wsHandler, "webSocketHandler is required")___		this.id = id__		this.config = config__		this.handler = wsHandler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,ws,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,ws,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,is,required,assert,not,null,config,sock,js,config,is,required,assert,not,null,ws,handler,web,socket,handler,is,required,this,id,id,this,config,config,this,handler,ws,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes);1378265360;@param id the session ID_@param config SockJS service configuration options_@param wsHandler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "sessionId is required")__		Assert.notNull(config, "sockJsConfig is required")__		Assert.notNull(wsHandler, "webSocketHandler is required")___		this.id = id__		this.config = config__		this.handler = wsHandler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,ws,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,ws,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,is,required,assert,not,null,config,sock,js,config,is,required,assert,not,null,ws,handler,web,socket,handler,is,required,this,id,id,this,config,config,this,handler,ws,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes);1385412762;@param id the session ID_@param config SockJS service configuration options_@param wsHandler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "sessionId is required")__		Assert.notNull(config, "sockJsConfig is required")__		Assert.notNull(wsHandler, "webSocketHandler is required")___		this.id = id__		this.config = config__		this.handler = wsHandler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,ws,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,ws,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,is,required,assert,not,null,config,sock,js,config,is,required,assert,not,null,ws,handler,web,socket,handler,is,required,this,id,id,this,config,config,this,handler,ws,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes);1385507478;@param id the session ID_@param config SockJS service configuration options_@param wsHandler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler wsHandler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(wsHandler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = wsHandler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,ws,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,ws,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,ws,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,ws,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1375542207;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			if (ex instanceof EOFException || ex instanceof SocketException) {_				logger.warn("Client went away. Terminating connection")__			}_			else {_				logger.warn("Terminating connection after failure to send message: " + ex.getMessage())__			}_			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,if,ex,instanceof,eofexception,ex,instanceof,socket,exception,logger,warn,client,went,away,terminating,connection,else,logger,warn,terminating,connection,after,failure,to,send,message,ex,get,message,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1376429280;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			if (ex instanceof EOFException || ex instanceof SocketException) {_				logger.warn("Client went away. Terminating connection")__			}_			else {_				logger.warn("Terminating connection after failure to send message: " + ex.getMessage())__			}_			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,if,ex,instanceof,eofexception,ex,instanceof,socket,exception,logger,warn,client,went,away,terminating,connection,else,logger,warn,terminating,connection,after,failure,to,send,message,ex,get,message,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1376429281;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			if (ex instanceof EOFException || ex instanceof SocketException) {_				logger.warn("Client went away. Terminating connection")__			}_			else {_				logger.warn("Terminating connection after failure to send message: " + ex.getMessage())__			}_			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,if,ex,instanceof,eofexception,ex,instanceof,socket,exception,logger,warn,client,went,away,terminating,connection,else,logger,warn,terminating,connection,after,failure,to,send,message,ex,get,message,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1377100811;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			if (ex instanceof EOFException || ex instanceof SocketException) {_				logger.warn("Client went away. Terminating connection")__			}_			else {_				logger.warn("Terminating connection after failure to send message: " + ex.getMessage())__			}_			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,if,ex,instanceof,eofexception,ex,instanceof,socket,exception,logger,warn,client,went,away,terminating,connection,else,logger,warn,terminating,connection,after,failure,to,send,message,ex,get,message,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1378265360;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			if (ex instanceof EOFException || ex instanceof SocketException) {_				logger.warn("Client went away. Terminating connection")__			}_			else {_				logger.warn("Terminating connection after failure to send message: " + ex.getMessage())__			}_			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,if,ex,instanceof,eofexception,ex,instanceof,socket,exception,logger,warn,client,went,away,terminating,connection,else,logger,warn,terminating,connection,after,failure,to,send,message,ex,get,message,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1385412762;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			if (ex instanceof EOFException || ex instanceof SocketException) {_				logger.warn("Client went away. Terminating connection")__			}_			else {_				logger.warn("Terminating connection after failure to send message: " + ex.getMessage())__			}_			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,if,ex,instanceof,eofexception,ex,instanceof,socket,exception,logger,warn,client,went,away,terminating,connection,else,logger,warn,terminating,connection,after,failure,to,send,message,ex,get,message,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1385507478;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			if (ex instanceof EOFException || ex instanceof SocketException) {_				logger.warn("Client went away. Terminating connection")__			}_			else {_				logger.warn("Terminating connection after failure to send message: " + ex.getMessage())__			}_			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,if,ex,instanceof,eofexception,ex,instanceof,socket,exception,logger,warn,client,went,away,terminating,connection,else,logger,warn,terminating,connection,after,failure,to,send,message,ex,get,message,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1386462352;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			if (ex instanceof EOFException || ex instanceof SocketException) {_				logger.warn("Client went away. Terminating connection")__			}_			else {_				logger.warn("Terminating connection after failure to send message: " + ex.getMessage())__			}_			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,if,ex,instanceof,eofexception,ex,instanceof,socket,exception,logger,warn,client,went,away,terminating,connection,else,logger,warn,terminating,connection,after,failure,to,send,message,ex,get,message,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1388785441;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logger.error("Terminating connection after failure to send message to client. " +_					"This may be because the client has gone away " +_					"(see https://java.net/jira/browse/SERVLET_SPEC-44)", ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,logger,error,terminating,connection,after,failure,to,send,message,to,client,this,may,be,because,the,client,has,gone,away,see,https,java,net,jira,browse,44,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1389893234;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logger.error("Terminating connection after failure to send message to client. " +_					"This may be because the client has gone away " +_					"(see https://java.net/jira/browse/SERVLET_SPEC-44)", ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,logger,error,terminating,connection,after,failure,to,send,message,to,client,this,may,be,because,the,client,has,gone,away,see,https,java,net,jira,browse,44,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1393703204;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1393773708;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1394013846;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1394709692;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1395246308;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1395251140;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1395543588;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1395550293;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1395555177;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1399669297;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1403719829;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				disconnect(CloseStatus.SERVER_ERROR)__				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable ex2) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,close,close,status,catch,throwable,ex2,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1403856366;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				logger.error("Failure while closing " + this, disconnectFailure)__			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable t) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,logger,error,failure,while,closing,this,disconnect,failure,try,close,close,status,catch,throwable,t,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1404062102;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				logger.error("Failure while closing " + this, disconnectFailure)__			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable t) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,logger,error,failure,while,closing,this,disconnect,failure,try,close,close,status,catch,throwable,t,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1404062121;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				logger.error("Failure while closing " + this, disconnectFailure)__			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable t) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,logger,error,failure,while,closing,this,disconnect,failure,try,close,close,status,catch,throwable,t,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1404880799;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				logger.error("Failure while closing " + this, disconnectFailure)__			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable t) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,logger,error,failure,while,closing,this,disconnect,failure,try,close,close,status,catch,throwable,t,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1409804590;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable t) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,t,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1411567635;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable t) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,t,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1412682307;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1413848647;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1419362683;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, this.getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,this,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1432404288;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1466196894;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1467730834;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1472563575;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1477690459;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1479746164;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1479952164;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1480619507;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1485810955;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1489701726;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1493803888;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1496837955;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1498780456;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1498848981;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1500971411;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1530174524;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException;1538409688;For internal use within a TransportHandler and the (TransportHandler-specific)_session class.;protected void writeFrame(SockJsFrame frame) throws SockJsTransportFailureException {_		if (logger.isTraceEnabled()) {_			logger.trace("Preparing to write " + frame)__		}_		try {_			writeFrameInternal(frame)__		}_		catch (Throwable ex) {_			logWriteFrameFailure(ex)__			try {_				_				disconnect(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable disconnectFailure) {_				_			}_			try {_				close(CloseStatus.SERVER_ERROR)__			}_			catch (Throwable closeFailure) {_				_			}_			throw new SockJsTransportFailureException("Failed to write " + frame, getId(), ex)__		}_	};for,internal,use,within,a,transport,handler,and,the,transport,handler,specific,session,class;protected,void,write,frame,sock,js,frame,frame,throws,sock,js,transport,failure,exception,if,logger,is,trace,enabled,logger,trace,preparing,to,write,frame,try,write,frame,internal,frame,catch,throwable,ex,log,write,frame,failure,ex,try,disconnect,close,status,catch,throwable,disconnect,failure,try,close,close,status,catch,throwable,close,failure,throw,new,sock,js,transport,failure,exception,failed,to,write,frame,get,id,ex
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1395246308;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket session;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.attributes = attributes__	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,attributes,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1395251140;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.attributes = attributes__	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,attributes,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1395543588;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.attributes = attributes__	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,attributes,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1395550293;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.attributes = attributes__	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,attributes,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1395555177;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.attributes = attributes__	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,attributes,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1399669297;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1403719829;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1403856366;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1404062102;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1404062121;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1404880799;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1409804590;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1411567635;Create a new instance.__@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1412682307;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1413848647;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1419362683;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1432404288;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1466196894;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1467730834;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1472563575;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1477690459;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1479746164;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1479952164;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1480619507;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1485810955;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1489701726;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler, 			Map<String, Object> attributes);1493803888;Create a new instance._@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages_@param attributes attributes from the HTTP handshake to associate with the WebSocket_session_ the provided attributes are copied, the original map is not used.;public AbstractSockJsSession(String id, SockJsServiceConfig config, WebSocketHandler handler,_			Map<String, Object> attributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler___		if (attributes != null) {_			this.attributes.putAll(attributes)__		}_	};create,a,new,instance,param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages,param,attributes,attributes,from,the,http,handshake,to,associate,with,the,web,socket,session,the,provided,attributes,are,copied,the,original,map,is,not,used;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,if,attributes,null,this,attributes,put,all,attributes
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1403856366;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.error("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,error,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1404062102;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.error("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,error,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1404062121;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.error("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,error,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1404880799;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.error("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,error,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1409804590;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		logger.error("Closing due to transport error for " + this)__		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.error("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,logger,error,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,error,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1411567635;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1412682307;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1413848647;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1419362683;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1432404288;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1466196894;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1467730834;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1472563575;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1477690459;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1479746164;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1479952164;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1480619507;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1485810955;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1489701726;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1493803888;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_			logger.debug("Exception from error handling delegate", delegateException)__		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,logger,debug,exception,from,error,handling,delegate,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1496837955;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_			logger.debug("Exception from error handling delegate", delegateException)__		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,logger,debug,exception,from,error,handling,delegate,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1498780456;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_			logger.debug("Exception from error handling delegate", delegateException)__		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,logger,debug,exception,from,error,handling,delegate,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1498848981;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_			logger.debug("Exception from error handling delegate", delegateException)__		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,logger,debug,exception,from,error,handling,delegate,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1500971411;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_			logger.debug("Exception from error handling delegate", delegateException)__		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,logger,debug,exception,from,error,handling,delegate,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1530174524;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_			logger.debug("Exception from error handling delegate", delegateException)__		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,logger,debug,exception,from,error,handling,delegate,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus);1538409688;Close due to error arising from SockJS transport handling.;public void tryCloseWithSockJsTransportError(Throwable error, CloseStatus closeStatus) {_		if (logger.isDebugEnabled()) {_			logger.debug("Closing due to transport error for " + this)__		}_		try {_			delegateError(error)__		}_		catch (Throwable delegateException) {_			_			logger.debug("Exception from error handling delegate", delegateException)__		}_		try {_			close(closeStatus)__		}_		catch (Throwable closeException) {_			logger.debug("Failure while closing " + this, closeException)__		}_	};close,due,to,error,arising,from,sock,js,transport,handling;public,void,try,close,with,sock,js,transport,error,throwable,error,close,status,close,status,if,logger,is,debug,enabled,logger,debug,closing,due,to,transport,error,for,this,try,delegate,error,error,catch,throwable,delegate,exception,logger,debug,exception,from,error,handling,delegate,delegate,exception,try,close,close,status,catch,throwable,close,exception,logger,debug,failure,while,closing,this,close,exception
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1375321376;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable t) {_					logger.error("Unhandled error for " + this, t)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,t,logger,error,unhandled,error,for,this,t
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1375542207;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable t) {_					logger.error("Unhandled error for " + this, t)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,t,logger,error,unhandled,error,for,this,t
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1376429280;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable t) {_					logger.error("Unhandled error for " + this, t)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,t,logger,error,unhandled,error,for,this,t
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1376429281;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable t) {_					logger.error("Unhandled error for " + this, t)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,t,logger,error,unhandled,error,for,this,t
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1377100811;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable t) {_					logger.error("Unhandled error for " + this, t)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,t,logger,error,unhandled,error,for,this,t
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1378265360;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable t) {_					logger.error("Unhandled error for " + this, t)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,t,logger,error,unhandled,error,for,this,t
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1385412762;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable t) {_					logger.error("Unhandled error for " + this, t)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,t,logger,error,unhandled,error,for,this,t
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1385507478;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable t) {_					logger.error("Unhandled error for " + this, t)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,t,logger,error,unhandled,error,for,this,t
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1386462352;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1388785441;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1389893234;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1393703204;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1393773708;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1394013846;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1394709692;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1395246308;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1395251140;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1395543588;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive()) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1395550293;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1395555177;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1399669297;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1403719829;{@inheritDoc}_<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing " + this + ", " + status)__			}_			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.warn("Failed to send SockJS close frame: " + ex.getMessage())__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Unhandled error for " + this, ex)__				}_			}_		}_	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,this,status,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,warn,failed,to,send,sock,js,close,frame,ex,get,message,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,unhandled,error,for,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1403856366;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing SockJS session " + getId() + " with " + status)__			}_			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,info,enabled,logger,info,closing,sock,js,session,get,id,with,status,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1404062102;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing SockJS session " + getId() + " with " + status)__			}_			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				this.state = State.CLOSED__				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,info,enabled,logger,info,closing,sock,js,session,get,id,with,status,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,this,state,state,closed,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1404062121;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isInfoEnabled()) {_				logger.info("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,info,enabled,logger,info,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1404880799;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1409804590;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.error("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,error,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1411567635;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1412682307;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1413848647;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1419362683;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1432404288;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1466196894;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1467730834;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1472563575;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1477690459;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while send SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,send,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1479746164;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1479952164;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1480619507;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1485810955;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1489701726;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1493803888;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1496837955;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1498780456;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1498848981;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1500971411;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1530174524;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> @Override 	public final void close(CloseStatus status) throws IOException;1538409688;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close(CloseStatus status) throws IOException {_		if (isOpen()) {_			if (logger.isDebugEnabled()) {_				logger.debug("Closing SockJS session " + getId() + " with " + status)__			}_			this.state = State.CLOSED__			try {_				if (isActive() && !CloseStatus.SESSION_NOT_RELIABLE.equals(status)) {_					try {_						writeFrameInternal(SockJsFrame.closeFrame(status.getCode(), status.getReason()))__					}_					catch (Throwable ex) {_						logger.debug("Failure while sending SockJS close frame", ex)__					}_				}_				updateLastActiveTime()__				cancelHeartbeat()__				disconnect(status)__			}_			finally {_				try {_					this.handler.afterConnectionClosed(this, status)__				}_				catch (Throwable ex) {_					logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex)__				}_			}_		}_	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,close,status,status,throws,ioexception,if,is,open,if,logger,is,debug,enabled,logger,debug,closing,sock,js,session,get,id,with,status,this,state,state,closed,try,if,is,active,close,status,equals,status,try,write,frame,internal,sock,js,frame,close,frame,status,get,code,status,get,reason,catch,throwable,ex,logger,debug,failure,while,sending,sock,js,close,frame,ex,update,last,active,time,cancel,heartbeat,disconnect,status,finally,try,this,handler,after,connection,closed,this,status,catch,throwable,ex,logger,debug,error,from,web,socket,handler,after,connection,closed,in,this,ex
AbstractSockJsSession -> public AbstractSockJsSession(String sessionId, SockJsServiceConfig config, WebSocketHandler wsHandler);1375321376;@param sessionId the session ID_@param config SockJS service configuration options_@param wsHandler the recipient of SockJS messages;public AbstractSockJsSession(String sessionId, SockJsServiceConfig config, WebSocketHandler wsHandler) {_		Assert.notNull(sessionId, "sessionId is required")__		Assert.notNull(config, "sockJsConfig is required")__		Assert.notNull(wsHandler, "webSocketHandler is required")__		this.id = sessionId__		this.sockJsServiceConfig = config__		this.handler = wsHandler__	};param,session,id,the,session,id,param,config,sock,js,service,configuration,options,param,ws,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,session,id,sock,js,service,config,config,web,socket,handler,ws,handler,assert,not,null,session,id,session,id,is,required,assert,not,null,config,sock,js,config,is,required,assert,not,null,ws,handler,web,socket,handler,is,required,this,id,session,id,this,sock,js,service,config,config,this,handler,ws,handler
AbstractSockJsSession -> public AbstractSockJsSession(String sessionId, SockJsServiceConfig config, WebSocketHandler wsHandler);1375542207;@param sessionId the session ID_@param config SockJS service configuration options_@param wsHandler the recipient of SockJS messages;public AbstractSockJsSession(String sessionId, SockJsServiceConfig config, WebSocketHandler wsHandler) {_		Assert.notNull(sessionId, "sessionId is required")__		Assert.notNull(config, "sockJsConfig is required")__		Assert.notNull(wsHandler, "webSocketHandler is required")__		this.id = sessionId__		this.sockJsServiceConfig = config__		this.handler = wsHandler__	};param,session,id,the,session,id,param,config,sock,js,service,configuration,options,param,ws,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,session,id,sock,js,service,config,config,web,socket,handler,ws,handler,assert,not,null,session,id,session,id,is,required,assert,not,null,config,sock,js,config,is,required,assert,not,null,ws,handler,web,socket,handler,is,required,this,id,session,id,this,sock,js,service,config,config,this,handler,ws,handler
AbstractSockJsSession -> public AbstractSockJsSession(String sessionId, SockJsServiceConfig config, WebSocketHandler wsHandler);1376429280;@param sessionId the session ID_@param config SockJS service configuration options_@param wsHandler the recipient of SockJS messages;public AbstractSockJsSession(String sessionId, SockJsServiceConfig config, WebSocketHandler wsHandler) {_		Assert.notNull(sessionId, "sessionId is required")__		Assert.notNull(config, "sockJsConfig is required")__		Assert.notNull(wsHandler, "webSocketHandler is required")__		this.id = sessionId__		this.sockJsServiceConfig = config__		this.handler = wsHandler__	};param,session,id,the,session,id,param,config,sock,js,service,configuration,options,param,ws,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,session,id,sock,js,service,config,config,web,socket,handler,ws,handler,assert,not,null,session,id,session,id,is,required,assert,not,null,config,sock,js,config,is,required,assert,not,null,ws,handler,web,socket,handler,is,required,this,id,session,id,this,sock,js,service,config,config,this,handler,ws,handler
AbstractSockJsSession -> public abstract boolean isActive()_;1375321376;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1375542207;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1376429280;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1376429281;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1377100811;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1378265360;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1385412762;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1385507478;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1386462352;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1388785441;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1389893234;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1393703204;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1393773708;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1394013846;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1394709692;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1395246308;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1395251140;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1395543588;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1395550293;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1395555177;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1399669297;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1403719829;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1403856366;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1404062102;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1404062121;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1404880799;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1409804590;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1411567635;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1412682307;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1413848647;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1419362683;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1432404288;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1466196894;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1467730834;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1472563575;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1477690459;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1479746164;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1479952164;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1480619507;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1485810955;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1489701726;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1493803888;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1496837955;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1498780456;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1498848981;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1500971411;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1530174524;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public abstract boolean isActive()_;1538409688;Polling and Streaming sessions periodically close the current HTTP request and_wait for the next request to come through. During this "downtime" the session is_still open but inactive and unable to send messages and therefore has to buffer_them temporarily. A WebSocket session by contrast is stateful and remain active_until closed.;public abstract boolean isActive()_;polling,and,streaming,sessions,periodically,close,the,current,http,request,and,wait,for,the,next,request,to,come,through,during,this,downtime,the,session,is,still,open,but,inactive,and,unable,to,send,messages,and,therefore,has,to,buffer,them,temporarily,a,web,socket,session,by,contrast,is,stateful,and,remain,active,until,closed;public,abstract,boolean,is,active
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler handler, Map<String, Object> handshakeAttributes);1386462352;@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler handler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler handler, Map<String, Object> handshakeAttributes);1388785441;@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler handler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler handler, Map<String, Object> handshakeAttributes);1389893234;@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler handler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler handler, Map<String, Object> handshakeAttributes);1393703204;@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler handler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler handler, Map<String, Object> handshakeAttributes);1393773708;@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler handler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler handler, Map<String, Object> handshakeAttributes);1394013846;@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler handler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> public AbstractSockJsSession(String id, SockJsServiceConfig config, 			WebSocketHandler handler, Map<String, Object> handshakeAttributes);1394709692;@param id the session ID_@param config SockJS service configuration options_@param handler the recipient of SockJS messages;public AbstractSockJsSession(String id, SockJsServiceConfig config,_			WebSocketHandler handler, Map<String, Object> handshakeAttributes) {__		Assert.notNull(id, "SessionId must not be null")__		Assert.notNull(config, "SockJsConfig must not be null")__		Assert.notNull(handler, "WebSocketHandler must not be null")___		this.id = id__		this.config = config__		this.handler = handler__		this.handshakeAttributes = handshakeAttributes__	};param,id,the,session,id,param,config,sock,js,service,configuration,options,param,handler,the,recipient,of,sock,js,messages;public,abstract,sock,js,session,string,id,sock,js,service,config,config,web,socket,handler,handler,map,string,object,handshake,attributes,assert,not,null,id,session,id,must,not,be,null,assert,not,null,config,sock,js,config,must,not,be,null,assert,not,null,handler,web,socket,handler,must,not,be,null,this,id,id,this,config,config,this,handler,handler,this,handshake,attributes,handshake,attributes
AbstractSockJsSession -> protected void updateLastActiveTime();1375321376;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1375542207;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1376429280;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1376429281;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1377100811;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1378265360;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1385412762;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1385507478;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1386462352;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1388785441;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1389893234;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1393703204;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1393773708;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1394013846;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1394709692;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1395246308;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1395251140;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1395543588;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1395550293;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1395555177;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1399669297;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1403719829;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1403856366;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1404062102;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1404062121;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1404880799;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1409804590;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1411567635;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1412682307;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1413848647;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1419362683;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1432404288;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1466196894;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1467730834;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1472563575;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1477690459;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1479746164;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1479952164;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1480619507;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1485810955;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1489701726;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1493803888;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1496837955;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1498780456;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1498848981;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1500971411;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1530174524;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> protected void updateLastActiveTime();1538409688;Should be invoked whenever the session becomes inactive.;protected void updateLastActiveTime() {_		this.timeLastActive = System.currentTimeMillis()__	};should,be,invoked,whenever,the,session,becomes,inactive;protected,void,update,last,active,time,this,time,last,active,system,current,time,millis
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1375321376;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1375542207;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1376429280;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1376429281;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1377100811;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1378265360;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1385412762;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1385507478;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1386462352;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1388785441;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1389893234;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1393703204;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1393773708;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1394013846;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1394709692;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1395246308;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1395251140;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1395543588;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1395550293;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1395555177;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1399669297;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1403719829;{@inheritDoc}__<p>Performs cleanup and notifies the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,performs,cleanup,and,notifies,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1403856366;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1404062102;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1404062121;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1404880799;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1409804590;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1411567635;{@inheritDoc}_<p>Perform cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};inherit,doc,p,perform,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1412682307;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1413848647;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1419362683;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1432404288;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1466196894;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1467730834;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1472563575;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1477690459;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1479746164;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1479952164;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1480619507;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1485810955;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1489701726;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1493803888;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1496837955;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1498780456;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1498848981;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1500971411;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1530174524;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> @Override 	public final void close() throws IOException;1538409688;Performs cleanup and notify the {@link WebSocketHandler}.;@Override_	public final void close() throws IOException {_		close(new CloseStatus(3000, "Go away!"))__	};performs,cleanup,and,notify,the,link,web,socket,handler;override,public,final,void,close,throws,ioexception,close,new,close,status,3000,go,away
AbstractSockJsSession -> public long getTimeSinceLastActive();1375321376;Return the time since the session was last active, or otherwise if the_session is new, the time since the session was created.;public long getTimeSinceLastActive() {_		if (isNew()) {_			return (System.currentTimeMillis() - this.timeCreated)__		}_		else {_			return isActive() ? 0 : System.currentTimeMillis() - this.timeLastActive__		}_	};return,the,time,since,the,session,was,last,active,or,otherwise,if,the,session,is,new,the,time,since,the,session,was,created;public,long,get,time,since,last,active,if,is,new,return,system,current,time,millis,this,time,created,else,return,is,active,0,system,current,time,millis,this,time,last,active
AbstractSockJsSession -> public long getTimeSinceLastActive();1375542207;Return the time since the session was last active, or otherwise if the_session is new, the time since the session was created.;public long getTimeSinceLastActive() {_		if (isNew()) {_			return (System.currentTimeMillis() - this.timeCreated)__		}_		else {_			return isActive() ? 0 : System.currentTimeMillis() - this.timeLastActive__		}_	};return,the,time,since,the,session,was,last,active,or,otherwise,if,the,session,is,new,the,time,since,the,session,was,created;public,long,get,time,since,last,active,if,is,new,return,system,current,time,millis,this,time,created,else,return,is,active,0,system,current,time,millis,this,time,last,active
AbstractSockJsSession -> public long getTimeSinceLastActive();1376429280;Return the time since the session was last active, or otherwise if the_session is new, the time since the session was created.;public long getTimeSinceLastActive() {_		if (isNew()) {_			return (System.currentTimeMillis() - this.timeCreated)__		}_		else {_			return isActive() ? 0 : System.currentTimeMillis() - this.timeLastActive__		}_	};return,the,time,since,the,session,was,last,active,or,otherwise,if,the,session,is,new,the,time,since,the,session,was,created;public,long,get,time,since,last,active,if,is,new,return,system,current,time,millis,this,time,created,else,return,is,active,0,system,current,time,millis,this,time,last,active
AbstractSockJsSession -> public long getTimeSinceLastActive();1376429281;Return the time since the session was last active, or otherwise if the_session is new, the time since the session was created.;public long getTimeSinceLastActive() {_		if (isNew()) {_			return (System.currentTimeMillis() - this.timeCreated)__		}_		else {_			return isActive() ? 0 : System.currentTimeMillis() - this.timeLastActive__		}_	};return,the,time,since,the,session,was,last,active,or,otherwise,if,the,session,is,new,the,time,since,the,session,was,created;public,long,get,time,since,last,active,if,is,new,return,system,current,time,millis,this,time,created,else,return,is,active,0,system,current,time,millis,this,time,last,active
AbstractSockJsSession -> public long getTimeSinceLastActive();1377100811;Return the time since the session was last active, or otherwise if the_session is new, the time since the session was created.;public long getTimeSinceLastActive() {_		if (isNew()) {_			return (System.currentTimeMillis() - this.timeCreated)__		}_		else {_			return isActive() ? 0 : System.currentTimeMillis() - this.timeLastActive__		}_	};return,the,time,since,the,session,was,last,active,or,otherwise,if,the,session,is,new,the,time,since,the,session,was,created;public,long,get,time,since,last,active,if,is,new,return,system,current,time,millis,this,time,created,else,return,is,active,0,system,current,time,millis,this,time,last,active
AbstractSockJsSession -> public long getTimeSinceLastActive();1378265360;Return the time since the session was last active, or otherwise if the_session is new, the time since the session was created.;public long getTimeSinceLastActive() {_		if (isNew()) {_			return (System.currentTimeMillis() - this.timeCreated)__		}_		else {_			return isActive() ? 0 : System.currentTimeMillis() - this.timeLastActive__		}_	};return,the,time,since,the,session,was,last,active,or,otherwise,if,the,session,is,new,the,time,since,the,session,was,created;public,long,get,time,since,last,active,if,is,new,return,system,current,time,millis,this,time,created,else,return,is,active,0,system,current,time,millis,this,time,last,active
AbstractSockJsSession -> public long getTimeSinceLastActive();1385412762;Return the time since the session was last active, or otherwise if the_session is new, the time since the session was created.;public long getTimeSinceLastActive() {_		if (isNew()) {_			return (System.currentTimeMillis() - this.timeCreated)__		}_		else {_			return isActive() ? 0 : System.currentTimeMillis() - this.timeLastActive__		}_	};return,the,time,since,the,session,was,last,active,or,otherwise,if,the,session,is,new,the,time,since,the,session,was,created;public,long,get,time,since,last,active,if,is,new,return,system,current,time,millis,this,time,created,else,return,is,active,0,system,current,time,millis,this,time,last,active
AbstractSockJsSession -> public long getTimeSinceLastActive();1385507478;Return the time since the session was last active, or otherwise if the_session is new, the time since the session was created.;public long getTimeSinceLastActive() {_		if (isNew()) {_			return (System.currentTimeMillis() - this.timeCreated)__		}_		else {_			return isActive() ? 0 : System.currentTimeMillis() - this.timeLastActive__		}_	};return,the,time,since,the,session,was,last,active,or,otherwise,if,the,session,is,new,the,time,since,the,session,was,created;public,long,get,time,since,last,active,if,is,new,return,system,current,time,millis,this,time,created,else,return,is,active,0,system,current,time,millis,this,time,last,active
