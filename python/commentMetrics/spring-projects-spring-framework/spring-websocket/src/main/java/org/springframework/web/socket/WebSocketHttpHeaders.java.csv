commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Returns {@code WebSocketHttpHeaders} object that can only be read, not written to.  */ ;/**  * Returns {@code WebSocketHttpHeaders} object that can only be read, not written to.  */ public static WebSocketHttpHeaders readOnlyWebSocketHttpHeaders(WebSocketHttpHeaders headers) {     return new WebSocketHttpHeaders(headers, true). }
true;public;1;3;/**  * Sets the (new) value of the {@code Sec-WebSocket-Accept} header.  * @param secWebSocketAccept the value of the header  */ ;/**  * Sets the (new) value of the {@code Sec-WebSocket-Accept} header.  * @param secWebSocketAccept the value of the header  */ public void setSecWebSocketAccept(@Nullable String secWebSocketAccept) {     set(SEC_WEBSOCKET_ACCEPT, secWebSocketAccept). }
true;public;0;4;/**  * Returns the value of the {@code Sec-WebSocket-Accept} header.  * @return the value of the header  */ ;/**  * Returns the value of the {@code Sec-WebSocket-Accept} header.  * @return the value of the header  */ @Nullable public String getSecWebSocketAccept() {     return getFirst(SEC_WEBSOCKET_ACCEPT). }
true;public;0;13;/**  * Returns the value of the {@code Sec-WebSocket-Extensions} header.  * @return the value of the header  */ ;/**  * Returns the value of the {@code Sec-WebSocket-Extensions} header.  * @return the value of the header  */ public List<WebSocketExtension> getSecWebSocketExtensions() {     List<String> values = get(SEC_WEBSOCKET_EXTENSIONS).     if (CollectionUtils.isEmpty(values)) {         return Collections.emptyList().     } else {         List<WebSocketExtension> result = new ArrayList<>(values.size()).         for (String value : values) {             result.addAll(WebSocketExtension.parseExtensions(value)).         }         return result.     } }
true;public;1;7;/**  * Sets the (new) value(s) of the {@code Sec-WebSocket-Extensions} header.  * @param extensions the values for the header  */ ;/**  * Sets the (new) value(s) of the {@code Sec-WebSocket-Extensions} header.  * @param extensions the values for the header  */ public void setSecWebSocketExtensions(List<WebSocketExtension> extensions) {     List<String> result = new ArrayList<>(extensions.size()).     for (WebSocketExtension extension : extensions) {         result.add(extension.toString()).     }     set(SEC_WEBSOCKET_EXTENSIONS, toCommaDelimitedString(result)). }
true;public;1;3;/**  * Sets the (new) value of the {@code Sec-WebSocket-Key} header.  * @param secWebSocketKey the value of the header  */ ;/**  * Sets the (new) value of the {@code Sec-WebSocket-Key} header.  * @param secWebSocketKey the value of the header  */ public void setSecWebSocketKey(@Nullable String secWebSocketKey) {     set(SEC_WEBSOCKET_KEY, secWebSocketKey). }
true;public;0;4;/**  * Returns the value of the {@code Sec-WebSocket-Key} header.  * @return the value of the header  */ ;/**  * Returns the value of the {@code Sec-WebSocket-Key} header.  * @return the value of the header  */ @Nullable public String getSecWebSocketKey() {     return getFirst(SEC_WEBSOCKET_KEY). }
true;public;1;3;/**  * Sets the (new) value of the {@code Sec-WebSocket-Protocol} header.  * @param secWebSocketProtocol the value of the header  */ ;/**  * Sets the (new) value of the {@code Sec-WebSocket-Protocol} header.  * @param secWebSocketProtocol the value of the header  */ public void setSecWebSocketProtocol(String secWebSocketProtocol) {     set(SEC_WEBSOCKET_PROTOCOL, secWebSocketProtocol). }
true;public;1;3;/**  * Sets the (new) value of the {@code Sec-WebSocket-Protocol} header.  * @param secWebSocketProtocols the value of the header  */ ;/**  * Sets the (new) value of the {@code Sec-WebSocket-Protocol} header.  * @param secWebSocketProtocols the value of the header  */ public void setSecWebSocketProtocol(List<String> secWebSocketProtocols) {     set(SEC_WEBSOCKET_PROTOCOL, toCommaDelimitedString(secWebSocketProtocols)). }
true;public;0;12;/**  * Returns the value of the {@code Sec-WebSocket-Key} header.  * @return the value of the header  */ ;/**  * Returns the value of the {@code Sec-WebSocket-Key} header.  * @return the value of the header  */ public List<String> getSecWebSocketProtocol() {     List<String> values = get(SEC_WEBSOCKET_PROTOCOL).     if (CollectionUtils.isEmpty(values)) {         return Collections.emptyList().     } else if (values.size() == 1) {         return getValuesAsList(SEC_WEBSOCKET_PROTOCOL).     } else {         return values.     } }
true;public;1;3;/**  * Sets the (new) value of the {@code Sec-WebSocket-Version} header.  * @param secWebSocketVersion the value of the header  */ ;/**  * Sets the (new) value of the {@code Sec-WebSocket-Version} header.  * @param secWebSocketVersion the value of the header  */ public void setSecWebSocketVersion(@Nullable String secWebSocketVersion) {     set(SEC_WEBSOCKET_VERSION, secWebSocketVersion). }
true;public;0;4;/**  * Returns the value of the {@code Sec-WebSocket-Version} header.  * @return the value of the header  */ ;/**  * Returns the value of the {@code Sec-WebSocket-Version} header.  * @return the value of the header  */ @Nullable public String getSecWebSocketVersion() {     return getFirst(SEC_WEBSOCKET_VERSION). }
true;public;1;5;/**  * Return the first header value for the given header name, if any.  * @param headerName the header name  * @return the first header value. or {@code null}  */ ;// Single string methods /**  * Return the first header value for the given header name, if any.  * @param headerName the header name  * @return the first header value. or {@code null}  */ @Override @Nullable public String getFirst(String headerName) {     return this.headers.getFirst(headerName). }
true;public;2;4;/**  * Add the given, single header value under the given name.  * @param headerName  the header name  * @param headerValue the header value  * @throws UnsupportedOperationException if adding headers is not supported  * @see #put(String, List)  * @see #set(String, String)  */ ;/**  * Add the given, single header value under the given name.  * @param headerName  the header name  * @param headerValue the header value  * @throws UnsupportedOperationException if adding headers is not supported  * @see #put(String, List)  * @see #set(String, String)  */ @Override public void add(String headerName, @Nullable String headerValue) {     this.headers.add(headerName, headerValue). }
true;public;2;4;/**  * Set the given, single header value under the given name.  * @param headerName  the header name  * @param headerValue the header value  * @throws UnsupportedOperationException if adding headers is not supported  * @see #put(String, List)  * @see #add(String, String)  */ ;/**  * Set the given, single header value under the given name.  * @param headerName  the header name  * @param headerValue the header value  * @throws UnsupportedOperationException if adding headers is not supported  * @see #put(String, List)  * @see #add(String, String)  */ @Override public void set(String headerName, @Nullable String headerValue) {     this.headers.set(headerName, headerValue). }
false;public;1;4;;@Override public void setAll(Map<String, String> values) {     this.headers.setAll(values). }
false;public;0;4;;@Override public Map<String, String> toSingleValueMap() {     return this.headers.toSingleValueMap(). }
false;public;0;4;;// Map implementation @Override public int size() {     return this.headers.size(). }
false;public;0;4;;@Override public boolean isEmpty() {     return this.headers.isEmpty(). }
false;public;1;4;;@Override public boolean containsKey(Object key) {     return this.headers.containsKey(key). }
false;public;1;4;;@Override public boolean containsValue(Object value) {     return this.headers.containsValue(value). }
false;public;1;4;;@Override public List<String> get(Object key) {     return this.headers.get(key). }
false;public;2;4;;@Override public List<String> put(String key, List<String> value) {     return this.headers.put(key, value). }
false;public;1;4;;@Override public List<String> remove(Object key) {     return this.headers.remove(key). }
false;public;1;4;;@Override public void putAll(Map<? extends String, ? extends List<String>> m) {     this.headers.putAll(m). }
false;public;0;4;;@Override public void clear() {     this.headers.clear(). }
false;public;0;4;;@Override public Set<String> keySet() {     return this.headers.keySet(). }
false;public;0;4;;@Override public Collection<List<String>> values() {     return this.headers.values(). }
false;public;0;4;;@Override public Set<Entry<String, List<String>>> entrySet() {     return this.headers.entrySet(). }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof WebSocketHttpHeaders)) {         return false.     }     WebSocketHttpHeaders otherHeaders = (WebSocketHttpHeaders) other.     return this.headers.equals(otherHeaders.headers). }
false;public;0;4;;@Override public int hashCode() {     return this.headers.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.headers.toString(). }
