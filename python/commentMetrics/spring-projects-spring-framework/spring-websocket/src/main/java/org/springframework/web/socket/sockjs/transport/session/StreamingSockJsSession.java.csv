commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;1;1;/**  * Get the prelude to write to the response before any other data.  * @since 4.2  */ ;/**  * Get the prelude to write to the response before any other data.  * @since 4.2  */ protected abstract byte[] getPrelude(ServerHttpRequest request).
false;protected;3;13;;@Override protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, boolean initialRequest) throws IOException {     byte[] prelude = getPrelude(request).     response.getBody().write(prelude).     response.flush().     if (initialRequest) {         writeFrame(SockJsFrame.openFrame()).     }     flushCache(). }
false;protected;0;22;;@Override protected void flushCache() throws SockJsTransportFailureException {     while (!getMessageCache().isEmpty()) {         String message = getMessageCache().poll().         SockJsMessageCodec messageCodec = getSockJsServiceConfig().getMessageCodec().         SockJsFrame frame = SockJsFrame.messageFrame(messageCodec, message).         writeFrame(frame).         this.byteCount += (frame.getContentBytes().length + 1).         if (logger.isTraceEnabled()) {             logger.trace(this.byteCount + " bytes written so far, " + getMessageCache().size() + " more messages not flushed").         }         if (this.byteCount >= getSockJsServiceConfig().getStreamBytesLimit()) {             logger.trace("Streamed bytes limit reached, recycling current request").             resetRequest().             this.byteCount = 0.             break.         }     }     scheduleHeartbeat(). }
