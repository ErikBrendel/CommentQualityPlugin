commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;25;;@Override protected void handleSuccess(HttpServletRequest request, HttpServletResponse response, UpgradeInfo upgradeInfo, TyrusUpgradeResponse upgradeResponse) throws IOException, ServletException {     response.setStatus(upgradeResponse.getStatus()).     upgradeResponse.getHeaders().forEach((key, value) -> response.addHeader(key, Utils.getHeaderFromList(value))).     AsyncContext asyncContext = request.startAsync().     asyncContext.setTimeout(-1L).     Object nativeRequest = getNativeRequest(request).     BeanWrapper beanWrapper = new BeanWrapperImpl(nativeRequest).     Object httpSocket = beanWrapper.getPropertyValue("connection.connectionHandler.rawConnection").     Object webSocket = webSocketHelper.newInstance(request, httpSocket).     webSocketHelper.upgrade(webSocket, httpSocket, request.getServletContext()).     response.flushBuffer().     boolean isProtected = request.getUserPrincipal() != null.     Writer servletWriter = servletWriterHelper.newInstance(webSocket, isProtected).     Connection connection = upgradeInfo.createConnection(servletWriter, noOpCloseListener).     new BeanWrapperImpl(webSocket).setPropertyValue("connection", connection).     new BeanWrapperImpl(servletWriter).setPropertyValue("connection", connection).     webSocketHelper.registerForReadEvent(webSocket). }
false;private,static;1;3;;private static Class<?> type(String className) throws ClassNotFoundException {     return WebLogicRequestUpgradeStrategy.class.getClassLoader().loadClass(className). }
false;private,static;3;5;;private static Method method(String className, String method, Class<?>... paramTypes) throws ClassNotFoundException, NoSuchMethodException {     return type(className).getDeclaredMethod(method, paramTypes). }
false;private,static;1;6;;private static Object getNativeRequest(ServletRequest request) {     while (request instanceof ServletRequestWrapper) {         request = ((ServletRequestWrapper) request).getRequest().     }     return request. }
false;private;2;9;;private Object newInstance(HttpServletRequest request, @Nullable Object httpSocket) {     try {         Object[] args = new Object[] { httpSocket, null, subjectHelper.getSubject(request) }.         return constructor.newInstance(args).     } catch (Exception ex) {         throw new HandshakeFailureException("Failed to create TyrusMuxableWebSocket", ex).     } }
false;private;3;8;;private void upgrade(Object webSocket, @Nullable Object httpSocket, ServletContext servletContext) {     try {         upgradeMethod.invoke(webSocket, httpSocket, servletContext).     } catch (Exception ex) {         throw new HandshakeFailureException("Failed to upgrade TyrusMuxableWebSocket", ex).     } }
false;private;1;8;;private void registerForReadEvent(Object webSocket) {     try {         readEventMethod.invoke(webSocket).     } catch (Exception ex) {         throw new HandshakeFailureException("Failed to register WebSocket for read event", ex).     } }
false;public;1;15;;public Object getSubject(HttpServletRequest request) {     try {         ServletContext servletContext = request.getServletContext().         Object securityContext = this.securityContextMethod.invoke(servletContext).         Object subject = this.currentUserMethod.invoke(null, securityContext, request).         if (subject == null) {             Object securityProvider = this.providerMethod.invoke(null).             subject = this.anonymousSubjectMethod.invoke(securityProvider).         }         return subject.     } catch (Exception ex) {         throw new HandshakeFailureException("Failed to obtain SubjectHandle", ex).     } }
false;private;2;8;;private Writer newInstance(Object webSocket, boolean isProtected) {     try {         return (Writer) constructor.newInstance(webSocket, null, isProtected).     } catch (Exception ex) {         throw new HandshakeFailureException("Failed to create TyrusServletWriter", ex).     } }
