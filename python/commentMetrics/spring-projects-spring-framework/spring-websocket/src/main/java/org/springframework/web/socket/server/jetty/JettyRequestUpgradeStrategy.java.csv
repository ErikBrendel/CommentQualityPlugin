# id;timestamp;commentText;codeText;commentWords;codeWords
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1386087504;Default constructor that creates {@link WebSocketServerFactory} through its default_constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1389649177;Default constructor that creates {@link WebSocketServerFactory} through its default_constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1389649177;Default constructor that creates {@link WebSocketServerFactory} through its default_constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1405696918;Default constructor that creates {@link WebSocketServerFactory} through its default_constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1413840766;Default constructor that creates {@link WebSocketServerFactory} through its default_constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1435026644;Default constructor that creates {@link WebSocketServerFactory} through its default_constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1435026644;Default constructor that creates {@link WebSocketServerFactory} through its default_constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1444736364;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1467667627;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1467730834;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(new WebSocketServerFactory())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,new,web,socket,server,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1481230408;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this(WebSocketPolicy.newServerPolicy())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1481293291;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.factoryAdapter.setPolicy(WebSocketPolicy.newServerPolicy())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,factory,adapter,set,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1481579380;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.factoryAdapter.setPolicy(WebSocketPolicy.newServerPolicy())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,factory,adapter,set,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1481749189;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.factoryAdapter.setPolicy(WebSocketPolicy.newServerPolicy())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,factory,adapter,set,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1482109228;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.factoryAdapter.setPolicy(WebSocketPolicy.newServerPolicy())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,factory,adapter,set,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1482310573;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.factoryAdapter.setPolicy(WebSocketPolicy.newServerPolicy())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,factory,adapter,set,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1485810955;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.factoryAdapter.setPolicy(WebSocketPolicy.newServerPolicy())__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,factory,adapter,set,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1488819242;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.policy = WebSocketPolicy.newServerPolicy()__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1518770299;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.policy = WebSocketPolicy.newServerPolicy()__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1530174524;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.policy = WebSocketPolicy.newServerPolicy()__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy();1530174524;Default constructor that creates {@link WebSocketServerFactory} through_its default constructor thus using a default {@link WebSocketPolicy}.;public JettyRequestUpgradeStrategy() {_		this.policy = WebSocketPolicy.newServerPolicy()__	};default,constructor,that,creates,link,web,socket,server,factory,through,its,default,constructor,thus,using,a,default,link,web,socket,policy;public,jetty,request,upgrade,strategy,this,policy,web,socket,policy,new,server,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1481293291;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.factoryAdapter.setPolicy(policy)__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,factory,adapter,set,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1481579380;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.factoryAdapter.setPolicy(policy)__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,factory,adapter,set,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1481749189;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.factoryAdapter.setPolicy(policy)__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,factory,adapter,set,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1482109228;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.factoryAdapter.setPolicy(policy)__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,factory,adapter,set,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1482310573;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.factoryAdapter.setPolicy(policy)__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,factory,adapter,set,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1485810955;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.factoryAdapter.setPolicy(policy)__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,factory,adapter,set,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1488819242;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.policy = policy__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1518770299;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.policy = policy__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1530174524;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.policy = policy__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketPolicy policy);1530174524;A constructor accepting a {@link WebSocketPolicy} to be used when_creating the {@link WebSocketServerFactory} instance._@param policy the policy to use_@since 4.3.5;public JettyRequestUpgradeStrategy(WebSocketPolicy policy) {_		Assert.notNull(policy, "WebSocketPolicy must not be null")__		this.policy = policy__	};a,constructor,accepting,a,link,web,socket,policy,to,be,used,when,creating,the,link,web,socket,server,factory,instance,param,policy,the,policy,to,use,since,4,3,5;public,jetty,request,upgrade,strategy,web,socket,policy,policy,assert,not,null,policy,web,socket,policy,must,not,be,null,this,policy,policy
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1386087504;A constructor accepting a {@link WebSocketServerFactory}. This may be useful for_modifying the factory's {@link WebSocketPolicy} via_{@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__		try {_			this.factory.init()__		}_		catch (Exception ex) {_			throw new IllegalStateException("Unable to initialize Jetty WebSocketServerFactory", ex)__		}_	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler,try,this,factory,init,catch,exception,ex,throw,new,illegal,state,exception,unable,to,initialize,jetty,web,socket,server,factory,ex
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1389649177;A constructor accepting a {@link WebSocketServerFactory}. This may be useful for_modifying the factory's {@link WebSocketPolicy} via_{@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__		try {_			this.factory.init()__		}_		catch (Exception ex) {_			throw new IllegalStateException("Unable to initialize Jetty WebSocketServerFactory", ex)__		}_	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler,try,this,factory,init,catch,exception,ex,throw,new,illegal,state,exception,unable,to,initialize,jetty,web,socket,server,factory,ex
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1389649177;A constructor accepting a {@link WebSocketServerFactory}. This may be useful for_modifying the factory's {@link WebSocketPolicy} via_{@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__		try {_			this.factory.init()__		}_		catch (Exception ex) {_			throw new IllegalStateException("Unable to initialize Jetty WebSocketServerFactory", ex)__		}_	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler,try,this,factory,init,catch,exception,ex,throw,new,illegal,state,exception,unable,to,initialize,jetty,web,socket,server,factory,ex
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1405696918;A constructor accepting a {@link WebSocketServerFactory}. This may be useful for_modifying the factory's {@link WebSocketPolicy} via_{@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__		try {_			this.factory.init()__		}_		catch (Exception ex) {_			throw new IllegalStateException("Unable to initialize Jetty WebSocketServerFactory", ex)__		}_	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler,try,this,factory,init,catch,exception,ex,throw,new,illegal,state,exception,unable,to,initialize,jetty,web,socket,server,factory,ex
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1413840766;A constructor accepting a {@link WebSocketServerFactory}. This may be useful for_modifying the factory's {@link WebSocketPolicy} via_{@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__		try {_			this.factory.init()__		}_		catch (Exception ex) {_			throw new IllegalStateException("Unable to initialize Jetty WebSocketServerFactory", ex)__		}_	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler,try,this,factory,init,catch,exception,ex,throw,new,illegal,state,exception,unable,to,initialize,jetty,web,socket,server,factory,ex
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1435026644;A constructor accepting a {@link WebSocketServerFactory}. This may be useful for_modifying the factory's {@link WebSocketPolicy} via_{@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}__			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1435026644;A constructor accepting a {@link WebSocketServerFactory}. This may be useful for_modifying the factory's {@link WebSocketPolicy} via_{@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1444736364;A constructor accepting a {@link WebSocketServerFactory}._This may be useful for modifying the factory's {@link WebSocketPolicy}_via {@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1467667627;A constructor accepting a {@link WebSocketServerFactory}._This may be useful for modifying the factory's {@link WebSocketPolicy}_via {@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1467730834;A constructor accepting a {@link WebSocketServerFactory}._This may be useful for modifying the factory's {@link WebSocketPolicy}_via {@link WebSocketServerFactory#getPolicy()}.;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__		this.factory.setCreator(new WebSocketCreator() {_			@Override_			public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {_				_				return createWebSocket((UpgradeRequest) request, (UpgradeResponse) response)__			}_			_			public Object createWebSocket(UpgradeRequest request, UpgradeResponse response) {_				WebSocketHandlerContainer container = wsContainerHolder.get()__				Assert.state(container != null, "Expected WebSocketHandlerContainer")__				response.setAcceptedSubProtocol(container.getSelectedProtocol())__				response.setExtensions(container.getExtensionConfigs())__				return container.getHandler()__			}_		})__	};a,constructor,accepting,a,link,web,socket,server,factory,this,may,be,useful,for,modifying,the,factory,s,link,web,socket,policy,via,link,web,socket,server,factory,get,policy;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory,this,factory,set,creator,new,web,socket,creator,override,public,object,create,web,socket,servlet,upgrade,request,request,servlet,upgrade,response,response,return,create,web,socket,upgrade,request,request,upgrade,response,response,public,object,create,web,socket,upgrade,request,request,upgrade,response,response,web,socket,handler,container,container,ws,container,holder,get,assert,state,container,null,expected,web,socket,handler,container,response,set,accepted,sub,protocol,container,get,selected,protocol,response,set,extensions,container,get,extension,configs,return,container,get,handler
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1481293291;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factoryAdapter.setFactory(factory)__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,adapter,set,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1481579380;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factoryAdapter.setFactory(factory)__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,adapter,set,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1481749189;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factoryAdapter.setFactory(factory)__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,adapter,set,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1482109228;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factoryAdapter.setFactory(factory)__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,adapter,set,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1482310573;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factoryAdapter.setFactory(factory)__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,adapter,set,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1485810955;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factoryAdapter.setFactory(factory)__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,adapter,set,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1488819242;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1518770299;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1530174524;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory
JettyRequestUpgradeStrategy -> public JettyRequestUpgradeStrategy(WebSocketServerFactory factory);1530174524;A constructor accepting a {@link WebSocketServerFactory}._@param factory the pre-configured factory to use;public JettyRequestUpgradeStrategy(WebSocketServerFactory factory) {_		Assert.notNull(factory, "WebSocketServerFactory must not be null")__		this.factory = factory__	};a,constructor,accepting,a,link,web,socket,server,factory,param,factory,the,pre,configured,factory,to,use;public,jetty,request,upgrade,strategy,web,socket,server,factory,factory,assert,not,null,factory,web,socket,server,factory,must,not,be,null,this,factory,factory
