commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setServletContext(ServletContext servletContext) {     this.servletContext = servletContext. }
false;public;0;22;;@Override public void start() {     if (!isRunning()) {         this.running = true.         try {             if (this.factory == null) {                 this.factory = new WebSocketServerFactory(this.servletContext, this.policy).             }             this.factory.setCreator((request, response) -> {                 WebSocketHandlerContainer container = containerHolder.get().                 Assert.state(container != null, "Expected WebSocketHandlerContainer").                 response.setAcceptedSubProtocol(container.getSelectedProtocol()).                 response.setExtensions(container.getExtensionConfigs()).                 return container.getHandler().             }).             this.factory.start().         } catch (Throwable ex) {             throw new IllegalStateException("Unable to start Jetty WebSocketServerFactory", ex).         }     } }
false;public;0;14;;@Override public void stop() {     if (isRunning()) {         this.running = false.         if (this.factory != null) {             try {                 this.factory.stop().             } catch (Throwable ex) {                 throw new IllegalStateException("Unable to stop Jetty WebSocketServerFactory", ex).             }         }     } }
false;public;0;4;;@Override public boolean isRunning() {     return this.running. }
false;public;0;4;;@Override public String[] getSupportedVersions() {     return new String[] { String.valueOf(HandshakeRFC6455.VERSION) }. }
false;public;1;7;;@Override public List<WebSocketExtension> getSupportedExtensions(ServerHttpRequest request) {     if (this.supportedExtensions == null) {         this.supportedExtensions = buildWebSocketExtensions().     }     return this.supportedExtensions. }
false;private;0;8;;private List<WebSocketExtension> buildWebSocketExtensions() {     Set<String> names = this.factory.getExtensionFactory().getExtensionNames().     List<WebSocketExtension> result = new ArrayList<>(names.size()).     for (String name : names) {         result.add(new WebSocketExtension(name)).     }     return result. }
false;public;7;31;;@Override public void upgrade(ServerHttpRequest request, ServerHttpResponse response, String selectedProtocol, List<WebSocketExtension> selectedExtensions, Principal user, WebSocketHandler wsHandler, Map<String, Object> attributes) throws HandshakeFailureException {     Assert.isInstanceOf(ServletServerHttpRequest.class, request, "ServletServerHttpRequest required").     HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest().     Assert.isInstanceOf(ServletServerHttpResponse.class, response, "ServletServerHttpResponse required").     HttpServletResponse servletResponse = ((ServletServerHttpResponse) response).getServletResponse().     Assert.isTrue(this.factory.isUpgradeRequest(servletRequest, servletResponse), "Not a WebSocket handshake").     JettyWebSocketSession session = new JettyWebSocketSession(attributes, user).     JettyWebSocketHandlerAdapter handlerAdapter = new JettyWebSocketHandlerAdapter(wsHandler, session).     WebSocketHandlerContainer container = new WebSocketHandlerContainer(handlerAdapter, selectedProtocol, selectedExtensions).     try {         containerHolder.set(container).         this.factory.acceptWebSocket(servletRequest, servletResponse).     } catch (IOException ex) {         throw new HandshakeFailureException("Response update failed during upgrade to WebSocket: " + request.getURI(), ex).     } finally {         containerHolder.remove().     } }
false;public;0;3;;public JettyWebSocketHandlerAdapter getHandler() {     return this.handler. }
false;public;0;3;;public String getSelectedProtocol() {     return this.selectedProtocol. }
false;public;0;3;;public List<ExtensionConfig> getExtensionConfigs() {     return this.extensionConfigs. }
