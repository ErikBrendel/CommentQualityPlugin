commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TransportType getTransportType() {     return TransportType.WEBSOCKET. }
false;public;0;3;;public HandshakeHandler getHandshakeHandler() {     return this.handshakeHandler. }
false;public;1;6;;@Override public void setServletContext(ServletContext servletContext) {     if (this.handshakeHandler instanceof ServletContextAware) {         ((ServletContextAware) this.handshakeHandler).setServletContext(servletContext).     } }
false;public;0;9;;@Override public void start() {     if (!isRunning()) {         this.running = true.         if (this.handshakeHandler instanceof Lifecycle) {             ((Lifecycle) this.handshakeHandler).start().         }     } }
false;public;0;9;;@Override public void stop() {     if (isRunning()) {         this.running = false.         if (this.handshakeHandler instanceof Lifecycle) {             ((Lifecycle) this.handshakeHandler).stop().         }     } }
false;public;0;4;;@Override public boolean isRunning() {     return this.running. }
false;public;1;4;;@Override public boolean checkSessionType(SockJsSession session) {     return session instanceof WebSocketServerSockJsSession. }
false;public;3;4;;@Override public AbstractSockJsSession createSession(String id, WebSocketHandler handler, Map<String, Object> attrs) {     return new WebSocketServerSockJsSession(id, getServiceConfig(), handler, attrs). }
false;public;4;14;;@Override public void handleRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, SockJsSession wsSession) throws SockJsException {     WebSocketServerSockJsSession sockJsSession = (WebSocketServerSockJsSession) wsSession.     try {         wsHandler = new SockJsWebSocketHandler(getServiceConfig(), wsHandler, sockJsSession).         this.handshakeHandler.doHandshake(request, response, wsHandler, sockJsSession.getAttributes()).     } catch (Throwable ex) {         sockJsSession.tryCloseWithSockJsTransportError(ex, CloseStatus.SERVER_ERROR).         throw new SockJsTransportFailureException("WebSocket handshake failure", wsSession.getId(), ex).     } }
false;public;4;6;;@Override public boolean doHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler, Map<String, Object> attributes) throws HandshakeFailureException {     return this.handshakeHandler.doHandshake(request, response, handler, attributes). }
