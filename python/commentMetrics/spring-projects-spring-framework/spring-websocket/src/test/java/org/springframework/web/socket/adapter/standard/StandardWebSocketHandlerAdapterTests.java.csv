commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     this.session = mock(Session.class).     this.webSocketHandler = mock(WebSocketHandler.class).     this.webSocketSession = new StandardWebSocketSession(null, null, null, null).     this.adapter = new StandardWebSocketHandlerAdapter(this.webSocketHandler, this.webSocketSession). }
false;public;0;12;;@Test public void onOpen() throws Throwable {     URI uri = URI.create("http://example.org").     given(this.session.getRequestURI()).willReturn(uri).     this.adapter.onOpen(this.session, null).     verify(this.webSocketHandler).afterConnectionEstablished(this.webSocketSession).     verify(this.session, atLeast(2)).addMessageHandler(any(MessageHandler.Whole.class)).     given(this.session.getRequestURI()).willReturn(uri).     assertEquals(uri, this.webSocketSession.getUri()). }
false;public;0;5;;@Test public void onClose() throws Throwable {     this.adapter.onClose(this.session, new CloseReason(CloseCodes.NORMAL_CLOSURE, "reason")).     verify(this.webSocketHandler).afterConnectionClosed(this.webSocketSession, CloseStatus.NORMAL.withReason("reason")). }
false;public;0;6;;@Test public void onError() throws Throwable {     Exception exception = new Exception().     this.adapter.onError(this.session, exception).     verify(this.webSocketHandler).handleTransportError(this.webSocketSession, exception). }
