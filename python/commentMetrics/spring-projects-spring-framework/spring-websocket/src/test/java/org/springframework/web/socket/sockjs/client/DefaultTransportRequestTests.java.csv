commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@SuppressWarnings("unchecked") @Before public void setup() throws Exception {     this.connectCallback = mock(ListenableFutureCallback.class).     this.connectFuture = new SettableListenableFuture<>().     this.connectFuture.addCallback(this.connectCallback).     this.webSocketTransport = new TestTransport("WebSocketTestTransport").     this.xhrTransport = new TestTransport("XhrTestTransport"). }
false;public;0;8;;@Test public void connect() throws Exception {     DefaultTransportRequest request = createTransportRequest(this.webSocketTransport, TransportType.WEBSOCKET).     request.connect(null, this.connectFuture).     WebSocketSession session = mock(WebSocketSession.class).     this.webSocketTransport.getConnectCallback().onSuccess(session).     assertSame(session, this.connectFuture.get()). }
false;public;0;19;;@Test public void fallbackAfterTransportError() throws Exception {     DefaultTransportRequest request1 = createTransportRequest(this.webSocketTransport, TransportType.WEBSOCKET).     DefaultTransportRequest request2 = createTransportRequest(this.xhrTransport, TransportType.XHR_STREAMING).     request1.setFallbackRequest(request2).     request1.connect(null, this.connectFuture).     // Transport error => fallback     this.webSocketTransport.getConnectCallback().onFailure(new IOException("Fake exception 1")).     assertFalse(this.connectFuture.isDone()).     assertTrue(this.xhrTransport.invoked()).     // Transport error => no more fallback     this.xhrTransport.getConnectCallback().onFailure(new IOException("Fake exception 2")).     assertTrue(this.connectFuture.isDone()).     this.thrown.expect(ExecutionException.class).     this.thrown.expectMessage("Fake exception 2").     this.connectFuture.get(). }
false;public;0;23;;@Test public void fallbackAfterTimeout() throws Exception {     TaskScheduler scheduler = mock(TaskScheduler.class).     Runnable sessionCleanupTask = mock(Runnable.class).     DefaultTransportRequest request1 = createTransportRequest(this.webSocketTransport, TransportType.WEBSOCKET).     DefaultTransportRequest request2 = createTransportRequest(this.xhrTransport, TransportType.XHR_STREAMING).     request1.setFallbackRequest(request2).     request1.setTimeoutScheduler(scheduler).     request1.addTimeoutTask(sessionCleanupTask).     request1.connect(null, this.connectFuture).     assertTrue(this.webSocketTransport.invoked()).     assertFalse(this.xhrTransport.invoked()).     // Get and invoke the scheduled timeout task     ArgumentCaptor<Runnable> taskCaptor = ArgumentCaptor.forClass(Runnable.class).     verify(scheduler).schedule(taskCaptor.capture(), any(Date.class)).     verifyNoMoreInteractions(scheduler).     taskCaptor.getValue().run().     assertTrue(this.xhrTransport.invoked()).     verify(sessionCleanupTask).run(). }
false;protected;2;4;;protected DefaultTransportRequest createTransportRequest(Transport transport, TransportType type) throws Exception {     SockJsUrlInfo urlInfo = new SockJsUrlInfo(new URI("http://example.com")).     return new DefaultTransportRequest(urlInfo, new HttpHeaders(), new HttpHeaders(), transport, type, CODEC). }
