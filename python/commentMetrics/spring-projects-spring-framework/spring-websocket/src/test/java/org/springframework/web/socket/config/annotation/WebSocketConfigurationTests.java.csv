commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;@Parameters(name = "server [{0}], client [{1}]") public static Iterable<Object[]> arguments() {     return Arrays.asList(new Object[][] { { new JettyWebSocketTestServer(), new JettyWebSocketClient() }, { new TomcatWebSocketTestServer(), new StandardWebSocketClient() }, { new UndertowTestServer(), new StandardWebSocketClient() } }). }
false;protected;0;4;;@Override protected Class<?>[] getAnnotatedConfigClasses() {     return new Class<?>[] { TestConfig.class }. }
false;public;0;10;;@Test public void registerWebSocketHandler() throws Exception {     WebSocketSession session = this.webSocketClient.doHandshake(new AbstractWebSocketHandler() {     }, getWsBaseUrl() + "/ws").get().     TestHandler serverHandler = this.wac.getBean(TestHandler.class).     assertTrue(serverHandler.connectLatch.await(2, TimeUnit.SECONDS)).     session.close(). }
false;public;0;10;;@Test public void registerWebSocketHandlerWithSockJS() throws Exception {     WebSocketSession session = this.webSocketClient.doHandshake(new AbstractWebSocketHandler() {     }, getWsBaseUrl() + "/sockjs/websocket").get().     TestHandler serverHandler = this.wac.getBean(TestHandler.class).     assertTrue(serverHandler.connectLatch.await(2, TimeUnit.SECONDS)).     session.close(). }
false;public;1;7;;@Override public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {     registry.addHandler(serverHandler(), "/ws").setHandshakeHandler(this.handshakeHandler).     registry.addHandler(serverHandler(), "/sockjs").withSockJS().setTransportHandlerOverrides(new WebSocketTransportHandler(this.handshakeHandler)). }
false;public;0;4;;@Bean public TestHandler serverHandler() {     return new TestHandler(). }
false;public;1;4;;@Override public void afterConnectionEstablished(WebSocketSession session) throws Exception {     this.connectLatch.countDown(). }
