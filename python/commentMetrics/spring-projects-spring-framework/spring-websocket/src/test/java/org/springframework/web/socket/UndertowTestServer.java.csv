commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override public void setup() { }
false;public;2;42;;@Override @SuppressWarnings("deprecation") public void deployConfig(WebApplicationContext wac, Filter... filters) {     DispatcherServletInstanceFactory servletFactory = new DispatcherServletInstanceFactory(wac).     // manually building WebSocketDeploymentInfo in order to avoid class cast exceptions     // with tomcat's implementation when using undertow 1.1.0+     WebSocketDeploymentInfo info = new WebSocketDeploymentInfo().     try {         info.setWorker(Xnio.getInstance().createWorker(OptionMap.EMPTY)).         info.setBuffers(new org.xnio.ByteBufferSlicePool(1024, 1024)).     } catch (IOException ex) {         throw new IllegalStateException(ex).     }     ServletInfo servletInfo = servlet("DispatcherServlet", DispatcherServlet.class, servletFactory).addMapping("/").setAsyncSupported(true).     DeploymentInfo servletBuilder = deployment().setClassLoader(UndertowTestServer.class.getClassLoader()).setDeploymentName("undertow-websocket-test").setContextPath("/").addServlet(servletInfo).addServletContextAttribute(WebSocketDeploymentInfo.ATTRIBUTE_NAME, info).     for (final Filter filter : filters) {         String filterName = filter.getClass().getName().         FilterInstanceFactory filterFactory = new FilterInstanceFactory(filter).         FilterInfo filterInfo = new FilterInfo(filterName, filter.getClass(), filterFactory).         servletBuilder.addFilter(filterInfo.setAsyncSupported(true)).         for (DispatcherType type : DispatcherType.values()) {             servletBuilder.addFilterUrlMapping(filterName, "/*", type).         }     }     try {         this.manager = defaultContainer().addDeployment(servletBuilder).         this.manager.deploy().         HttpHandler httpHandler = this.manager.start().         this.server = Undertow.builder().addHttpListener(0, "localhost").setHandler(httpHandler).build().     } catch (ServletException ex) {         throw new IllegalStateException(ex).     } }
false;public;0;4;;@Override public void undeployConfig() {     this.manager.undeploy(). }
false;public;0;6;;@Override public void start() throws Exception {     this.server.start().     Undertow.ListenerInfo info = this.server.getListenerInfo().get(0).     this.port = ((InetSocketAddress) info.getAddress()).getPort(). }
false;public;0;5;;@Override public void stop() throws Exception {     this.server.stop().     this.port = 0. }
false;public;0;4;;@Override public int getPort() {     return this.port. }
false;public;0;4;;@Override public ServletContext getServletContext() {     return this.manager.getDeployment().getServletContext(). }
false;public;0;4;;@Override public Servlet getInstance() {     return new DispatcherServlet(wac). }
false;public;0;3;;@Override public void release() { }
false;public;0;12;;@Override public InstanceHandle<Servlet> createInstance() throws InstantiationException {     return new InstanceHandle<Servlet>() {          @Override         public Servlet getInstance() {             return new DispatcherServlet(wac).         }          @Override         public void release() {         }     }. }
false;public;0;4;;@Override public Filter getInstance() {     return filter. }
false;public;0;2;;@Override public void release() { }
false;public;0;11;;@Override public InstanceHandle<Filter> createInstance() throws InstantiationException {     return new InstanceHandle<Filter>() {          @Override         public Filter getInstance() {             return filter.         }          @Override         public void release() {         }     }. }
