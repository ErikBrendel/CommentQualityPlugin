commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public void setup() {     Connector connector = new Connector(Http11NioProtocol.class.getName()).     connector.setPort(0).     File baseDir = createTempDir("tomcat").     String baseDirPath = baseDir.getAbsolutePath().     this.tomcatServer = new Tomcat().     this.tomcatServer.setBaseDir(baseDirPath).     this.tomcatServer.setPort(0).     this.tomcatServer.getService().addConnector(connector).     this.tomcatServer.setConnector(connector). }
false;private;1;12;;private File createTempDir(String prefix) {     try {         File tempFolder = File.createTempFile(prefix + ".", "." + getPort()).         tempFolder.delete().         tempFolder.mkdir().         tempFolder.deleteOnExit().         return tempFolder.     } catch (IOException ex) {         throw new IllegalStateException("Unable to create temp directory", ex).     } }
false;public;2;20;;@Override public void deployConfig(WebApplicationContext wac, Filter... filters) {     Assert.state(this.port != -1, "setup() was never called.").     this.context = this.tomcatServer.addContext("", System.getProperty("java.io.tmpdir")).     this.context.addApplicationListener(WsContextListener.class.getName()).     Tomcat.addServlet(this.context, "dispatcherServlet", new DispatcherServlet(wac)).setAsyncSupported(true).     this.context.addServletMappingDecoded("/", "dispatcherServlet").     for (Filter filter : filters) {         FilterDef filterDef = new FilterDef().         filterDef.setFilterName(filter.getClass().getName()).         filterDef.setFilter(filter).         filterDef.setAsyncSupported("true").         this.context.addFilterDef(filterDef).         FilterMap filterMap = new FilterMap().         filterMap.setFilterName(filter.getClass().getName()).         filterMap.addURLPattern("/*").         filterMap.setDispatcher("REQUEST,FORWARD,INCLUDE,ASYNC").         this.context.addFilterMap(filterMap).     } }
false;public;0;7;;@Override public void undeployConfig() {     if (this.context != null) {         this.context.removeServletMapping("/").         this.tomcatServer.getHost().removeChild(this.context).     } }
false;public;0;10;;@Override public void start() throws Exception {     this.tomcatServer.start().     this.port = this.tomcatServer.getConnector().getLocalPort().     this.context.addLifecycleListener(event -> {         if (logger.isDebugEnabled()) {             logger.debug("Event: " + event.getType()).         }     }). }
false;public;0;5;;@Override public void stop() throws Exception {     this.tomcatServer.stop().     this.port = 0. }
false;public;0;4;;@Override public int getPort() {     return this.port. }
false;public;0;4;;@Override public ServletContext getServletContext() {     return this.context.getServletContext(). }
