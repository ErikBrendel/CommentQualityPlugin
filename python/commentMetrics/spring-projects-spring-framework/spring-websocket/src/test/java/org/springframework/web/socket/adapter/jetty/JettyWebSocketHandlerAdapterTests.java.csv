commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() {     this.session = mock(Session.class).     given(this.session.getUpgradeRequest()).willReturn(Mockito.mock(UpgradeRequest.class)).     given(this.session.getUpgradeResponse()).willReturn(Mockito.mock(UpgradeResponse.class)).     this.webSocketHandler = mock(WebSocketHandler.class).     this.webSocketSession = new JettyWebSocketSession(null, null).     this.adapter = new JettyWebSocketHandlerAdapter(this.webSocketHandler, this.webSocketSession). }
false;public;0;5;;@Test public void onOpen() throws Throwable {     this.adapter.onWebSocketConnect(this.session).     verify(this.webSocketHandler).afterConnectionEstablished(this.webSocketSession). }
false;public;0;5;;@Test public void onClose() throws Throwable {     this.adapter.onWebSocketClose(1000, "reason").     verify(this.webSocketHandler).afterConnectionClosed(this.webSocketSession, CloseStatus.NORMAL.withReason("reason")). }
false;public;0;6;;@Test public void onError() throws Throwable {     Exception exception = new Exception().     this.adapter.onWebSocketError(exception).     verify(this.webSocketHandler).handleTransportError(this.webSocketSession, exception). }
