commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void handlerMapping() {     ApplicationContext config = createConfig(TestChannelConfig.class, TestConfigurer.class).     SimpleUrlHandlerMapping hm = (SimpleUrlHandlerMapping) config.getBean(HandlerMapping.class).     assertEquals(1, hm.getOrder()).     Map<String, Object> handlerMap = hm.getHandlerMap().     assertEquals(1, handlerMap.size()).     assertNotNull(handlerMap.get("/simpleBroker")). }
false;public;0;23;;@Test public void clientInboundChannelSendMessage() throws Exception {     ApplicationContext config = createConfig(TestChannelConfig.class, TestConfigurer.class).     TestChannel channel = config.getBean("clientInboundChannel", TestChannel.class).     SubProtocolWebSocketHandler webSocketHandler = config.getBean(SubProtocolWebSocketHandler.class).     List<ChannelInterceptor> interceptors = channel.getInterceptors().     assertEquals(ImmutableMessageChannelInterceptor.class, interceptors.get(interceptors.size() - 1).getClass()).     TestWebSocketSession session = new TestWebSocketSession("s1").     session.setOpen(true).     webSocketHandler.afterConnectionEstablished(session).     webSocketHandler.handleMessage(session, StompTextMessageBuilder.create(StompCommand.SEND).headers("destination:/foo").build()).     Message<?> message = channel.messages.get(0).     StompHeaderAccessor accessor = StompHeaderAccessor.getAccessor(message, StompHeaderAccessor.class).     assertNotNull(accessor).     assertFalse(accessor.isMutable()).     assertEquals(SimpMessageType.MESSAGE, accessor.getMessageType()).     assertEquals("/foo", accessor.getDestination()). }
false;public;0;12;;@Test public void clientOutboundChannel() {     ApplicationContext config = createConfig(TestChannelConfig.class, TestConfigurer.class).     TestChannel channel = config.getBean("clientOutboundChannel", TestChannel.class).     Set<MessageHandler> handlers = channel.getSubscribers().     List<ChannelInterceptor> interceptors = channel.getInterceptors().     assertEquals(ImmutableMessageChannelInterceptor.class, interceptors.get(interceptors.size() - 1).getClass()).     assertEquals(1, handlers.size()).     assertTrue(handlers.contains(config.getBean(SubProtocolWebSocketHandler.class))). }
false;public;0;13;;@Test public void brokerChannel() {     ApplicationContext config = createConfig(TestChannelConfig.class, TestConfigurer.class).     TestChannel channel = config.getBean("brokerChannel", TestChannel.class).     Set<MessageHandler> handlers = channel.getSubscribers().     List<ChannelInterceptor> interceptors = channel.getInterceptors().     assertEquals(ImmutableMessageChannelInterceptor.class, interceptors.get(interceptors.size() - 1).getClass()).     assertEquals(2, handlers.size()).     assertTrue(handlers.contains(config.getBean(SimpleBrokerMessageHandler.class))).     assertTrue(handlers.contains(config.getBean(UserDestinationMessageHandler.class))). }
false;public;0;13;;@Test public void webSocketHandler() {     ApplicationContext config = createConfig(TestChannelConfig.class, TestConfigurer.class).     SubProtocolWebSocketHandler subWsHandler = config.getBean(SubProtocolWebSocketHandler.class).     assertEquals(1024 * 1024, subWsHandler.getSendBufferSizeLimit()).     assertEquals(25 * 1000, subWsHandler.getSendTimeLimit()).     assertEquals(30 * 1000, subWsHandler.getTimeToFirstMessage()).     Map<String, SubProtocolHandler> handlerMap = subWsHandler.getProtocolHandlerMap().     StompSubProtocolHandler protocolHandler = (StompSubProtocolHandler) handlerMap.get("v12.stomp").     assertEquals(128 * 1024, protocolHandler.getMessageSizeLimit()). }
false;public;0;14;;@Test public void taskScheduler() {     ApplicationContext config = createConfig(TestChannelConfig.class, TestConfigurer.class).     String name = "messageBrokerSockJsTaskScheduler".     ThreadPoolTaskScheduler taskScheduler = config.getBean(name, ThreadPoolTaskScheduler.class).     ScheduledThreadPoolExecutor executor = taskScheduler.getScheduledThreadPoolExecutor().     assertEquals(Runtime.getRuntime().availableProcessors(), executor.getCorePoolSize()).     assertTrue(executor.getRemoveOnCancelPolicy()).     SimpleBrokerMessageHandler handler = config.getBean(SimpleBrokerMessageHandler.class).     assertNotNull(handler.getTaskScheduler()).     assertArrayEquals(new long[] { 15000, 15000 }, handler.getHeartbeatValue()). }
false;public;0;16;;@Test public void webSocketMessageBrokerStats() {     ApplicationContext config = createConfig(TestChannelConfig.class, TestConfigurer.class).     String name = "webSocketMessageBrokerStats".     WebSocketMessageBrokerStats stats = config.getBean(name, WebSocketMessageBrokerStats.class).     String actual = stats.toString().     String expected = "WebSocketSession\\[0 current WS\\(0\\)-HttpStream\\(0\\)-HttpPoll\\(0\\), " + "0 total, 0 closed abnormally \\(0 connect failure, 0 send limit, 0 transport error\\)\\], " + "stompSubProtocol\\[processed CONNECT\\(0\\)-CONNECTED\\(0\\)-DISCONNECT\\(0\\)\\], " + "stompBrokerRelay\\[null\\], " + "inboundChannel\\[pool size = \\d, active threads = \\d, queued tasks = \\d, completed tasks = \\d\\], " + "outboundChannel\\[pool size = \\d, active threads = \\d, queued tasks = \\d, completed tasks = \\d\\], " + "sockJsScheduler\\[pool size = \\d, active threads = \\d, queued tasks = \\d, completed tasks = \\d\\]".     assertTrue("\nExpected: " + expected.replace("\\", "") + "\n  Actual: " + actual, actual.matches(expected)). }
false;public;0;14;;@Test public void webSocketHandlerDecorator() throws Exception {     ApplicationContext config = createConfig(WebSocketHandlerDecoratorConfig.class).     WebSocketHandler handler = config.getBean(SubProtocolWebSocketHandler.class).     assertNotNull(handler).     SimpleUrlHandlerMapping mapping = (SimpleUrlHandlerMapping) config.getBean("stompWebSocketHandlerMapping").     WebSocketHttpRequestHandler httpHandler = (WebSocketHttpRequestHandler) mapping.getHandlerMap().get("/test").     handler = httpHandler.getWebSocketHandler().     WebSocketSession session = new TestWebSocketSession("id").     handler.afterConnectionEstablished(session).     assertEquals(true, session.getAttributes().get("decorated")). }
false;private;1;6;;private ApplicationContext createConfig(Class<?>... configClasses) {     AnnotationConfigApplicationContext config = new AnnotationConfigApplicationContext().     config.register(configClasses).     config.refresh().     return config. }
false;public;0;4;;@SubscribeMapping("/foo") public String handleSubscribe() {     return "bar". }
false;public;0;5;;@MessageMapping("/foo") @SendTo("/bar") public String handleMessage() {     return "bar". }
false;public;0;4;;@Bean public TestController subscriptionController() {     return new TestController(). }
false;public;1;4;;@Override public void registerStompEndpoints(StompEndpointRegistry registry) {     registry.addEndpoint("/simpleBroker"). }
false;public;1;7;;@Override public void configureWebSocketTransport(WebSocketTransportRegistration registration) {     registration.setMessageSizeLimit(128 * 1024).     registration.setSendTimeLimit(25 * 1000).     registration.setSendBufferSizeLimit(1024 * 1024).     registration.setTimeToFirstMessage(30 * 1000). }
false;public;1;6;;@Override public void configureMessageBroker(MessageBrokerRegistry registry) {     registry.enableSimpleBroker().setTaskScheduler(mock(TaskScheduler.class)).setHeartbeatValue(new long[] { 15000, 15000 }). }
false;public;0;7;;@Override @Bean public AbstractSubscribableChannel clientInboundChannel() {     TestChannel channel = new TestChannel().     channel.setInterceptors(super.clientInboundChannel().getInterceptors()).     return channel. }
false;public;0;7;;@Override @Bean public AbstractSubscribableChannel clientOutboundChannel() {     TestChannel channel = new TestChannel().     channel.setInterceptors(super.clientOutboundChannel().getInterceptors()).     return channel. }
false;public;0;6;;@Override public AbstractSubscribableChannel brokerChannel() {     TestChannel channel = new TestChannel().     channel.setInterceptors(super.brokerChannel().getInterceptors()).     return channel. }
false;protected;1;4;;@Override protected void registerStompEndpoints(StompEndpointRegistry registry) {     registry.addEndpoint("/test"). }
false;public;1;5;;@Override public void afterConnectionEstablished(WebSocketSession session) throws Exception {     session.getAttributes().put("decorated", true).     super.afterConnectionEstablished(session). }
false;public;1;10;;@Override public WebSocketHandlerDecorator decorate(WebSocketHandler handler) {     return new WebSocketHandlerDecorator(handler) {          @Override         public void afterConnectionEstablished(WebSocketSession session) throws Exception {             session.getAttributes().put("decorated", true).             super.afterConnectionEstablished(session).         }     }. }
false;protected;1;15;;@Override protected void configureWebSocketTransport(WebSocketTransportRegistration registry) {     registry.addDecoratorFactory(new WebSocketHandlerDecoratorFactory() {          @Override         public WebSocketHandlerDecorator decorate(WebSocketHandler handler) {             return new WebSocketHandlerDecorator(handler) {                  @Override                 public void afterConnectionEstablished(WebSocketSession session) throws Exception {                     session.getAttributes().put("decorated", true).                     super.afterConnectionEstablished(session).                 }             }.         }     }). }
false;public;2;5;;@Override public boolean sendInternal(Message<?> message, long timeout) {     this.messages.add(message).     return true. }
