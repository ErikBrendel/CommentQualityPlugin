commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected TestAbstractHttpSockJsSession initSockJsSession() {     return new TestAbstractHttpSockJsSession(this.sockJsConfig, this.webSocketHandler, null). }
false;public;0;14;;@Before public void setup() {     super.setUp().     this.frameFormat = new DefaultSockJsFrameFormat("%s").     this.servletResponse = new MockHttpServletResponse().     this.response = new ServletServerHttpResponse(this.servletResponse).     this.servletRequest = new MockHttpServletRequest().     this.servletRequest.setAsyncSupported(true).     this.request = new ServletServerHttpRequest(this.servletRequest). }
false;public;0;10;;@Test public void handleInitialRequest() throws Exception {     this.session.handleInitialRequest(this.request, this.response, this.frameFormat).     assertEquals("hhh\no", this.servletResponse.getContentAsString()).     assertTrue(this.servletRequest.isAsyncStarted()).     verify(this.webSocketHandler).afterConnectionEstablished(this.session). }
false;public;0;13;;@Test public void handleSuccessiveRequest() throws Exception {     this.session.getMessageCache().add("x").     this.session.handleSuccessiveRequest(this.request, this.response, this.frameFormat).     assertTrue(this.servletRequest.isAsyncStarted()).     assertTrue(this.session.wasHeartbeatScheduled()).     assertTrue(this.session.wasCacheFlushed()).     assertEquals("hhh\n", this.servletResponse.getContentAsString()).     verifyNoMoreInteractions(this.webSocketHandler). }
false;protected;1;4;;@Override protected byte[] getPrelude(ServerHttpRequest request) {     return "hhh\n".getBytes(). }
false;public;0;3;;public boolean wasCacheFlushed() {     return this.cacheFlushed. }
false;public;0;3;;public boolean wasHeartbeatScheduled() {     return this.heartbeatScheduled. }
false;public;1;3;;public void setExceptionOnWriteFrame(IOException exceptionOnWriteFrame) {     this.exceptionOnWriteFrame = exceptionOnWriteFrame. }
false;protected;0;5;;@Override protected void flushCache() {     this.cacheFlushed = true.     scheduleHeartbeat(). }
false;protected;0;4;;@Override protected void scheduleHeartbeat() {     this.heartbeatScheduled = true. }
false;protected,synchronized;1;9;;@Override protected synchronized void writeFrameInternal(SockJsFrame frame) throws IOException {     if (this.exceptionOnWriteFrame != null) {         throw this.exceptionOnWriteFrame.     } else {         super.writeFrameInternal(frame).     } }
