commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setUri(URI uri) {     this.uri = uri. }
false;public;0;4;;@Override public URI getUri() {     return this.uri. }
false;public;0;4;;@Override public HttpHeaders getHandshakeHeaders() {     return this.headers. }
false;public;0;3;;public HttpHeaders getHeaders() {     return this.headers. }
false;public;1;3;;public void setHeaders(HttpHeaders headers) {     this.headers = headers. }
false;public;0;4;;@Override public Principal getPrincipal() {     return this.principal. }
false;public;1;3;;public void setPrincipal(Principal principal) {     this.principal = principal. }
false;public;0;4;;@Override public InetSocketAddress getLocalAddress() {     return this.localAddress. }
false;public;1;3;;public void setLocalAddress(InetSocketAddress localAddress) {     this.localAddress = localAddress. }
false;public;0;4;;@Override public InetSocketAddress getRemoteAddress() {     return this.remoteAddress. }
false;public;1;3;;public void setRemoteAddress(InetSocketAddress remoteAddress) {     this.remoteAddress = remoteAddress. }
false;public;0;4;;@Override public String getAcceptedProtocol() {     return this.subProtocol. }
false;public;1;3;;public void setAcceptedProtocol(String protocol) {     this.subProtocol = protocol. }
false;public;1;3;;@Override public void setTextMessageSizeLimit(int messageSizeLimit) { }
false;public;0;4;;@Override public int getTextMessageSizeLimit() {     return 0. }
false;public;1;3;;@Override public void setBinaryMessageSizeLimit(int messageSizeLimit) { }
false;public;0;4;;@Override public int getBinaryMessageSizeLimit() {     return 0. }
false;public;0;4;;@Override public List<WebSocketExtension> getExtensions() {     return this.extensions. }
false;public;1;3;;public void setExtensions(List<WebSocketExtension> extensions) {     this.extensions = extensions. }
false;public;0;3;;public CloseStatus getCloseStatus() {     return this.closeStatus. }
false;public;0;4;;@Override public boolean isActive() {     return this.active. }
false;public;1;3;;public void setActive(boolean active) {     this.active = active. }
false;public;0;3;;public List<SockJsFrame> getSockJsFramesWritten() {     return this.sockJsFrames. }
false;public;1;3;;public void setExceptionOnWrite(IOException exceptionOnWrite) {     this.exceptionOnWrite = exceptionOnWrite. }
false;public;0;3;;public int getNumberOfLastActiveTimeUpdates() {     return this.numberOfLastActiveTimeUpdates. }
false;public;0;3;;public boolean didCancelHeartbeat() {     return this.cancelledHeartbeat. }
false;protected;0;5;;@Override protected void updateLastActiveTime() {     this.numberOfLastActiveTimeUpdates++.     super.updateLastActiveTime(). }
false;protected;0;5;;@Override protected void cancelHeartbeat() {     this.cancelledHeartbeat = true.     super.cancelHeartbeat(). }
false;protected;1;3;;@Override protected void sendMessageInternal(String message) { }
false;protected;1;7;;@Override protected void writeFrameInternal(SockJsFrame frame) throws IOException {     this.sockJsFrames.add(frame).     if (this.exceptionOnWrite != null) {         throw this.exceptionOnWrite.     } }
false;protected;1;4;;@Override protected void disconnect(CloseStatus status) throws IOException {     this.closeStatus = status. }
