commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     super.setUp().     this.webSocketSession = new TestWebSocketSession().     this.webSocketSession.setOpen(true). }
false;protected;0;5;;@Override protected TestWebSocketServerSockJsSession initSockJsSession() {     return new TestWebSocketServerSockJsSession(this.sockJsConfig, this.webSocketHandler, Collections.<String, Object>emptyMap()). }
false;public;0;10;;@Test public void isActive() throws Exception {     assertFalse(this.session.isActive()).     this.session.initializeDelegateSession(this.webSocketSession).     assertTrue(this.session.isActive()).     this.webSocketSession.setOpen(false).     assertFalse(this.session.isActive()). }
false;public;0;8;;@Test public void afterSessionInitialized() throws Exception {     this.session.initializeDelegateSession(this.webSocketSession).     assertEquals(Collections.singletonList(new TextMessage("o")), this.webSocketSession.getSentMessages()).     assertEquals(Arrays.asList("schedule"), this.session.heartbeatSchedulingEvents).     verify(this.webSocketHandler).afterConnectionEstablished(this.session).     verifyNoMoreInteractions(this.taskScheduler, this.webSocketHandler). }
false;public;1;4;;@Override public void afterConnectionEstablished(WebSocketSession session) throws Exception {     session.sendMessage(new TextMessage("go go")). }
false;public;0;14;;@Test @SuppressWarnings("resource") public void afterSessionInitializedOpenFrameFirst() throws Exception {     TextWebSocketHandler handler = new TextWebSocketHandler() {          @Override         public void afterConnectionEstablished(WebSocketSession session) throws Exception {             session.sendMessage(new TextMessage("go go")).         }     }.     TestWebSocketServerSockJsSession session = new TestWebSocketServerSockJsSession(this.sockJsConfig, handler, null).     session.initializeDelegateSession(this.webSocketSession).     List<TextMessage> expected = Arrays.asList(new TextMessage("o"), new TextMessage("a[\"go go\"]")).     assertEquals(expected, this.webSocketSession.getSentMessages()). }
false;public;0;5;;@Test public void handleMessageEmptyPayload() throws Exception {     this.session.handleMessage(new TextMessage(""), this.webSocketSession).     verifyNoMoreInteractions(this.webSocketHandler). }
false;public;0;9;;@Test public void handleMessage() throws Exception {     TextMessage message = new TextMessage("[\"x\"]").     this.session.handleMessage(message, this.webSocketSession).     verify(this.webSocketHandler).handleMessage(this.session, new TextMessage("x")).     verifyNoMoreInteractions(this.webSocketHandler). }
false;public;0;9;;@Test public void handleMessageBadData() throws Exception {     TextMessage message = new TextMessage("[\"x]").     this.session.handleMessage(message, this.webSocketSession).     this.session.isClosed().     verify(this.webSocketHandler).handleTransportError(same(this.session), any(IOException.class)).     verifyNoMoreInteractions(this.webSocketHandler). }
false;public;0;11;;@Test public void sendMessageInternal() throws Exception {     this.session.initializeDelegateSession(this.webSocketSession).     this.session.sendMessageInternal("x").     assertEquals(Arrays.asList(new TextMessage("o"), new TextMessage("a[\"x\"]")), this.webSocketSession.getSentMessages()).     assertEquals(Arrays.asList("schedule", "cancel", "schedule"), this.session.heartbeatSchedulingEvents). }
false;public;0;8;;@Test public void disconnect() throws Exception {     this.session.initializeDelegateSession(this.webSocketSession).     this.session.close(CloseStatus.NOT_ACCEPTABLE).     assertEquals(CloseStatus.NOT_ACCEPTABLE, this.webSocketSession.getCloseStatus()). }
false;protected;0;4;;@Override protected void scheduleHeartbeat() {     this.heartbeatSchedulingEvents.add("schedule"). }
false;protected;0;4;;@Override protected void cancelHeartbeat() {     this.heartbeatSchedulingEvents.add("cancel"). }
