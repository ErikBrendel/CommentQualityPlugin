commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void serverId() throws Exception {     SockJsUrlInfo info = new SockJsUrlInfo(new URI("http://example.com")).     int serverId = Integer.valueOf(info.getServerId()).     assertTrue("Invalid serverId: " + serverId, serverId >= 0 && serverId < 1000). }
false;public;0;5;;@Test public void sessionId() throws Exception {     SockJsUrlInfo info = new SockJsUrlInfo(new URI("http://example.com")).     assertEquals("Invalid sessionId: " + info.getSessionId(), 32, info.getSessionId().length()). }
false;public;0;11;;@Test public void infoUrl() throws Exception {     testInfoUrl("http", "http").     testInfoUrl("http", "http").     testInfoUrl("https", "https").     testInfoUrl("https", "https").     testInfoUrl("ws", "http").     testInfoUrl("ws", "http").     testInfoUrl("wss", "https").     testInfoUrl("wss", "https"). }
false;private;2;4;;private void testInfoUrl(String scheme, String expectedScheme) throws Exception {     SockJsUrlInfo info = new SockJsUrlInfo(new URI(scheme + "://example.com")).     Assert.assertThat(info.getInfoUrl(), is(equalTo(new URI(expectedScheme + "://example.com/info")))). }
false;public;0;11;;@Test public void transportUrl() throws Exception {     testTransportUrl("http", "http", TransportType.XHR_STREAMING).     testTransportUrl("http", "ws", TransportType.WEBSOCKET).     testTransportUrl("https", "https", TransportType.XHR_STREAMING).     testTransportUrl("https", "wss", TransportType.WEBSOCKET).     testTransportUrl("ws", "http", TransportType.XHR_STREAMING).     testTransportUrl("ws", "ws", TransportType.WEBSOCKET).     testTransportUrl("wss", "https", TransportType.XHR_STREAMING).     testTransportUrl("wss", "wss", TransportType.WEBSOCKET). }
false;private;3;8;;private void testTransportUrl(String scheme, String expectedScheme, TransportType transportType) throws Exception {     SockJsUrlInfo info = new SockJsUrlInfo(new URI(scheme + "://example.com")).     String serverId = info.getServerId().     String sessionId = info.getSessionId().     String transport = transportType.toString().toLowerCase().     URI expected = new URI(expectedScheme + "://example.com/" + serverId + "/" + sessionId + "/" + transport).     assertThat(info.getTransportUrl(transportType), equalTo(expected)). }
