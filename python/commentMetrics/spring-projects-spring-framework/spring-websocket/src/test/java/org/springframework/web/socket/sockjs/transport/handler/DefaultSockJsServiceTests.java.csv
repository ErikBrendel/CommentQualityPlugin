commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Before public void setup() {     super.setup().     MockitoAnnotations.initMocks(this).     Map<String, Object> attributes = Collections.emptyMap().     this.session = new TestSockJsSession(sessionId, new StubSockJsServiceConfig(), this.wsHandler, attributes).     given(this.xhrHandler.getTransportType()).willReturn(TransportType.XHR).     given(this.xhrHandler.createSession(sessionId, this.wsHandler, attributes)).willReturn(this.session).     given(this.xhrSendHandler.getTransportType()).willReturn(TransportType.XHR_SEND).     given(this.wsTransportHandler.getTransportType()).willReturn(TransportType.WEBSOCKET).     this.service = new TransportHandlingSockJsService(this.taskScheduler, this.xhrHandler, this.xhrSendHandler). }
false;public;0;13;;@Test public void defaultTransportHandlers() {     DefaultSockJsService service = new DefaultSockJsService(mock(TaskScheduler.class)).     Map<TransportType, TransportHandler> handlers = service.getTransportHandlers().     assertEquals(6, handlers.size()).     assertNotNull(handlers.get(TransportType.WEBSOCKET)).     assertNotNull(handlers.get(TransportType.XHR)).     assertNotNull(handlers.get(TransportType.XHR_SEND)).     assertNotNull(handlers.get(TransportType.XHR_STREAMING)).     assertNotNull(handlers.get(TransportType.HTML_FILE)).     assertNotNull(handlers.get(TransportType.EVENT_SOURCE)). }
false;public;0;10;;@Test public void defaultTransportHandlersWithOverride() {     XhrReceivingTransportHandler xhrHandler = new XhrReceivingTransportHandler().     DefaultSockJsService service = new DefaultSockJsService(mock(TaskScheduler.class), xhrHandler).     Map<TransportType, TransportHandler> handlers = service.getTransportHandlers().     assertEquals(6, handlers.size()).     assertSame(xhrHandler, handlers.get(xhrHandler.getTransportType())). }
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void invalidAllowedOrigins() {     this.service.setAllowedOrigins(null). }
false;public;0;8;;@Test public void customizedTransportHandlerList() {     TransportHandlingSockJsService service = new TransportHandlingSockJsService(mock(TaskScheduler.class), new XhrPollingTransportHandler(), new XhrReceivingTransportHandler()).     Map<TransportType, TransportHandler> actualHandlers = service.getTransportHandlers().     assertEquals(2, actualHandlers.size()). }
false;public;0;14;;@Test public void handleTransportRequestXhr() throws Exception {     String sockJsPath = sessionUrlPrefix + "xhr".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(200, this.servletResponse.getStatus()).     verify(this.xhrHandler).handleRequest(this.request, this.response, this.wsHandler, this.session).     verify(taskScheduler).scheduleAtFixedRate(any(Runnable.class), eq(service.getDisconnectDelay())).     assertEquals("no-store, no-cache, must-revalidate, max-age=0", this.response.getHeaders().getCacheControl()).     assertNull(this.servletResponse.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN)).     assertNull(this.servletResponse.getHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS)). }
false;public;0;10;;// SPR-12226 @Test public void handleTransportRequestXhrAllowedOriginsMatch() throws Exception {     String sockJsPath = sessionUrlPrefix + "xhr".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.setAllowedOrigins(Arrays.asList("http://mydomain1.com", "http://mydomain2.com")).     this.servletRequest.addHeader(HttpHeaders.ORIGIN, "http://mydomain1.com").     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(200, this.servletResponse.getStatus()). }
false;public;0;10;;// SPR-12226 @Test public void handleTransportRequestXhrAllowedOriginsNoMatch() throws Exception {     String sockJsPath = sessionUrlPrefix + "xhr".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.setAllowedOrigins(Arrays.asList("http://mydomain1.com", "http://mydomain2.com")).     this.servletRequest.addHeader(HttpHeaders.ORIGIN, "http://mydomain3.com").     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(403, this.servletResponse.getStatus()). }
false;public;0;11;;// SPR-13464 @Test public void handleTransportRequestXhrSameOrigin() throws Exception {     String sockJsPath = sessionUrlPrefix + "xhr".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.setAllowedOrigins(Arrays.asList("http://mydomain1.com")).     this.servletRequest.addHeader(HttpHeaders.ORIGIN, "http://mydomain2.com").     this.servletRequest.setServerName("mydomain2.com").     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(200, this.servletResponse.getStatus()). }
false;public;0;11;;// SPR-13545 @Test public void handleInvalidTransportType() throws Exception {     String sockJsPath = sessionUrlPrefix + "invalid".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.setAllowedOrigins(Arrays.asList("http://mydomain1.com")).     this.servletRequest.addHeader(HttpHeaders.ORIGIN, "http://mydomain2.com").     this.servletRequest.setServerName("mydomain2.com").     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(404, this.servletResponse.getStatus()). }
false;public;0;11;;@Test public void handleTransportRequestXhrOptions() throws Exception {     String sockJsPath = sessionUrlPrefix + "xhr".     setRequest("OPTIONS", sockJsPrefix + sockJsPath).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(204, this.servletResponse.getStatus()).     assertNull(this.servletResponse.getHeader("Access-Control-Allow-Origin")).     assertNull(this.servletResponse.getHeader("Access-Control-Allow-Credentials")).     assertNull(this.servletResponse.getHeader("Access-Control-Allow-Methods")). }
false;public;0;8;;@Test public void handleTransportRequestNoSuitableHandler() throws Exception {     String sockJsPath = sessionUrlPrefix + "eventsource".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(404, this.servletResponse.getStatus()). }
false;public;0;25;;@Test public void handleTransportRequestXhrSend() throws Exception {     String sockJsPath = sessionUrlPrefix + "xhr_send".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     // no session yet     assertEquals(404, this.servletResponse.getStatus()).     resetResponse().     sockJsPath = sessionUrlPrefix + "xhr".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     // session created     assertEquals(200, this.servletResponse.getStatus()).     verify(this.xhrHandler).handleRequest(this.request, this.response, this.wsHandler, this.session).     resetResponse().     sockJsPath = sessionUrlPrefix + "xhr_send".     setRequest("POST", sockJsPrefix + sockJsPath).     given(this.xhrSendHandler.checkSessionType(this.session)).willReturn(true).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     // session exists     assertEquals(200, this.servletResponse.getStatus()).     verify(this.xhrSendHandler).handleRequest(this.request, this.response, this.wsHandler, this.session). }
false;public;0;21;;@Test public void handleTransportRequestXhrSendWithDifferentUser() throws Exception {     String sockJsPath = sessionUrlPrefix + "xhr".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     // session created     assertEquals(200, this.servletResponse.getStatus()).     verify(this.xhrHandler).handleRequest(this.request, this.response, this.wsHandler, this.session).     this.session.setPrincipal(new TestPrincipal("little red riding hood")).     this.servletRequest.setUserPrincipal(new TestPrincipal("wolf")).     resetResponse().     reset(this.xhrSendHandler).     sockJsPath = sessionUrlPrefix + "xhr_send".     setRequest("POST", sockJsPrefix + sockJsPath).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(404, this.servletResponse.getStatus()).     verifyNoMoreInteractions(this.xhrSendHandler). }
false;public;0;24;;@Test public void handleTransportRequestWebsocket() throws Exception {     TransportHandlingSockJsService wsService = new TransportHandlingSockJsService(this.taskScheduler, this.wsTransportHandler).     String sockJsPath = "/websocket".     setRequest("GET", sockJsPrefix + sockJsPath).     wsService.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertNotEquals(403, this.servletResponse.getStatus()).     resetRequestAndResponse().     List<String> allowed = Collections.singletonList("http://mydomain1.com").     OriginHandshakeInterceptor interceptor = new OriginHandshakeInterceptor(allowed).     wsService.setHandshakeInterceptors(Collections.singletonList(interceptor)).     setRequest("GET", sockJsPrefix + sockJsPath).     this.servletRequest.addHeader(HttpHeaders.ORIGIN, "http://mydomain1.com").     wsService.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertNotEquals(403, this.servletResponse.getStatus()).     resetRequestAndResponse().     setRequest("GET", sockJsPrefix + sockJsPath).     this.servletRequest.addHeader(HttpHeaders.ORIGIN, "http://mydomain2.com").     wsService.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(403, this.servletResponse.getStatus()). }
false;public;0;22;;@Test public void handleTransportRequestIframe() throws Exception {     String sockJsPath = "/iframe.html".     setRequest("GET", sockJsPrefix + sockJsPath).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertNotEquals(404, this.servletResponse.getStatus()).     assertEquals("SAMEORIGIN", this.servletResponse.getHeader("X-Frame-Options")).     resetRequestAndResponse().     setRequest("GET", sockJsPrefix + sockJsPath).     this.service.setAllowedOrigins(Collections.singletonList("http://mydomain1.com")).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertEquals(404, this.servletResponse.getStatus()).     assertNull(this.servletResponse.getHeader("X-Frame-Options")).     resetRequestAndResponse().     setRequest("GET", sockJsPrefix + sockJsPath).     this.service.setAllowedOrigins(Collections.singletonList("*")).     this.service.handleRequest(this.request, this.response, sockJsPath, this.wsHandler).     assertNotEquals(404, this.servletResponse.getStatus()).     assertNull(this.servletResponse.getHeader("X-Frame-Options")). }
