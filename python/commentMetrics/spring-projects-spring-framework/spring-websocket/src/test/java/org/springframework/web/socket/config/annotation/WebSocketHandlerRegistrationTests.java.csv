commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.taskScheduler = Mockito.mock(TaskScheduler.class).     this.registration = new TestWebSocketHandlerRegistration(). }
false;public;0;22;;@Test public void minimal() {     WebSocketHandler handler = new TextWebSocketHandler().     this.registration.addHandler(handler, "/foo", "/bar").     List<Mapping> mappings = this.registration.getMappings().     assertEquals(2, mappings.size()).     Mapping m1 = mappings.get(0).     assertEquals(handler, m1.webSocketHandler).     assertEquals("/foo", m1.path).     assertNotNull(m1.interceptors).     assertEquals(1, m1.interceptors.length).     assertEquals(OriginHandshakeInterceptor.class, m1.interceptors[0].getClass()).     Mapping m2 = mappings.get(1).     assertEquals(handler, m2.webSocketHandler).     assertEquals("/bar", m2.path).     assertNotNull(m2.interceptors).     assertEquals(1, m2.interceptors.length).     assertEquals(OriginHandshakeInterceptor.class, m2.interceptors[0].getClass()). }
false;public;0;18;;@Test public void interceptors() {     WebSocketHandler handler = new TextWebSocketHandler().     HttpSessionHandshakeInterceptor interceptor = new HttpSessionHandshakeInterceptor().     this.registration.addHandler(handler, "/foo").addInterceptors(interceptor).     List<Mapping> mappings = this.registration.getMappings().     assertEquals(1, mappings.size()).     Mapping mapping = mappings.get(0).     assertEquals(handler, mapping.webSocketHandler).     assertEquals("/foo", mapping.path).     assertNotNull(mapping.interceptors).     assertEquals(2, mapping.interceptors.length).     assertEquals(interceptor, mapping.interceptors[0]).     assertEquals(OriginHandshakeInterceptor.class, mapping.interceptors[1].getClass()). }
false;public;0;18;;@Test public void emptyAllowedOrigin() {     WebSocketHandler handler = new TextWebSocketHandler().     HttpSessionHandshakeInterceptor interceptor = new HttpSessionHandshakeInterceptor().     this.registration.addHandler(handler, "/foo").addInterceptors(interceptor).setAllowedOrigins().     List<Mapping> mappings = this.registration.getMappings().     assertEquals(1, mappings.size()).     Mapping mapping = mappings.get(0).     assertEquals(handler, mapping.webSocketHandler).     assertEquals("/foo", mapping.path).     assertNotNull(mapping.interceptors).     assertEquals(2, mapping.interceptors.length).     assertEquals(interceptor, mapping.interceptors[0]).     assertEquals(OriginHandshakeInterceptor.class, mapping.interceptors[1].getClass()). }
false;public;0;18;;@Test public void interceptorsWithAllowedOrigins() {     WebSocketHandler handler = new TextWebSocketHandler().     HttpSessionHandshakeInterceptor interceptor = new HttpSessionHandshakeInterceptor().     this.registration.addHandler(handler, "/foo").addInterceptors(interceptor).setAllowedOrigins("http://mydomain1.com").     List<Mapping> mappings = this.registration.getMappings().     assertEquals(1, mappings.size()).     Mapping mapping = mappings.get(0).     assertEquals(handler, mapping.webSocketHandler).     assertEquals("/foo", mapping.path).     assertNotNull(mapping.interceptors).     assertEquals(2, mapping.interceptors.length).     assertEquals(interceptor, mapping.interceptors[0]).     assertEquals(OriginHandshakeInterceptor.class, mapping.interceptors[1].getClass()). }
false;public;0;24;;@Test public void interceptorsPassedToSockJsRegistration() {     WebSocketHandler handler = new TextWebSocketHandler().     HttpSessionHandshakeInterceptor interceptor = new HttpSessionHandshakeInterceptor().     this.registration.addHandler(handler, "/foo").addInterceptors(interceptor).setAllowedOrigins("http://mydomain1.com").withSockJS().     this.registration.getSockJsServiceRegistration().setTaskScheduler(this.taskScheduler).     List<Mapping> mappings = this.registration.getMappings().     assertEquals(1, mappings.size()).     Mapping mapping = mappings.get(0).     assertEquals(handler, mapping.webSocketHandler).     assertEquals("/foo/**", mapping.path).     assertNotNull(mapping.sockJsService).     assertTrue(mapping.sockJsService.getAllowedOrigins().contains("http://mydomain1.com")).     List<HandshakeInterceptor> interceptors = mapping.sockJsService.getHandshakeInterceptors().     assertEquals(interceptor, interceptors.get(0)).     assertEquals(OriginHandshakeInterceptor.class, interceptors.get(1).getClass()). }
false;public;0;15;;@Test public void handshakeHandler() {     WebSocketHandler handler = new TextWebSocketHandler().     HandshakeHandler handshakeHandler = new DefaultHandshakeHandler().     this.registration.addHandler(handler, "/foo").setHandshakeHandler(handshakeHandler).     List<Mapping> mappings = this.registration.getMappings().     assertEquals(1, mappings.size()).     Mapping mapping = mappings.get(0).     assertEquals(handler, mapping.webSocketHandler).     assertEquals("/foo", mapping.path).     assertSame(handshakeHandler, mapping.handshakeHandler). }
false;public;0;20;;@Test public void handshakeHandlerPassedToSockJsRegistration() {     WebSocketHandler handler = new TextWebSocketHandler().     HandshakeHandler handshakeHandler = new DefaultHandshakeHandler().     this.registration.addHandler(handler, "/foo").setHandshakeHandler(handshakeHandler).withSockJS().     this.registration.getSockJsServiceRegistration().setTaskScheduler(this.taskScheduler).     List<Mapping> mappings = this.registration.getMappings().     assertEquals(1, mappings.size()).     Mapping mapping = mappings.get(0).     assertEquals(handler, mapping.webSocketHandler).     assertEquals("/foo/**", mapping.path).     assertNotNull(mapping.sockJsService).     WebSocketTransportHandler transportHandler = (WebSocketTransportHandler) mapping.sockJsService.getTransportHandlers().get(TransportType.WEBSOCKET).     assertSame(handshakeHandler, transportHandler.getHandshakeHandler()). }
false;protected;0;4;;@Override protected List<Mapping> createMappings() {     return new ArrayList<>(). }
false;protected;4;6;;@Override protected void addSockJsServiceMapping(List<Mapping> mappings, SockJsService sockJsService, WebSocketHandler wsHandler, String pathPattern) {     mappings.add(new Mapping(wsHandler, pathPattern, sockJsService)). }
false;protected;5;6;;@Override protected void addWebSocketHandlerMapping(List<Mapping> mappings, WebSocketHandler handler, HandshakeHandler handshakeHandler, HandshakeInterceptor[] interceptors, String path) {     mappings.add(new Mapping(handler, path, handshakeHandler, interceptors)). }
