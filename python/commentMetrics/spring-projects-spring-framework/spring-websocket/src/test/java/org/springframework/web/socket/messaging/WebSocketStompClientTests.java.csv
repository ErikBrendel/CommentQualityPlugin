commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void setUp() throws Exception {     MockitoAnnotations.initMocks(this).     WebSocketClient webSocketClient = mock(WebSocketClient.class).     this.stompClient = new TestWebSocketStompClient(webSocketClient).     this.stompClient.setTaskScheduler(this.taskScheduler).     this.stompClient.setStompSession(this.stompSession).     this.webSocketHandlerCaptor = ArgumentCaptor.forClass(WebSocketHandler.class).     this.handshakeFuture = new SettableListenableFuture<>().     when(webSocketClient.doHandshake(this.webSocketHandlerCaptor.capture(), any(), any(URI.class))).thenReturn(this.handshakeFuture). }
false;public;0;9;;@Test public void webSocketHandshakeFailure() throws Exception {     connect().     IllegalStateException handshakeFailure = new IllegalStateException("simulated exception").     this.handshakeFuture.setException(handshakeFailure).     verify(this.stompSession).afterConnectFailure(same(handshakeFailure)). }
false;public;0;5;;@Test public void webSocketConnectionEstablished() throws Exception {     connect().afterConnectionEstablished(this.webSocketSession).     verify(this.stompSession).afterConnected(notNull()). }
false;public;0;7;;@Test public void webSocketTransportError() throws Exception {     IllegalStateException exception = new IllegalStateException("simulated exception").     connect().handleTransportError(this.webSocketSession, exception).     verify(this.stompSession).handleFailure(same(exception)). }
false;public;0;5;;@Test public void webSocketConnectionClosed() throws Exception {     connect().afterConnectionClosed(this.webSocketSession, CloseStatus.NORMAL).     verify(this.stompSession).afterConnectionClosed(). }
false;public;0;17;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void handleWebSocketMessage() throws Exception {     String text = "SEND\na:alpha\n\nMessage payload\0".     connect().handleMessage(this.webSocketSession, new TextMessage(text)).     ArgumentCaptor<Message> captor = ArgumentCaptor.forClass(Message.class).     verify(this.stompSession).handleMessage(captor.capture()).     Message<byte[]> message = captor.getValue().     assertNotNull(message).     StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class).     StompHeaders headers = StompHeaders.readOnlyStompHeaders(accessor.toNativeHeaderMap()).     assertEquals(StompCommand.SEND, accessor.getCommand()).     assertEquals("alpha", headers.getFirst("a")).     assertEquals("Message payload", new String(message.getPayload(), StandardCharsets.UTF_8)). }
false;public;0;24;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void handleWebSocketMessageSplitAcrossTwoMessage() throws Exception {     WebSocketHandler webSocketHandler = connect().     String part1 = "SEND\na:alpha\n\nMessage".     webSocketHandler.handleMessage(this.webSocketSession, new TextMessage(part1)).     verifyNoMoreInteractions(this.stompSession).     String part2 = " payload\0".     webSocketHandler.handleMessage(this.webSocketSession, new TextMessage(part2)).     ArgumentCaptor<Message> captor = ArgumentCaptor.forClass(Message.class).     verify(this.stompSession).handleMessage(captor.capture()).     Message<byte[]> message = captor.getValue().     assertNotNull(message).     StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class).     StompHeaders headers = StompHeaders.readOnlyStompHeaders(accessor.toNativeHeaderMap()).     assertEquals(StompCommand.SEND, accessor.getCommand()).     assertEquals("alpha", headers.getFirst("a")).     assertEquals("Message payload", new String(message.getPayload(), StandardCharsets.UTF_8)). }
false;public;0;17;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void handleWebSocketMessageBinary() throws Exception {     String text = "SEND\na:alpha\n\nMessage payload\0".     connect().handleMessage(this.webSocketSession, new BinaryMessage(text.getBytes(StandardCharsets.UTF_8))).     ArgumentCaptor<Message> captor = ArgumentCaptor.forClass(Message.class).     verify(this.stompSession).handleMessage(captor.capture()).     Message<byte[]> message = captor.getValue().     assertNotNull(message).     StompHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class).     StompHeaders headers = StompHeaders.readOnlyStompHeaders(accessor.toNativeHeaderMap()).     assertEquals(StompCommand.SEND, accessor.getCommand()).     assertEquals("alpha", headers.getFirst("a")).     assertEquals("Message payload", new String(message.getPayload(), StandardCharsets.UTF_8)). }
false;public;0;5;;@Test public void handleWebSocketMessagePong() throws Exception {     connect().handleMessage(this.webSocketSession, new PongMessage()).     verifyNoMoreInteractions(this.stompSession). }
false;public;0;14;;@Test public void sendWebSocketMessage() throws Exception {     StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.SEND).     accessor.setDestination("/topic/foo").     byte[] payload = "payload".getBytes(StandardCharsets.UTF_8).     getTcpConnection().send(MessageBuilder.createMessage(payload, accessor.getMessageHeaders())).     ArgumentCaptor<TextMessage> textMessageCaptor = ArgumentCaptor.forClass(TextMessage.class).     verify(this.webSocketSession).sendMessage(textMessageCaptor.capture()).     TextMessage textMessage = textMessageCaptor.getValue().     assertNotNull(textMessage).     assertEquals("SEND\ndestination:/topic/foo\ncontent-length:7\n\npayload\0", textMessage.getPayload()). }
false;public;0;16;;@Test public void sendWebSocketBinary() throws Exception {     StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.SEND).     accessor.setDestination("/b").     accessor.setContentType(MimeTypeUtils.APPLICATION_OCTET_STREAM).     byte[] payload = "payload".getBytes(StandardCharsets.UTF_8).     getTcpConnection().send(MessageBuilder.createMessage(payload, accessor.getMessageHeaders())).     ArgumentCaptor<BinaryMessage> binaryMessageCaptor = ArgumentCaptor.forClass(BinaryMessage.class).     verify(this.webSocketSession).sendMessage(binaryMessageCaptor.capture()).     BinaryMessage binaryMessage = binaryMessageCaptor.getValue().     assertNotNull(binaryMessage).     assertEquals("SEND\ndestination:/b\ncontent-type:application/octet-stream\ncontent-length:7\n\npayload\0", new String(binaryMessage.getPayload().array(), StandardCharsets.UTF_8)). }
false;public;0;8;;@Test public void heartbeatDefaultValue() throws Exception {     WebSocketStompClient stompClient = new WebSocketStompClient(mock(WebSocketClient.class)).     assertArrayEquals(new long[] { 0, 0 }, stompClient.getDefaultHeartbeat()).     StompHeaders connectHeaders = stompClient.processConnectHeaders(null).     assertArrayEquals(new long[] { 0, 0 }, connectHeaders.getHeartbeat()). }
false;public;0;9;;@Test public void heartbeatDefaultValueWithScheduler() throws Exception {     WebSocketStompClient stompClient = new WebSocketStompClient(mock(WebSocketClient.class)).     stompClient.setTaskScheduler(mock(TaskScheduler.class)).     assertArrayEquals(new long[] { 10000, 10000 }, stompClient.getDefaultHeartbeat()).     StompHeaders connectHeaders = stompClient.processConnectHeaders(null).     assertArrayEquals(new long[] { 10000, 10000 }, connectHeaders.getHeartbeat()). }
false;public;0;12;;@Test public void heartbeatDefaultValueSetWithoutScheduler() throws Exception {     WebSocketStompClient stompClient = new WebSocketStompClient(mock(WebSocketClient.class)).     stompClient.setDefaultHeartbeat(new long[] { 5, 5 }).     try {         stompClient.processConnectHeaders(null).         fail("Expected IllegalStateException").     } catch (IllegalStateException ex) {     // ignore     } }
false;public;0;8;;@Test public void readInactivityAfterDelayHasElapsed() throws Exception {     TcpConnection<byte[]> tcpConnection = getTcpConnection().     Runnable runnable = mock(Runnable.class).     long delay = 2.     tcpConnection.onReadInactivity(runnable, delay).     testInactivityTaskScheduling(runnable, delay, 10). }
false;public;0;8;;@Test public void readInactivityBeforeDelayHasElapsed() throws Exception {     TcpConnection<byte[]> tcpConnection = getTcpConnection().     Runnable runnable = mock(Runnable.class).     long delay = 10000.     tcpConnection.onReadInactivity(runnable, delay).     testInactivityTaskScheduling(runnable, delay, 0). }
false;public;0;8;;@Test public void writeInactivityAfterDelayHasElapsed() throws Exception {     TcpConnection<byte[]> tcpConnection = getTcpConnection().     Runnable runnable = mock(Runnable.class).     long delay = 2.     tcpConnection.onWriteInactivity(runnable, delay).     testInactivityTaskScheduling(runnable, delay, 10). }
false;public;0;8;;@Test public void writeInactivityBeforeDelayHasElapsed() throws Exception {     TcpConnection<byte[]> tcpConnection = getTcpConnection().     Runnable runnable = mock(Runnable.class).     long delay = 1000.     tcpConnection.onWriteInactivity(runnable, delay).     testInactivityTaskScheduling(runnable, delay, 0). }
false;public;0;16;;@Test @SuppressWarnings({ "rawtypes", "unchecked" }) public void cancelInactivityTasks() throws Exception {     TcpConnection<byte[]> tcpConnection = getTcpConnection().     ScheduledFuture future = mock(ScheduledFuture.class).     when(this.taskScheduler.scheduleWithFixedDelay(any(), eq(1L))).thenReturn(future).     tcpConnection.onReadInactivity(mock(Runnable.class), 2L).     tcpConnection.onWriteInactivity(mock(Runnable.class), 2L).     this.webSocketHandlerCaptor.getValue().afterConnectionClosed(this.webSocketSession, CloseStatus.NORMAL).     verify(future, times(2)).cancel(true).     verifyNoMoreInteractions(future). }
false;private;0;10;;private WebSocketHandler connect() {     this.stompClient.connect("/foo", mock(StompSessionHandler.class)).     verify(this.stompSession).getSessionFuture().     verifyNoMoreInteractions(this.stompSession).     WebSocketHandler webSocketHandler = this.webSocketHandlerCaptor.getValue().     assertNotNull(webSocketHandler).     return webSocketHandler. }
false;private;0;6;;@SuppressWarnings("unchecked") private TcpConnection<byte[]> getTcpConnection() throws Exception {     WebSocketHandler webSocketHandler = connect().     webSocketHandler.afterConnectionEstablished(this.webSocketSession).     return (TcpConnection<byte[]>) webSocketHandler. }
false;private;3;22;;private void testInactivityTaskScheduling(Runnable runnable, long delay, long sleepTime) throws InterruptedException {     ArgumentCaptor<Runnable> inactivityTaskCaptor = ArgumentCaptor.forClass(Runnable.class).     verify(this.taskScheduler).scheduleWithFixedDelay(inactivityTaskCaptor.capture(), eq(delay / 2)).     verifyNoMoreInteractions(this.taskScheduler).     if (sleepTime > 0) {         Thread.sleep(sleepTime).     }     Runnable inactivityTask = inactivityTaskCaptor.getValue().     assertNotNull(inactivityTask).     inactivityTask.run().     if (sleepTime > 0) {         verify(runnable).run().     } else {         verifyNoMoreInteractions(runnable).     } }
false;public;1;3;;public void setStompSession(ConnectionHandlingStompSession stompSession) {     this.stompSession = stompSession. }
false;protected;2;4;;@Override protected ConnectionHandlingStompSession createSession(StompHeaders headers, StompSessionHandler handler) {     return this.stompSession. }
