commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() throws Exception {     this.server = new TestJettyWebSocketServer(new TextWebSocketHandler()).     this.server.start().     this.client = new JettyWebSocketClient().     this.client.start().     this.wsUrl = "ws://localhost:" + this.server.getPort() + "/test". }
false;public;0;6;;@After public void teardown() throws Exception {     this.wsSession.close().     this.client.stop().     this.server.stop(). }
false;public;0;11;;@Test public void doHandshake() throws Exception {     WebSocketHttpHeaders headers = new WebSocketHttpHeaders().     headers.setSecWebSocketProtocol(Arrays.asList("echo")).     this.wsSession = this.client.doHandshake(new TextWebSocketHandler(), headers, new URI(this.wsUrl)).get().     assertEquals(this.wsUrl, this.wsSession.getUri().toString()).     assertEquals("echo", this.wsSession.getAcceptedProtocol()). }
false;public;0;12;;@Test public void doHandshakeWithTaskExecutor() throws Exception {     WebSocketHttpHeaders headers = new WebSocketHttpHeaders().     headers.setSecWebSocketProtocol(Arrays.asList("echo")).     this.client.setTaskExecutor(new SimpleAsyncTaskExecutor()).     this.wsSession = this.client.doHandshake(new TextWebSocketHandler(), headers, new URI(this.wsUrl)).get().     assertEquals(this.wsUrl, this.wsSession.getUri().toString()).     assertEquals("echo", this.wsSession.getAcceptedProtocol()). }
false;public;2;8;;@Override public Object createWebSocket(ServletUpgradeRequest req, ServletUpgradeResponse resp) {     if (!CollectionUtils.isEmpty(req.getSubProtocols())) {         resp.setAcceptedSubProtocol(req.getSubProtocols().get(0)).     }     JettyWebSocketSession session = new JettyWebSocketSession(null, null).     return new JettyWebSocketHandlerAdapter(webSocketHandler, session). }
false;public;1;13;;@Override public void configure(WebSocketServletFactory factory) {     factory.setCreator(new WebSocketCreator() {          @Override         public Object createWebSocket(ServletUpgradeRequest req, ServletUpgradeResponse resp) {             if (!CollectionUtils.isEmpty(req.getSubProtocols())) {                 resp.setAcceptedSubProtocol(req.getSubProtocols().get(0)).             }             JettyWebSocketSession session = new JettyWebSocketSession(null, null).             return new JettyWebSocketHandlerAdapter(webSocketHandler, session).         }     }). }
false;public;0;3;;public void start() throws Exception {     this.server.start(). }
false;public;0;3;;public void stop() throws Exception {     this.server.stop(). }
false;public;0;3;;public int getPort() {     return ((ServerConnector) this.server.getConnectors()[0]).getLocalPort(). }
