commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() throws Exception {     SockJsUrlInfo urlInfo = new SockJsUrlInfo(new URI("http://example.com")).     Transport transport = mock(Transport.class).     TransportRequest request = new DefaultTransportRequest(urlInfo, null, null, transport, TransportType.XHR, CODEC).     this.handler = mock(WebSocketHandler.class).     this.connectFuture = new SettableListenableFuture<>().     this.session = new TestClientSockJsSession(request, this.handler, this.connectFuture). }
false;public;0;10;;@Test public void handleFrameOpen() throws Exception {     assertThat(this.session.isOpen(), is(false)).     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     assertThat(this.session.isOpen(), is(true)).     assertTrue(this.connectFuture.isDone()).     assertThat(this.connectFuture.get(), sameInstance(this.session)).     verify(this.handler).afterConnectionEstablished(this.session).     verifyNoMoreInteractions(this.handler). }
false;public;0;7;;@Test public void handleFrameOpenWhenStatusNotNew() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     assertThat(this.session.isOpen(), is(true)).     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     assertThat(this.session.disconnectStatus, equalTo(new CloseStatus(1006, "Server lost session"))). }
false;public;0;6;;@Test public void handleFrameOpenWithWebSocketHandlerException() throws Exception {     willThrow(new IllegalStateException("Fake error")).given(this.handler).afterConnectionEstablished(this.session).     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     assertThat(this.session.isOpen(), is(true)). }
false;public;0;9;;@Test public void handleFrameMessage() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.session.handleFrame(SockJsFrame.messageFrame(CODEC, "foo", "bar").getContent()).     verify(this.handler).afterConnectionEstablished(this.session).     verify(this.handler).handleMessage(this.session, new TextMessage("foo")).     verify(this.handler).handleMessage(this.session, new TextMessage("bar")).     verifyNoMoreInteractions(this.handler). }
false;public;0;8;;@Test public void handleFrameMessageWhenNotOpen() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.session.close().     reset(this.handler).     this.session.handleFrame(SockJsFrame.messageFrame(CODEC, "foo", "bar").getContent()).     verifyNoMoreInteractions(this.handler). }
false;public;0;9;;@Test public void handleFrameMessageWithBadData() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.session.handleFrame("a['bad data").     assertThat(this.session.isOpen(), equalTo(false)).     assertThat(this.session.disconnectStatus, equalTo(CloseStatus.BAD_DATA)).     verify(this.handler).afterConnectionEstablished(this.session).     verifyNoMoreInteractions(this.handler). }
false;public;0;14;;@Test public void handleFrameMessageWithWebSocketHandlerException() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     willThrow(new IllegalStateException("Fake error")).given(this.handler).handleMessage(this.session, new TextMessage("foo")).     willThrow(new IllegalStateException("Fake error")).given(this.handler).handleMessage(this.session, new TextMessage("bar")).     this.session.handleFrame(SockJsFrame.messageFrame(CODEC, "foo", "bar").getContent()).     assertThat(this.session.isOpen(), equalTo(true)).     verify(this.handler).afterConnectionEstablished(this.session).     verify(this.handler).handleMessage(this.session, new TextMessage("foo")).     verify(this.handler).handleMessage(this.session, new TextMessage("bar")).     verifyNoMoreInteractions(this.handler). }
false;public;0;9;;@Test public void handleFrameClose() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.session.handleFrame(SockJsFrame.closeFrame(1007, "").getContent()).     assertThat(this.session.isOpen(), equalTo(false)).     assertThat(this.session.disconnectStatus, equalTo(new CloseStatus(1007, ""))).     verify(this.handler).afterConnectionEstablished(this.session).     verifyNoMoreInteractions(this.handler). }
false;public;0;7;;@Test public void handleTransportError() throws Exception {     final IllegalStateException ex = new IllegalStateException("Fake error").     this.session.handleTransportError(ex).     verify(this.handler).handleTransportError(this.session, ex).     verifyNoMoreInteractions(this.handler). }
false;public;0;9;;@Test public void afterTransportClosed() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.session.afterTransportClosed(CloseStatus.SERVER_ERROR).     assertThat(this.session.isOpen(), equalTo(false)).     verify(this.handler).afterConnectionEstablished(this.session).     verify(this.handler).afterConnectionClosed(this.session, CloseStatus.SERVER_ERROR).     verifyNoMoreInteractions(this.handler). }
false;public;0;9;;@Test public void close() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.session.close().     assertThat(this.session.isOpen(), equalTo(false)).     assertThat(this.session.disconnectStatus, equalTo(CloseStatus.NORMAL)).     verify(this.handler).afterConnectionEstablished(this.session).     verifyNoMoreInteractions(this.handler). }
false;public;0;6;;@Test public void closeWithStatus() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.session.close(new CloseStatus(3000, "reason")).     assertThat(this.session.disconnectStatus, equalTo(new CloseStatus(3000, "reason"))). }
false;public;0;7;;@Test public void closeWithNullStatus() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.thrown.expect(IllegalArgumentException.class).     this.thrown.expectMessage("Invalid close status").     this.session.close(null). }
false;public;0;7;;@Test public void closeWithStatusOutOfRange() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.thrown.expect(IllegalArgumentException.class).     this.thrown.expectMessage("Invalid close status").     this.session.close(new CloseStatus(2999, "reason")). }
false;public;0;5;;@Test public void timeoutTask() {     this.session.getTimeoutTask().run().     assertThat(this.session.disconnectStatus, equalTo(new CloseStatus(2007, "Transport timed out"))). }
false;public;0;6;;@Test public void send() throws Exception {     this.session.handleFrame(SockJsFrame.openFrame().getContent()).     this.session.sendMessage(new TextMessage("foo")).     assertThat(this.session.sentMessage, equalTo(new TextMessage("[\"foo\"]"))). }
false;protected;1;4;;@Override protected void sendInternal(TextMessage textMessage) throws IOException {     this.sentMessage = textMessage. }
false;protected;1;4;;@Override protected void disconnect(CloseStatus status) throws IOException {     this.disconnectStatus = status. }
false;public;0;4;;@Override public InetSocketAddress getLocalAddress() {     return null. }
false;public;0;4;;@Override public InetSocketAddress getRemoteAddress() {     return null. }
false;public;0;4;;@Override public String getAcceptedProtocol() {     return null. }
false;public;1;4;;@Override public void setTextMessageSizeLimit(int messageSizeLimit) { }
false;public;0;4;;@Override public int getTextMessageSizeLimit() {     return 0. }
false;public;1;4;;@Override public void setBinaryMessageSizeLimit(int messageSizeLimit) { }
false;public;0;4;;@Override public int getBinaryMessageSizeLimit() {     return 0. }
false;public;0;4;;@Override public List<WebSocketExtension> getExtensions() {     return null. }
