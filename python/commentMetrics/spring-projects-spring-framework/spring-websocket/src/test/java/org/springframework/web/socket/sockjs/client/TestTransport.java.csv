commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<TransportType> getTransportTypes() {     return Collections.singletonList(TransportType.WEBSOCKET). }
false;public;0;3;;public TransportRequest getRequest() {     return this.request. }
false;public;0;3;;public boolean invoked() {     return this.future != null. }
false;public;0;6;;@SuppressWarnings("unchecked") public ListenableFutureCallback<WebSocketSession> getConnectCallback() {     ArgumentCaptor<ListenableFutureCallback> captor = ArgumentCaptor.forClass(ListenableFutureCallback.class).     verify(this.future).addCallback(captor.capture()).     return captor.getValue(). }
false;public;2;7;;@SuppressWarnings("unchecked") @Override public ListenableFuture<WebSocketSession> connect(TransportRequest request, WebSocketHandler handler) {     this.request = request.     this.future = mock(ListenableFuture.class).     return this.future. }
false;public;0;4;;@Override public String toString() {     return "TestTransport[" + name + "]". }
false;public;0;6;;@Override public List<TransportType> getTransportTypes() {     return (isXhrStreamingDisabled() ? Collections.singletonList(TransportType.XHR) : Arrays.asList(TransportType.XHR_STREAMING, TransportType.XHR)). }
false;public;1;3;;public void setStreamingDisabled(boolean streamingDisabled) {     this.streamingDisabled = streamingDisabled. }
false;public;0;4;;@Override public boolean isXhrStreamingDisabled() {     return this.streamingDisabled. }
false;public;3;3;;@Override public void executeSendRequest(URI transportUrl, HttpHeaders headers, TextMessage message) { }
false;public;2;4;;@Override public String executeInfoRequest(URI infoUrl, HttpHeaders headers) {     return null. }
