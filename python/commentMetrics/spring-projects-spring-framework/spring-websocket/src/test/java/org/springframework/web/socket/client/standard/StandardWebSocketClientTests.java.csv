commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     this.headers = new WebSocketHttpHeaders().     this.wsHandler = new AbstractWebSocketHandler() {     }.     this.wsContainer = mock(WebSocketContainer.class).     this.wsClient = new StandardWebSocketClient(this.wsContainer). }
false;public;0;8;;@Test public void testGetLocalAddress() throws Exception {     URI uri = new URI("ws://localhost/abc").     WebSocketSession session = this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get().     assertNotNull(session.getLocalAddress()).     assertEquals(80, session.getLocalAddress().getPort()). }
false;public;0;8;;@Test public void testGetLocalAddressWss() throws Exception {     URI uri = new URI("wss://localhost/abc").     WebSocketSession session = this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get().     assertNotNull(session.getLocalAddress()).     assertEquals(443, session.getLocalAddress().getPort()). }
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void testGetLocalAddressNoScheme() throws Exception {     URI uri = new URI("localhost/abc").     this.wsClient.doHandshake(this.wsHandler, this.headers, uri). }
false;public;0;9;;@Test public void testGetRemoteAddress() throws Exception {     URI uri = new URI("wss://localhost/abc").     WebSocketSession session = this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get().     assertNotNull(session.getRemoteAddress()).     assertEquals("localhost", session.getRemoteAddress().getHostName()).     assertEquals(443, session.getLocalAddress().getPort()). }
false;public;0;13;;@Test public void handshakeHeaders() throws Exception {     URI uri = new URI("ws://localhost/abc").     List<String> protocols = Collections.singletonList("abc").     this.headers.setSecWebSocketProtocol(protocols).     this.headers.add("foo", "bar").     WebSocketSession session = this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get().     assertEquals(1, session.getHandshakeHeaders().size()).     assertEquals("bar", session.getHandshakeHeaders().getFirst("foo")). }
false;public;0;15;;@Test public void clientEndpointConfig() throws Exception {     URI uri = new URI("ws://localhost/abc").     List<String> protocols = Collections.singletonList("abc").     this.headers.setSecWebSocketProtocol(protocols).     this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get().     ArgumentCaptor<ClientEndpointConfig> captor = ArgumentCaptor.forClass(ClientEndpointConfig.class).     verify(this.wsContainer).connectToServer(any(Endpoint.class), captor.capture(), any(URI.class)).     ClientEndpointConfig endpointConfig = captor.getValue().     assertEquals(protocols, endpointConfig.getPreferredSubprotocols()). }
false;public;0;15;;@Test public void clientEndpointConfigWithUserProperties() throws Exception {     Map<String, Object> userProperties = Collections.singletonMap("foo", "bar").     URI uri = new URI("ws://localhost/abc").     this.wsClient.setUserProperties(userProperties).     this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get().     ArgumentCaptor<ClientEndpointConfig> captor = ArgumentCaptor.forClass(ClientEndpointConfig.class).     verify(this.wsContainer).connectToServer(any(Endpoint.class), captor.capture(), any(URI.class)).     ClientEndpointConfig endpointConfig = captor.getValue().     assertEquals(userProperties, endpointConfig.getUserProperties()). }
false;public;0;16;;@Test public void standardWebSocketClientConfiguratorInsertsHandshakeHeaders() throws Exception {     URI uri = new URI("ws://localhost/abc").     this.headers.add("foo", "bar").     this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get().     ArgumentCaptor<ClientEndpointConfig> captor = ArgumentCaptor.forClass(ClientEndpointConfig.class).     verify(this.wsContainer).connectToServer(any(Endpoint.class), captor.capture(), any(URI.class)).     ClientEndpointConfig endpointConfig = captor.getValue().     Map<String, List<String>> headers = new HashMap<>().     endpointConfig.getConfigurator().beforeRequest(headers).     assertEquals(1, headers.size()). }
false;public;0;9;;@Test public void taskExecutor() throws Exception {     URI uri = new URI("ws://localhost/abc").     this.wsClient.setTaskExecutor(new SimpleAsyncTaskExecutor()).     WebSocketSession session = this.wsClient.doHandshake(this.wsHandler, this.headers, uri).get().     assertNotNull(session). }
