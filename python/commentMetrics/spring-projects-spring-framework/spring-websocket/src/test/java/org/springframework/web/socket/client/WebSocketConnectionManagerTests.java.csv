commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void openConnection() throws Exception {     List<String> subprotocols = Arrays.asList("abc").     TestLifecycleWebSocketClient client = new TestLifecycleWebSocketClient(false).     WebSocketHandler handler = new TextWebSocketHandler().     WebSocketConnectionManager manager = new WebSocketConnectionManager(client, handler, "/path/{id}", "123").     manager.setSubProtocols(subprotocols).     manager.openConnection().     WebSocketHttpHeaders expectedHeaders = new WebSocketHttpHeaders().     expectedHeaders.setSecWebSocketProtocol(subprotocols).     assertEquals(expectedHeaders, client.headers).     assertEquals(new URI("/path/123"), client.uri).     WebSocketHandlerDecorator loggingHandler = (WebSocketHandlerDecorator) client.webSocketHandler.     assertEquals(LoggingWebSocketHandlerDecorator.class, loggingHandler.getClass()).     assertSame(handler, loggingHandler.getDelegate()). }
false;public;0;12;;@Test public void clientLifecycle() throws Exception {     TestLifecycleWebSocketClient client = new TestLifecycleWebSocketClient(false).     WebSocketHandler handler = new TextWebSocketHandler().     WebSocketConnectionManager manager = new WebSocketConnectionManager(client, handler, "/a").     manager.startInternal().     assertTrue(client.isRunning()).     manager.stopInternal().     assertFalse(client.isRunning()). }
false;public;0;4;;@Override public void start() {     this.running = true. }
false;public;0;4;;@Override public void stop() {     this.running = false. }
false;public;0;4;;@Override public boolean isRunning() {     return this.running. }
false;public;3;7;;@Override public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler handler, String uriTemplate, Object... uriVars) {     URI uri = UriComponentsBuilder.fromUriString(uriTemplate).buildAndExpand(uriVars).encode().toUri().     return doHandshake(handler, null, uri). }
false;public;3;9;;@Override public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler handler, WebSocketHttpHeaders headers, URI uri) {     this.webSocketHandler = handler.     this.headers = headers.     this.uri = uri.     return new ListenableFutureTask<>(() -> null). }
