commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() {     this.delegate = mock(WebSocketHandler.class).     this.decorator = new ExceptionWebSocketHandlerDecorator(this.delegate).     this.session = new TestWebSocketSession().     this.session.setOpen(true). }
false;public;0;10;;@Test public void afterConnectionEstablished() throws Exception {     willThrow(new IllegalStateException("error")).given(this.delegate).afterConnectionEstablished(this.session).     this.decorator.afterConnectionEstablished(this.session).     assertEquals(CloseStatus.SERVER_ERROR, this.session.getCloseStatus()). }
false;public;0;12;;@Test public void handleMessage() throws Exception {     TextMessage message = new TextMessage("payload").     willThrow(new IllegalStateException("error")).given(this.delegate).handleMessage(this.session, message).     this.decorator.handleMessage(this.session, message).     assertEquals(CloseStatus.SERVER_ERROR, this.session.getCloseStatus()). }
false;public;0;12;;@Test public void handleTransportError() throws Exception {     Exception exception = new Exception("transport error").     willThrow(new IllegalStateException("error")).given(this.delegate).handleTransportError(this.session, exception).     this.decorator.handleTransportError(this.session, exception).     assertEquals(CloseStatus.SERVER_ERROR, this.session.getCloseStatus()). }
false;public;0;12;;@Test public void afterConnectionClosed() throws Exception {     CloseStatus closeStatus = CloseStatus.NORMAL.     willThrow(new IllegalStateException("error")).given(this.delegate).afterConnectionClosed(this.session, closeStatus).     this.decorator.afterConnectionClosed(this.session, closeStatus).     assertNull(this.session.getCloseStatus()). }
