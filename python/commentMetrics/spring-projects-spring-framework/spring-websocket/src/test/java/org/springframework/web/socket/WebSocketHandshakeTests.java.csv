commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;8;;@Parameters(name = "server [{0}], client [{1}]") public static Iterable<Object[]> arguments() {     return Arrays.asList(new Object[][] { { new JettyWebSocketTestServer(), new JettyWebSocketClient() }, { new TomcatWebSocketTestServer(), new StandardWebSocketClient() }, { new UndertowTestServer(), new JettyWebSocketClient() } }). }
false;protected;0;4;;@Override protected Class<?>[] getAnnotatedConfigClasses() {     return new Class<?>[] { TestConfig.class }. }
false;public;0;9;;@Test public void subProtocolNegotiation() throws Exception {     WebSocketHttpHeaders headers = new WebSocketHttpHeaders().     headers.setSecWebSocketProtocol("foo").     URI url = new URI(getWsBaseUrl() + "/ws").     WebSocketSession session = this.webSocketClient.doHandshake(new TextWebSocketHandler(), headers, url).get().     assertEquals("foo", session.getAcceptedProtocol()).     session.close(). }
false;public;0;15;;// SPR-12727 @Test public void unsolicitedPongWithEmptyPayload() throws Exception {     String url = getWsBaseUrl() + "/ws".     WebSocketSession session = this.webSocketClient.doHandshake(new AbstractWebSocketHandler() {     }, url).get().     TestWebSocketHandler serverHandler = this.wac.getBean(TestWebSocketHandler.class).     serverHandler.setWaitMessageCount(1).     session.sendMessage(new PongMessage()).     serverHandler.await().     assertNull(serverHandler.getTransportError()).     assertEquals(1, serverHandler.getReceivedMessages().size()).     assertEquals(PongMessage.class, serverHandler.getReceivedMessages().get(0).getClass()). }
false;public;1;5;;@Override public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {     this.handshakeHandler.setSupportedProtocols("foo", "bar", "baz").     registry.addHandler(handler(), "/ws").setHandshakeHandler(this.handshakeHandler). }
false;public;0;4;;@Bean public TestWebSocketHandler handler() {     return new TestWebSocketHandler(). }
false;public;1;3;;public void setWaitMessageCount(int waitMessageCount) {     this.waitMessageCount = waitMessageCount. }
false;public;0;3;;public List<WebSocketMessage> getReceivedMessages() {     return this.receivedMessages. }
false;public;0;3;;public Throwable getTransportError() {     return this.transportError. }
false;public;2;7;;@Override public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {     this.receivedMessages.add(message).     if (this.receivedMessages.size() >= this.waitMessageCount) {         this.latch.countDown().     } }
false;public;2;5;;@Override public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {     this.transportError = exception.     this.latch.countDown(). }
false;public;0;3;;public void await() throws InterruptedException {     this.latch.await(5, TimeUnit.SECONDS). }
