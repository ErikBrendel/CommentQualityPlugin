commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     setup(Config.class). }
false;public;0;4;;@After public void teardown() {     ContextLoaderTestUtils.setCurrentWebApplicationContext(null). }
false;private;1;7;;private void setup(Class<?> configurationClass) {     AnnotationConfigWebApplicationContext applicationContext = new AnnotationConfigWebApplicationContext().     applicationContext.register(configurationClass).     applicationContext.refresh().     this.applicationContext = applicationContext.     ContextLoaderTestUtils.setCurrentWebApplicationContext(this.applicationContext). }
false;public;0;4;;@Test public void encodeToText() throws Exception {     assertThat(new MyTextEncoder().encode(myType), equalTo(CONVERTED_TEXT)). }
false;public;0;7;;@Test public void encodeToTextCannotConvert() throws Exception {     setup(NoConvertersConfig.class).     thown.expect(EncodeException.class).     thown.expectCause(isA(ConverterNotFoundException.class)).     new MyTextEncoder().encode(myType). }
false;public;0;5;;@Test public void encodeToBinary() throws Exception {     assertThat(new MyBinaryEncoder().encode(myType).array(), equalTo(CONVERTED_BYTES.array())). }
false;public;0;7;;@Test public void encodeToBinaryCannotConvert() throws Exception {     setup(NoConvertersConfig.class).     thown.expect(EncodeException.class).     thown.expectCause(isA(ConverterNotFoundException.class)).     new MyBinaryEncoder().encode(myType). }
false;public;0;6;;@Test public void decodeFromText() throws Exception {     Decoder.Text<MyType> decoder = new MyTextDecoder().     assertThat(decoder.willDecode(CONVERTED_TEXT), is(true)).     assertThat(decoder.decode(CONVERTED_TEXT), equalTo(myType)). }
false;public;0;9;;@Test public void decodeFromTextCannotConvert() throws Exception {     setup(NoConvertersConfig.class).     Decoder.Text<MyType> decoder = new MyTextDecoder().     assertThat(decoder.willDecode(CONVERTED_TEXT), is(false)).     thown.expect(DecodeException.class).     thown.expectCause(isA(ConverterNotFoundException.class)).     decoder.decode(CONVERTED_TEXT). }
false;public;0;6;;@Test public void decodeFromBinary() throws Exception {     Decoder.Binary<MyType> decoder = new MyBinaryDecoder().     assertThat(decoder.willDecode(CONVERTED_BYTES), is(true)).     assertThat(decoder.decode(CONVERTED_BYTES), equalTo(myType)). }
false;public;0;9;;@Test public void decodeFromBinaryCannotConvert() throws Exception {     setup(NoConvertersConfig.class).     Decoder.Binary<MyType> decoder = new MyBinaryDecoder().     assertThat(decoder.willDecode(CONVERTED_BYTES), is(false)).     thown.expect(DecodeException.class).     thown.expectCause(isA(ConverterNotFoundException.class)).     decoder.decode(CONVERTED_BYTES). }
false;public;0;6;;@Test public void encodeAndDecodeText() throws Exception {     MyTextEncoderDecoder encoderDecoder = new MyTextEncoderDecoder().     String encoded = encoderDecoder.encode(myType).     assertThat(encoderDecoder.decode(encoded), equalTo(myType)). }
false;public;0;6;;@Test public void encodeAndDecodeBytes() throws Exception {     MyBinaryEncoderDecoder encoderDecoder = new MyBinaryEncoderDecoder().     ByteBuffer encoded = encoderDecoder.encode(myType).     assertThat(encoderDecoder.decode(encoded), equalTo(myType)). }
false;public;0;6;;@Test public void autowiresIntoEncoder() throws Exception {     WithAutowire withAutowire = new WithAutowire().     withAutowire.init(null).     assertThat(withAutowire.config, equalTo(applicationContext.getBean(Config.class))). }
false;public;0;9;;@Test public void cannotFindApplicationContext() throws Exception {     ContextLoaderTestUtils.setCurrentWebApplicationContext(null).     WithAutowire encoder = new WithAutowire().     encoder.init(null).     thown.expect(IllegalStateException.class).     thown.expectMessage("Unable to locate the Spring ApplicationContext").     encoder.encode(myType). }
false;public;0;9;;@Test public void cannotFindConversionService() throws Exception {     setup(NoConfig.class).     MyBinaryEncoder encoder = new MyBinaryEncoder().     encoder.init(null).     thown.expect(IllegalStateException.class).     thown.expectMessage("Unable to find ConversionService").     encoder.encode(myType). }
false;public;0;9;;@Bean public ConversionService webSocketConversionService() {     GenericConversionService conversionService = new DefaultConversionService().     conversionService.addConverter(new MyTypeToStringConverter()).     conversionService.addConverter(new MyTypeToBytesConverter()).     conversionService.addConverter(new StringToMyTypeConverter()).     conversionService.addConverter(new BytesToMyTypeConverter()).     return conversionService. }
false;public;0;4;;@Bean public ConversionService webSocketConversionService() {     return new GenericConversionService(). }
false;public;0;4;;@Override public String toString() {     return this.value. }
false;public;0;4;;@Override public int hashCode() {     return value.hashCode(). }
false;public;1;7;;@Override public boolean equals(Object obj) {     if (obj instanceof MyType) {         return ((MyType) obj).value.equals(value).     }     return false. }
false;public;1;4;;@Override public String convert(MyType source) {     return "_" + source.toString(). }
false;public;1;4;;@Override public byte[] convert(MyType source) {     return ("~" + source.toString()).getBytes(). }
false;public;1;4;;@Override public MyType convert(String source) {     return new MyType(source.substring(1)). }
false;public;1;4;;@Override public MyType convert(byte[] source) {     return new MyType(new String(source).substring(1)). }
