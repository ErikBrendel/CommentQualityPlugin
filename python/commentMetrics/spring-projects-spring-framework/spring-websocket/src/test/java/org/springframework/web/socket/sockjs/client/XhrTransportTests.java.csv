commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void infoResponse() throws Exception {     TestXhrTransport transport = new TestXhrTransport().     transport.infoResponseToReturn = new ResponseEntity<>("body", HttpStatus.OK).     assertEquals("body", transport.executeInfoRequest(new URI("http://example.com/info"), null)). }
false;public;0;6;;@Test(expected = HttpServerErrorException.class) public void infoResponseError() throws Exception {     TestXhrTransport transport = new TestXhrTransport().     transport.infoResponseToReturn = new ResponseEntity<>("body", HttpStatus.BAD_REQUEST).     assertEquals("body", transport.executeInfoRequest(new URI("http://example.com/info"), null)). }
false;public;0;13;;@Test public void sendMessage() throws Exception {     HttpHeaders requestHeaders = new HttpHeaders().     requestHeaders.set("foo", "bar").     requestHeaders.setContentType(MediaType.APPLICATION_JSON).     TestXhrTransport transport = new TestXhrTransport().     transport.sendMessageResponseToReturn = new ResponseEntity<>(HttpStatus.NO_CONTENT).     URI url = new URI("http://example.com").     transport.executeSendRequest(url, requestHeaders, new TextMessage("payload")).     assertEquals(2, transport.actualSendRequestHeaders.size()).     assertEquals("bar", transport.actualSendRequestHeaders.getFirst("foo")).     assertEquals(MediaType.APPLICATION_JSON, transport.actualSendRequestHeaders.getContentType()). }
false;public;0;7;;@Test(expected = HttpServerErrorException.class) public void sendMessageError() throws Exception {     TestXhrTransport transport = new TestXhrTransport().     transport.sendMessageResponseToReturn = new ResponseEntity<>(HttpStatus.BAD_REQUEST).     URI url = new URI("http://example.com").     transport.executeSendRequest(url, new HttpHeaders(), new TextMessage("payload")). }
false;public;0;29;;@Test public void connect() throws Exception {     HttpHeaders handshakeHeaders = new HttpHeaders().     handshakeHeaders.setOrigin("foo").     TransportRequest request = mock(TransportRequest.class).     given(request.getSockJsUrlInfo()).willReturn(new SockJsUrlInfo(new URI("http://example.com"))).     given(request.getHandshakeHeaders()).willReturn(handshakeHeaders).     given(request.getHttpRequestHeaders()).willReturn(new HttpHeaders()).     TestXhrTransport transport = new TestXhrTransport().     WebSocketHandler handler = mock(WebSocketHandler.class).     transport.connect(request, handler).     ArgumentCaptor<Runnable> captor = ArgumentCaptor.forClass(Runnable.class).     verify(request).getSockJsUrlInfo().     verify(request).addTimeoutTask(captor.capture()).     verify(request).getTransportUrl().     verify(request).getHandshakeHeaders().     verify(request).getHttpRequestHeaders().     verifyNoMoreInteractions(request).     assertEquals(1, transport.actualHandshakeHeaders.size()).     assertEquals("foo", transport.actualHandshakeHeaders.getOrigin()).     assertFalse(transport.actualSession.isDisconnected()).     captor.getValue().run().     assertTrue(transport.actualSession.isDisconnected()). }
false;protected;2;4;;@Override protected ResponseEntity<String> executeInfoRequestInternal(URI infoUrl, HttpHeaders headers) {     return this.infoResponseToReturn. }
false;protected;3;5;;@Override protected ResponseEntity<String> executeSendRequestInternal(URI url, HttpHeaders headers, TextMessage message) {     this.actualSendRequestHeaders = headers.     return this.sendMessageResponseToReturn. }
false;protected;6;8;;@Override protected void connectInternal(TransportRequest request, WebSocketHandler handler, URI receiveUrl, HttpHeaders handshakeHeaders, XhrClientSockJsSession session, SettableListenableFuture<WebSocketSession> connectFuture) {     this.actualHandshakeHeaders = handshakeHeaders.     this.actualSession = session. }
