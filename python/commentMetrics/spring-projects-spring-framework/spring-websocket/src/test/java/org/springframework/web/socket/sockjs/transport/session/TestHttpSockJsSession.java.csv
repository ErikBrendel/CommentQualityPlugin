commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected byte[] getPrelude(ServerHttpRequest request) {     return new byte[0]. }
false;public;0;4;;@Override public String getAcceptedProtocol() {     return this.subProtocol. }
false;public;1;4;;@Override public void setAcceptedProtocol(String protocol) {     this.subProtocol = protocol. }
false;public;0;3;;public CloseStatus getCloseStatus() {     return this.closeStatus. }
false;public;0;4;;@Override public boolean isActive() {     return this.active. }
false;public;1;3;;public void setActive(boolean active) {     this.active = active. }
false;public;0;3;;public List<SockJsFrame> getSockJsFramesWritten() {     return this.sockJsFrames. }
false;public;1;3;;public void setExceptionOnWrite(IOException exceptionOnWrite) {     this.exceptionOnWrite = exceptionOnWrite. }
false;public;0;3;;public int getNumberOfLastActiveTimeUpdates() {     return this.numberOfLastActiveTimeUpdates. }
false;public;0;3;;public boolean didCancelHeartbeat() {     return this.cancelledHeartbeat. }
false;protected;0;5;;@Override protected void updateLastActiveTime() {     this.numberOfLastActiveTimeUpdates++.     super.updateLastActiveTime(). }
false;protected;0;5;;@Override protected void cancelHeartbeat() {     this.cancelledHeartbeat = true.     super.cancelHeartbeat(). }
false;protected;1;7;;@Override protected void writeFrameInternal(SockJsFrame frame) throws IOException {     this.sockJsFrames.add(frame).     if (this.exceptionOnWrite != null) {         throw this.exceptionOnWrite.     } }
false;protected;1;4;;@Override protected void disconnect(CloseStatus status) {     this.closeStatus = status. }
false;protected;0;3;;@Override protected void flushCache() throws SockJsTransportFailureException { }
