commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void setup() {     // Let server pick its own random, available port.     this.jettyServer = new Server(0). }
false;public;2;10;;@Override public void deployConfig(WebApplicationContext wac, Filter... filters) {     ServletHolder servletHolder = new ServletHolder(new DispatcherServlet(wac)).     this.contextHandler = new ServletContextHandler().     this.contextHandler.addServlet(servletHolder, "/").     for (Filter filter : filters) {         this.contextHandler.addFilter(new FilterHolder(filter), "/*", getDispatcherTypes()).     }     this.jettyServer.setHandler(this.contextHandler). }
false;private;0;3;;private EnumSet<DispatcherType> getDispatcherTypes() {     return EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ASYNC). }
false;public;0;4;;@Override public void undeployConfig() { // Stopping jetty will undeploy the servlet }
false;public;0;9;;@Override public void start() throws Exception {     this.jettyServer.start().     this.contextHandler.start().     Connector[] connectors = jettyServer.getConnectors().     NetworkConnector connector = (NetworkConnector) connectors[0].     this.port = connector.getLocalPort(). }
false;public;0;14;;@Override public void stop() throws Exception {     try {         if (this.contextHandler.isRunning()) {             this.contextHandler.stop().         }     } finally {         if (this.jettyServer.isRunning()) {             this.jettyServer.setStopTimeout(5000).             this.jettyServer.stop().         }     } }
false;public;0;4;;@Override public int getPort() {     return this.port. }
false;public;0;4;;@Override public ServletContext getServletContext() {     return this.contextHandler.getServletContext(). }
