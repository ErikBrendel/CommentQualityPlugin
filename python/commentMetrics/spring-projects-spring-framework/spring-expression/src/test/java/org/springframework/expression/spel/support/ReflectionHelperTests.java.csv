# id;timestamp;commentText;codeText;commentWords;codeWords
ReflectionHelperTests -> private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1328020251;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			Assert.assertNull("Did not expect them to match in any way: "+matchInfo, matchInfo)__		} else {_			Assert.assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			Assert.assertTrue(matchInfo.isExactMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)_		_		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			Assert.assertTrue(matchInfo.isCloseMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)_		_		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			Assert.assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				Assert.fail("there are arguments that need conversion")__			}_			Assert.assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				Assert.assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,assert,true,match,info,is,exact,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,assert,true,match,info,is,close,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,assert,fail,there,are,arguments,that,need,conversion,assert,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1337239719;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			Assert.assertNull("Did not expect them to match in any way: "+matchInfo, matchInfo)__		} else {_			Assert.assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			Assert.assertTrue(matchInfo.isExactMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)_		_		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			Assert.assertTrue(matchInfo.isCloseMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)_		_		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			Assert.assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				Assert.fail("there are arguments that need conversion")__			}_			Assert.assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				Assert.assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,assert,true,match,info,is,exact,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,assert,true,match,info,is,close,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,assert,fail,there,are,arguments,that,need,conversion,assert,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1356735495;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			Assert.assertNull("Did not expect them to match in any way: "+matchInfo, matchInfo)__		} else {_			Assert.assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			Assert.assertTrue(matchInfo.isExactMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			Assert.assertTrue(matchInfo.isCloseMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			Assert.assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				Assert.fail("there are arguments that need conversion")__			}_			Assert.assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				Assert.assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,assert,true,match,info,is,exact,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,assert,true,match,info,is,close,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,assert,fail,there,are,arguments,that,need,conversion,assert,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1357119417;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			assertNull("Did not expect them to match in any way: "+matchInfo, matchInfo)__		} else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__			assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__			assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				fail("there are arguments that need conversion")__			}_			assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,true,match,info,is,exact,match,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,true,match,info,is,close,match,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,fail,there,are,arguments,that,need,conversion,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1382138457;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			assertNull("Did not expect them to match in any way: "+matchInfo, matchInfo)__		} else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__			assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__			assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				fail("there are arguments that need conversion")__			}_			assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,true,match,info,is,exact,match,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,true,match,info,is,close,match,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,fail,there,are,arguments,that,need,conversion,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1398144624;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1404725369;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1414174302;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1467730834;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1486596301;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1518615840;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1521645162;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1525211306;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1389796100;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1391876651;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1389796100;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1391876651;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1328020251;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			Assert.assertNull("Did not expect them to match in any way", matchInfo)__		} else {_			Assert.assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			Assert.assertTrue(matchInfo.isExactMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)_		_		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			Assert.assertTrue(matchInfo.isCloseMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)_		_		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			Assert.assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				Assert.fail("there are arguments that need conversion")__			}_			Assert.assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				Assert.assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,assert,true,match,info,is,exact,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,assert,true,match,info,is,close,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,assert,fail,there,are,arguments,that,need,conversion,assert,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1337239719;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			Assert.assertNull("Did not expect them to match in any way", matchInfo)__		} else {_			Assert.assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			Assert.assertTrue(matchInfo.isExactMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)_		_		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			Assert.assertTrue(matchInfo.isCloseMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)_		_		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			Assert.assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				Assert.fail("there are arguments that need conversion")__			}_			Assert.assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				Assert.assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,assert,true,match,info,is,exact,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,assert,true,match,info,is,close,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,assert,fail,there,are,arguments,that,need,conversion,assert,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1356735495;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			Assert.assertNull("Did not expect them to match in any way", matchInfo)__		} else {_			Assert.assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			Assert.assertTrue(matchInfo.isExactMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			Assert.assertTrue(matchInfo.isCloseMatch())__			Assert.assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			Assert.assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				Assert.fail("there are arguments that need conversion")__			}_			Assert.assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				Assert.assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,assert,true,match,info,is,exact,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,assert,true,match,info,is,close,match,assert,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,assert,fail,there,are,arguments,that,need,conversion,assert,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1357119417;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		} else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__			assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__			assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				fail("there are arguments that need conversion")__			}_			assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,true,match,info,is,exact,match,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,true,match,info,is,close,match,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,fail,there,are,arguments,that,need,conversion,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion);1382138457;Used to validate the match returned from a compareArguments call.;private void checkMatch(Class[] inputTypes, Class[] expectedTypes, StandardTypeConverter typeConverter,ArgsMatchKind expectedMatchKind,int... argsForConversion) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArguments(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind==null) {_			assertNull("Did not expect them to match in any way", matchInfo)__		} else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind==ArgsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__			assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__			assertNull(matchInfo.argsRequiringConversion)__		} else if (expectedMatchKind==ArgsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was "+matchInfo,matchInfo.isMatchRequiringConversion())__			if (argsForConversion==null) {_				fail("there are arguments that need conversion")__			}_			assertEquals("The array of args that need conversion is different length to that expected",argsForConversion.length, matchInfo.argsRequiringConversion.length)__			for (int a=0_a<argsForConversion.length_a++) {_				assertEquals(argsForConversion[a],matchInfo.argsRequiringConversion[a])__			}_		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match,class,input,types,class,expected,types,standard,type,converter,type,converter,args,match,kind,expected,match,kind,int,args,for,conversion,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,args,match,kind,exact,assert,true,match,info,is,exact,match,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,close,assert,true,match,info,is,close,match,assert,null,match,info,args,requiring,conversion,else,if,expected,match,kind,args,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion,if,args,for,conversion,null,fail,there,are,arguments,that,need,conversion,assert,equals,the,array,of,args,that,need,conversion,is,different,length,to,that,expected,args,for,conversion,length,match,info,args,requiring,conversion,length,for,int,a,0,a,args,for,conversion,length,a,assert,equals,args,for,conversion,a,match,info,args,requiring,conversion,a
ReflectionHelperTests -> private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1398144624;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1404725369;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1414174302;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1467730834;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1486596301;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1518615840;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1521645162;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
ReflectionHelperTests -> private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind);1525211306;Used to validate the match returned from a compareArguments call.;private void checkMatch2(Class<?>[] inputTypes, Class<?>[] expectedTypes, StandardTypeConverter typeConverter, ArgumentsMatchKind expectedMatchKind) {_		ReflectionHelper.ArgumentsMatchInfo matchInfo = ReflectionHelper.compareArgumentsVarargs(getTypeDescriptors(expectedTypes), getTypeDescriptors(inputTypes), typeConverter)__		if (expectedMatchKind == null) {_			assertNull("Did not expect them to match in any way: " + matchInfo, matchInfo)__		}_		else {_			assertNotNull("Should not be a null match", matchInfo)__		}__		if (expectedMatchKind == ArgumentsMatchKind.EXACT) {_			assertTrue(matchInfo.isExactMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.CLOSE) {_			assertTrue(matchInfo.isCloseMatch())__		}_		else if (expectedMatchKind == ArgumentsMatchKind.REQUIRES_CONVERSION) {_			assertTrue("expected to be a match requiring conversion, but was " + matchInfo, matchInfo.isMatchRequiringConversion())__		}_	};used,to,validate,the,match,returned,from,a,compare,arguments,call;private,void,check,match2,class,input,types,class,expected,types,standard,type,converter,type,converter,arguments,match,kind,expected,match,kind,reflection,helper,arguments,match,info,match,info,reflection,helper,compare,arguments,varargs,get,type,descriptors,expected,types,get,type,descriptors,input,types,type,converter,if,expected,match,kind,null,assert,null,did,not,expect,them,to,match,in,any,way,match,info,match,info,else,assert,not,null,should,not,be,a,null,match,match,info,if,expected,match,kind,arguments,match,kind,exact,assert,true,match,info,is,exact,match,else,if,expected,match,kind,arguments,match,kind,close,assert,true,match,info,is,close,match,else,if,expected,match,kind,arguments,match,kind,assert,true,expected,to,be,a,match,requiring,conversion,but,was,match,info,match,info,is,match,requiring,conversion
