commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void selectionWithList() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.?[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ListTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof List).     List<?> list = (List<?>) value.     assertEquals(5, list.size()).     assertEquals(0, list.get(0)).     assertEquals(1, list.get(1)).     assertEquals(2, list.get(2)).     assertEquals(3, list.get(3)).     assertEquals(4, list.get(4)). }
false;public;0;8;;@Test public void selectFirstItemInList() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.^[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ListTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof Integer).     assertEquals(0, value). }
false;public;0;8;;@Test public void selectLastItemInList() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.$[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ListTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof Integer).     assertEquals(4, value). }
false;public;0;14;;@Test public void selectionWithSet() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.?[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new SetTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof List).     List<?> list = (List<?>) value.     assertEquals(5, list.size()).     assertEquals(0, list.get(0)).     assertEquals(1, list.get(1)).     assertEquals(2, list.get(2)).     assertEquals(3, list.get(3)).     assertEquals(4, list.get(4)). }
false;public;0;8;;@Test public void selectFirstItemInSet() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.^[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new SetTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof Integer).     assertEquals(0, value). }
false;public;0;8;;@Test public void selectLastItemInSet() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.$[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new SetTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof Integer).     assertEquals(4, value). }
false;public;0;14;;@Test public void selectionWithIterable() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.?[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new IterableTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof List).     List<?> list = (List<?>) value.     assertEquals(5, list.size()).     assertEquals(0, list.get(0)).     assertEquals(1, list.get(1)).     assertEquals(2, list.get(2)).     assertEquals(3, list.get(3)).     assertEquals(4, list.get(4)). }
false;public;0;16;;@Test public void selectionWithArray() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.?[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ArrayTestBean()).     Object value = expression.getValue(context).     assertTrue(value.getClass().isArray()).     TypedValue typedValue = new TypedValue(value).     assertEquals(Integer.class, typedValue.getTypeDescriptor().getElementTypeDescriptor().getType()).     Integer[] array = (Integer[]) value.     assertEquals(5, array.length).     assertEquals(new Integer(0), array[0]).     assertEquals(new Integer(1), array[1]).     assertEquals(new Integer(2), array[2]).     assertEquals(new Integer(3), array[3]).     assertEquals(new Integer(4), array[4]). }
false;public;0;8;;@Test public void selectFirstItemInArray() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.^[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ArrayTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof Integer).     assertEquals(0, value). }
false;public;0;8;;@Test public void selectLastItemInArray() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("integers.$[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ArrayTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof Integer).     assertEquals(4, value). }
false;public;0;16;;@Test public void selectionWithPrimitiveArray() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("ints.?[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ArrayTestBean()).     Object value = expression.getValue(context).     assertTrue(value.getClass().isArray()).     TypedValue typedValue = new TypedValue(value).     assertEquals(Integer.class, typedValue.getTypeDescriptor().getElementTypeDescriptor().getType()).     Integer[] array = (Integer[]) value.     assertEquals(5, array.length).     assertEquals(new Integer(0), array[0]).     assertEquals(new Integer(1), array[1]).     assertEquals(new Integer(2), array[2]).     assertEquals(new Integer(3), array[3]).     assertEquals(new Integer(4), array[4]). }
false;public;0;8;;@Test public void selectFirstItemInPrimitiveArray() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("ints.^[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ArrayTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof Integer).     assertEquals(0, value). }
false;public;0;8;;@Test public void selectLastItemInPrimitiveArray() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("ints.$[#this<5]").     EvaluationContext context = new StandardEvaluationContext(new ArrayTestBean()).     Object value = expression.getValue(context).     assertTrue(value instanceof Integer).     assertEquals(4, value). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void selectionWithMap() {     EvaluationContext context = new StandardEvaluationContext(new MapTestBean()).     ExpressionParser parser = new SpelExpressionParser().     Expression exp = parser.parseExpression("colors.?[key.startsWith('b')]").     Map<String, String> colorsMap = (Map<String, String>) exp.getValue(context).     assertEquals(3, colorsMap.size()).     assertTrue(colorsMap.containsKey("beige")).     assertTrue(colorsMap.containsKey("blue")).     assertTrue(colorsMap.containsKey("brown")). }
false;public;0;11;;@Test @SuppressWarnings("unchecked") public void selectFirstItemInMap() {     EvaluationContext context = new StandardEvaluationContext(new MapTestBean()).     ExpressionParser parser = new SpelExpressionParser().     Expression exp = parser.parseExpression("colors.^[key.startsWith('b')]").     Map<String, String> colorsMap = (Map<String, String>) exp.getValue(context).     assertEquals(1, colorsMap.size()).     assertEquals("beige", colorsMap.keySet().iterator().next()). }
false;public;0;11;;@Test @SuppressWarnings("unchecked") public void selectLastItemInMap() {     EvaluationContext context = new StandardEvaluationContext(new MapTestBean()).     ExpressionParser parser = new SpelExpressionParser().     Expression exp = parser.parseExpression("colors.$[key.startsWith('b')]").     Map<String, String> colorsMap = (Map<String, String>) exp.getValue(context).     assertEquals(1, colorsMap.size()).     assertEquals("brown", colorsMap.keySet().iterator().next()). }
false;public;0;13;;@Test public void projectionWithList() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("#testList.![wrapper.value]").     EvaluationContext context = new StandardEvaluationContext().     context.setVariable("testList", IntegerTestBean.createList()).     Object value = expression.getValue(context).     assertTrue(value instanceof List).     List<?> list = (List<?>) value.     assertEquals(3, list.size()).     assertEquals(5, list.get(0)).     assertEquals(6, list.get(1)).     assertEquals(7, list.get(2)). }
false;public;0;13;;@Test public void projectionWithSet() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("#testList.![wrapper.value]").     EvaluationContext context = new StandardEvaluationContext().     context.setVariable("testList", IntegerTestBean.createSet()).     Object value = expression.getValue(context).     assertTrue(value instanceof List).     List<?> list = (List<?>) value.     assertEquals(3, list.size()).     assertEquals(5, list.get(0)).     assertEquals(6, list.get(1)).     assertEquals(7, list.get(2)). }
false;public;0;13;;@Test public void projectionWithIterable() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("#testList.![wrapper.value]").     EvaluationContext context = new StandardEvaluationContext().     context.setVariable("testList", IntegerTestBean.createIterable()).     Object value = expression.getValue(context).     assertTrue(value instanceof List).     List<?> list = (List<?>) value.     assertEquals(3, list.size()).     assertEquals(5, list.get(0)).     assertEquals(6, list.get(1)).     assertEquals(7, list.get(2)). }
false;public;0;15;;@Test public void projectionWithArray() throws Exception {     Expression expression = new SpelExpressionParser().parseRaw("#testArray.![wrapper.value]").     EvaluationContext context = new StandardEvaluationContext().     context.setVariable("testArray", IntegerTestBean.createArray()).     Object value = expression.getValue(context).     assertTrue(value.getClass().isArray()).     TypedValue typedValue = new TypedValue(value).     assertEquals(Number.class, typedValue.getTypeDescriptor().getElementTypeDescriptor().getType()).     Number[] array = (Number[]) value.     assertEquals(3, array.length).     assertEquals(new Integer(5), array[0]).     assertEquals(5.9f, array[1]).     assertEquals(new Integer(7), array[2]). }
false;public;0;3;;public List<Integer> getIntegers() {     return integers. }
false;public;0;3;;public Set<Integer> getIntegers() {     return integers. }
false;public;0;4;;@Override public Iterator<Integer> iterator() {     return integers.iterator(). }
false;public;0;8;;public Iterable<Integer> getIntegers() {     return new Iterable<Integer>() {          @Override         public Iterator<Integer> iterator() {             return integers.iterator().         }     }. }
false;public;0;3;;public int[] getInts() {     return ints. }
false;public;0;3;;public Integer[] getIntegers() {     return integers. }
false;public;0;3;;public Map<String, String> getColors() {     return colors. }
false;public;0;3;;public IntegerWrapper getWrapper() {     return this.wrapper. }
false;static;0;7;;static List<IntegerTestBean> createList() {     List<IntegerTestBean> list = new ArrayList<>().     for (int i = 0. i < 3. i++) {         list.add(new IntegerTestBean(i + 5)).     }     return list. }
false;static;0;7;;static Set<IntegerTestBean> createSet() {     Set<IntegerTestBean> set = new LinkedHashSet<>().     for (int i = 0. i < 3. i++) {         set.add(new IntegerTestBean(i + 5)).     }     return set. }
false;public;0;4;;@Override public Iterator<IntegerTestBean> iterator() {     return set.iterator(). }
false;static;0;9;;static Iterable<IntegerTestBean> createIterable() {     final Set<IntegerTestBean> set = createSet().     return new Iterable<IntegerTestBean>() {          @Override         public Iterator<IntegerTestBean> iterator() {             return set.iterator().         }     }. }
false;static;0;12;;static IntegerTestBean[] createArray() {     IntegerTestBean[] array = new IntegerTestBean[3].     for (int i = 0. i < 3. i++) {         if (i == 1) {             array[i] = new IntegerTestBean(5.9f).         } else {             array[i] = new IntegerTestBean(i + 5).         }     }     return array. }
false;public;0;3;;public Number getValue() {     return this.value. }
