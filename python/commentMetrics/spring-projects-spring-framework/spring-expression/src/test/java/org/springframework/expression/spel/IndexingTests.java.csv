commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void indexIntoGenericPropertyContainingMap() {     Map<String, String> property = new HashMap<>().     property.put("foo", "bar").     this.property = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("property").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     assertEquals(property, expression.getValue(this, Map.class)).     expression = parser.parseExpression("property['foo']").     assertEquals("bar", expression.getValue(this)). }
false;public;0;17;;@Test public void indexIntoGenericPropertyContainingMapObject() {     Map<String, Map<String, String>> property = new HashMap<>().     Map<String, String> map = new HashMap<>().     map.put("foo", "bar").     property.put("property", map).     SpelExpressionParser parser = new SpelExpressionParser().     StandardEvaluationContext context = new StandardEvaluationContext().     context.addPropertyAccessor(new MapAccessor()).     context.setRootObject(property).     Expression expression = parser.parseExpression("property").     assertEquals("java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(context).toString()).     assertEquals(map, expression.getValue(context)).     assertEquals(map, expression.getValue(context, Map.class)).     expression = parser.parseExpression("property['foo']").     assertEquals("bar", expression.getValue(context)). }
false;public;3;4;;@Override public boolean canRead(EvaluationContext context, Object target, String name) throws AccessException {     return (((Map<?, ?>) target).containsKey(name)). }
false;public;3;4;;@Override public TypedValue read(EvaluationContext context, Object target, String name) throws AccessException {     return new TypedValue(((Map<?, ?>) target).get(name)). }
false;public;3;4;;@Override public boolean canWrite(EvaluationContext context, Object target, String name) throws AccessException {     return true. }
false;public;4;6;;@Override @SuppressWarnings("unchecked") public void write(EvaluationContext context, Object target, String name, Object newValue) throws AccessException {     ((Map) target).put(name, newValue). }
false;public;0;4;;@Override public Class<?>[] getSpecificTargetClasses() {     return new Class<?>[] { Map.class }. }
false;public;0;14;;@Test public void setGenericPropertyContainingMap() {     Map<String, String> property = new HashMap<>().     property.put("foo", "bar").     this.property = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("property").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("property['foo']").     assertEquals("bar", expression.getValue(this)).     expression.setValue(this, "baz").     assertEquals("baz", expression.getValue(this)). }
false;public;0;14;;@Test public void setPropertyContainingMap() {     Map<Integer, Integer> property = new HashMap<>().     property.put(9, 3).     this.parameterizedMap = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("parameterizedMap").     assertEquals("java.util.HashMap<java.lang.Integer, java.lang.Integer>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("parameterizedMap['9']").     assertEquals(3, expression.getValue(this)).     expression.setValue(this, "37").     assertEquals(37, expression.getValue(this)). }
false;public;0;11;;@Test public void setPropertyContainingMapAutoGrow() {     SpelExpressionParser parser = new SpelExpressionParser(new SpelParserConfiguration(true, false)).     Expression expression = parser.parseExpression("parameterizedMap").     assertEquals("java.util.Map<java.lang.Integer, java.lang.Integer>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("parameterizedMap['9']").     assertEquals(null, expression.getValue(this)).     expression.setValue(this, "37").     assertEquals(37, expression.getValue(this)). }
false;public;0;12;;@Test public void indexIntoGenericPropertyContainingList() {     List<String> property = new ArrayList<>().     property.add("bar").     this.property = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("property").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.ArrayList<?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("property[0]").     assertEquals("bar", expression.getValue(this)). }
false;public;0;14;;@Test public void setGenericPropertyContainingList() {     List<Integer> property = new ArrayList<>().     property.add(3).     this.property = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("property").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.ArrayList<?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("property[0]").     assertEquals(3, expression.getValue(this)).     expression.setValue(this, "4").     assertEquals("4", expression.getValue(this)). }
false;public;0;16;;@Test public void setGenericPropertyContainingListAutogrow() {     List<Integer> property = new ArrayList<>().     this.property = property.     SpelExpressionParser parser = new SpelExpressionParser(new SpelParserConfiguration(true, true)).     Expression expression = parser.parseExpression("property").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.ArrayList<?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("property[0]").     try {         expression.setValue(this, "4").     } catch (EvaluationException ex) {         assertTrue(ex.getMessage().startsWith("EL1053E")).     } }
false;public;0;12;;@Test public void indexIntoPropertyContainingList() {     List<Integer> property = new ArrayList<>().     property.add(3).     this.parameterizedList = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("parameterizedList").     assertEquals("java.util.ArrayList<java.lang.Integer>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("parameterizedList[0]").     assertEquals(3, expression.getValue(this)). }
false;public;0;12;;@Test public void indexIntoPropertyContainingListOfList() {     List<List<Integer>> property = new ArrayList<>().     property.add(Arrays.asList(3)).     this.parameterizedListOfList = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("parameterizedListOfList[0]").     assertEquals("java.util.Arrays$ArrayList<java.lang.Integer>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property.get(0), expression.getValue(this)).     expression = parser.parseExpression("parameterizedListOfList[0][0]").     assertEquals(3, expression.getValue(this)). }
false;public;0;14;;@Test public void setPropertyContainingList() {     List<Integer> property = new ArrayList<>().     property.add(3).     this.parameterizedList = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("parameterizedList").     assertEquals("java.util.ArrayList<java.lang.Integer>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("parameterizedList[0]").     assertEquals(3, expression.getValue(this)).     expression.setValue(this, "4").     assertEquals(4, expression.getValue(this)). }
false;public;0;15;;@Test public void indexIntoGenericPropertyContainingNullList() {     SpelParserConfiguration configuration = new SpelParserConfiguration(true, true).     SpelExpressionParser parser = new SpelExpressionParser(configuration).     Expression expression = parser.parseExpression("property").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.lang.Object", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("property[0]").     try {         assertEquals("bar", expression.getValue(this)).     } catch (EvaluationException ex) {         assertTrue(ex.getMessage().startsWith("EL1027E")).     } }
false;public;0;17;;@Test public void indexIntoGenericPropertyContainingGrowingList() {     List<String> property = new ArrayList<>().     this.property = property.     SpelParserConfiguration configuration = new SpelParserConfiguration(true, true).     SpelExpressionParser parser = new SpelExpressionParser(configuration).     Expression expression = parser.parseExpression("property").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.ArrayList<?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("property[0]").     try {         assertEquals("bar", expression.getValue(this)).     } catch (EvaluationException ex) {         assertTrue(ex.getMessage().startsWith("EL1053E")).     } }
false;public;0;17;;@Test public void indexIntoGenericPropertyContainingGrowingList2() {     List<String> property2 = new ArrayList<>().     this.property2 = property2.     SpelParserConfiguration configuration = new SpelParserConfiguration(true, true).     SpelExpressionParser parser = new SpelExpressionParser(configuration).     Expression expression = parser.parseExpression("property2").     assertEquals("java.util.ArrayList<?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property2, expression.getValue(this)).     expression = parser.parseExpression("property2[0]").     try {         assertEquals("bar", expression.getValue(this)).     } catch (EvaluationException ex) {         assertTrue(ex.getMessage().startsWith("EL1053E")).     } }
false;public;0;11;;@Test public void indexIntoGenericPropertyContainingArray() {     String[] property = new String[] { "bar" }.     this.property = property.     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("property").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.lang.String[]", expression.getValueTypeDescriptor(this).toString()).     assertEquals(property, expression.getValue(this)).     expression = parser.parseExpression("property[0]").     assertEquals("bar", expression.getValue(this)). }
false;public;0;8;;@Test public void emptyList() {     listOfScalarNotGeneric = new ArrayList().     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("listOfScalarNotGeneric").     assertEquals("java.util.ArrayList<?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals("", expression.getValue(this, String.class)). }
false;public;0;11;;@SuppressWarnings("unchecked") @Test public void resolveCollectionElementType() {     listNotGeneric = new ArrayList(2).     listNotGeneric.add(5).     listNotGeneric.add(6).     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("listNotGeneric").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.ArrayList<?>", expression.getValueTypeDescriptor(this).toString()).     assertEquals("5,6", expression.getValue(this, String.class)). }
false;public;0;6;;@Test public void resolveCollectionElementTypeNull() {     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("listNotGeneric").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.List<?>", expression.getValueTypeDescriptor(this).toString()). }
false;public;0;10;;@SuppressWarnings("unchecked") @Test public void resolveMapKeyValueTypes() {     mapNotGeneric = new HashMap().     mapNotGeneric.put("baseAmount", 3.11).     mapNotGeneric.put("bonusAmount", 7.17).     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("mapNotGeneric").     assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(this).toString()). }
false;public;0;9;;@SuppressWarnings("unchecked") @Test public void testListOfScalar() {     listOfScalarNotGeneric = new ArrayList(1).     listOfScalarNotGeneric.add("5").     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("listOfScalarNotGeneric[0]").     assertEquals(new Integer(5), expression.getValue(this, Integer.class)). }
false;public;0;11;;@SuppressWarnings("unchecked") @Test public void testListsOfMap() {     listOfMapsNotGeneric = new ArrayList().     Map map = new HashMap().     map.put("fruit", "apple").     listOfMapsNotGeneric.add(map).     SpelExpressionParser parser = new SpelExpressionParser().     Expression expression = parser.parseExpression("listOfMapsNotGeneric[0]['fruit']").     assertEquals("apple", expression.getValue(this, String.class)). }
