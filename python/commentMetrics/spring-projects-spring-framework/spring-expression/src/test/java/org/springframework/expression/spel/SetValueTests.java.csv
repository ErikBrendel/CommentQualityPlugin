# id;timestamp;commentText;codeText;commentWords;codeWords
SetValueTests -> protected void setValueExpectError(String expression, Object value);1328020251;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				Assert.fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			Assert.fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			Assert.fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,assert,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,assert,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,assert,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1356735495;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				Assert.fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			Assert.fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			Assert.fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,assert,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,assert,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,assert,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1357119417;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1385507683;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1391876651;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1398144624;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1413848647;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1414434951;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1425759378;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		} catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1458843770;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		}_		catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_		catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1496837955;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		}_		catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_		catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValueExpectError(String expression, Object value);1545727613;Call setValue() but expect it to fail.;protected void setValueExpectError(String expression, Object value) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			e.setValue(lContext, value)__			fail("expected an error")__		}_		catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_		catch (EvaluationException ee) {_			_		}_	};call,set,value,but,expect,it,to,fail;protected,void,set,value,expect,error,string,expression,object,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,e,set,value,l,context,value,fail,expected,an,error,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message,catch,evaluation,exception,ee
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1328020251;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				Assert.fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			Assert.assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				Assert.fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			Assert.fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			Assert.fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,assert,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,assert,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,assert,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,assert,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1356735495;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				Assert.fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			Assert.assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				Assert.fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			Assert.fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			Assert.fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,assert,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,assert,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,assert,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,assert,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1357119417;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1385507683;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1391876651;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1398144624;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1413848647;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1414434951;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1425759378;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		} catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		} catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1458843770;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		}_		catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		}_		catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1496837955;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		}_		catch (EvaluationException ee) {_			ee.printStackTrace()__			fail("Unexpected Exception: " + ee.getMessage())__		}_		catch (ParseException pe) {_			pe.printStackTrace()__			fail("Unexpected Exception: " + pe.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,ee,ee,print,stack,trace,fail,unexpected,exception,ee,get,message,catch,parse,exception,pe,pe,print,stack,trace,fail,unexpected,exception,pe,get,message
SetValueTests -> protected void setValue(String expression, Object value, Object expectedValue);1545727613;For use when coercion is happening during a setValue().  The expectedValue should be_the coerced form of the value.;protected void setValue(String expression, Object value, Object expectedValue) {_		try {_			Expression e = parser.parseExpression(expression)__			if (e == null) {_				fail("Parser returned null for expression")__			}_			if (DEBUG) {_				SpelUtilities.printAbstractSyntaxTree(System.out, e)__			}_			StandardEvaluationContext lContext = TestScenarioCreator.getTestEvaluationContext()__			assertTrue("Expression is not writeable but should be", e.isWritable(lContext))__			e.setValue(lContext, value)__			Object a = expectedValue__			Object b = e.getValue(lContext)__			if (!a.equals(b)) {_				fail("Not the same: ["+a+"] type="+a.getClass()+"  ["+b+"] type="+b.getClass())___			}_		}_		catch (EvaluationException | ParseException ex) {_			ex.printStackTrace()__			fail("Unexpected Exception: " + ex.getMessage())__		}_	};for,use,when,coercion,is,happening,during,a,set,value,the,expected,value,should,be,the,coerced,form,of,the,value;protected,void,set,value,string,expression,object,value,object,expected,value,try,expression,e,parser,parse,expression,expression,if,e,null,fail,parser,returned,null,for,expression,if,debug,spel,utilities,print,abstract,syntax,tree,system,out,e,standard,evaluation,context,l,context,test,scenario,creator,get,test,evaluation,context,assert,true,expression,is,not,writeable,but,should,be,e,is,writable,l,context,e,set,value,l,context,value,object,a,expected,value,object,b,e,get,value,l,context,if,a,equals,b,fail,not,the,same,a,type,a,get,class,b,type,b,get,class,catch,evaluation,exception,parse,exception,ex,ex,print,stack,trace,fail,unexpected,exception,ex,get,message
