commented;modifiers;parameterAmount;loc;comment;code
true;public;0;20;/**  * Scenario: using the standard infrastructure and running simple expression evaluation.  */ ;/**  * Scenario: using the standard infrastructure and running simple expression evaluation.  */ @Test public void testScenario_UsingStandardInfrastructure() {     try {         // Create a parser         SpelExpressionParser parser = new SpelExpressionParser().         // Parse an expression         Expression expr = parser.parseRaw("new String('hello world')").         // Evaluate it using a 'standard' context         Object value = expr.getValue().         // They are reusable         value = expr.getValue().         assertEquals("hello world", value).         assertEquals(String.class, value.getClass()).     } catch (EvaluationException | ParseException ex) {         ex.printStackTrace().         fail("Unexpected Exception: " + ex.getMessage()).     } }
true;public;0;24;/**  * Scenario: using the standard context but adding your own variables  */ ;/**  * Scenario: using the standard context but adding your own variables  */ @Test public void testScenario_DefiningVariablesThatWillBeAccessibleInExpressions() throws Exception {     // Create a parser     SpelExpressionParser parser = new SpelExpressionParser().     // Use the standard evaluation context     StandardEvaluationContext ctx = new StandardEvaluationContext().     ctx.setVariable("favouriteColour", "blue").     List<Integer> primes = new ArrayList<>().     primes.addAll(Arrays.asList(2, 3, 5, 7, 11, 13, 17)).     ctx.setVariable("primes", primes).     Expression expr = parser.parseRaw("#favouriteColour").     Object value = expr.getValue(ctx).     assertEquals("blue", value).     expr = parser.parseRaw("#primes.get(1)").     value = expr.getValue(ctx).     assertEquals(3, value).     // all prime numbers > 10 from the list (using selection ?{...})     expr = parser.parseRaw("#primes.?[#this>10]").     value = expr.getValue(ctx).     assertEquals("[11, 13, 17]", value.toString()). }
false;public;0;1;;public int getProperty() {     return property. }
false;public;1;1;;public void setProperty(int i) {     property = i. }
true;public;0;40;/**  * Scenario: using your own root context object  */ ;/**  * Scenario: using your own root context object  */ @Test public void testScenario_UsingADifferentRootContextObject() throws Exception {     // Create a parser     SpelExpressionParser parser = new SpelExpressionParser().     // Use the standard evaluation context     StandardEvaluationContext ctx = new StandardEvaluationContext().     TestClass tc = new TestClass().     tc.setProperty(42).     tc.str = "wibble".     ctx.setRootObject(tc).     // read it, set it, read it again     Expression expr = parser.parseRaw("str").     Object value = expr.getValue(ctx).     assertEquals("wibble", value).     expr = parser.parseRaw("str").     expr.setValue(ctx, "wobble").     expr = parser.parseRaw("str").     value = expr.getValue(ctx).     assertEquals("wobble", value).     // or using assignment within the expression     expr = parser.parseRaw("str='wabble'").     value = expr.getValue(ctx).     expr = parser.parseRaw("str").     value = expr.getValue(ctx).     assertEquals("wabble", value).     // private property will be accessed through getter()     expr = parser.parseRaw("property").     value = expr.getValue(ctx).     assertEquals(42, value).     // ... and set through setter     expr = parser.parseRaw("property=4").     value = expr.getValue(ctx).     expr = parser.parseRaw("property").     value = expr.getValue(ctx).     assertEquals(4, value). }
false;public,static;1;1;;public static String repeat(String s) {     return s + s. }
true;public;0;19;/**  * Scenario: using your own java methods and calling them from the expression  */ ;/**  * Scenario: using your own java methods and calling them from the expression  */ @Test public void testScenario_RegisteringJavaMethodsAsFunctionsAndCallingThem() throws SecurityException, NoSuchMethodException {     try {         // Create a parser         SpelExpressionParser parser = new SpelExpressionParser().         // Use the standard evaluation context         StandardEvaluationContext ctx = new StandardEvaluationContext().         ctx.registerFunction("repeat", ExpressionLanguageScenarioTests.class.getDeclaredMethod("repeat", String.class)).         Expression expr = parser.parseRaw("#repeat('hello')").         Object value = expr.getValue(ctx).         assertEquals("hellohello", value).     } catch (EvaluationException | ParseException ex) {         ex.printStackTrace().         fail("Unexpected Exception: " + ex.getMessage()).     } }
true;public;0;20;/**  * Scenario: add a property resolver that will get called in the resolver chain, this one only supports reading.  */ ;/**  * Scenario: add a property resolver that will get called in the resolver chain, this one only supports reading.  */ @Test public void testScenario_AddingYourOwnPropertyResolvers_1() throws Exception {     // Create a parser     SpelExpressionParser parser = new SpelExpressionParser().     // Use the standard evaluation context     StandardEvaluationContext ctx = new StandardEvaluationContext().     ctx.addPropertyAccessor(new FruitColourAccessor()).     Expression expr = parser.parseRaw("orange").     Object value = expr.getValue(ctx).     assertEquals(Color.orange, value).     try {         expr.setValue(ctx, Color.blue).         fail("Should not be allowed to set oranges to be blue !").     } catch (SpelEvaluationException ee) {         assertEquals(SpelMessage.PROPERTY_OR_FIELD_NOT_WRITABLE_ON_NULL, ee.getMessageCode()).     } }
false;public;0;20;;@Test public void testScenario_AddingYourOwnPropertyResolvers_2() throws Exception {     // Create a parser     SpelExpressionParser parser = new SpelExpressionParser().     // Use the standard evaluation context     StandardEvaluationContext ctx = new StandardEvaluationContext().     ctx.addPropertyAccessor(new VegetableColourAccessor()).     Expression expr = parser.parseRaw("pea").     Object value = expr.getValue(ctx).     assertEquals(Color.green, value).     try {         expr.setValue(ctx, Color.blue).         fail("Should not be allowed to set peas to be blue !").     } catch (SpelEvaluationException ee) {         assertEquals(SpelMessage.PROPERTY_OR_FIELD_NOT_WRITABLE_ON_NULL, ee.getMessageCode()).     } }
true;public;0;4;/**  * Null means you might be able to read any property, if an earlier property resolver hasn't beaten you to it  */ ;/**  * Null means you might be able to read any property, if an earlier property resolver hasn't beaten you to it  */ @Override public Class<?>[] getSpecificTargetClasses() {     return null. }
false;public;3;4;;@Override public boolean canRead(EvaluationContext context, Object target, String name) throws AccessException {     return propertyMap.containsKey(name). }
false;public;3;4;;@Override public TypedValue read(EvaluationContext context, Object target, String name) throws AccessException {     return new TypedValue(propertyMap.get(name)). }
false;public;3;4;;@Override public boolean canWrite(EvaluationContext context, Object target, String name) throws AccessException {     return false. }
false;public;4;4;;@Override public void write(EvaluationContext context, Object target, String name, Object newValue) throws AccessException { }
true;public;0;4;/**  * Null means you might be able to read any property, if an earlier property resolver hasn't beaten you to it  */ ;/**  * Null means you might be able to read any property, if an earlier property resolver hasn't beaten you to it  */ @Override public Class<?>[] getSpecificTargetClasses() {     return null. }
false;public;3;4;;@Override public boolean canRead(EvaluationContext context, Object target, String name) throws AccessException {     return propertyMap.containsKey(name). }
false;public;3;4;;@Override public TypedValue read(EvaluationContext context, Object target, String name) throws AccessException {     return new TypedValue(propertyMap.get(name)). }
false;public;3;4;;@Override public boolean canWrite(EvaluationContext context, Object target, String name) throws AccessException {     return false. }
false;public;4;3;;@Override public void write(EvaluationContext context, Object target, String name, Object newValue) throws AccessException { }
