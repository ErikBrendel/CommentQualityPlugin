commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;public static StandardEvaluationContext getTestEvaluationContext() {     StandardEvaluationContext testContext = new StandardEvaluationContext().     setupRootContextObject(testContext).     populateVariables(testContext).     populateFunctions(testContext).     return testContext. }
true;private,static;1;17;/**  * Register some Java reflect methods as well known functions that can be called from an expression.  * @param testContext the test evaluation context  */ ;/**  * Register some Java reflect methods as well known functions that can be called from an expression.  * @param testContext the test evaluation context  */ private static void populateFunctions(StandardEvaluationContext testContext) {     try {         testContext.registerFunction("isEven", TestScenarioCreator.class.getDeclaredMethod("isEven", Integer.TYPE)).         testContext.registerFunction("reverseInt", TestScenarioCreator.class.getDeclaredMethod("reverseInt", Integer.TYPE, Integer.TYPE, Integer.TYPE)).         testContext.registerFunction("reverseString", TestScenarioCreator.class.getDeclaredMethod("reverseString", String.class)).         testContext.registerFunction("varargsFunctionReverseStringsAndMerge", TestScenarioCreator.class.getDeclaredMethod("varargsFunctionReverseStringsAndMerge", String[].class)).         testContext.registerFunction("varargsFunctionReverseStringsAndMerge2", TestScenarioCreator.class.getDeclaredMethod("varargsFunctionReverseStringsAndMerge2", Integer.TYPE, String[].class)).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
true;private,static;1;3;/**  * Register some variables that can be referenced from the tests  * @param testContext the test evaluation context  */ ;/**  * Register some variables that can be referenced from the tests  * @param testContext the test evaluation context  */ private static void populateVariables(StandardEvaluationContext testContext) {     testContext.setVariable("answer", 42). }
true;private,static;1;10;/**  * Create the root context object, an Inventor instance. Non-qualified property  * and method references will be resolved against this context object.  * @param testContext the evaluation context in which to set the root object  */ ;/**  * Create the root context object, an Inventor instance. Non-qualified property  * and method references will be resolved against this context object.  * @param testContext the evaluation context in which to set the root object  */ private static void setupRootContextObject(StandardEvaluationContext testContext) {     GregorianCalendar c = new GregorianCalendar().     c.set(1856, 7, 9).     Inventor tesla = new Inventor("Nikola Tesla", c.getTime(), "Serbian").     tesla.setPlaceOfBirth(new PlaceOfBirth("SmilJan")).     tesla.setInventions(new String[] { "Telephone repeater", "Rotating magnetic field principle", "Polyphase alternating-current system", "Induction motor", "Alternating-current power transmission", "Tesla coil transformer", "Wireless communication", "Radio", "Fluorescent lights" }).     testContext.setRootObject(tesla). }
false;public,static;1;6;;// These methods are registered in the test context and therefore accessible through function calls // in test expressions public static String isEven(int i) {     if ((i % 2) == 0) {         return "y".     }     return "n". }
false;public,static;3;3;;public static int[] reverseInt(int i, int j, int k) {     return new int[] { k, j, i }. }
false;public,static;1;7;;public static String reverseString(String input) {     StringBuilder backwards = new StringBuilder().     for (int i = 0. i < input.length(). i++) {         backwards.append(input.charAt(input.length() - 1 - i)).     }     return backwards.toString(). }
false;public,static;1;9;;public static String varargsFunctionReverseStringsAndMerge(String... strings) {     StringBuilder sb = new StringBuilder().     if (strings != null) {         for (int i = strings.length - 1. i >= 0. i--) {             sb.append(strings[i]).         }     }     return sb.toString(). }
false;public,static;2;10;;public static String varargsFunctionReverseStringsAndMerge2(int j, String... strings) {     StringBuilder sb = new StringBuilder().     sb.append(j).     if (strings != null) {         for (int i = strings.length - 1. i >= 0. i--) {             sb.append(strings[i]).         }     }     return sb.toString(). }
