commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testInlineListCreation01() {     evaluate("{1, 2, 3, 4, 5}", "[1, 2, 3, 4, 5]", unmodifiableClass). }
false;public;0;4;;@Test public void testInlineListCreation02() {     evaluate("{'abc', 'xyz'}", "[abc, xyz]", unmodifiableClass). }
false;public;0;4;;@Test public void testInlineListCreation03() {     evaluate("{}", "[]", unmodifiableClass). }
false;public;0;4;;@Test public void testInlineListCreation04() {     evaluate("{'abc'=='xyz'}", "[false]", ArrayList.class). }
false;public;0;5;;@Test public void testInlineListAndNesting() {     evaluate("{{1,2,3},{4,5,6}}", "[[1, 2, 3], [4, 5, 6]]", unmodifiableClass).     evaluate("{{1,'2',3},{4,{'a','b'},5,6}}", "[[1, 2, 3], [4, [a, b], 5, 6]]", unmodifiableClass). }
false;public;0;4;;@Test public void testInlineListError() {     parseAndCheckError("{'abc'", SpelMessage.OOD). }
false;public;0;4;;@Test public void testRelOperatorsIs02() {     evaluate("{1, 2, 3, 4, 5} instanceof T(java.util.List)", "true", Boolean.class). }
false;public;0;4;;@Test public void testInlineListCreation05() {     evaluate("3 between {1,5}", "true", Boolean.class). }
false;public;0;4;;@Test public void testInlineListCreation06() {     evaluate("8 between {1,5}", "false", Boolean.class). }
false;public;0;6;;@Test public void testInlineListAndProjectionSelection() {     evaluate("{1,2,3,4,5,6}.![#this>3]", "[false, false, false, true, true, true]", ArrayList.class).     evaluate("{1,2,3,4,5,6}.?[#this>3]", "[4, 5, 6]", ArrayList.class).     evaluate("{1,2,3,4,5,6,7,8,9,10}.?[#isEven(#this) == 'y']", "[2, 4, 6, 8, 10]", ArrayList.class). }
false;public;0;4;;@Test public void testSetConstruction01() {     evaluate("new java.util.HashSet().addAll({'a','b','c'})", "true", Boolean.class). }
false;public;0;4;;@Test public void testRelOperatorsBetween01() {     evaluate("32 between {32, 42}", "true", Boolean.class). }
false;public;0;4;;@Test public void testRelOperatorsBetween02() {     evaluate("'efg' between {'abc', 'xyz'}", "true", Boolean.class). }
false;public;0;4;;@Test public void testRelOperatorsBetween03() {     evaluate("42 between {32, 42}", "true", Boolean.class). }
false;public;0;11;;@Test public void testRelOperatorsBetween04() {     evaluate("new java.math.BigDecimal('1') between {new java.math.BigDecimal('1'),new java.math.BigDecimal('5')}", "true", Boolean.class).     evaluate("new java.math.BigDecimal('3') between {new java.math.BigDecimal('1'),new java.math.BigDecimal('5')}", "true", Boolean.class).     evaluate("new java.math.BigDecimal('5') between {new java.math.BigDecimal('1'),new java.math.BigDecimal('5')}", "true", Boolean.class).     evaluate("new java.math.BigDecimal('8') between {new java.math.BigDecimal('1'),new java.math.BigDecimal('5')}", "false", Boolean.class). }
false;public;0;4;;@Test public void testRelOperatorsBetweenErrors02() {     evaluateAndCheckError("'abc' between {5,7}", SpelMessage.NOT_COMPARABLE, 6). }
false;public;0;9;;@Test public void testConstantRepresentation1() {     checkConstantList("{1,2,3,4,5}", true).     checkConstantList("{'abc'}", true).     checkConstantList("{}", true).     checkConstantList("{#a,2,3}", false).     checkConstantList("{1,2,Integer.valueOf(4)}", false).     checkConstantList("{1,2,{#a}}", false). }
false;private;2;13;;private void checkConstantList(String expressionText, boolean expectedToBeConstant) {     SpelExpressionParser parser = new SpelExpressionParser().     SpelExpression expression = (SpelExpression) parser.parseExpression(expressionText).     SpelNode node = expression.getAST().     assertTrue(node instanceof InlineList).     InlineList inlineList = (InlineList) node.     if (expectedToBeConstant) {         assertTrue(inlineList.isConstant()).     } else {         assertFalse(inlineList.isConstant()).     } }
false;public;0;5;;@Test(expected = UnsupportedOperationException.class) public void testInlineListWriting() {     // list should be unmodifiable     evaluate("{1, 2, 3, 4, 5}[0]=6", "[1, 2, 3, 4, 5]", unmodifiableClass). }
