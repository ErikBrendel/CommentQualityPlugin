# id;timestamp;commentText;codeText;commentWords;codeWords
OperatorMatches -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1328020251;Check the first operand matches the regex specified as the second operand._@param state the expression state_@return true if the first operand matches the regex specified as the second operand, otherwise false_@throws EvaluationException if there is a problem evaluating the expression (e.g. the regex is invalid);@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl leftOp = getLeftOperand()__		SpelNodeImpl rightOp = getRightOperand()__		Object left = leftOp.getValue(state, String.class)__		Object right = getRightOperand().getValueInternal(state).getValue()__		try {_			if (!(left instanceof String)) {_				throw new SpelEvaluationException(leftOp.getStartPosition(),_						SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, left)__			}_			if (!(right instanceof String)) {_				throw new SpelEvaluationException(rightOp.getStartPosition(),_						SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)__			}_			Pattern pattern = Pattern.compile((String) right)__			Matcher matcher = pattern.matcher((String) left)__			return BooleanTypedValue.forValue(matcher.matches())__		}_		catch (PatternSyntaxException pse) {_			throw new SpelEvaluationException(rightOp.getStartPosition(), pse, SpelMessage.INVALID_PATTERN, right)__		}_	};check,the,first,operand,matches,the,regex,specified,as,the,second,operand,param,state,the,expression,state,return,true,if,the,first,operand,matches,the,regex,specified,as,the,second,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression,e,g,the,regex,is,invalid;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,left,op,get,left,operand,spel,node,impl,right,op,get,right,operand,object,left,left,op,get,value,state,string,class,object,right,get,right,operand,get,value,internal,state,get,value,try,if,left,instanceof,string,throw,new,spel,evaluation,exception,left,op,get,start,position,spel,message,left,if,right,instanceof,string,throw,new,spel,evaluation,exception,right,op,get,start,position,spel,message,right,pattern,pattern,pattern,compile,string,right,matcher,matcher,pattern,matcher,string,left,return,boolean,typed,value,for,value,matcher,matches,catch,pattern,syntax,exception,pse,throw,new,spel,evaluation,exception,right,op,get,start,position,pse,spel,message,right
OperatorMatches -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1372363092;Check the first operand matches the regex specified as the second operand._@param state the expression state_@return true if the first operand matches the regex specified as the second_operand, otherwise false_@throws EvaluationException if there is a problem evaluating the expression (e.g._the regex is invalid);@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl leftOp = getLeftOperand()__		SpelNodeImpl rightOp = getRightOperand()__		Object left = leftOp.getValue(state, String.class)__		Object right = getRightOperand().getValueInternal(state).getValue()__		try {_			if (!(left instanceof String)) {_				throw new SpelEvaluationException(leftOp.getStartPosition(),_						SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, left)__			}_			if (!(right instanceof String)) {_				throw new SpelEvaluationException(rightOp.getStartPosition(),_						SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)__			}_			Pattern pattern = Pattern.compile((String) right)__			Matcher matcher = pattern.matcher((String) left)__			return BooleanTypedValue.forValue(matcher.matches())__		}_		catch (PatternSyntaxException pse) {_			throw new SpelEvaluationException(rightOp.getStartPosition(), pse, SpelMessage.INVALID_PATTERN, right)__		}_	};check,the,first,operand,matches,the,regex,specified,as,the,second,operand,param,state,the,expression,state,return,true,if,the,first,operand,matches,the,regex,specified,as,the,second,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression,e,g,the,regex,is,invalid;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,left,op,get,left,operand,spel,node,impl,right,op,get,right,operand,object,left,left,op,get,value,state,string,class,object,right,get,right,operand,get,value,internal,state,get,value,try,if,left,instanceof,string,throw,new,spel,evaluation,exception,left,op,get,start,position,spel,message,left,if,right,instanceof,string,throw,new,spel,evaluation,exception,right,op,get,start,position,spel,message,right,pattern,pattern,pattern,compile,string,right,matcher,matcher,pattern,matcher,string,left,return,boolean,typed,value,for,value,matcher,matches,catch,pattern,syntax,exception,pse,throw,new,spel,evaluation,exception,right,op,get,start,position,pse,spel,message,right
OperatorMatches -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1412630983;Check the first operand matches the regex specified as the second operand._@param state the expression state_@return {@code true} if the first operand matches the regex specified as the_second operand, otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression_(e.g. the regex is invalid);@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl leftOp = getLeftOperand()__		SpelNodeImpl rightOp = getRightOperand()__		Object left = leftOp.getValue(state, String.class)__		Object right = getRightOperand().getValueInternal(state).getValue()___		if (!(left instanceof String)) {_			throw new SpelEvaluationException(leftOp.getStartPosition(),_					SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, left)__		}_		if (!(right instanceof String)) {_			throw new SpelEvaluationException(rightOp.getStartPosition(),_					SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)__		}__		try {_			Pattern pattern = Pattern.compile((String) right)__			Matcher matcher = pattern.matcher((String) left)__			return BooleanTypedValue.forValue(matcher.matches())__		}_		catch (PatternSyntaxException ex) {_			throw new SpelEvaluationException(rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right)__		}_	};check,the,first,operand,matches,the,regex,specified,as,the,second,operand,param,state,the,expression,state,return,code,true,if,the,first,operand,matches,the,regex,specified,as,the,second,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression,e,g,the,regex,is,invalid;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,left,op,get,left,operand,spel,node,impl,right,op,get,right,operand,object,left,left,op,get,value,state,string,class,object,right,get,right,operand,get,value,internal,state,get,value,if,left,instanceof,string,throw,new,spel,evaluation,exception,left,op,get,start,position,spel,message,left,if,right,instanceof,string,throw,new,spel,evaluation,exception,right,op,get,start,position,spel,message,right,try,pattern,pattern,pattern,compile,string,right,matcher,matcher,pattern,matcher,string,left,return,boolean,typed,value,for,value,matcher,matches,catch,pattern,syntax,exception,ex,throw,new,spel,evaluation,exception,right,op,get,start,position,ex,spel,message,right
OperatorMatches -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1421766131;Check the first operand matches the regex specified as the second operand._@param state the expression state_@return {@code true} if the first operand matches the regex specified as the_second operand, otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression_(e.g. the regex is invalid);@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl leftOp = getLeftOperand()__		SpelNodeImpl rightOp = getRightOperand()__		Object left = leftOp.getValue(state, String.class)__		Object right = getRightOperand().getValueInternal(state).getValue()___		if (!(left instanceof String)) {_			throw new SpelEvaluationException(leftOp.getStartPosition(),_					SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, left)__		}_		if (!(right instanceof String)) {_			throw new SpelEvaluationException(rightOp.getStartPosition(),_					SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)__		}__		try {_			String leftString = (String) left__			String rightString = (String) right__			Pattern pattern = this.patternCache.get(rightString)__			if (pattern == null) {_				pattern = Pattern.compile(rightString)__				this.patternCache.putIfAbsent(rightString, pattern)__			}_			Matcher matcher = pattern.matcher(leftString)__			return BooleanTypedValue.forValue(matcher.matches())__		}_		catch (PatternSyntaxException ex) {_			throw new SpelEvaluationException(rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right)__		}_	};check,the,first,operand,matches,the,regex,specified,as,the,second,operand,param,state,the,expression,state,return,code,true,if,the,first,operand,matches,the,regex,specified,as,the,second,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression,e,g,the,regex,is,invalid;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,left,op,get,left,operand,spel,node,impl,right,op,get,right,operand,object,left,left,op,get,value,state,string,class,object,right,get,right,operand,get,value,internal,state,get,value,if,left,instanceof,string,throw,new,spel,evaluation,exception,left,op,get,start,position,spel,message,left,if,right,instanceof,string,throw,new,spel,evaluation,exception,right,op,get,start,position,spel,message,right,try,string,left,string,string,left,string,right,string,string,right,pattern,pattern,this,pattern,cache,get,right,string,if,pattern,null,pattern,pattern,compile,right,string,this,pattern,cache,put,if,absent,right,string,pattern,matcher,matcher,pattern,matcher,left,string,return,boolean,typed,value,for,value,matcher,matches,catch,pattern,syntax,exception,ex,throw,new,spel,evaluation,exception,right,op,get,start,position,ex,spel,message,right
OperatorMatches -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1467730834;Check the first operand matches the regex specified as the second operand._@param state the expression state_@return {@code true} if the first operand matches the regex specified as the_second operand, otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression_(e.g. the regex is invalid);@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl leftOp = getLeftOperand()__		SpelNodeImpl rightOp = getRightOperand()__		Object left = leftOp.getValue(state, String.class)__		Object right = getRightOperand().getValueInternal(state).getValue()___		if (!(left instanceof String)) {_			throw new SpelEvaluationException(leftOp.getStartPosition(),_					SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, left)__		}_		if (!(right instanceof String)) {_			throw new SpelEvaluationException(rightOp.getStartPosition(),_					SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)__		}__		try {_			String leftString = (String) left__			String rightString = (String) right__			Pattern pattern = this.patternCache.get(rightString)__			if (pattern == null) {_				pattern = Pattern.compile(rightString)__				this.patternCache.putIfAbsent(rightString, pattern)__			}_			Matcher matcher = pattern.matcher(leftString)__			return BooleanTypedValue.forValue(matcher.matches())__		}_		catch (PatternSyntaxException ex) {_			throw new SpelEvaluationException(rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right)__		}_	};check,the,first,operand,matches,the,regex,specified,as,the,second,operand,param,state,the,expression,state,return,code,true,if,the,first,operand,matches,the,regex,specified,as,the,second,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression,e,g,the,regex,is,invalid;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,left,op,get,left,operand,spel,node,impl,right,op,get,right,operand,object,left,left,op,get,value,state,string,class,object,right,get,right,operand,get,value,internal,state,get,value,if,left,instanceof,string,throw,new,spel,evaluation,exception,left,op,get,start,position,spel,message,left,if,right,instanceof,string,throw,new,spel,evaluation,exception,right,op,get,start,position,spel,message,right,try,string,left,string,string,left,string,right,string,string,right,pattern,pattern,this,pattern,cache,get,right,string,if,pattern,null,pattern,pattern,compile,right,string,this,pattern,cache,put,if,absent,right,string,pattern,matcher,matcher,pattern,matcher,left,string,return,boolean,typed,value,for,value,matcher,matches,catch,pattern,syntax,exception,ex,throw,new,spel,evaluation,exception,right,op,get,start,position,ex,spel,message,right
OperatorMatches -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1496837955;Check the first operand matches the regex specified as the second operand._@param state the expression state_@return {@code true} if the first operand matches the regex specified as the_second operand, otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression_(e.g. the regex is invalid);@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl leftOp = getLeftOperand()__		SpelNodeImpl rightOp = getRightOperand()__		String left = leftOp.getValue(state, String.class)__		Object right = getRightOperand().getValue(state)___		if (left == null) {_			throw new SpelEvaluationException(leftOp.getStartPosition(),_					SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, (Object) null)__		}_		if (!(right instanceof String)) {_			throw new SpelEvaluationException(rightOp.getStartPosition(),_					SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)__		}__		try {_			String rightString = (String) right__			Pattern pattern = this.patternCache.get(rightString)__			if (pattern == null) {_				pattern = Pattern.compile(rightString)__				this.patternCache.putIfAbsent(rightString, pattern)__			}_			Matcher matcher = pattern.matcher(left)__			return BooleanTypedValue.forValue(matcher.matches())__		}_		catch (PatternSyntaxException ex) {_			throw new SpelEvaluationException(rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right)__		}_	};check,the,first,operand,matches,the,regex,specified,as,the,second,operand,param,state,the,expression,state,return,code,true,if,the,first,operand,matches,the,regex,specified,as,the,second,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression,e,g,the,regex,is,invalid;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,left,op,get,left,operand,spel,node,impl,right,op,get,right,operand,string,left,left,op,get,value,state,string,class,object,right,get,right,operand,get,value,state,if,left,null,throw,new,spel,evaluation,exception,left,op,get,start,position,spel,message,object,null,if,right,instanceof,string,throw,new,spel,evaluation,exception,right,op,get,start,position,spel,message,right,try,string,right,string,string,right,pattern,pattern,this,pattern,cache,get,right,string,if,pattern,null,pattern,pattern,compile,right,string,this,pattern,cache,put,if,absent,right,string,pattern,matcher,matcher,pattern,matcher,left,return,boolean,typed,value,for,value,matcher,matches,catch,pattern,syntax,exception,ex,throw,new,spel,evaluation,exception,right,op,get,start,position,ex,spel,message,right
OperatorMatches -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1523956215;Check the first operand matches the regex specified as the second operand._@param state the expression state_@return {@code true} if the first operand matches the regex specified as the_second operand, otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression_(e.g. the regex is invalid);@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl leftOp = getLeftOperand()__		SpelNodeImpl rightOp = getRightOperand()__		String left = leftOp.getValue(state, String.class)__		Object right = getRightOperand().getValue(state)___		if (left == null) {_			throw new SpelEvaluationException(leftOp.getStartPosition(),_					SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, (Object) null)__		}_		if (!(right instanceof String)) {_			throw new SpelEvaluationException(rightOp.getStartPosition(),_					SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)__		}__		try {_			String rightString = (String) right__			Pattern pattern = this.patternCache.get(rightString)__			if (pattern == null) {_				pattern = Pattern.compile(rightString)__				this.patternCache.putIfAbsent(rightString, pattern)__			}_			Matcher matcher = pattern.matcher(new MatcherInput(left, new AccessCount()))__			return BooleanTypedValue.forValue(matcher.matches())__		}_		catch (PatternSyntaxException ex) {_			throw new SpelEvaluationException(_					rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right)__		}_		catch (IllegalStateException ex) {_			throw new SpelEvaluationException(_					rightOp.getStartPosition(), ex, SpelMessage.FLAWED_PATTERN, right)__		}_	};check,the,first,operand,matches,the,regex,specified,as,the,second,operand,param,state,the,expression,state,return,code,true,if,the,first,operand,matches,the,regex,specified,as,the,second,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression,e,g,the,regex,is,invalid;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,left,op,get,left,operand,spel,node,impl,right,op,get,right,operand,string,left,left,op,get,value,state,string,class,object,right,get,right,operand,get,value,state,if,left,null,throw,new,spel,evaluation,exception,left,op,get,start,position,spel,message,object,null,if,right,instanceof,string,throw,new,spel,evaluation,exception,right,op,get,start,position,spel,message,right,try,string,right,string,string,right,pattern,pattern,this,pattern,cache,get,right,string,if,pattern,null,pattern,pattern,compile,right,string,this,pattern,cache,put,if,absent,right,string,pattern,matcher,matcher,pattern,matcher,new,matcher,input,left,new,access,count,return,boolean,typed,value,for,value,matcher,matches,catch,pattern,syntax,exception,ex,throw,new,spel,evaluation,exception,right,op,get,start,position,ex,spel,message,right,catch,illegal,state,exception,ex,throw,new,spel,evaluation,exception,right,op,get,start,position,ex,spel,message,right
OperatorMatches -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1548712256;Check the first operand matches the regex specified as the second operand._@param state the expression state_@return {@code true} if the first operand matches the regex specified as the_second operand, otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression_(e.g. the regex is invalid);@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl leftOp = getLeftOperand()__		SpelNodeImpl rightOp = getRightOperand()__		String left = leftOp.getValue(state, String.class)__		Object right = getRightOperand().getValue(state)___		if (left == null) {_			throw new SpelEvaluationException(leftOp.getStartPosition(),_					SpelMessage.INVALID_FIRST_OPERAND_FOR_MATCHES_OPERATOR, (Object) null)__		}_		if (!(right instanceof String)) {_			throw new SpelEvaluationException(rightOp.getStartPosition(),_					SpelMessage.INVALID_SECOND_OPERAND_FOR_MATCHES_OPERATOR, right)__		}__		try {_			String rightString = (String) right__			Pattern pattern = this.patternCache.get(rightString)__			if (pattern == null) {_				pattern = Pattern.compile(rightString)__				this.patternCache.putIfAbsent(rightString, pattern)__			}_			Matcher matcher = pattern.matcher(new MatcherInput(left, new AccessCount()))__			return BooleanTypedValue.forValue(matcher.matches())__		}_		catch (PatternSyntaxException ex) {_			throw new SpelEvaluationException(_					rightOp.getStartPosition(), ex, SpelMessage.INVALID_PATTERN, right)__		}_		catch (IllegalStateException ex) {_			throw new SpelEvaluationException(_					rightOp.getStartPosition(), ex, SpelMessage.FLAWED_PATTERN, right)__		}_	};check,the,first,operand,matches,the,regex,specified,as,the,second,operand,param,state,the,expression,state,return,code,true,if,the,first,operand,matches,the,regex,specified,as,the,second,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression,e,g,the,regex,is,invalid;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,left,op,get,left,operand,spel,node,impl,right,op,get,right,operand,string,left,left,op,get,value,state,string,class,object,right,get,right,operand,get,value,state,if,left,null,throw,new,spel,evaluation,exception,left,op,get,start,position,spel,message,object,null,if,right,instanceof,string,throw,new,spel,evaluation,exception,right,op,get,start,position,spel,message,right,try,string,right,string,string,right,pattern,pattern,this,pattern,cache,get,right,string,if,pattern,null,pattern,pattern,compile,right,string,this,pattern,cache,put,if,absent,right,string,pattern,matcher,matcher,pattern,matcher,new,matcher,input,left,new,access,count,return,boolean,typed,value,for,value,matcher,matches,catch,pattern,syntax,exception,ex,throw,new,spel,evaluation,exception,right,op,get,start,position,ex,spel,message,right,catch,illegal,state,exception,ex,throw,new,spel,evaluation,exception,right,op,get,start,position,ex,spel,message,right
