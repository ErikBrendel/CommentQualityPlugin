# id;timestamp;commentText;codeText;commentWords;codeWords
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1328020251;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target instanceof Class)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,instanceof,class,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1337239719;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target instanceof Class)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,instanceof,class,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1350072056;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1353028965;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1355351963;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1355352386;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1355390119;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1356735495;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1357119239;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1357119417;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1362408075;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1368482696;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1372363092;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1382138457;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1382378529;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1385412762;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1386100884;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1394533229;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1405011154;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1405514506;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name);1410558554;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext eContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (Field) (invocationTarget==null?null:invocationTarget.member)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,e,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,field,invocation,target,null,null,invocation,target,member,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1521630400;@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1521673386;@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1521738567;@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1521905437;@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1522359230;@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1528313153;@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1528667792;@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1530174524;Get the last read invoker pair._@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};get,the,last,read,invoker,pair,deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> @Deprecated 	@Nullable 	public Member getLastReadInvokerPair();1530174524;Get the last read invoker pair._@deprecated as of 4.3.15 since it is not used within the framework anymore;@Deprecated_	@Nullable_	public Member getLastReadInvokerPair() {_		InvokerPair lastReadInvoker = this.lastReadInvokerPair__		return (lastReadInvoker != null ? lastReadInvoker.member : null)__	};get,the,last,read,invoker,pair,deprecated,as,of,4,3,15,since,it,is,not,used,within,the,framework,anymore;deprecated,nullable,public,member,get,last,read,invoker,pair,invoker,pair,last,read,invoker,this,last,read,invoker,pair,return,last,read,invoker,null,last,read,invoker,member,null
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method, Class<?> targetClass);1521738567;Determine whether the given {@code Method} is a candidate for property access._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@param targetClass the concrete target class that is being introspected_@since 4.3.15;protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,param,target,class,the,concrete,target,class,that,is,being,introspected,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,class,target,class,return,true
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method, Class<?> targetClass);1521905437;Determine whether the given {@code Method} is a candidate for property access_on an instance of the given target class._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@param targetClass the concrete target class that is being introspected_@since 4.3.15;protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,on,an,instance,of,the,given,target,class,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,param,target,class,the,concrete,target,class,that,is,being,introspected,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,class,target,class,return,true
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method, Class<?> targetClass);1522359230;Determine whether the given {@code Method} is a candidate for property access_on an instance of the given target class._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@param targetClass the concrete target class that is being introspected_@since 4.3.15;protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,on,an,instance,of,the,given,target,class,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,param,target,class,the,concrete,target,class,that,is,being,introspected,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,class,target,class,return,true
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method, Class<?> targetClass);1528313153;Determine whether the given {@code Method} is a candidate for property access_on an instance of the given target class._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@param targetClass the concrete target class that is being introspected_@since 4.3.15;protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,on,an,instance,of,the,given,target,class,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,param,target,class,the,concrete,target,class,that,is,being,introspected,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,class,target,class,return,true
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method, Class<?> targetClass);1528667792;Determine whether the given {@code Method} is a candidate for property access_on an instance of the given target class._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@param targetClass the concrete target class that is being introspected_@since 4.3.15;protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,on,an,instance,of,the,given,target,class,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,param,target,class,the,concrete,target,class,that,is,being,introspected,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,class,target,class,return,true
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method, Class<?> targetClass);1530174524;Determine whether the given {@code Method} is a candidate for property access_on an instance of the given target class._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@param targetClass the concrete target class that is being introspected_@since 4.3.15;protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,on,an,instance,of,the,given,target,class,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,param,target,class,the,concrete,target,class,that,is,being,introspected,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,class,target,class,return,true
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method, Class<?> targetClass);1530174524;Determine whether the given {@code Method} is a candidate for property access_on an instance of the given target class._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@param targetClass the concrete target class that is being introspected_@since 4.3.15;protected boolean isCandidateForProperty(Method method, Class<?> targetClass) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,on,an,instance,of,the,given,target,class,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,param,target,class,the,concrete,target,class,that,is,being,introspected,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,class,target,class,return,true
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1328020251;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1337239719;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1350072056;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1353028965;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,is,bridge,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1355351963;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,is,bridge,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1355352386;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,is,bridge,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1355390119;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,is,bridge,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1356735495;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,is,bridge,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1357119239;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + StringUtils.capitalize(propertyName)__		for (Method method : methods) {_			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,string,utils,capitalize,property,name,for,method,method,methods,if,method,is,bridge,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1357119417;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = clazz.getMethods()__		String setterName = "set" + getPropertyMethodSuffix(propertyName)__		for (Method method : methods) {_			if (!method.isBridge() && method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,clazz,get,methods,string,setter,name,set,get,property,method,suffix,property,name,for,method,method,methods,if,method,is,bridge,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1362408075;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = getSortedClassMethods(clazz)__		String setterName = "set" + getPropertyMethodSuffix(propertyName)__		for (Method method : methods) {_			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,get,sorted,class,methods,clazz,string,setter,name,set,get,property,method,suffix,property,name,for,method,method,methods,if,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1368482696;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = getSortedClassMethods(clazz)__		String setterName = "set" + getPropertyMethodSuffix(propertyName)__		for (Method method : methods) {_			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,get,sorted,class,methods,clazz,string,setter,name,set,get,property,method,suffix,property,name,for,method,method,methods,if,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1372363092;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] methods = getSortedClassMethods(clazz)__		String setterName = "set" + getPropertyMethodSuffix(propertyName)__		for (Method method : methods) {_			if (method.getName().equals(setterName) && method.getParameterTypes().length == 1 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,methods,get,sorted,class,methods,clazz,string,setter,name,set,get,property,method,suffix,property,name,for,method,method,methods,if,method,get,name,equals,setter,name,method,get,parameter,types,length,1,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1382138457;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				new String[] { "set" }, clazz, mustBeStatic, 1)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,new,string,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1382378529;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				new String[] { "set" }, clazz, mustBeStatic, 1)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,new,string,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1385412762;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				new String[] { "set" }, clazz, mustBeStatic, 1)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,new,string,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1386100884;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1394533229;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1405011154;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1405514506;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1410558554;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1412630983;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1425759378;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1449878380;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1449965401;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1450050966;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1458999130;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1467730834;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1467846264;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1495868221;Find a setter method for the specified property.;protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1356735495;@return null which means this is a general purpose accessor;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1368482696;@return null which means this is a general purpose accessor;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1372363092;@return null which means this is a general purpose accessor;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1382138457;@return null which means this is a general purpose accessor;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1382378529;@return null which means this is a general purpose accessor;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1385412762;@return null which means this is a general purpose accessor;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1386100884;@return null which means this is a general purpose accessor;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1394533229;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1405011154;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1405514506;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1410558554;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1412630983;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1425759378;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1449878380;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1449965401;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1450050966;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1458999130;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1467730834;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1467846264;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1495868221;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1496837955;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1497341397;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1497341594;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1498496339;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	public Class<?>[] getSpecificTargetClasses();1498780456;Returns {@code null} which means this is a general purpose accessor.;@Override_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1328020251;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1337239719;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1350072056;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1353028965;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1355351963;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1355352386;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1355390119;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1357119239;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1357119417;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public Class<?>[] getSpecificTargetClasses();1362408075;@return null which means this is a general purpose accessor;public Class<?>[] getSpecificTargetClasses() {_		return null__	};return,null,which,means,this,is,a,general,purpose,accessor;public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name);1496837955;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,nullable,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name);1497341397;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,nullable,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name);1497341594;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,nullable,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name);1498496339;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,nullable,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name);1498780456;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,nullable,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name);1502974979;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,nullable,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor();1521673386;Create a new property accessor for reading as well writing._@see #ReflectivePropertyAccessor(boolean);public ReflectivePropertyAccessor() {_		this.allowWrite = true__	};create,a,new,property,accessor,for,reading,as,well,writing,see,reflective,property,accessor,boolean;public,reflective,property,accessor,this,allow,write,true
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor();1521738567;Create a new property accessor for reading as well writing._@see #ReflectivePropertyAccessor(boolean);public ReflectivePropertyAccessor() {_		this.allowWrite = true__	};create,a,new,property,accessor,for,reading,as,well,writing,see,reflective,property,accessor,boolean;public,reflective,property,accessor,this,allow,write,true
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor();1521905437;Create a new property accessor for reading as well writing._@see #ReflectivePropertyAccessor(boolean);public ReflectivePropertyAccessor() {_		this.allowWrite = true__	};create,a,new,property,accessor,for,reading,as,well,writing,see,reflective,property,accessor,boolean;public,reflective,property,accessor,this,allow,write,true
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor();1522359230;Create a new property accessor for reading as well writing._@see #ReflectivePropertyAccessor(boolean);public ReflectivePropertyAccessor() {_		this.allowWrite = true__	};create,a,new,property,accessor,for,reading,as,well,writing,see,reflective,property,accessor,boolean;public,reflective,property,accessor,this,allow,write,true
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor();1528313153;Create a new property accessor for reading as well writing._@see #ReflectivePropertyAccessor(boolean);public ReflectivePropertyAccessor() {_		this.allowWrite = true__	};create,a,new,property,accessor,for,reading,as,well,writing,see,reflective,property,accessor,boolean;public,reflective,property,accessor,this,allow,write,true
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor();1528667792;Create a new property accessor for reading as well writing._@see #ReflectivePropertyAccessor(boolean);public ReflectivePropertyAccessor() {_		this.allowWrite = true__	};create,a,new,property,accessor,for,reading,as,well,writing,see,reflective,property,accessor,boolean;public,reflective,property,accessor,this,allow,write,true
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor();1530174524;Create a new property accessor for reading as well writing._@see #ReflectivePropertyAccessor(boolean);public ReflectivePropertyAccessor() {_		this.allowWrite = true__	};create,a,new,property,accessor,for,reading,as,well,writing,see,reflective,property,accessor,boolean;public,reflective,property,accessor,this,allow,write,true
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor();1530174524;Create a new property accessor for reading as well writing._@see #ReflectivePropertyAccessor(boolean);public ReflectivePropertyAccessor() {_		this.allowWrite = true__	};create,a,new,property,accessor,for,reading,as,well,writing,see,reflective,property,accessor,boolean;public,reflective,property,accessor,this,allow,write,true
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1496837955;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1497341397;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1497341594;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1498496339;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1498780456;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1502974979;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1521630400;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1521673386;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1521738567;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1521905437;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1522359230;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1528313153;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1528667792;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1530174524;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Nullable 	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1530174524;Find a setter method for the specified property.;@Nullable_	protected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"set", clazz, mustBeStatic, 1, ANY_TYPES)__	};find,a,setter,method,for,the,specified,property;nullable,protected,method,find,setter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,set,clazz,must,be,static,1
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1502974979;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1521630400;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1521673386;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1521738567;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1521905437;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1522359230;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1528313153;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1528667792;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1530174524;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> @Override 	@Nullable 	public Class<?>[] getSpecificTargetClasses();1530174524;Returns {@code null} which means this is a general purpose accessor.;@Override_	@Nullable_	public Class<?>[] getSpecificTargetClasses() {_		return null__	};returns,code,null,which,means,this,is,a,general,purpose,accessor;override,nullable,public,class,get,specific,target,classes,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1328020251;Find a getter method for the specified property. A getter is defined as a method whose name start with the prefix_'get' and the rest of the name is the same as the property name (with the first character uppercased).;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		_		String getterName = "get" + StringUtils.capitalize(propertyName)__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + StringUtils.capitalize(propertyName)__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					boolean.class.equals(method.getReturnType()) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property,a,getter,is,defined,as,a,method,whose,name,start,with,the,prefix,get,and,the,rest,of,the,name,is,the,same,as,the,property,name,with,the,first,character,uppercased;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,getter,name,get,string,utils,capitalize,property,name,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,string,utils,capitalize,property,name,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1337239719;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyWriteMethodSuffix__		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			propertyWriteMethodSuffix = propertyName__		}_		else {_			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName)__		}_		_		String getterName = "get" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					boolean.class.equals(method.getReturnType()) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,write,method,suffix,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,property,write,method,suffix,property,name,else,property,write,method,suffix,string,utils,capitalize,property,name,string,getter,name,get,property,write,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,write,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1350072056;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyWriteMethodSuffix__		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			propertyWriteMethodSuffix = propertyName__		}_		else {_			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName)__		}_		_		String getterName = "get" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					boolean.class.equals(method.getReturnType()) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,write,method,suffix,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,property,write,method,suffix,property,name,else,property,write,method,suffix,string,utils,capitalize,property,name,string,getter,name,get,property,write,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,write,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1353028965;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyWriteMethodSuffix__		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			propertyWriteMethodSuffix = propertyName__		}_		else {_			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName)__		}_		_		String getterName = "get" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					boolean.class.equals(method.getReturnType()) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,write,method,suffix,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,property,write,method,suffix,property,name,else,property,write,method,suffix,string,utils,capitalize,property,name,string,getter,name,get,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1355351963;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyWriteMethodSuffix__		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			propertyWriteMethodSuffix = propertyName__		}_		else {_			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName)__		}_		_		String getterName = "get" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					boolean.class.equals(method.getReturnType()) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,write,method,suffix,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,property,write,method,suffix,property,name,else,property,write,method,suffix,string,utils,capitalize,property,name,string,getter,name,get,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1355352386;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyWriteMethodSuffix__		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			propertyWriteMethodSuffix = propertyName__		}_		else {_			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName)__		}_		_		String getterName = "get" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					boolean.class.equals(method.getReturnType()) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,write,method,suffix,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,property,write,method,suffix,property,name,else,property,write,method,suffix,string,utils,capitalize,property,name,string,getter,name,get,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1355390119;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyWriteMethodSuffix__		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			propertyWriteMethodSuffix = propertyName__		}_		else {_			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName)__		}_		_		String getterName = "get" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,write,method,suffix,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,property,write,method,suffix,property,name,else,property,write,method,suffix,string,utils,capitalize,property,name,string,getter,name,get,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1356735495;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyWriteMethodSuffix__		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			propertyWriteMethodSuffix = propertyName__		}_		else {_			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName)__		}_		_		String getterName = "get" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,write,method,suffix,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,property,write,method,suffix,property,name,else,property,write,method,suffix,string,utils,capitalize,property,name,string,getter,name,get,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1357119239;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyWriteMethodSuffix__		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			propertyWriteMethodSuffix = propertyName__		}_		else {_			propertyWriteMethodSuffix = StringUtils.capitalize(propertyName)__		}_		_		String getterName = "get" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyWriteMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,write,method,suffix,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,property,write,method,suffix,property,name,else,property,write,method,suffix,string,utils,capitalize,property,name,string,getter,name,get,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,write,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1357119417;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = clazz.getMethods()__		String propertyMethodSuffix = getPropertyMethodSuffix(propertyName)___		_		String getterName = "get" + propertyMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyMethodSuffix__		for (Method method : ms) {_			if (!method.isBridge() && method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,clazz,get,methods,string,property,method,suffix,get,property,method,suffix,property,name,string,getter,name,get,property,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,method,suffix,for,method,method,ms,if,method,is,bridge,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1362408075;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = getSortedClassMethods(clazz)__		String propertyMethodSuffix = getPropertyMethodSuffix(propertyName)___		_		String getterName = "get" + propertyMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,get,sorted,class,methods,clazz,string,property,method,suffix,get,property,method,suffix,property,name,string,getter,name,get,property,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1368482696;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = getSortedClassMethods(clazz)__		String propertyMethodSuffix = getPropertyMethodSuffix(propertyName)___		_		String getterName = "get" + propertyMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,get,sorted,class,methods,clazz,string,property,method,suffix,get,property,method,suffix,property,name,string,getter,name,get,property,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1372363092;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method[] ms = getSortedClassMethods(clazz)__		String propertyMethodSuffix = getPropertyMethodSuffix(propertyName)___		_		String getterName = "get" + propertyMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		_		getterName = "is" + propertyMethodSuffix__		for (Method method : ms) {_			if (method.getName().equals(getterName) && method.getParameterTypes().length == 0 &&_					(boolean.class.equals(method.getReturnType()) || Boolean.class.equals(method.getReturnType())) &&_					(!mustBeStatic || Modifier.isStatic(method.getModifiers()))) {_				return method__			}_		}_		return null__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,ms,get,sorted,class,methods,clazz,string,property,method,suffix,get,property,method,suffix,property,name,string,getter,name,get,property,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,must,be,static,modifier,is,static,method,get,modifiers,return,method,getter,name,is,property,method,suffix,for,method,method,ms,if,method,get,name,equals,getter,name,method,get,parameter,types,length,0,boolean,class,equals,method,get,return,type,boolean,class,equals,method,get,return,type,must,be,static,modifier,is,static,method,get,modifiers,return,method,return,null
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1382138457;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				new String[] { "get", "is" }, clazz, mustBeStatic, 0)__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,new,string,get,is,clazz,must,be,static,0
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1382378529;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				new String[] { "get", "is" }, clazz, mustBeStatic, 0)__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,new,string,get,is,clazz,must,be,static,0
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1385412762;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		return findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				new String[] { "get", "is" }, clazz, mustBeStatic, 0)__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,return,find,method,for,property,get,property,method,suffixes,property,name,new,string,get,is,clazz,must,be,static,0
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1386100884;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1394533229;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1405011154;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1405514506;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1410558554;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1412630983;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1425759378;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1449878380;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1449965401;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1450050966;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1458999130;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1467730834;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1467846264;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1495868221;Find a getter method for the specified property.;protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1382138457;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1382378529;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1385412762;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1386100884;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1394533229;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1405011154;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1405514506;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1410558554;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1412630983;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1425759378;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1449878380;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1449965401;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1450050966;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1458999130;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1467730834;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1467846264;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1495868221;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1496837955;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1497341397;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1497341594;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1498496339;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1498780456;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1502974979;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] { suffix }__		}_		return new String[] { suffix, StringUtils.capitalize(suffix) }__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1521630400;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1521673386;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1521738567;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1521905437;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1522359230;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1528313153;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1528667792;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1530174524;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected String[] getPropertyMethodSuffixes(String propertyName);1530174524;Return the method suffixes for a given property name. The default implementation_uses JavaBean conventions with additional support for properties of the form 'xY'_where the method 'getXY()' is used in preference to the JavaBean convention of_'getxY()'.;protected String[] getPropertyMethodSuffixes(String propertyName) {_		String suffix = getPropertyMethodSuffix(propertyName)__		if (suffix.length() > 0 && Character.isUpperCase(suffix.charAt(0))) {_			return new String[] {suffix}__		}_		return new String[] {suffix, StringUtils.capitalize(suffix)}__	};return,the,method,suffixes,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions,with,additional,support,for,properties,of,the,form,x,y,where,the,method,get,xy,is,used,in,preference,to,the,java,bean,convention,of,getx,y;protected,string,get,property,method,suffixes,string,property,name,string,suffix,get,property,method,suffix,property,name,if,suffix,length,0,character,is,upper,case,suffix,char,at,0,return,new,string,suffix,return,new,string,suffix,string,utils,capitalize,suffix
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method);1521630400;Determine whether the given {@code Method} is a candidate for property access._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@since 4.3.15;protected boolean isCandidateForProperty(Method method) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,return,true
ReflectivePropertyAccessor -> protected boolean isCandidateForProperty(Method method);1521673386;Determine whether the given {@code Method} is a candidate for property access._<p>The default implementation considers any method as a candidate, even for_non-user-declared properties on the {@link Object} base class._@param method the Method to evaluate_@since 4.3.15;protected boolean isCandidateForProperty(Method method) {_		return true__	};determine,whether,the,given,code,method,is,a,candidate,for,property,access,p,the,default,implementation,considers,any,method,as,a,candidate,even,for,non,user,declared,properties,on,the,link,object,base,class,param,method,the,method,to,evaluate,since,4,3,15;protected,boolean,is,candidate,for,property,method,method,return,true
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1496837955;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1497341397;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1497341594;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1498496339;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1498780456;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1502974979;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1521630400;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1521673386;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1521738567;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1521905437;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1522359230;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1528313153;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1528667792;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1530174524;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				 "get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					 "is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> @Nullable 	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic);1530174524;Find a getter method for the specified property.;@Nullable_	protected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic) {_		Method method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_				"get", clazz, mustBeStatic, 0, ANY_TYPES)__		if (method == null) {_			method = findMethodForProperty(getPropertyMethodSuffixes(propertyName),_					"is", clazz, mustBeStatic, 0, BOOLEAN_TYPES)__		}_		return method__	};find,a,getter,method,for,the,specified,property;nullable,protected,method,find,getter,for,property,string,property,name,class,clazz,boolean,must,be,static,method,method,find,method,for,property,get,property,method,suffixes,property,name,get,clazz,must,be,static,0,if,method,null,method,find,method,for,property,get,property,method,suffixes,property,name,is,clazz,must,be,static,0,return,method
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1521630400;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1521673386;Attempt to create an optimized property accessor tailored for a property of a_particular name on a particular class. The general ReflectivePropertyAccessor_will always work but is not optimal due to the need to lookup which reflective_member (method/field) to use each time read() is called. This method will just_return the ReflectivePropertyAccessor instance if it is unable to build a more_optimal accessor._<p>Note: An optimal accessor is currently only usable for read attempts._Do not call this method if you need a read-write accessor._@see OptimalPropertyAccessor;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null && isCandidateForProperty(method)) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,a,more,optimal,accessor,p,note,an,optimal,accessor,is,currently,only,usable,for,read,attempts,do,not,call,this,method,if,you,need,a,read,write,accessor,see,optimal,property,accessor;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,is,candidate,for,property,method,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1521738567;Attempt to create an optimized property accessor tailored for a property of a_particular name on a particular class. The general ReflectivePropertyAccessor_will always work but is not optimal due to the need to lookup which reflective_member (method/field) to use each time read() is called. This method will just_return the ReflectivePropertyAccessor instance if it is unable to build a more_optimal accessor._<p>Note: An optimal accessor is currently only usable for read attempts._Do not call this method if you need a read-write accessor._@see OptimalPropertyAccessor;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (clazz.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, clazz, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, clazz, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,a,more,optimal,accessor,p,note,an,optimal,accessor,is,currently,only,usable,for,read,attempts,do,not,call,this,method,if,you,need,a,read,write,accessor,see,optimal,property,accessor;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,clazz,target,instanceof,class,class,target,target,get,class,if,clazz,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,clazz,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,clazz,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,clazz,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1521905437;Attempt to create an optimized property accessor tailored for a property of a_particular name on a particular class. The general ReflectivePropertyAccessor_will always work but is not optimal due to the need to lookup which reflective_member (method/field) to use each time read() is called. This method will just_return the ReflectivePropertyAccessor instance if it is unable to build a more_optimal accessor._<p>Note: An optimal accessor is currently only usable for read attempts._Do not call this method if you need a read-write accessor._@see OptimalPropertyAccessor;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (clazz.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, clazz, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, clazz, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,a,more,optimal,accessor,p,note,an,optimal,accessor,is,currently,only,usable,for,read,attempts,do,not,call,this,method,if,you,need,a,read,write,accessor,see,optimal,property,accessor;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,clazz,target,instanceof,class,class,target,target,get,class,if,clazz,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,clazz,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,clazz,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,clazz,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1522359230;Attempt to create an optimized property accessor tailored for a property of a_particular name on a particular class. The general ReflectivePropertyAccessor_will always work but is not optimal due to the need to lookup which reflective_member (method/field) to use each time read() is called. This method will just_return the ReflectivePropertyAccessor instance if it is unable to build a more_optimal accessor._<p>Note: An optimal accessor is currently only usable for read attempts._Do not call this method if you need a read-write accessor._@see OptimalPropertyAccessor;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (clazz.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, clazz, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, clazz, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,a,more,optimal,accessor,p,note,an,optimal,accessor,is,currently,only,usable,for,read,attempts,do,not,call,this,method,if,you,need,a,read,write,accessor,see,optimal,property,accessor;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,clazz,target,instanceof,class,class,target,target,get,class,if,clazz,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,clazz,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,clazz,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,clazz,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1528313153;Attempt to create an optimized property accessor tailored for a property of a_particular name on a particular class. The general ReflectivePropertyAccessor_will always work but is not optimal due to the need to lookup which reflective_member (method/field) to use each time read() is called. This method will just_return the ReflectivePropertyAccessor instance if it is unable to build a more_optimal accessor._<p>Note: An optimal accessor is currently only usable for read attempts._Do not call this method if you need a read-write accessor._@see OptimalPropertyAccessor;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (clazz.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, clazz, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, clazz, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,a,more,optimal,accessor,p,note,an,optimal,accessor,is,currently,only,usable,for,read,attempts,do,not,call,this,method,if,you,need,a,read,write,accessor,see,optimal,property,accessor;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,clazz,target,instanceof,class,class,target,target,get,class,if,clazz,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,clazz,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,clazz,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,clazz,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1528667792;Attempt to create an optimized property accessor tailored for a property of a_particular name on a particular class. The general ReflectivePropertyAccessor_will always work but is not optimal due to the need to lookup which reflective_member (method/field) to use each time read() is called. This method will just_return the ReflectivePropertyAccessor instance if it is unable to build a more_optimal accessor._<p>Note: An optimal accessor is currently only usable for read attempts._Do not call this method if you need a read-write accessor._@see OptimalPropertyAccessor;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (clazz.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, clazz, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, clazz, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,a,more,optimal,accessor,p,note,an,optimal,accessor,is,currently,only,usable,for,read,attempts,do,not,call,this,method,if,you,need,a,read,write,accessor,see,optimal,property,accessor;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,clazz,target,instanceof,class,class,target,target,get,class,if,clazz,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,clazz,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,clazz,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,clazz,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1530174524;Attempt to create an optimized property accessor tailored for a property of a_particular name on a particular class. The general ReflectivePropertyAccessor_will always work but is not optimal due to the need to lookup which reflective_member (method/field) to use each time read() is called. This method will just_return the ReflectivePropertyAccessor instance if it is unable to build a more_optimal accessor._<p>Note: An optimal accessor is currently only usable for read attempts._Do not call this method if you need a read-write accessor._@see OptimalPropertyAccessor;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (clazz.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, clazz, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, clazz, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,a,more,optimal,accessor,p,note,an,optimal,accessor,is,currently,only,usable,for,read,attempts,do,not,call,this,method,if,you,need,a,read,write,accessor,see,optimal,property,accessor;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,clazz,target,instanceof,class,class,target,target,get,class,if,clazz,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,clazz,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,clazz,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,clazz,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name);1530174524;Attempt to create an optimized property accessor tailored for a property of a_particular name on a particular class. The general ReflectivePropertyAccessor_will always work but is not optimal due to the need to lookup which reflective_member (method/field) to use each time read() is called. This method will just_return the ReflectivePropertyAccessor instance if it is unable to build a more_optimal accessor._<p>Note: An optimal accessor is currently only usable for read attempts._Do not call this method if you need a read-write accessor._@see OptimalPropertyAccessor;public PropertyAccessor createOptimalAccessor(EvaluationContext context, @Nullable Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> clazz = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (clazz.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(clazz, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, clazz, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, clazz, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,a,more,optimal,accessor,p,note,an,optimal,accessor,is,currently,only,usable,for,read,attempts,do,not,call,this,method,if,you,need,a,read,write,accessor,see,optimal,property,accessor;public,property,accessor,create,optimal,accessor,evaluation,context,context,nullable,object,target,string,name,if,target,null,return,this,class,clazz,target,instanceof,class,class,target,target,get,class,if,clazz,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,clazz,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,clazz,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,clazz,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1412630983;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1425759378;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1449878380;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget==null?null:invocationTarget.member)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method,new TypeDescriptor(new MethodParameter(method,-1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}_		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,null,invocation,target,member,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1449965401;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1450050966;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		CacheKey cacheKey = new CacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,cache,key,cache,key,new,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1458999130;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1467730834;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1467846264;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name);1495868221;Attempt to create an optimized property accessor tailored for a property of a particular name on_a particular class. The general ReflectivePropertyAccessor will always work but is not optimal_due to the need to lookup which reflective member (method/field) to use each time read() is called._This method will just return the ReflectivePropertyAccessor instance if it is unable to build_something more optimal.;public PropertyAccessor createOptimalAccessor(EvaluationContext evalContext, Object target, String name) {_		_		if (target == null) {_			return this__		}_		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass())__		if (type.isArray()) {_			return this__		}__		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class)__		InvokerPair invocationTarget = this.readerCache.get(cacheKey)___		if (invocationTarget == null || invocationTarget.member instanceof Method) {_			Method method = (Method) (invocationTarget != null ? invocationTarget.member : null)__			if (method == null) {_				method = findGetterForProperty(name, type, target)__				if (method != null) {_					invocationTarget = new InvokerPair(method, new TypeDescriptor(new MethodParameter(method, -1)))__					ReflectionUtils.makeAccessible(method)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (method != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		if (invocationTarget == null || invocationTarget.member instanceof Field) {_			Field field = (invocationTarget != null ? (Field) invocationTarget.member : null)__			if (field == null) {_				field = findField(name, type, target instanceof Class)__				if (field != null) {_					invocationTarget = new InvokerPair(field, new TypeDescriptor(field))__					ReflectionUtils.makeAccessible(field)__					this.readerCache.put(cacheKey, invocationTarget)__				}_			}_			if (field != null) {_				return new OptimalPropertyAccessor(invocationTarget)__			}_		}__		return this__	};attempt,to,create,an,optimized,property,accessor,tailored,for,a,property,of,a,particular,name,on,a,particular,class,the,general,reflective,property,accessor,will,always,work,but,is,not,optimal,due,to,the,need,to,lookup,which,reflective,member,method,field,to,use,each,time,read,is,called,this,method,will,just,return,the,reflective,property,accessor,instance,if,it,is,unable,to,build,something,more,optimal;public,property,accessor,create,optimal,accessor,evaluation,context,eval,context,object,target,string,name,if,target,null,return,this,class,type,target,instanceof,class,class,target,target,get,class,if,type,is,array,return,this,property,cache,key,cache,key,new,property,cache,key,type,name,target,instanceof,class,invoker,pair,invocation,target,this,reader,cache,get,cache,key,if,invocation,target,null,invocation,target,member,instanceof,method,method,method,method,invocation,target,null,invocation,target,member,null,if,method,null,method,find,getter,for,property,name,type,target,if,method,null,invocation,target,new,invoker,pair,method,new,type,descriptor,new,method,parameter,method,1,reflection,utils,make,accessible,method,this,reader,cache,put,cache,key,invocation,target,if,method,null,return,new,optimal,property,accessor,invocation,target,if,invocation,target,null,invocation,target,member,instanceof,field,field,field,invocation,target,null,field,invocation,target,member,null,if,field,null,field,find,field,name,type,target,instanceof,class,if,field,null,invocation,target,new,invoker,pair,field,new,type,descriptor,field,reflection,utils,make,accessible,field,this,reader,cache,put,cache,key,invocation,target,if,field,null,return,new,optimal,property,accessor,invocation,target,return,this
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1328020251;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1337239719;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1350072056;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1353028965;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1355351963;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1355352386;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1355390119;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1356735495;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1357119239;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1357119417;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1362408075;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1368482696;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1372363092;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1382138457;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1382378529;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1385412762;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1386100884;Find a field of a certain name on a specified class;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1394533229;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1405011154;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1405514506;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1410558554;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1412630983;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1425759378;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1449878380;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1449965401;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1450050966;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1458999130;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1467730834;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1467846264;Find a field of a certain name on a specified class.;protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1362408075;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1368482696;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1372363092;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1382138457;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1382378529;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1385412762;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1386100884;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1394533229;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1405011154;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1405514506;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1410558554;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1412630983;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1425759378;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1449878380;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1449965401;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1450050966;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1458999130;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1467730834;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1467846264;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1495868221;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1496837955;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, new Comparator<Method>() {_			@Override_			public int compare(Method o1, Method o2) {_				return (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1)__			}_		})__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,new,comparator,method,override,public,int,compare,method,o1,method,o2,return,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1497341397;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1))__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1497341594;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1))__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1498496339;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1))__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1498780456;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1))__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1502974979;Returns class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge()) ? 0 : (o1.isBridge() ? 1 : -1))__		return methods__	};returns,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1521630400;Return class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__		return methods__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1521673386;Return class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__		return methods__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1521738567;Return class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__		return methods__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1521905437;Return class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__		return methods__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedClassMethods(Class<?> clazz);1522359230;Return class methods ordered with non bridge methods appearing higher.;private Method[] getSortedClassMethods(Class<?> clazz) {_		Method[] methods = clazz.getMethods()__		Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__		return methods__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,class,methods,class,clazz,method,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1495868221;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1496837955;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1497341397;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1497341594;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1498496339;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1498780456;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1502974979;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1521630400;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1521673386;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1521738567;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1521905437;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1522359230;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1528313153;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1528667792;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1530174524;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> @Nullable 	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic);1530174524;Find a field of a certain name on a specified class.;@Nullable_	protected Field findField(String name, Class<?> clazz, boolean mustBeStatic) {_		Field[] fields = clazz.getFields()__		for (Field field : fields) {_			if (field.getName().equals(name) && (!mustBeStatic || Modifier.isStatic(field.getModifiers()))) {_				return field__			}_		}_		_		_		if (clazz.getSuperclass() != null) {_			Field field = findField(name, clazz.getSuperclass(), mustBeStatic)__			if (field != null) {_				return field__			}_		}_		for (Class<?> implementedInterface : clazz.getInterfaces()) {_			Field field = findField(name, implementedInterface, mustBeStatic)__			if (field != null) {_				return field__			}_		}_		return null__	};find,a,field,of,a,certain,name,on,a,specified,class;nullable,protected,field,find,field,string,name,class,clazz,boolean,must,be,static,field,fields,clazz,get,fields,for,field,field,fields,if,field,get,name,equals,name,must,be,static,modifier,is,static,field,get,modifiers,return,field,if,clazz,get,superclass,null,field,field,find,field,name,clazz,get,superclass,must,be,static,if,field,null,return,field,for,class,implemented,interface,clazz,get,interfaces,field,field,find,field,name,implemented,interface,must,be,static,if,field,null,return,field,return,null
ReflectivePropertyAccessor -> private Method[] getSortedMethods(Class<?> clazz);1528313153;Return class methods ordered with non-bridge methods appearing higher.;private Method[] getSortedMethods(Class<?> clazz) {_		Method[] methods = this.sortedMethodsCache.get(clazz)__		if (methods == null) {_			methods = clazz.getMethods()__			Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__			this.sortedMethodsCache.put(clazz, methods)__		}_		return methods__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,methods,class,clazz,method,methods,this,sorted,methods,cache,get,clazz,if,methods,null,methods,clazz,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,this,sorted,methods,cache,put,clazz,methods,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedMethods(Class<?> clazz);1528667792;Return class methods ordered with non-bridge methods appearing higher.;private Method[] getSortedMethods(Class<?> clazz) {_		return this.sortedMethodsCache.computeIfAbsent(clazz, key -> {_			Method[] methods = key.getMethods()__			Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__			return methods__		})__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,methods,class,clazz,return,this,sorted,methods,cache,compute,if,absent,clazz,key,method,methods,key,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedMethods(Class<?> clazz);1530174524;Return class methods ordered with non-bridge methods appearing higher.;private Method[] getSortedMethods(Class<?> clazz) {_		return this.sortedMethodsCache.computeIfAbsent(clazz, key -> {_			Method[] methods = key.getMethods()__			Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__			return methods__		})__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,methods,class,clazz,return,this,sorted,methods,cache,compute,if,absent,clazz,key,method,methods,key,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> private Method[] getSortedMethods(Class<?> clazz);1530174524;Return class methods ordered with non-bridge methods appearing higher.;private Method[] getSortedMethods(Class<?> clazz) {_		return this.sortedMethodsCache.computeIfAbsent(clazz, key -> {_			Method[] methods = key.getMethods()__			Arrays.sort(methods, (o1, o2) -> (o1.isBridge() == o2.isBridge() ? 0 : (o1.isBridge() ? 1 : -1)))__			return methods__		})__	};return,class,methods,ordered,with,non,bridge,methods,appearing,higher;private,method,get,sorted,methods,class,clazz,return,this,sorted,methods,cache,compute,if,absent,clazz,key,method,methods,key,get,methods,arrays,sort,methods,o1,o2,o1,is,bridge,o2,is,bridge,0,o1,is,bridge,1,1,return,methods
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1382138457;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1382378529;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1385412762;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1386100884;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1394533229;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1405011154;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1405514506;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1410558554;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1412630983;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1425759378;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1449878380;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1449965401;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1450050966;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1458999130;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1467730834;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1467846264;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1495868221;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1496837955;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1497341397;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1497341594;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1498496339;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1498780456;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1502974979;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1521630400;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1521673386;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1521738567;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1521905437;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1522359230;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1528313153;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1528667792;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1530174524;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> protected String getPropertyMethodSuffix(String propertyName);1530174524;Return the method suffix for a given property name. The default implementation_uses JavaBean conventions.;protected String getPropertyMethodSuffix(String propertyName) {_		if (propertyName.length() > 1 && Character.isUpperCase(propertyName.charAt(1))) {_			return propertyName__		}_		return StringUtils.capitalize(propertyName)__	};return,the,method,suffix,for,a,given,property,name,the,default,implementation,uses,java,bean,conventions;protected,string,get,property,method,suffix,string,property,name,if,property,name,length,1,character,is,upper,case,property,name,char,at,1,return,property,name,return,string,utils,capitalize,property,name
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor(boolean allowWrite);1521673386;Create a new property accessor for reading and possibly writing._@param allowWrite whether to also allow for write operations_@since 4.3.15_@see #canWrite;public ReflectivePropertyAccessor(boolean allowWrite) {_		this.allowWrite = allowWrite__	};create,a,new,property,accessor,for,reading,and,possibly,writing,param,allow,write,whether,to,also,allow,for,write,operations,since,4,3,15,see,can,write;public,reflective,property,accessor,boolean,allow,write,this,allow,write,allow,write
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor(boolean allowWrite);1521738567;Create a new property accessor for reading and possibly writing._@param allowWrite whether to also allow for write operations_@since 4.3.15_@see #canWrite;public ReflectivePropertyAccessor(boolean allowWrite) {_		this.allowWrite = allowWrite__	};create,a,new,property,accessor,for,reading,and,possibly,writing,param,allow,write,whether,to,also,allow,for,write,operations,since,4,3,15,see,can,write;public,reflective,property,accessor,boolean,allow,write,this,allow,write,allow,write
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor(boolean allowWrite);1521905437;Create a new property accessor for reading and possibly writing._@param allowWrite whether to also allow for write operations_@since 4.3.15_@see #canWrite;public ReflectivePropertyAccessor(boolean allowWrite) {_		this.allowWrite = allowWrite__	};create,a,new,property,accessor,for,reading,and,possibly,writing,param,allow,write,whether,to,also,allow,for,write,operations,since,4,3,15,see,can,write;public,reflective,property,accessor,boolean,allow,write,this,allow,write,allow,write
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor(boolean allowWrite);1522359230;Create a new property accessor for reading and possibly writing._@param allowWrite whether to also allow for write operations_@since 4.3.15_@see #canWrite;public ReflectivePropertyAccessor(boolean allowWrite) {_		this.allowWrite = allowWrite__	};create,a,new,property,accessor,for,reading,and,possibly,writing,param,allow,write,whether,to,also,allow,for,write,operations,since,4,3,15,see,can,write;public,reflective,property,accessor,boolean,allow,write,this,allow,write,allow,write
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor(boolean allowWrite);1528313153;Create a new property accessor for reading and possibly writing._@param allowWrite whether to also allow for write operations_@since 4.3.15_@see #canWrite;public ReflectivePropertyAccessor(boolean allowWrite) {_		this.allowWrite = allowWrite__	};create,a,new,property,accessor,for,reading,and,possibly,writing,param,allow,write,whether,to,also,allow,for,write,operations,since,4,3,15,see,can,write;public,reflective,property,accessor,boolean,allow,write,this,allow,write,allow,write
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor(boolean allowWrite);1528667792;Create a new property accessor for reading and possibly writing._@param allowWrite whether to also allow for write operations_@since 4.3.15_@see #canWrite;public ReflectivePropertyAccessor(boolean allowWrite) {_		this.allowWrite = allowWrite__	};create,a,new,property,accessor,for,reading,and,possibly,writing,param,allow,write,whether,to,also,allow,for,write,operations,since,4,3,15,see,can,write;public,reflective,property,accessor,boolean,allow,write,this,allow,write,allow,write
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor(boolean allowWrite);1530174524;Create a new property accessor for reading and possibly writing._@param allowWrite whether to also allow for write operations_@since 4.3.15_@see #canWrite;public ReflectivePropertyAccessor(boolean allowWrite) {_		this.allowWrite = allowWrite__	};create,a,new,property,accessor,for,reading,and,possibly,writing,param,allow,write,whether,to,also,allow,for,write,operations,since,4,3,15,see,can,write;public,reflective,property,accessor,boolean,allow,write,this,allow,write,allow,write
ReflectivePropertyAccessor -> public ReflectivePropertyAccessor(boolean allowWrite);1530174524;Create a new property accessor for reading and possibly writing._@param allowWrite whether to also allow for write operations_@since 4.3.15_@see #canWrite;public ReflectivePropertyAccessor(boolean allowWrite) {_		this.allowWrite = allowWrite__	};create,a,new,property,accessor,for,reading,and,possibly,writing,param,allow,write,whether,to,also,allow,for,write,operations,since,4,3,15,see,can,write;public,reflective,property,accessor,boolean,allow,write,this,allow,write,allow,write
