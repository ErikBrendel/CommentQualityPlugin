commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the original string used to create this expression (unmodified).  * @return the original expression string  */ ;/**  * Return the original string used to create this expression (unmodified).  * @return the original expression string  */ String getExpressionString().
true;;0;2;/**  * Evaluate this expression in the default standard context.  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Evaluate this expression in the default standard context.  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ @Nullable Object getValue() throws EvaluationException.
true;;1;2;/**  * Evaluate the expression in the default context. If the result  * of the evaluation does not match (and cannot be converted to)  * the expected result type then an exception will be returned.  * @param desiredResultType the class the caller would like the result to be  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Evaluate the expression in the default context. If the result  * of the evaluation does not match (and cannot be converted to)  * the expected result type then an exception will be returned.  * @param desiredResultType the class the caller would like the result to be  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ @Nullable <T> T getValue(@Nullable Class<T> desiredResultType) throws EvaluationException.
true;;1;2;/**  * Evaluate this expression against the specified root object.  * @param rootObject the root object against which to evaluate the expression  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Evaluate this expression against the specified root object.  * @param rootObject the root object against which to evaluate the expression  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ @Nullable Object getValue(Object rootObject) throws EvaluationException.
true;;2;2;/**  * Evaluate the expression in the default context against the specified root  * object. If the result of the evaluation does not match (and cannot be  * converted to) the expected result type then an exception will be returned.  * @param rootObject the root object against which to evaluate the expression  * @param desiredResultType the class the caller would like the result to be  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Evaluate the expression in the default context against the specified root  * object. If the result of the evaluation does not match (and cannot be  * converted to) the expected result type then an exception will be returned.  * @param rootObject the root object against which to evaluate the expression  * @param desiredResultType the class the caller would like the result to be  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ @Nullable <T> T getValue(Object rootObject, @Nullable Class<T> desiredResultType) throws EvaluationException.
true;;1;2;/**  * Evaluate this expression in the provided context and return the result  * of evaluation.  * @param context the context in which to evaluate the expression  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Evaluate this expression in the provided context and return the result  * of evaluation.  * @param context the context in which to evaluate the expression  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ @Nullable Object getValue(EvaluationContext context) throws EvaluationException.
true;;2;2;/**  * Evaluate this expression in the provided context and return the result  * of evaluation, but use the supplied root context as an override for any  * default root object specified in the context.  * @param context the context in which to evaluate the expression  * @param rootObject the root object against which to evaluate the expression  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Evaluate this expression in the provided context and return the result  * of evaluation, but use the supplied root context as an override for any  * default root object specified in the context.  * @param context the context in which to evaluate the expression  * @param rootObject the root object against which to evaluate the expression  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ @Nullable Object getValue(EvaluationContext context, Object rootObject) throws EvaluationException.
true;;2;2;/**  * Evaluate the expression in a specified context which can resolve references  * to properties, methods, types, etc. The type of the evaluation result is  * expected to be of a particular class and an exception will be thrown if it  * is not and cannot be converted to that type.  * @param context the context in which to evaluate the expression  * @param desiredResultType the class the caller would like the result to be  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Evaluate the expression in a specified context which can resolve references  * to properties, methods, types, etc. The type of the evaluation result is  * expected to be of a particular class and an exception will be thrown if it  * is not and cannot be converted to that type.  * @param context the context in which to evaluate the expression  * @param desiredResultType the class the caller would like the result to be  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ @Nullable <T> T getValue(EvaluationContext context, @Nullable Class<T> desiredResultType) throws EvaluationException.
true;;3;3;/**  * Evaluate the expression in a specified context which can resolve references  * to properties, methods, types, etc. The type of the evaluation result is  * expected to be of a particular class and an exception will be thrown if it  * is not and cannot be converted to that type. The supplied root object  * overrides any default specified on the supplied context.  * @param context the context in which to evaluate the expression  * @param rootObject the root object against which to evaluate the expression  * @param desiredResultType the class the caller would like the result to be  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Evaluate the expression in a specified context which can resolve references  * to properties, methods, types, etc. The type of the evaluation result is  * expected to be of a particular class and an exception will be thrown if it  * is not and cannot be converted to that type. The supplied root object  * overrides any default specified on the supplied context.  * @param context the context in which to evaluate the expression  * @param rootObject the root object against which to evaluate the expression  * @param desiredResultType the class the caller would like the result to be  * @return the evaluation result  * @throws EvaluationException if there is a problem during evaluation  */ @Nullable <T> T getValue(EvaluationContext context, Object rootObject, @Nullable Class<T> desiredResultType) throws EvaluationException.
true;;0;2;/**  * Return the most general type that can be passed to a {@link #setValue}  * method using the default context.  * @return the most general type of value that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ ;/**  * Return the most general type that can be passed to a {@link #setValue}  * method using the default context.  * @return the most general type of value that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ @Nullable Class<?> getValueType() throws EvaluationException.
true;;1;2;/**  * Return the most general type that can be passed to the  * {@link #setValue(Object, Object)} method using the default context.  * @param rootObject the root object against which to evaluate the expression  * @return the most general type of value that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ ;/**  * Return the most general type that can be passed to the  * {@link #setValue(Object, Object)} method using the default context.  * @param rootObject the root object against which to evaluate the expression  * @return the most general type of value that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ @Nullable Class<?> getValueType(Object rootObject) throws EvaluationException.
true;;1;2;/**  * Return the most general type that can be passed to the  * {@link #setValue(EvaluationContext, Object)} method for the given context.  * @param context the context in which to evaluate the expression  * @return the most general type of value that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ ;/**  * Return the most general type that can be passed to the  * {@link #setValue(EvaluationContext, Object)} method for the given context.  * @param context the context in which to evaluate the expression  * @return the most general type of value that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ @Nullable Class<?> getValueType(EvaluationContext context) throws EvaluationException.
true;;2;2;/**  * Return the most general type that can be passed to the  * {@link #setValue(EvaluationContext, Object, Object)} method for the given  * context. The supplied root object overrides any specified in the context.  * @param context the context in which to evaluate the expression  * @param rootObject the root object against which to evaluate the expression  * @return the most general type of value that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ ;/**  * Return the most general type that can be passed to the  * {@link #setValue(EvaluationContext, Object, Object)} method for the given  * context. The supplied root object overrides any specified in the context.  * @param context the context in which to evaluate the expression  * @param rootObject the root object against which to evaluate the expression  * @return the most general type of value that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ @Nullable Class<?> getValueType(EvaluationContext context, Object rootObject) throws EvaluationException.
true;;0;2;/**  * Return the most general type that can be passed to a {@link #setValue}  * method using the default context.  * @return a type descriptor for values that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ ;/**  * Return the most general type that can be passed to a {@link #setValue}  * method using the default context.  * @return a type descriptor for values that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ @Nullable TypeDescriptor getValueTypeDescriptor() throws EvaluationException.
true;;1;2;/**  * Return the most general type that can be passed to the  * {@link #setValue(Object, Object)} method using the default context.  * @param rootObject the root object against which to evaluate the expression  * @return a type descriptor for values that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ ;/**  * Return the most general type that can be passed to the  * {@link #setValue(Object, Object)} method using the default context.  * @param rootObject the root object against which to evaluate the expression  * @return a type descriptor for values that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ @Nullable TypeDescriptor getValueTypeDescriptor(Object rootObject) throws EvaluationException.
true;;1;2;/**  * Return the most general type that can be passed to the  * {@link #setValue(EvaluationContext, Object)} method for the given context.  * @param context the context in which to evaluate the expression  * @return a type descriptor for values that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ ;/**  * Return the most general type that can be passed to the  * {@link #setValue(EvaluationContext, Object)} method for the given context.  * @param context the context in which to evaluate the expression  * @return a type descriptor for values that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ @Nullable TypeDescriptor getValueTypeDescriptor(EvaluationContext context) throws EvaluationException.
true;;2;2;/**  * Return the most general type that can be passed to the  * {@link #setValue(EvaluationContext, Object, Object)} method for the given  * context. The supplied root object overrides any specified in the context.  * @param context the context in which to evaluate the expression  * @param rootObject the root object against which to evaluate the expression  * @return a type descriptor for values that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ ;/**  * Return the most general type that can be passed to the  * {@link #setValue(EvaluationContext, Object, Object)} method for the given  * context. The supplied root object overrides any specified in the context.  * @param context the context in which to evaluate the expression  * @param rootObject the root object against which to evaluate the expression  * @return a type descriptor for values that can be set on this context  * @throws EvaluationException if there is a problem determining the type  */ @Nullable TypeDescriptor getValueTypeDescriptor(EvaluationContext context, Object rootObject) throws EvaluationException.
true;;1;1;/**  * Determine if an expression can be written to, i.e. setValue() can be called.  * @param rootObject the root object against which to evaluate the expression  * @return {@code true} if the expression is writable. {@code false} otherwise  * @throws EvaluationException if there is a problem determining if it is writable  */ ;/**  * Determine if an expression can be written to, i.e. setValue() can be called.  * @param rootObject the root object against which to evaluate the expression  * @return {@code true} if the expression is writable. {@code false} otherwise  * @throws EvaluationException if there is a problem determining if it is writable  */ boolean isWritable(Object rootObject) throws EvaluationException.
true;;1;1;/**  * Determine if an expression can be written to, i.e. setValue() can be called.  * @param context the context in which the expression should be checked  * @return {@code true} if the expression is writable. {@code false} otherwise  * @throws EvaluationException if there is a problem determining if it is writable  */ ;/**  * Determine if an expression can be written to, i.e. setValue() can be called.  * @param context the context in which the expression should be checked  * @return {@code true} if the expression is writable. {@code false} otherwise  * @throws EvaluationException if there is a problem determining if it is writable  */ boolean isWritable(EvaluationContext context) throws EvaluationException.
true;;2;1;/**  * Determine if an expression can be written to, i.e. setValue() can be called.  * The supplied root object overrides any specified in the context.  * @param context the context in which the expression should be checked  * @param rootObject the root object against which to evaluate the expression  * @return {@code true} if the expression is writable. {@code false} otherwise  * @throws EvaluationException if there is a problem determining if it is writable  */ ;/**  * Determine if an expression can be written to, i.e. setValue() can be called.  * The supplied root object overrides any specified in the context.  * @param context the context in which the expression should be checked  * @param rootObject the root object against which to evaluate the expression  * @return {@code true} if the expression is writable. {@code false} otherwise  * @throws EvaluationException if there is a problem determining if it is writable  */ boolean isWritable(EvaluationContext context, Object rootObject) throws EvaluationException.
true;;2;1;/**  * Set this expression in the provided context to the value provided.  * @param rootObject the root object against which to evaluate the expression  * @param value the new value  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Set this expression in the provided context to the value provided.  * @param rootObject the root object against which to evaluate the expression  * @param value the new value  * @throws EvaluationException if there is a problem during evaluation  */ void setValue(Object rootObject, @Nullable Object value) throws EvaluationException.
true;;2;1;/**  * Set this expression in the provided context to the value provided.  * @param context the context in which to set the value of the expression  * @param value the new value  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Set this expression in the provided context to the value provided.  * @param context the context in which to set the value of the expression  * @param value the new value  * @throws EvaluationException if there is a problem during evaluation  */ void setValue(EvaluationContext context, @Nullable Object value) throws EvaluationException.
true;;3;1;/**  * Set this expression in the provided context to the value provided.  * The supplied root object overrides any specified in the context.  * @param context the context in which to set the value of the expression  * @param rootObject the root object against which to evaluate the expression  * @param value the new value  * @throws EvaluationException if there is a problem during evaluation  */ ;/**  * Set this expression in the provided context to the value provided.  * The supplied root object overrides any specified in the context.  * @param context the context in which to set the value of the expression  * @param rootObject the root object against which to evaluate the expression  * @param value the new value  * @throws EvaluationException if there is a problem during evaluation  */ void setValue(EvaluationContext context, Object rootObject, @Nullable Object value) throws EvaluationException.
