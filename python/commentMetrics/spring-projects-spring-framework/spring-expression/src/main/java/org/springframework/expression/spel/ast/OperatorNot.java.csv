commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {     try {         Boolean value = this.children[0].getValue(state, Boolean.class).         if (value == null) {             throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean").         }         return BooleanTypedValue.forValue(!value).     } catch (SpelEvaluationException ex) {         ex.setPosition(getChild(0).getStartPosition()).         throw ex.     } }
false;public;0;4;;@Override public String toStringAST() {     return "!" + getChild(0).toStringAST(). }
false;public;0;5;;@Override public boolean isCompilable() {     SpelNodeImpl child = this.children[0].     return (child.isCompilable() && CodeFlow.isBooleanCompatible(child.exitTypeDescriptor)). }
false;public;2;14;;@Override public void generateCode(MethodVisitor mv, CodeFlow cf) {     this.children[0].generateCode(mv, cf).     cf.unboxBooleanIfNecessary(mv).     Label elseTarget = new Label().     Label endOfIf = new Label().     mv.visitJumpInsn(IFNE, elseTarget).     // TRUE     mv.visitInsn(ICONST_1).     mv.visitJumpInsn(GOTO, endOfIf).     mv.visitLabel(elseTarget).     // FALSE     mv.visitInsn(ICONST_0).     mv.visitLabel(endOfIf).     cf.pushDescriptor(this.exitTypeDescriptor). }
