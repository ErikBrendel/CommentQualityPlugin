# id;timestamp;commentText;codeText;commentWords;codeWords
SpelExpression -> public void setEvaluationContext(EvaluationContext context);1328020251;Set the evaluation context that will be used if none is specified on an evaluation call._@param context an evaluation context;public void setEvaluationContext(EvaluationContext context) {_		this.defaultContext = context__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,context,an,evaluation,context;public,void,set,evaluation,context,evaluation,context,context,this,default,context,context
SpelExpression -> public void setEvaluationContext(EvaluationContext context);1344035210;Set the evaluation context that will be used if none is specified on an evaluation call._@param context an evaluation context;public void setEvaluationContext(EvaluationContext context) {_		this.defaultContext = context__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,context,an,evaluation,context;public,void,set,evaluation,context,evaluation,context,context,this,default,context,context
SpelExpression -> public void setEvaluationContext(EvaluationContext context);1356735495;Set the evaluation context that will be used if none is specified on an evaluation call._@param context an evaluation context;public void setEvaluationContext(EvaluationContext context) {_		this.defaultContext = context__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,context,an,evaluation,context;public,void,set,evaluation,context,evaluation,context,context,this,default,context,context
SpelExpression -> public void setEvaluationContext(EvaluationContext context);1357119239;Set the evaluation context that will be used if none is specified on an evaluation call._@param context an evaluation context;public void setEvaluationContext(EvaluationContext context) {_		this.defaultContext = context__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,context,an,evaluation,context;public,void,set,evaluation,context,evaluation,context,context,this,default,context,context
SpelExpression -> public void setEvaluationContext(EvaluationContext context);1368482696;Set the evaluation context that will be used if none is specified on an evaluation call._@param context an evaluation context;public void setEvaluationContext(EvaluationContext context) {_		this.defaultContext = context__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,context,an,evaluation,context;public,void,set,evaluation,context,evaluation,context,context,this,default,context,context
SpelExpression -> public void setEvaluationContext(EvaluationContext context);1372363092;Set the evaluation context that will be used if none is specified on an evaluation call._@param context an evaluation context;public void setEvaluationContext(EvaluationContext context) {_		this.defaultContext = context__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,context,an,evaluation,context;public,void,set,evaluation,context,evaluation,context,context,this,default,context,context
SpelExpression -> public void setEvaluationContext(EvaluationContext context);1405011154;Set the evaluation context that will be used if none is specified on an evaluation call._@param context an evaluation context;public void setEvaluationContext(EvaluationContext context) {_		this.defaultContext = context__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,context,an,evaluation,context;public,void,set,evaluation,context,evaluation,context,context,this,default,context,context
SpelExpression -> public EvaluationContext getEvaluationContext();1328020251;Return the default evaluation context that will be used if none is supplied on an evaluation call_@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (defaultContext == null) {_			defaultContext = new StandardEvaluationContext()__		}_		return defaultContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,default,context,null,default,context,new,standard,evaluation,context,return,default,context
SpelExpression -> public EvaluationContext getEvaluationContext();1344035210;Return the default evaluation context that will be used if none is supplied on an evaluation call_@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (defaultContext == null) {_			defaultContext = new StandardEvaluationContext()__		}_		return defaultContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,default,context,null,default,context,new,standard,evaluation,context,return,default,context
SpelExpression -> public EvaluationContext getEvaluationContext();1356735495;Return the default evaluation context that will be used if none is supplied on an evaluation call_@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (defaultContext == null) {_			defaultContext = new StandardEvaluationContext()__		}_		return defaultContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,default,context,null,default,context,new,standard,evaluation,context,return,default,context
SpelExpression -> public EvaluationContext getEvaluationContext();1357119239;Return the default evaluation context that will be used if none is supplied on an evaluation call_@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (defaultContext == null) {_			defaultContext = new StandardEvaluationContext()__		}_		return defaultContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,default,context,null,default,context,new,standard,evaluation,context,return,default,context
SpelExpression -> public EvaluationContext getEvaluationContext();1368482696;Return the default evaluation context that will be used if none is supplied on an evaluation call_@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (defaultContext == null) {_			defaultContext = new StandardEvaluationContext()__		}_		return defaultContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,default,context,null,default,context,new,standard,evaluation,context,return,default,context
SpelExpression -> public EvaluationContext getEvaluationContext();1372363092;Return the default evaluation context that will be used if none is supplied on an evaluation call_@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.defaultContext == null) {_			this.defaultContext = new StandardEvaluationContext()__		}_		return this.defaultContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,default,context,null,this,default,context,new,standard,evaluation,context,return,this,default,context
SpelExpression -> public EvaluationContext getEvaluationContext();1405011154;Return the default evaluation context that will be used if none is supplied on an evaluation call_@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.defaultContext == null) {_			this.defaultContext = new StandardEvaluationContext()__		}_		return this.defaultContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,default,context,null,this,default,context,new,standard,evaluation,context,return,this,default,context
SpelExpression -> public EvaluationContext getEvaluationContext();1405514506;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1413566814;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1413907042;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1414619099;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1425759378;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1496837955;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1498780456;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1499973642;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1500043582;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1502974979;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1530174524;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1535712082;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1549318940;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> public EvaluationContext getEvaluationContext();1549321822;Return the default evaluation context that will be used if none is supplied on an evaluation call._@return the default evaluation context;public EvaluationContext getEvaluationContext() {_		if (this.evaluationContext == null) {_			this.evaluationContext = new StandardEvaluationContext()__		}_		return this.evaluationContext__	};return,the,default,evaluation,context,that,will,be,used,if,none,is,supplied,on,an,evaluation,call,return,the,default,evaluation,context;public,evaluation,context,get,evaluation,context,if,this,evaluation,context,null,this,evaluation,context,new,standard,evaluation,context,return,this,evaluation,context
SpelExpression -> private void checkCompile(ExpressionState expressionState);1405011154;Compile the expression if it has been evaluated more than the threshold number of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.off) {_			if (compilerMode == SpelCompilerMode.immediate) {_				if (interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (interpretedCount > SpelCompiler.interpretedCountThreshold) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,interpreted,count,1,compile,expression,else,if,interpreted,count,spel,compiler,interpreted,count,threshold,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1405514506;Compile the expression if it has been evaluated more than the threshold number of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1413566814;Compile the expression if it has been evaluated more than the threshold number of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1413907042;Compile the expression if it has been evaluated more than the threshold number of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1414619099;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1425759378;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1496837955;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1498780456;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1499973642;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1500043582;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1502974979;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1530174524;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1535712082;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount++__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,1,compile,expression,else,if,this,interpreted,count,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1549318940;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount.incrementAndGet()__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount.get() > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount.get() > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,increment,and,get,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,get,1,compile,expression,else,if,this,interpreted,count,get,compile,expression
SpelExpression -> private void checkCompile(ExpressionState expressionState);1549321822;Compile the expression if it has been evaluated more than the threshold number_of times to trigger compilation._@param expressionState the expression state used to determine compilation mode;private void checkCompile(ExpressionState expressionState) {_		this.interpretedCount.incrementAndGet()__		SpelCompilerMode compilerMode = expressionState.getConfiguration().getCompilerMode()__		if (compilerMode != SpelCompilerMode.OFF) {_			if (compilerMode == SpelCompilerMode.IMMEDIATE) {_				if (this.interpretedCount.get() > 1) {_					compileExpression()__				}_			}_			else {_				_				if (this.interpretedCount.get() > INTERPRETED_COUNT_THRESHOLD) {_					compileExpression()__				}_			}_		}_	};compile,the,expression,if,it,has,been,evaluated,more,than,the,threshold,number,of,times,to,trigger,compilation,param,expression,state,the,expression,state,used,to,determine,compilation,mode;private,void,check,compile,expression,state,expression,state,this,interpreted,count,increment,and,get,spel,compiler,mode,compiler,mode,expression,state,get,configuration,get,compiler,mode,if,compiler,mode,spel,compiler,mode,off,if,compiler,mode,spel,compiler,mode,immediate,if,this,interpreted,count,get,1,compile,expression,else,if,this,interpreted,count,get,compile,expression
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1328020251;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1344035210;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1356735495;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1357119239;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1368482696;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1372363092;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1405011154;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1405514506;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1413566814;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1413907042;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1414619099;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1425759378;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1496837955;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1498780456;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1499973642;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1500043582;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1502974979;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1530174524;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1535712082;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1549318940;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration);1549321822;Construct an expression, only used by the parser.;public SpelExpression(String expression, SpelNodeImpl ast, SpelParserConfiguration configuration) {_		this.expression = expression__		this.ast = ast__		this.configuration = configuration__	};construct,an,expression,only,used,by,the,parser;public,spel,expression,string,expression,spel,node,impl,ast,spel,parser,configuration,configuration,this,expression,expression,this,ast,ast,this,configuration,configuration
SpelExpression -> public String toStringAST();1328020251;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,ast,to,string,ast
SpelExpression -> public String toStringAST();1344035210;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,ast,to,string,ast
SpelExpression -> public String toStringAST();1356735495;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,ast,to,string,ast
SpelExpression -> public String toStringAST();1357119239;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,ast,to,string,ast
SpelExpression -> public String toStringAST();1368482696;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,ast,to,string,ast
SpelExpression -> public String toStringAST();1372363092;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1405011154;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1405514506;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1413566814;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1413907042;Produce a string representation of the Abstract Syntax Tree for the expression, this should ideally look like the_input expression, but properly formatted since any unnecessary whitespace will have been discarded during the_parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1414619099;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1425759378;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1496837955;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1498780456;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1499973642;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1500043582;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1502974979;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1530174524;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1535712082;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1549318940;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public String toStringAST();1549321822;Produce a string representation of the Abstract Syntax Tree for the expression._This should ideally look like the input expression, but properly formatted since any_unnecessary whitespace will have been discarded during the parse of the expression._@return the string representation of the AST;public String toStringAST() {_		return this.ast.toStringAST()__	};produce,a,string,representation,of,the,abstract,syntax,tree,for,the,expression,this,should,ideally,look,like,the,input,expression,but,properly,formatted,since,any,unnecessary,whitespace,will,have,been,discarded,during,the,parse,of,the,expression,return,the,string,representation,of,the,ast;public,string,to,string,ast,return,this,ast,to,string,ast
SpelExpression -> public boolean compileExpression();1405011154;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (failedAttempts > 100) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (expression) {_				_				_				if (this.compiledAst != null) {_					return true__				}_				this.compiledAst = SpelCompiler.getCompiler().compile(this.ast)__				if (this.compiledAst == null) {_					failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,failed,attempts,100,return,false,if,this,compiled,ast,null,synchronized,expression,if,this,compiled,ast,null,return,true,this,compiled,ast,spel,compiler,get,compiler,compile,this,ast,if,this,compiled,ast,null,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1405514506;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1413566814;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1413907042;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1414619099;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1425759378;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1496837955;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1498780456;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1499973642;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1500043582;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1502974979;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1530174524;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1535712082;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1549318940;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public boolean compileExpression();1549321822;Perform expression compilation. This will only succeed once exit descriptors for all nodes have_been determined. If the compilation fails and has failed more than 100 times the expression is_no longer considered suitable for compilation.;public boolean compileExpression() {_		if (this.failedAttempts > FAILED_ATTEMPTS_THRESHOLD) {_			_			return false__		}_		if (this.compiledAst == null) {_			synchronized (this.expression) {_				_				if (this.compiledAst != null) {_					return true__				}_				SpelCompiler compiler = SpelCompiler.getCompiler(this.configuration.getCompilerClassLoader())__				this.compiledAst = compiler.compile(this.ast)__				if (this.compiledAst == null) {_					this.failedAttempts++__				}_			}_		}_		return (this.compiledAst != null)__	};perform,expression,compilation,this,will,only,succeed,once,exit,descriptors,for,all,nodes,have,been,determined,if,the,compilation,fails,and,has,failed,more,than,100,times,the,expression,is,no,longer,considered,suitable,for,compilation;public,boolean,compile,expression,if,this,failed,attempts,return,false,if,this,compiled,ast,null,synchronized,this,expression,if,this,compiled,ast,null,return,true,spel,compiler,compiler,spel,compiler,get,compiler,this,configuration,get,compiler,class,loader,this,compiled,ast,compiler,compile,this,ast,if,this,compiled,ast,null,this,failed,attempts,return,this,compiled,ast,null
SpelExpression -> public SpelNode getAST();1328020251;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,ast
SpelExpression -> public SpelNode getAST();1344035210;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,ast
SpelExpression -> public SpelNode getAST();1356735495;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,ast
SpelExpression -> public SpelNode getAST();1357119239;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,ast
SpelExpression -> public SpelNode getAST();1368482696;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,ast
SpelExpression -> public SpelNode getAST();1372363092;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return this.ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1405011154;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return this.ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1405514506;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return this.ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1413566814;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return this.ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1413907042;@return return the Abstract Syntax Tree for the expression;public SpelNode getAST() {_		return this.ast__	};return,return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1414619099;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1425759378;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1496837955;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1498780456;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1499973642;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1500043582;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1502974979;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1530174524;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1535712082;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1549318940;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public SpelNode getAST();1549321822;Return the Abstract Syntax Tree for the expression.;public SpelNode getAST() {_		return this.ast__	};return,the,abstract,syntax,tree,for,the,expression;public,spel,node,get,ast,return,this,ast
SpelExpression -> public void revertToInterpreted();1405011154;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1405514506;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1413566814;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1413907042;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1414619099;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1425759378;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1496837955;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1498780456;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1499973642;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1500043582;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1502974979;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1530174524;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1535712082;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount = 0__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1549318940;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount.set(0)__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,set,0,this,failed,attempts,0
SpelExpression -> public void revertToInterpreted();1549321822;Cause an expression to revert to being interpreted if it has been using a compiled_form. It also resets the compilation attempt failure count (an expression is normally no_longer considered compilable if it cannot be compiled after 100 attempts).;public void revertToInterpreted() {_		this.compiledAst = null__		this.interpretedCount.set(0)__		this.failedAttempts = 0__	};cause,an,expression,to,revert,to,being,interpreted,if,it,has,been,using,a,compiled,form,it,also,resets,the,compilation,attempt,failure,count,an,expression,is,normally,no,longer,considered,compilable,if,it,cannot,be,compiled,after,100,attempts;public,void,revert,to,interpreted,this,compiled,ast,null,this,interpreted,count,set,0,this,failed,attempts,0
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1405514506;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1413566814;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1413907042;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1414619099;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1425759378;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1496837955;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1498780456;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1499973642;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1500043582;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1502974979;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1530174524;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1535712082;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1549318940;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
SpelExpression -> public void setEvaluationContext(EvaluationContext evaluationContext);1549321822;Set the evaluation context that will be used if none is specified on an evaluation call._@param evaluationContext the evaluation context to use;public void setEvaluationContext(EvaluationContext evaluationContext) {_		this.evaluationContext = evaluationContext__	};set,the,evaluation,context,that,will,be,used,if,none,is,specified,on,an,evaluation,call,param,evaluation,context,the,evaluation,context,to,use;public,void,set,evaluation,context,evaluation,context,evaluation,context,this,evaluation,context,evaluation,context
