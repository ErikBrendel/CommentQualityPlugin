commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Return {@code true} if the type converter can convert the specified type  * to the desired target type.  * @param sourceType a type descriptor that describes the source type  * @param targetType a type descriptor that describes the requested result type  * @return {@code true} if that conversion can be performed  */ ;/**  * Return {@code true} if the type converter can convert the specified type  * to the desired target type.  * @param sourceType a type descriptor that describes the source type  * @param targetType a type descriptor that describes the requested result type  * @return {@code true} if that conversion can be performed  */ boolean canConvert(@Nullable TypeDescriptor sourceType, TypeDescriptor targetType).
true;;3;2;/**  * Convert (or coerce) a value from one type to another, for example from a  * {@code boolean} to a {@code String}.  * <p>The {@link TypeDescriptor} parameters enable support for typed collections:  * A caller may prefer a {@code List&lt.Integer&gt.}, for example, rather than  * simply any {@code List}.  * @param value the value to be converted  * @param sourceType a type descriptor that supplies extra information about the  * source object  * @param targetType a type descriptor that supplies extra information about the  * requested result type  * @return the converted value  * @throws EvaluationException if conversion failed or is not possible to begin with  */ ;/**  * Convert (or coerce) a value from one type to another, for example from a  * {@code boolean} to a {@code String}.  * <p>The {@link TypeDescriptor} parameters enable support for typed collections:  * A caller may prefer a {@code List&lt.Integer&gt.}, for example, rather than  * simply any {@code List}.  * @param value the value to be converted  * @param sourceType a type descriptor that supplies extra information about the  * source object  * @param targetType a type descriptor that supplies extra information about the  * requested result type  * @return the converted value  * @throws EvaluationException if conversion failed or is not possible to begin with  */ @Nullable Object convertValue(@Nullable Object value, @Nullable TypeDescriptor sourceType, TypeDescriptor targetType).
