# id;timestamp;commentText;codeText;commentWords;codeWords
TypeConverter -> Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType)_;1328020251;Convert (may coerce) a value from one type to another, for example from a boolean to a string._The typeDescriptor parameter enables support for typed collections - if the caller really wishes they_can have a List&lt_Integer&gt_ for example, rather than simply a List._@param value the value to be converted_@param sourceType a type descriptor that supplies extra information about the source object_@param targetType a type descriptor that supplies extra information about the requested result type_@return the converted value_@throws EvaluationException if conversion is not possible;Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,may,coerce,a,value,from,one,type,to,another,for,example,from,a,boolean,to,a,string,the,type,descriptor,parameter,enables,support,for,typed,collections,if,the,caller,really,wishes,they,can,have,a,list,lt,integer,gt,for,example,rather,than,simply,a,list,param,value,the,value,to,be,converted,param,source,type,a,type,descriptor,that,supplies,extra,information,about,the,source,object,param,target,type,a,type,descriptor,that,supplies,extra,information,about,the,requested,result,type,return,the,converted,value,throws,evaluation,exception,if,conversion,is,not,possible;object,convert,value,object,value,type,descriptor,source,type,type,descriptor,target,type
TypeConverter -> Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType)_;1372363092;Convert (may coerce) a value from one type to another, for example from a boolean_to a string. The typeDescriptor parameter enables support for typed collections -_if the caller really wishes they can have a List&lt_Integer&gt_ for example, rather_than simply a List._@param value the value to be converted_@param sourceType a type descriptor that supplies extra information about the_source object_@param targetType a type descriptor that supplies extra information about the_requested result type_@return the converted value_@throws EvaluationException if conversion is not possible;Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,may,coerce,a,value,from,one,type,to,another,for,example,from,a,boolean,to,a,string,the,type,descriptor,parameter,enables,support,for,typed,collections,if,the,caller,really,wishes,they,can,have,a,list,lt,integer,gt,for,example,rather,than,simply,a,list,param,value,the,value,to,be,converted,param,source,type,a,type,descriptor,that,supplies,extra,information,about,the,source,object,param,target,type,a,type,descriptor,that,supplies,extra,information,about,the,requested,result,type,return,the,converted,value,throws,evaluation,exception,if,conversion,is,not,possible;object,convert,value,object,value,type,descriptor,source,type,type,descriptor,target,type
TypeConverter -> Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType)_;1387312780;Convert (may coerce) a value from one type to another, for example from a boolean_to a string. The typeDescriptor parameter enables support for typed collections -_if the caller really wishes they can have a List&lt_Integer&gt_ for example, rather_than simply a List._@param value the value to be converted_@param sourceType a type descriptor that supplies extra information about the_source object_@param targetType a type descriptor that supplies extra information about the_requested result type_@return the converted value_@throws EvaluationException if conversion is not possible;Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,may,coerce,a,value,from,one,type,to,another,for,example,from,a,boolean,to,a,string,the,type,descriptor,parameter,enables,support,for,typed,collections,if,the,caller,really,wishes,they,can,have,a,list,lt,integer,gt,for,example,rather,than,simply,a,list,param,value,the,value,to,be,converted,param,source,type,a,type,descriptor,that,supplies,extra,information,about,the,source,object,param,target,type,a,type,descriptor,that,supplies,extra,information,about,the,requested,result,type,return,the,converted,value,throws,evaluation,exception,if,conversion,is,not,possible;object,convert,value,object,value,type,descriptor,source,type,type,descriptor,target,type
TypeConverter -> Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType)_;1389887689;Convert (or coerce) a value from one type to another, for example from a_{@code boolean} to a {@code String}._<p>The {@link TypeDescriptor} parameters enable support for typed collections:_A caller may prefer a {@code List&lt_Integer&gt_}, for example, rather than_simply any {@code List}._@param value the value to be converted_@param sourceType a type descriptor that supplies extra information about the_source object_@param targetType a type descriptor that supplies extra information about the_requested result type_@return the converted value_@throws EvaluationException if conversion failed or is not possible to begin with;Object convertValue(Object value, TypeDescriptor sourceType, TypeDescriptor targetType)_;convert,or,coerce,a,value,from,one,type,to,another,for,example,from,a,code,boolean,to,a,code,string,p,the,link,type,descriptor,parameters,enable,support,for,typed,collections,a,caller,may,prefer,a,code,list,lt,integer,gt,for,example,rather,than,simply,any,code,list,param,value,the,value,to,be,converted,param,source,type,a,type,descriptor,that,supplies,extra,information,about,the,source,object,param,target,type,a,type,descriptor,that,supplies,extra,information,about,the,requested,result,type,return,the,converted,value,throws,evaluation,exception,if,conversion,failed,or,is,not,possible,to,begin,with;object,convert,value,object,value,type,descriptor,source,type,type,descriptor,target,type
TypeConverter -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1328020251;Return true if the type converter can convert the specified type to the desired target type._@param sourceType a type descriptor that describes the source type_@param targetType a type descriptor that describes the requested result type_@return true if that conversion can be performed;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;return,true,if,the,type,converter,can,convert,the,specified,type,to,the,desired,target,type,param,source,type,a,type,descriptor,that,describes,the,source,type,param,target,type,a,type,descriptor,that,describes,the,requested,result,type,return,true,if,that,conversion,can,be,performed;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
TypeConverter -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1372363092;Return true if the type converter can convert the specified type to the desired_target type._@param sourceType a type descriptor that describes the source type_@param targetType a type descriptor that describes the requested result type_@return true if that conversion can be performed;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;return,true,if,the,type,converter,can,convert,the,specified,type,to,the,desired,target,type,param,source,type,a,type,descriptor,that,describes,the,source,type,param,target,type,a,type,descriptor,that,describes,the,requested,result,type,return,true,if,that,conversion,can,be,performed;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
TypeConverter -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1387312780;Return {@code true} if the type converter can convert the specified type_to the desired target type._@param sourceType a type descriptor that describes the source type_@param targetType a type descriptor that describes the requested result type_@return true if that conversion can be performed;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;return,code,true,if,the,type,converter,can,convert,the,specified,type,to,the,desired,target,type,param,source,type,a,type,descriptor,that,describes,the,source,type,param,target,type,a,type,descriptor,that,describes,the,requested,result,type,return,true,if,that,conversion,can,be,performed;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
TypeConverter -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1389887689;Return {@code true} if the type converter can convert the specified type_to the desired target type._@param sourceType a type descriptor that describes the source type_@param targetType a type descriptor that describes the requested result type_@return {@code true} if that conversion can be performed;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;return,code,true,if,the,type,converter,can,convert,the,specified,type,to,the,desired,target,type,param,source,type,a,type,descriptor,that,describes,the,source,type,param,target,type,a,type,descriptor,that,describes,the,requested,result,type,return,code,true,if,that,conversion,can,be,performed;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
TypeConverter -> boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;1495868221;Return {@code true} if the type converter can convert the specified type_to the desired target type._@param sourceType a type descriptor that describes the source type_@param targetType a type descriptor that describes the requested result type_@return {@code true} if that conversion can be performed;boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType)_;return,code,true,if,the,type,converter,can,convert,the,specified,type,to,the,desired,target,type,param,source,type,a,type,descriptor,that,describes,the,source,type,param,target,type,a,type,descriptor,that,describes,the,requested,result,type,return,code,true,if,that,conversion,can,be,performed;boolean,can,convert,type,descriptor,source,type,type,descriptor,target,type
