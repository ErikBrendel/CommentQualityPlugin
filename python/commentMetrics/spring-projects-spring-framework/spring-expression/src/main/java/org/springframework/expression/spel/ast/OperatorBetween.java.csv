# id;timestamp;commentText;codeText;commentWords;codeWords
OperatorBetween -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1328020251;Returns a boolean based on whether a value is in the range expressed. The first operand is any value whilst the_second is a list of two values - those two values being the bounds allowed for the first operand (inclusive)._@param state the expression state_@return true if the left operand is in the range specified, false otherwise_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object left = getLeftOperand().getValueInternal(state).getValue()__		Object right = getRightOperand().getValueInternal(state).getValue()__		if (!(right instanceof List) || ((List<?>) right).size() != 2) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST)__		}_		List<?> l = (List<?>) right__		Object low = l.get(0)__		Object high = l.get(1)__		TypeComparator comparator = state.getTypeComparator()__		try {_			return BooleanTypedValue.forValue((comparator.compare(left, low) >= 0 && comparator.compare(left, high) <= 0))__		} catch (SpelEvaluationException ex) {_			ex.setPosition(getStartPosition())__			throw ex__		}_	};returns,a,boolean,based,on,whether,a,value,is,in,the,range,expressed,the,first,operand,is,any,value,whilst,the,second,is,a,list,of,two,values,those,two,values,being,the,bounds,allowed,for,the,first,operand,inclusive,param,state,the,expression,state,return,true,if,the,left,operand,is,in,the,range,specified,false,otherwise,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,get,left,operand,get,value,internal,state,get,value,object,right,get,right,operand,get,value,internal,state,get,value,if,right,instanceof,list,list,right,size,2,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,list,l,list,right,object,low,l,get,0,object,high,l,get,1,type,comparator,comparator,state,get,type,comparator,try,return,boolean,typed,value,for,value,comparator,compare,left,low,0,comparator,compare,left,high,0,catch,spel,evaluation,exception,ex,ex,set,position,get,start,position,throw,ex
OperatorBetween -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1356735495;Returns a boolean based on whether a value is in the range expressed. The first operand is any value whilst the_second is a list of two values - those two values being the bounds allowed for the first operand (inclusive)._@param state the expression state_@return true if the left operand is in the range specified, false otherwise_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object left = getLeftOperand().getValueInternal(state).getValue()__		Object right = getRightOperand().getValueInternal(state).getValue()__		if (!(right instanceof List) || ((List<?>) right).size() != 2) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST)__		}_		List<?> l = (List<?>) right__		Object low = l.get(0)__		Object high = l.get(1)__		TypeComparator comparator = state.getTypeComparator()__		try {_			return BooleanTypedValue.forValue((comparator.compare(left, low) >= 0 && comparator.compare(left, high) <= 0))__		} catch (SpelEvaluationException ex) {_			ex.setPosition(getStartPosition())__			throw ex__		}_	};returns,a,boolean,based,on,whether,a,value,is,in,the,range,expressed,the,first,operand,is,any,value,whilst,the,second,is,a,list,of,two,values,those,two,values,being,the,bounds,allowed,for,the,first,operand,inclusive,param,state,the,expression,state,return,true,if,the,left,operand,is,in,the,range,specified,false,otherwise,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,get,left,operand,get,value,internal,state,get,value,object,right,get,right,operand,get,value,internal,state,get,value,if,right,instanceof,list,list,right,size,2,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,list,l,list,right,object,low,l,get,0,object,high,l,get,1,type,comparator,comparator,state,get,type,comparator,try,return,boolean,typed,value,for,value,comparator,compare,left,low,0,comparator,compare,left,high,0,catch,spel,evaluation,exception,ex,ex,set,position,get,start,position,throw,ex
OperatorBetween -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1372363092;Returns a boolean based on whether a value is in the range expressed. The first_operand is any value whilst the second is a list of two values - those two values_being the bounds allowed for the first operand (inclusive)._@param state the expression state_@return true if the left operand is in the range specified, false otherwise_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object left = getLeftOperand().getValueInternal(state).getValue()__		Object right = getRightOperand().getValueInternal(state).getValue()__		if (!(right instanceof List) || ((List<?>) right).size() != 2) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST)__		}_		List<?> l = (List<?>) right__		Object low = l.get(0)__		Object high = l.get(1)__		TypeComparator comparator = state.getTypeComparator()__		try {_			return BooleanTypedValue.forValue((comparator.compare(left, low) >= 0 &&_					comparator.compare(left, high) <= 0))__		}_		catch (SpelEvaluationException ex) {_			ex.setPosition(getStartPosition())__			throw ex__		}_	};returns,a,boolean,based,on,whether,a,value,is,in,the,range,expressed,the,first,operand,is,any,value,whilst,the,second,is,a,list,of,two,values,those,two,values,being,the,bounds,allowed,for,the,first,operand,inclusive,param,state,the,expression,state,return,true,if,the,left,operand,is,in,the,range,specified,false,otherwise,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,get,left,operand,get,value,internal,state,get,value,object,right,get,right,operand,get,value,internal,state,get,value,if,right,instanceof,list,list,right,size,2,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,list,l,list,right,object,low,l,get,0,object,high,l,get,1,type,comparator,comparator,state,get,type,comparator,try,return,boolean,typed,value,for,value,comparator,compare,left,low,0,comparator,compare,left,high,0,catch,spel,evaluation,exception,ex,ex,set,position,get,start,position,throw,ex
OperatorBetween -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1412630983;Returns a boolean based on whether a value is in the range expressed. The first_operand is any value whilst the second is a list of two values - those two values_being the bounds allowed for the first operand (inclusive)._@param state the expression state_@return true if the left operand is in the range specified, false otherwise_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object left = getLeftOperand().getValueInternal(state).getValue()__		Object right = getRightOperand().getValueInternal(state).getValue()__		if (!(right instanceof List) || ((List<?>) right).size() != 2) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST)__		}__		List<?> list = (List<?>) right__		Object low = list.get(0)__		Object high = list.get(1)__		TypeComparator comp = state.getTypeComparator()__		try {_			return BooleanTypedValue.forValue(comp.compare(left, low) >= 0 && comp.compare(left, high) <= 0)__		}_		catch (SpelEvaluationException ex) {_			ex.setPosition(getStartPosition())__			throw ex__		}_	};returns,a,boolean,based,on,whether,a,value,is,in,the,range,expressed,the,first,operand,is,any,value,whilst,the,second,is,a,list,of,two,values,those,two,values,being,the,bounds,allowed,for,the,first,operand,inclusive,param,state,the,expression,state,return,true,if,the,left,operand,is,in,the,range,specified,false,otherwise,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,get,left,operand,get,value,internal,state,get,value,object,right,get,right,operand,get,value,internal,state,get,value,if,right,instanceof,list,list,right,size,2,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,list,list,list,right,object,low,list,get,0,object,high,list,get,1,type,comparator,comp,state,get,type,comparator,try,return,boolean,typed,value,for,value,comp,compare,left,low,0,comp,compare,left,high,0,catch,spel,evaluation,exception,ex,ex,set,position,get,start,position,throw,ex
OperatorBetween -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1548712256;Returns a boolean based on whether a value is in the range expressed. The first_operand is any value whilst the second is a list of two values - those two values_being the bounds allowed for the first operand (inclusive)._@param state the expression state_@return true if the left operand is in the range specified, false otherwise_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object left = getLeftOperand().getValueInternal(state).getValue()__		Object right = getRightOperand().getValueInternal(state).getValue()__		if (!(right instanceof List) || ((List<?>) right).size() != 2) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.BETWEEN_RIGHT_OPERAND_MUST_BE_TWO_ELEMENT_LIST)__		}__		List<?> list = (List<?>) right__		Object low = list.get(0)__		Object high = list.get(1)__		TypeComparator comp = state.getTypeComparator()__		try {_			return BooleanTypedValue.forValue(comp.compare(left, low) >= 0 && comp.compare(left, high) <= 0)__		}_		catch (SpelEvaluationException ex) {_			ex.setPosition(getStartPosition())__			throw ex__		}_	};returns,a,boolean,based,on,whether,a,value,is,in,the,range,expressed,the,first,operand,is,any,value,whilst,the,second,is,a,list,of,two,values,those,two,values,being,the,bounds,allowed,for,the,first,operand,inclusive,param,state,the,expression,state,return,true,if,the,left,operand,is,in,the,range,specified,false,otherwise,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,get,left,operand,get,value,internal,state,get,value,object,right,get,right,operand,get,value,internal,state,get,value,if,right,instanceof,list,list,right,size,2,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,list,list,list,right,object,low,list,get,0,object,high,list,get,1,type,comparator,comp,state,get,type,comparator,try,return,boolean,typed,value,for,value,comp,compare,left,low,0,comp,compare,left,high,0,catch,spel,evaluation,exception,ex,ex,set,position,get,start,position,throw,ex
