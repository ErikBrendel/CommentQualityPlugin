# id;timestamp;commentText;codeText;commentWords;codeWords
Literal -> public static Literal getIntLiteral(String numberToken, int pos, int radix);1328020251;Process the string form of a number, using the specified base if supplied and return an appropriate literal to_hold it. Any suffix to indicate a long will be taken into account (either 'l' or 'L' is supported).__@param numberToken the token holding the number as its payload (eg. 1234 or 0xCAFE)_@param radix the base of number_@return a subtype of Literal that can represent it;public static Literal getIntLiteral(String numberToken, int pos, int radix) {_		try {_			int value = Integer.parseInt(numberToken, radix)__			return new IntLiteral(numberToken, pos, value)__		} catch (NumberFormatException nfe) {_			throw new InternalParseException(new SpelParseException(pos>>16, nfe, SpelMessage.NOT_AN_INTEGER, numberToken))__		}_	};process,the,string,form,of,a,number,using,the,specified,base,if,supplied,and,return,an,appropriate,literal,to,hold,it,any,suffix,to,indicate,a,long,will,be,taken,into,account,either,l,or,l,is,supported,param,number,token,the,token,holding,the,number,as,its,payload,eg,1234,or,0x,cafe,param,radix,the,base,of,number,return,a,subtype,of,literal,that,can,represent,it;public,static,literal,get,int,literal,string,number,token,int,pos,int,radix,try,int,value,integer,parse,int,number,token,radix,return,new,int,literal,number,token,pos,value,catch,number,format,exception,nfe,throw,new,internal,parse,exception,new,spel,parse,exception,pos,16,nfe,spel,message,number,token
Literal -> public static Literal getIntLiteral(String numberToken, int pos, int radix);1351080543;Process the string form of a number, using the specified base if supplied and return an appropriate literal to_hold it. Any suffix to indicate a long will be taken into account (either 'l' or 'L' is supported).__@param numberToken the token holding the number as its payload (eg. 1234 or 0xCAFE)_@param radix the base of number_@return a subtype of Literal that can represent it;public static Literal getIntLiteral(String numberToken, int pos, int radix) {_		try {_			int value = Integer.parseInt(numberToken, radix)__			return new IntLiteral(numberToken, pos, value)__		} catch (NumberFormatException nfe) {_			throw new InternalParseException(new SpelParseException(pos>>16, nfe, SpelMessage.NOT_AN_INTEGER, numberToken))__		}_	};process,the,string,form,of,a,number,using,the,specified,base,if,supplied,and,return,an,appropriate,literal,to,hold,it,any,suffix,to,indicate,a,long,will,be,taken,into,account,either,l,or,l,is,supported,param,number,token,the,token,holding,the,number,as,its,payload,eg,1234,or,0x,cafe,param,radix,the,base,of,number,return,a,subtype,of,literal,that,can,represent,it;public,static,literal,get,int,literal,string,number,token,int,pos,int,radix,try,int,value,integer,parse,int,number,token,radix,return,new,int,literal,number,token,pos,value,catch,number,format,exception,nfe,throw,new,internal,parse,exception,new,spel,parse,exception,pos,16,nfe,spel,message,number,token
Literal -> public static Literal getIntLiteral(String numberToken, int pos, int radix);1356735495;Process the string form of a number, using the specified base if supplied and return an appropriate literal to_hold it. Any suffix to indicate a long will be taken into account (either 'l' or 'L' is supported).__@param numberToken the token holding the number as its payload (eg. 1234 or 0xCAFE)_@param radix the base of number_@return a subtype of Literal that can represent it;public static Literal getIntLiteral(String numberToken, int pos, int radix) {_		try {_			int value = Integer.parseInt(numberToken, radix)__			return new IntLiteral(numberToken, pos, value)__		} catch (NumberFormatException nfe) {_			throw new InternalParseException(new SpelParseException(pos>>16, nfe, SpelMessage.NOT_AN_INTEGER, numberToken))__		}_	};process,the,string,form,of,a,number,using,the,specified,base,if,supplied,and,return,an,appropriate,literal,to,hold,it,any,suffix,to,indicate,a,long,will,be,taken,into,account,either,l,or,l,is,supported,param,number,token,the,token,holding,the,number,as,its,payload,eg,1234,or,0x,cafe,param,radix,the,base,of,number,return,a,subtype,of,literal,that,can,represent,it;public,static,literal,get,int,literal,string,number,token,int,pos,int,radix,try,int,value,integer,parse,int,number,token,radix,return,new,int,literal,number,token,pos,value,catch,number,format,exception,nfe,throw,new,internal,parse,exception,new,spel,parse,exception,pos,16,nfe,spel,message,number,token
Literal -> public static Literal getIntLiteral(String numberToken, int pos, int radix);1362408075;Process the string form of a number, using the specified base if supplied and return an appropriate literal to_hold it. Any suffix to indicate a long will be taken into account (either 'l' or 'L' is supported)._@param numberToken the token holding the number as its payload (eg. 1234 or 0xCAFE)_@param radix the base of number_@return a subtype of Literal that can represent it;public static Literal getIntLiteral(String numberToken, int pos, int radix) {_		try {_			int value = Integer.parseInt(numberToken, radix)__			return new IntLiteral(numberToken, pos, value)__		}_		catch (NumberFormatException nfe) {_			throw new InternalParseException(new SpelParseException(pos>>16, nfe, SpelMessage.NOT_AN_INTEGER, numberToken))__		}_	};process,the,string,form,of,a,number,using,the,specified,base,if,supplied,and,return,an,appropriate,literal,to,hold,it,any,suffix,to,indicate,a,long,will,be,taken,into,account,either,l,or,l,is,supported,param,number,token,the,token,holding,the,number,as,its,payload,eg,1234,or,0x,cafe,param,radix,the,base,of,number,return,a,subtype,of,literal,that,can,represent,it;public,static,literal,get,int,literal,string,number,token,int,pos,int,radix,try,int,value,integer,parse,int,number,token,radix,return,new,int,literal,number,token,pos,value,catch,number,format,exception,nfe,throw,new,internal,parse,exception,new,spel,parse,exception,pos,16,nfe,spel,message,number,token
Literal -> public static Literal getIntLiteral(String numberToken, int pos, int radix);1412630983;Process the string form of a number, using the specified base if supplied_and return an appropriate literal to hold it. Any suffix to indicate a_long will be taken into account (either 'l' or 'L' is supported)._@param numberToken the token holding the number as its payload (eg. 1234 or 0xCAFE)_@param radix the base of number_@return a subtype of Literal that can represent it;public static Literal getIntLiteral(String numberToken, int pos, int radix) {_		try {_			int value = Integer.parseInt(numberToken, radix)__			return new IntLiteral(numberToken, pos, value)__		}_		catch (NumberFormatException ex) {_			throw new InternalParseException(new SpelParseException(pos>>16, ex, SpelMessage.NOT_AN_INTEGER, numberToken))__		}_	};process,the,string,form,of,a,number,using,the,specified,base,if,supplied,and,return,an,appropriate,literal,to,hold,it,any,suffix,to,indicate,a,long,will,be,taken,into,account,either,l,or,l,is,supported,param,number,token,the,token,holding,the,number,as,its,payload,eg,1234,or,0x,cafe,param,radix,the,base,of,number,return,a,subtype,of,literal,that,can,represent,it;public,static,literal,get,int,literal,string,number,token,int,pos,int,radix,try,int,value,integer,parse,int,number,token,radix,return,new,int,literal,number,token,pos,value,catch,number,format,exception,ex,throw,new,internal,parse,exception,new,spel,parse,exception,pos,16,ex,spel,message,number,token
Literal -> public static Literal getIntLiteral(String numberToken, int pos, int radix);1496837955;Process the string form of a number, using the specified base if supplied_and return an appropriate literal to hold it. Any suffix to indicate a_long will be taken into account (either 'l' or 'L' is supported)._@param numberToken the token holding the number as its payload (eg. 1234 or 0xCAFE)_@param radix the base of number_@return a subtype of Literal that can represent it;public static Literal getIntLiteral(String numberToken, int pos, int radix) {_		try {_			int value = Integer.parseInt(numberToken, radix)__			return new IntLiteral(numberToken, pos, value)__		}_		catch (NumberFormatException ex) {_			throw new InternalParseException(new SpelParseException(pos>>16, ex, SpelMessage.NOT_AN_INTEGER, numberToken))__		}_	};process,the,string,form,of,a,number,using,the,specified,base,if,supplied,and,return,an,appropriate,literal,to,hold,it,any,suffix,to,indicate,a,long,will,be,taken,into,account,either,l,or,l,is,supported,param,number,token,the,token,holding,the,number,as,its,payload,eg,1234,or,0x,cafe,param,radix,the,base,of,number,return,a,subtype,of,literal,that,can,represent,it;public,static,literal,get,int,literal,string,number,token,int,pos,int,radix,try,int,value,integer,parse,int,number,token,radix,return,new,int,literal,number,token,pos,value,catch,number,format,exception,ex,throw,new,internal,parse,exception,new,spel,parse,exception,pos,16,ex,spel,message,number,token
Literal -> public static Literal getIntLiteral(String numberToken, int pos, int radix);1498780456;Process the string form of a number, using the specified base if supplied_and return an appropriate literal to hold it. Any suffix to indicate a_long will be taken into account (either 'l' or 'L' is supported)._@param numberToken the token holding the number as its payload (eg. 1234 or 0xCAFE)_@param radix the base of number_@return a subtype of Literal that can represent it;public static Literal getIntLiteral(String numberToken, int pos, int radix) {_		try {_			int value = Integer.parseInt(numberToken, radix)__			return new IntLiteral(numberToken, pos, value)__		}_		catch (NumberFormatException ex) {_			throw new InternalParseException(new SpelParseException(pos>>16, ex, SpelMessage.NOT_AN_INTEGER, numberToken))__		}_	};process,the,string,form,of,a,number,using,the,specified,base,if,supplied,and,return,an,appropriate,literal,to,hold,it,any,suffix,to,indicate,a,long,will,be,taken,into,account,either,l,or,l,is,supported,param,number,token,the,token,holding,the,number,as,its,payload,eg,1234,or,0x,cafe,param,radix,the,base,of,number,return,a,subtype,of,literal,that,can,represent,it;public,static,literal,get,int,literal,string,number,token,int,pos,int,radix,try,int,value,integer,parse,int,number,token,radix,return,new,int,literal,number,token,pos,value,catch,number,format,exception,ex,throw,new,internal,parse,exception,new,spel,parse,exception,pos,16,ex,spel,message,number,token
