# id;timestamp;commentText;codeText;commentWords;codeWords
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1328020251;Evalutes a compound expression. This involves evaluating each piece in turn and the return value from each piece_is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue result = null__		SpelNodeImpl nextNode = null__		try {_			nextNode = children[0]__			result = nextNode.getValueInternal(state)__			for (int i = 1_ i < getChildCount()_ i++) {_				try {_					state.pushActiveContextObject(result)__					nextNode = children[i]__					result = nextNode.getValueInternal(state)__				} finally {_					state.popActiveContextObject()__				}_			}_		} catch (SpelEvaluationException ee) {_			_			ee.setPosition(nextNode.getStartPosition())__			throw ee__		}_		return result__	};evalutes,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,result,null,spel,node,impl,next,node,null,try,next,node,children,0,result,next,node,get,value,internal,state,for,int,i,1,i,get,child,count,i,try,state,push,active,context,object,result,next,node,children,i,result,next,node,get,value,internal,state,finally,state,pop,active,context,object,catch,spel,evaluation,exception,ee,ee,set,position,next,node,get,start,position,throw,ee,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1351041784;Evaluates a compound expression. This involves evaluating each piece in turn and the return value from each piece_is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		return getValueRef(state).getValue()__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,return,get,value,ref,state,get,value
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1356735495;Evaluates a compound expression. This involves evaluating each piece in turn and the return value from each piece_is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		return getValueRef(state).getValue()__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,return,get,value,ref,state,get,value
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1362408075;Evaluates a compound expression. This involves evaluating each piece in turn and the return value from each piece_is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		return getValueRef(state).getValue()__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,return,get,value,ref,state,get,value
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1372363092;Evaluates a compound expression. This involves evaluating each piece in turn and the return value from each piece_is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		return getValueRef(state).getValue()__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,return,get,value,ref,state,get,value
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1392410380;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		return getValueRef(state).getValue()__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,return,get,value,ref,state,get,value
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405011154;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length-1].getExitDescriptor()__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,get,exit,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405514506;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length-1].getExitDescriptor()__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,get,exit,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1406039079;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].getExitDescriptor()__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,get,exit,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1412630983;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1449878380;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1449965678;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1500495740;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1506097334;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1530174524;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1548712256;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1550238935;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1550247388;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
CompoundExpression -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1550247561;Evaluates a compound expression. This involves evaluating each piece in turn and the_return value from each piece is the active context object for the subsequent piece._@param state the state in which the expression is being evaluated_@return the final value from the last piece of the compound expression;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		ValueRef ref = getValueRef(state)__		TypedValue result = ref.getValue()__		this.exitTypeDescriptor = this.children[this.children.length - 1].exitTypeDescriptor__		return result__	};evaluates,a,compound,expression,this,involves,evaluating,each,piece,in,turn,and,the,return,value,from,each,piece,is,the,active,context,object,for,the,subsequent,piece,param,state,the,state,in,which,the,expression,is,being,evaluated,return,the,final,value,from,the,last,piece,of,the,compound,expression;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,value,ref,ref,get,value,ref,state,typed,value,result,ref,get,value,this,exit,type,descriptor,this,children,this,children,length,1,exit,type,descriptor,return,result
