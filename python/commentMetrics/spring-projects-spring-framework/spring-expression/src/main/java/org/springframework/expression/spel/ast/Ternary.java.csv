# id;timestamp;commentText;codeText;commentWords;codeWords
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1328020251;Evaluate the condition and if true evaluate the first alternative, otherwise evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a boolean or there is a problem_executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		if (value.booleanValue()) {_			return children[1].getValueInternal(state)__		} else {_			return children[2].getValueInternal(state)__		}_	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,if,value,boolean,value,return,children,1,get,value,internal,state,else,return,children,2,get,value,internal,state
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1372363092;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a_boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		if (value.booleanValue()) {_			return this.children[1].getValueInternal(state)__		}_		else {_			return this.children[2].getValueInternal(state)__		}_	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,if,value,boolean,value,return,this,children,1,get,value,internal,state,else,return,this,children,2,get,value,internal,state
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405011154;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a_boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = null__		if (value.booleanValue()) {_			result = this.children[1].getValueInternal(state)__		}_		else {_			result = this.children[2].getValueInternal(state)__		}_		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,null,if,value,boolean,value,result,this,children,1,get,value,internal,state,else,result,this,children,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405514506;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a_boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = null__		if (value.booleanValue()) {_			result = this.children[1].getValueInternal(state)__		}_		else {_			result = this.children[2].getValueInternal(state)__		}_		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,null,if,value,boolean,value,result,this,children,1,get,value,internal,state,else,result,this,children,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1412180765;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a_boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = null__		if (value.booleanValue()) {_			result = this.children[1].getValueInternal(state)__		}_		else {_			result = this.children[2].getValueInternal(state)__		}_		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,null,if,value,boolean,value,result,this,children,1,get,value,internal,state,else,result,this,children,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1412630983;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to_a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = this.children[value ? 1 : 2].getValueInternal(state)__		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,this,children,value,1,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1486402990;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to_a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = this.children[value ? 1 : 2].getValueInternal(state)__		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,this,children,value,1,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1487376095;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to_a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = this.children[value ? 1 : 2].getValueInternal(state)__		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,this,children,value,1,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1496837955;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to_a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = this.children[value ? 1 : 2].getValueInternal(state)__		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,this,children,value,1,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1498780456;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to_a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = this.children[value ? 1 : 2].getValueInternal(state)__		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,this,children,value,1,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1530174524;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to_a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = this.children[value ? 1 : 2].getValueInternal(state)__		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,this,children,value,1,2,get,value,internal,state,compute,exit,type,descriptor,return,result
Ternary -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1548712256;Evaluate the condition and if true evaluate the first alternative, otherwise_evaluate the second alternative._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to_a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Boolean value = this.children[0].getValue(state, Boolean.class)__		if (value == null) {_			throw new SpelEvaluationException(getChild(0).getStartPosition(),_					SpelMessage.TYPE_CONVERSION_ERROR, "null", "boolean")__		}_		TypedValue result = this.children[value ? 1 : 2].getValueInternal(state)__		computeExitTypeDescriptor()__		return result__	};evaluate,the,condition,and,if,true,evaluate,the,first,alternative,otherwise,evaluate,the,second,alternative,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,boolean,value,this,children,0,get,value,state,boolean,class,if,value,null,throw,new,spel,evaluation,exception,get,child,0,get,start,position,spel,message,null,boolean,typed,value,result,this,children,value,1,2,get,value,internal,state,compute,exit,type,descriptor,return,result
