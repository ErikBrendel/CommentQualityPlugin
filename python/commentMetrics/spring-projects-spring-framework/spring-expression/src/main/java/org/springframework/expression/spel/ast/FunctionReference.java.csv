# id;timestamp;commentText;codeText;commentWords;codeWords
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1328020251;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1356735495;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1372363092;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1405011154;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1405514506;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1406039079;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1412630983;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1413486529;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1414174302;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1414261335;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1449965678;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1467846264;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1477045587;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1496837955;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1498780456;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1506468851;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1515363825;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1516393837;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1528737374;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1530174524;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1548712256;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private Object[] getArguments(ExpressionState state) throws EvaluationException;1550238935;Compute the arguments to the function, they are the children of this expression node._@return an array of argument values for the function call;private Object[] getArguments(ExpressionState state) throws EvaluationException {_		_		Object[] arguments = new Object[getChildCount()]__		for (int i = 0_ i < arguments.length_ i++) {_			arguments[i] = this.children[i].getValueInternal(state).getValue()__		}_		return arguments__	};compute,the,arguments,to,the,function,they,are,the,children,of,this,expression,node,return,an,array,of,argument,values,for,the,function,call;private,object,get,arguments,expression,state,state,throws,evaluation,exception,object,arguments,new,object,get,child,count,for,int,i,0,i,arguments,length,i,arguments,i,this,children,i,get,value,internal,state,get,value,return,arguments
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1328020251;Execute a function represented as a java.lang.reflect.Method.__@param state the expression evaluation state_@param the java method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(), SpelMessage.FUNCTION_MUST_BE_STATIC, method_					.getDeclaringClass().getName()_					+ "." + method.getName(), name)__		}__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method,-1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,the,java,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,name,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1356735495;Execute a function represented as a java.lang.reflect.Method.__@param state the expression evaluation state_@param the java method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(), SpelMessage.FUNCTION_MUST_BE_STATIC, method_					.getDeclaringClass().getName()_					+ "." + method.getName(), name)__		}__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method,-1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,the,java,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,name,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1372363092;Execute a function represented as a java.lang.reflect.Method.__@param state the expression evaluation state_@param the java method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method,-1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,the,java,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1405011154;Execute a function represented as a java.lang.reflect.Method.__@param state the expression evaluation state_@param the java method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}_		boolean argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred |= ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method,-1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,the,java,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,boolean,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1405514506;Execute a function represented as a java.lang.reflect.Method.__@param state the expression evaluation state_@param the java method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}_		boolean argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred |= ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method,-1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,the,java,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,boolean,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1406039079;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}_		boolean argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method,-1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,boolean,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1412630983;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}__		boolean argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,boolean,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1413486529;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}__		boolean argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,boolean,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1414174302;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}__		argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1414261335;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}__		argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1449965678;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterTypes().length != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterTypes().length)__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}__		argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs =_					ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,types,length,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,types,length,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1467846264;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterCount() != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterCount())__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC,_					method.getDeclaringClass().getName() + "." + method.getName(), this.name)__		}__		argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs =_					ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,method,get,declaring,class,get,name,method,get,name,this,name,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1477045587;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterCount() != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterCount())__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		argumentConversionOccurred = false__		_		if (functionArgs != null) {_			TypeConverter converter = state.getEvaluationContext().getTypeConverter()__			argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		}_		if (method.isVarArgs()) {_			functionArgs =_					ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,argument,conversion,occurred,false,if,function,args,null,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1496837955;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterCount() != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterCount())__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1498780456;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterCount() != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterCount())__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1506468851;Execute a function represented as a java.lang.reflect.Method._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		this.method = null__		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterCount() != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterCount())__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}__		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			if (!argumentConversionOccurred) {_				this.method = method__				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__			}_			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_	};execute,a,function,represented,as,a,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,this,method,null,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,if,argument,conversion,occurred,this,method,method,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1515363825;Execute a function represented as a {@code java.lang.reflect.Method}._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs() && method.getParameterCount() != functionArgs.length) {_			throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_					functionArgs.length, method.getParameterCount())__		}_		_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		boolean argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}_		boolean compilable = false___		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			compilable = !argumentConversionOccurred__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_		finally {_			if (compilable) {_				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__				this.method = method__			}_			else {_				this.exitTypeDescriptor = null__				this.method = null__			}_		}_	};execute,a,function,represented,as,a,code,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,method,get,parameter,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,method,get,parameter,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,boolean,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,boolean,compilable,false,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,compilable,argument,conversion,occurred,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message,finally,if,compilable,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,this,method,method,else,this,exit,type,descriptor,null,this,method,null
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1516393837;Execute a function represented as a {@code java.lang.reflect.Method}._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs()) {_			int declaredParamCount = method.getParameterCount()__			if (declaredParamCount != functionArgs.length) {_				throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_						functionArgs.length, declaredParamCount)__			}_		}_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		boolean argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}_		boolean compilable = false___		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			compilable = !argumentConversionOccurred__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_		finally {_			if (compilable) {_				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__				this.method = method__			}_			else {_				this.exitTypeDescriptor = null__				this.method = null__			}_		}_	};execute,a,function,represented,as,a,code,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,int,declared,param,count,method,get,parameter,count,if,declared,param,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,declared,param,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,boolean,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,boolean,compilable,false,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,compilable,argument,conversion,occurred,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message,finally,if,compilable,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,this,method,method,else,this,exit,type,descriptor,null,this,method,null
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1528737374;Execute a function represented as a {@code java.lang.reflect.Method}._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs()) {_			int declaredParamCount = method.getParameterCount()__			if (declaredParamCount != functionArgs.length) {_				throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_						functionArgs.length, declaredParamCount)__			}_		}_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		boolean argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}_		boolean compilable = false___		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			compilable = !argumentConversionOccurred__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_		finally {_			if (compilable) {_				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__				this.method = method__			}_			else {_				this.exitTypeDescriptor = null__				this.method = null__			}_		}_	};execute,a,function,represented,as,a,code,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,int,declared,param,count,method,get,parameter,count,if,declared,param,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,declared,param,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,boolean,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,boolean,compilable,false,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,compilable,argument,conversion,occurred,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message,finally,if,compilable,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,this,method,method,else,this,exit,type,descriptor,null,this,method,null
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1530174524;Execute a function represented as a {@code java.lang.reflect.Method}._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs()) {_			int declaredParamCount = method.getParameterCount()__			if (declaredParamCount != functionArgs.length) {_				throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_						functionArgs.length, declaredParamCount)__			}_		}_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		boolean argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}_		boolean compilable = false___		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			compilable = !argumentConversionOccurred__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_		finally {_			if (compilable) {_				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__				this.method = method__			}_			else {_				this.exitTypeDescriptor = null__				this.method = null__			}_		}_	};execute,a,function,represented,as,a,code,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,int,declared,param,count,method,get,parameter,count,if,declared,param,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,declared,param,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,boolean,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,boolean,compilable,false,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,compilable,argument,conversion,occurred,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message,finally,if,compilable,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,this,method,method,else,this,exit,type,descriptor,null,this,method,null
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1548712256;Execute a function represented as a {@code java.lang.reflect.Method}._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs()) {_			int declaredParamCount = method.getParameterCount()__			if (declaredParamCount != functionArgs.length) {_				throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_						functionArgs.length, declaredParamCount)__			}_		}_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		boolean argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}_		boolean compilable = false___		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			compilable = !argumentConversionOccurred__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_		finally {_			if (compilable) {_				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__				this.method = method__			}_			else {_				this.exitTypeDescriptor = null__				this.method = null__			}_		}_	};execute,a,function,represented,as,a,code,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,int,declared,param,count,method,get,parameter,count,if,declared,param,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,declared,param,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,boolean,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,boolean,compilable,false,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,compilable,argument,conversion,occurred,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message,finally,if,compilable,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,this,method,method,else,this,exit,type,descriptor,null,this,method,null
FunctionReference -> private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException;1550238935;Execute a function represented as a {@code java.lang.reflect.Method}._@param state the expression evaluation state_@param method the method to invoke_@return the return value of the invoked Java method_@throws EvaluationException if there is any problem invoking the method;private TypedValue executeFunctionJLRMethod(ExpressionState state, Method method) throws EvaluationException {_		Object[] functionArgs = getArguments(state)___		if (!method.isVarArgs()) {_			int declaredParamCount = method.getParameterCount()__			if (declaredParamCount != functionArgs.length) {_				throw new SpelEvaluationException(SpelMessage.INCORRECT_NUMBER_OF_ARGUMENTS_TO_FUNCTION,_						functionArgs.length, declaredParamCount)__			}_		}_		if (!Modifier.isStatic(method.getModifiers())) {_			throw new SpelEvaluationException(getStartPosition(),_					SpelMessage.FUNCTION_MUST_BE_STATIC, ClassUtils.getQualifiedMethodName(method), this.name)__		}__		_		TypeConverter converter = state.getEvaluationContext().getTypeConverter()__		boolean argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)__		if (method.isVarArgs()) {_			functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(_					method.getParameterTypes(), functionArgs)__		}_		boolean compilable = false___		try {_			ReflectionUtils.makeAccessible(method)__			Object result = method.invoke(method.getClass(), functionArgs)__			compilable = !argumentConversionOccurred__			return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))__		}_		catch (Exception ex) {_			throw new SpelEvaluationException(getStartPosition(), ex, SpelMessage.EXCEPTION_DURING_FUNCTION_CALL,_					this.name, ex.getMessage())__		}_		finally {_			if (compilable) {_				this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())__				this.method = method__			}_			else {_				this.exitTypeDescriptor = null__				this.method = null__			}_		}_	};execute,a,function,represented,as,a,code,java,lang,reflect,method,param,state,the,expression,evaluation,state,param,method,the,method,to,invoke,return,the,return,value,of,the,invoked,java,method,throws,evaluation,exception,if,there,is,any,problem,invoking,the,method;private,typed,value,execute,function,jlrmethod,expression,state,state,method,method,throws,evaluation,exception,object,function,args,get,arguments,state,if,method,is,var,args,int,declared,param,count,method,get,parameter,count,if,declared,param,count,function,args,length,throw,new,spel,evaluation,exception,spel,message,function,args,length,declared,param,count,if,modifier,is,static,method,get,modifiers,throw,new,spel,evaluation,exception,get,start,position,spel,message,class,utils,get,qualified,method,name,method,this,name,type,converter,converter,state,get,evaluation,context,get,type,converter,boolean,argument,conversion,occurred,reflection,helper,convert,all,arguments,converter,function,args,method,if,method,is,var,args,function,args,reflection,helper,setup,arguments,for,varargs,invocation,method,get,parameter,types,function,args,boolean,compilable,false,try,reflection,utils,make,accessible,method,object,result,method,invoke,method,get,class,function,args,compilable,argument,conversion,occurred,return,new,typed,value,result,new,type,descriptor,new,method,parameter,method,1,narrow,result,catch,exception,ex,throw,new,spel,evaluation,exception,get,start,position,ex,spel,message,this,name,ex,get,message,finally,if,compilable,this,exit,type,descriptor,code,flow,to,descriptor,method,get,return,type,this,method,method,else,this,exit,type,descriptor,null,this,method,null
