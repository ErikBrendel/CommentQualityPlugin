# id;timestamp;commentText;codeText;commentWords;codeWords
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1328020251;Evaluate the condition and if not null, return it.  If it is null return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a boolean or there is a problem_executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = children[0].getValueInternal(state)__		if (value.getValue()!=null && !((value.getValue() instanceof String) && ((String)value.getValue()).length()==0)) {_			return value__		} else {_			return children[1].getValueInternal(state)__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,children,0,get,value,internal,state,if,value,get,value,null,value,get,value,instanceof,string,string,value,get,value,length,0,return,value,else,return,children,1,get,value,internal,state
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1372363092;Evaluate the condition and if not null, return it. If it is null return the other_value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a_boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		if ((value.getValue() != null) && !((value.getValue() instanceof String) &&_				((String) value.getValue()).length() == 0)) {_			return value__		}_		else {_			return this.children[1].getValueInternal(state)__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,value,get,value,null,value,get,value,instanceof,string,string,value,get,value,length,0,return,value,else,return,this,children,1,get,value,internal,state
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405011154;Evaluate the condition and if not null, return it. If it is null return the other_value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a_boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		if ((value.getValue() != null) && !((value.getValue() instanceof String) &&_				((String) value.getValue()).length() == 0)) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			if (exitTypeDescriptor == null) {_				String testDescriptor = this.children[0].exitTypeDescriptor__				String ifNullDescriptor = this.children[1].exitTypeDescriptor__				if (testDescriptor.equals(ifNullDescriptor)) {_					this.exitTypeDescriptor = testDescriptor__				}_				else {_					this.exitTypeDescriptor = "Ljava/lang/Object"__				}_			}_			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,value,get,value,null,value,get,value,instanceof,string,string,value,get,value,length,0,return,value,else,typed,value,result,this,children,1,get,value,internal,state,if,exit,type,descriptor,null,string,test,descriptor,this,children,0,exit,type,descriptor,string,if,null,descriptor,this,children,1,exit,type,descriptor,if,test,descriptor,equals,if,null,descriptor,this,exit,type,descriptor,test,descriptor,else,this,exit,type,descriptor,ljava,lang,object,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405514506;Evaluate the condition and if not null, return it. If it is null return the other_value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly to a_boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		if ((value.getValue() != null) && !((value.getValue() instanceof String) &&_				((String) value.getValue()).length() == 0)) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			if (exitTypeDescriptor == null) {_				String testDescriptor = this.children[0].exitTypeDescriptor__				String ifNullDescriptor = this.children[1].exitTypeDescriptor__				if (testDescriptor.equals(ifNullDescriptor)) {_					this.exitTypeDescriptor = testDescriptor__				}_				else {_					this.exitTypeDescriptor = "Ljava/lang/Object"__				}_			}_			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,value,get,value,null,value,get,value,instanceof,string,string,value,get,value,length,0,return,value,else,typed,value,result,this,children,1,get,value,internal,state,if,exit,type,descriptor,null,string,test,descriptor,this,children,0,exit,type,descriptor,string,if,null,descriptor,this,children,1,exit,type,descriptor,if,test,descriptor,equals,if,null,descriptor,this,exit,type,descriptor,test,descriptor,else,this,exit,type,descriptor,ljava,lang,object,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1406039079;Evaluate the condition and if not null, return it._If it is null, return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly_to a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		if (!StringUtils.isEmpty(value.getValue())) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			computeExitTypeDescriptor()__			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,string,utils,is,empty,value,get,value,return,value,else,typed,value,result,this,children,1,get,value,internal,state,compute,exit,type,descriptor,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1412630983;Evaluate the condition and if not null, return it._If it is null, return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly_to a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		if (!StringUtils.isEmpty(value.getValue())) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			computeExitTypeDescriptor()__			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,string,utils,is,empty,value,get,value,return,value,else,typed,value,result,this,children,1,get,value,internal,state,compute,exit,type,descriptor,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1486402990;Evaluate the condition and if not null, return it._If it is null, return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly_to a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		_		if (!StringUtils.isEmpty(value.getValue())) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			computeExitTypeDescriptor()__			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,string,utils,is,empty,value,get,value,return,value,else,typed,value,result,this,children,1,get,value,internal,state,compute,exit,type,descriptor,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1487376095;Evaluate the condition and if not null, return it._If it is null, return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly_to a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		_		if (!StringUtils.isEmpty(value.getValue())) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			computeExitTypeDescriptor()__			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,string,utils,is,empty,value,get,value,return,value,else,typed,value,result,this,children,1,get,value,internal,state,compute,exit,type,descriptor,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1496837955;Evaluate the condition and if not null, return it._If it is null, return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly_to a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		_		if (!StringUtils.isEmpty(value.getValue())) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			computeExitTypeDescriptor()__			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,string,utils,is,empty,value,get,value,return,value,else,typed,value,result,this,children,1,get,value,internal,state,compute,exit,type,descriptor,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1498780456;Evaluate the condition and if not null, return it._If it is null, return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly_to a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		_		if (!StringUtils.isEmpty(value.getValue())) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			computeExitTypeDescriptor()__			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,string,utils,is,empty,value,get,value,return,value,else,typed,value,result,this,children,1,get,value,internal,state,compute,exit,type,descriptor,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1536165673;Evaluate the condition and if not null, return it._If it is null, return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly_to a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		_		if (!StringUtils.isEmpty(value.getValue())) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			computeExitTypeDescriptor()__			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,string,utils,is,empty,value,get,value,return,value,else,typed,value,result,this,children,1,get,value,internal,state,compute,exit,type,descriptor,return,result
Elvis -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1548712256;Evaluate the condition and if not null, return it._If it is null, return the other value._@param state the expression state_@throws EvaluationException if the condition does not evaluate correctly_to a boolean or there is a problem executing the chosen alternative;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue value = this.children[0].getValueInternal(state)__		_		if (!StringUtils.isEmpty(value.getValue())) {_			return value__		}_		else {_			TypedValue result = this.children[1].getValueInternal(state)__			computeExitTypeDescriptor()__			return result__		}_	};evaluate,the,condition,and,if,not,null,return,it,if,it,is,null,return,the,other,value,param,state,the,expression,state,throws,evaluation,exception,if,the,condition,does,not,evaluate,correctly,to,a,boolean,or,there,is,a,problem,executing,the,chosen,alternative;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,value,this,children,0,get,value,internal,state,if,string,utils,is,empty,value,get,value,return,value,else,typed,value,result,this,children,1,get,value,internal,state,compute,exit,type,descriptor,return,result
