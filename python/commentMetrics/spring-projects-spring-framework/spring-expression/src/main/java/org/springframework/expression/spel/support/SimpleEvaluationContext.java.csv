# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleEvaluationContext -> Builder -> public Builder withTypeConverter(TypeConverter converter);1521738567;Register a custom {@link TypeConverter}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService}_is used._@see #withConversionService_@see StandardTypeConverter#StandardTypeConverter();public Builder withTypeConverter(TypeConverter converter) {_			this.typeConverter = converter__			return this__		};register,a,custom,link,type,converter,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,conversion,service,see,standard,type,converter,standard,type,converter;public,builder,with,type,converter,type,converter,converter,this,type,converter,converter,return,this
SimpleEvaluationContext -> Builder -> public Builder withTypeConverter(TypeConverter converter);1521822561;Register a custom {@link TypeConverter}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withConversionService_@see StandardTypeConverter#StandardTypeConverter();public Builder withTypeConverter(TypeConverter converter) {_			this.typeConverter = converter__			return this__		};register,a,custom,link,type,converter,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,conversion,service,see,standard,type,converter,standard,type,converter;public,builder,with,type,converter,type,converter,converter,this,type,converter,converter,return,this
SimpleEvaluationContext -> Builder -> public Builder withTypeConverter(TypeConverter converter);1521905437;Register a custom {@link TypeConverter}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withConversionService_@see StandardTypeConverter#StandardTypeConverter();public Builder withTypeConverter(TypeConverter converter) {_			this.typeConverter = converter__			return this__		};register,a,custom,link,type,converter,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,conversion,service,see,standard,type,converter,standard,type,converter;public,builder,with,type,converter,type,converter,converter,this,type,converter,converter,return,this
SimpleEvaluationContext -> Builder -> public Builder withTypeConverter(TypeConverter converter);1522102974;Register a custom {@link TypeConverter}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withConversionService_@see StandardTypeConverter#StandardTypeConverter();public Builder withTypeConverter(TypeConverter converter) {_			this.typeConverter = converter__			return this__		};register,a,custom,link,type,converter,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,conversion,service,see,standard,type,converter,standard,type,converter;public,builder,with,type,converter,type,converter,converter,this,type,converter,converter,return,this
SimpleEvaluationContext -> Builder -> public Builder withTypeConverter(TypeConverter converter);1522163223;Register a custom {@link TypeConverter}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withConversionService_@see StandardTypeConverter#StandardTypeConverter();public Builder withTypeConverter(TypeConverter converter) {_			this.typeConverter = converter__			return this__		};register,a,custom,link,type,converter,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,conversion,service,see,standard,type,converter,standard,type,converter;public,builder,with,type,converter,type,converter,converter,this,type,converter,converter,return,this
SimpleEvaluationContext -> Builder -> public Builder withTypeConverter(TypeConverter converter);1530174524;Register a custom {@link TypeConverter}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withConversionService_@see StandardTypeConverter#StandardTypeConverter();public Builder withTypeConverter(TypeConverter converter) {_			this.typeConverter = converter__			return this__		};register,a,custom,link,type,converter,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,conversion,service,see,standard,type,converter,standard,type,converter;public,builder,with,type,converter,type,converter,converter,this,type,converter,converter,return,this
SimpleEvaluationContext -> @Override 	public OperatorOverloader getOperatorOverloader();1521057199;Return an instance of {@link StandardOperatorOverloader}.;@Override_	public OperatorOverloader getOperatorOverloader() {_		return this.operatorOverloader__	};return,an,instance,of,link,standard,operator,overloader;override,public,operator,overloader,get,operator,overloader,return,this,operator,overloader
SimpleEvaluationContext -> @Override 	public OperatorOverloader getOperatorOverloader();1521686168;Return an instance of {@link StandardOperatorOverloader}.;@Override_	public OperatorOverloader getOperatorOverloader() {_		return this.operatorOverloader__	};return,an,instance,of,link,standard,operator,overloader;override,public,operator,overloader,get,operator,overloader,return,this,operator,overloader
SimpleEvaluationContext -> @Override 	public OperatorOverloader getOperatorOverloader();1521738567;Return an instance of {@link StandardOperatorOverloader}.;@Override_	public OperatorOverloader getOperatorOverloader() {_		return this.operatorOverloader__	};return,an,instance,of,link,standard,operator,overloader;override,public,operator,overloader,get,operator,overloader,return,this,operator,overloader
SimpleEvaluationContext -> @Override 	public OperatorOverloader getOperatorOverloader();1521822561;Return an instance of {@link StandardOperatorOverloader}.;@Override_	public OperatorOverloader getOperatorOverloader() {_		return this.operatorOverloader__	};return,an,instance,of,link,standard,operator,overloader;override,public,operator,overloader,get,operator,overloader,return,this,operator,overloader
SimpleEvaluationContext -> @Override 	public OperatorOverloader getOperatorOverloader();1521905437;Return an instance of {@link StandardOperatorOverloader}.;@Override_	public OperatorOverloader getOperatorOverloader() {_		return this.operatorOverloader__	};return,an,instance,of,link,standard,operator,overloader;override,public,operator,overloader,get,operator,overloader,return,this,operator,overloader
SimpleEvaluationContext -> @Override 	public OperatorOverloader getOperatorOverloader();1522102974;Return an instance of {@link StandardOperatorOverloader}.;@Override_	public OperatorOverloader getOperatorOverloader() {_		return this.operatorOverloader__	};return,an,instance,of,link,standard,operator,overloader;override,public,operator,overloader,get,operator,overloader,return,this,operator,overloader
SimpleEvaluationContext -> @Override 	public OperatorOverloader getOperatorOverloader();1522163223;Return an instance of {@link StandardOperatorOverloader}.;@Override_	public OperatorOverloader getOperatorOverloader() {_		return this.operatorOverloader__	};return,an,instance,of,link,standard,operator,overloader;override,public,operator,overloader,get,operator,overloader,return,this,operator,overloader
SimpleEvaluationContext -> @Override 	public OperatorOverloader getOperatorOverloader();1530174524;Return an instance of {@link StandardOperatorOverloader}.;@Override_	public OperatorOverloader getOperatorOverloader() {_		return this.operatorOverloader__	};return,an,instance,of,link,standard,operator,overloader;override,public,operator,overloader,get,operator,overloader,return,this,operator,overloader
SimpleEvaluationContext -> @Override 	public TypeLocator getTypeLocator();1521057199;{@code SimpleEvaluationContext} does not support use of type references._@return {@code TypeLocator} implementation that raises a_{@link SpelEvaluationException} with {@link SpelMessage#TYPE_NOT_FOUND}.;@Override_	public TypeLocator getTypeLocator() {_		return typeNotFoundTypeLocator__	};code,simple,evaluation,context,does,not,support,use,of,type,references,return,code,type,locator,implementation,that,raises,a,link,spel,evaluation,exception,with,link,spel,message;override,public,type,locator,get,type,locator,return,type,not,found,type,locator
SimpleEvaluationContext -> @Override 	public TypeLocator getTypeLocator();1521686168;{@code SimpleEvaluationContext} does not support use of type references._@return {@code TypeLocator} implementation that raises a_{@link SpelEvaluationException} with {@link SpelMessage#TYPE_NOT_FOUND}.;@Override_	public TypeLocator getTypeLocator() {_		return typeNotFoundTypeLocator__	};code,simple,evaluation,context,does,not,support,use,of,type,references,return,code,type,locator,implementation,that,raises,a,link,spel,evaluation,exception,with,link,spel,message;override,public,type,locator,get,type,locator,return,type,not,found,type,locator
SimpleEvaluationContext -> @Override 	public TypeLocator getTypeLocator();1521738567;{@code SimpleEvaluationContext} does not support use of type references._@return {@code TypeLocator} implementation that raises a_{@link SpelEvaluationException} with {@link SpelMessage#TYPE_NOT_FOUND}.;@Override_	public TypeLocator getTypeLocator() {_		return typeNotFoundTypeLocator__	};code,simple,evaluation,context,does,not,support,use,of,type,references,return,code,type,locator,implementation,that,raises,a,link,spel,evaluation,exception,with,link,spel,message;override,public,type,locator,get,type,locator,return,type,not,found,type,locator
SimpleEvaluationContext -> @Override 	public TypeLocator getTypeLocator();1521822561;{@code SimpleEvaluationContext} does not support use of type references._@return {@code TypeLocator} implementation that raises a_{@link SpelEvaluationException} with {@link SpelMessage#TYPE_NOT_FOUND}.;@Override_	public TypeLocator getTypeLocator() {_		return typeNotFoundTypeLocator__	};code,simple,evaluation,context,does,not,support,use,of,type,references,return,code,type,locator,implementation,that,raises,a,link,spel,evaluation,exception,with,link,spel,message;override,public,type,locator,get,type,locator,return,type,not,found,type,locator
SimpleEvaluationContext -> @Override 	public TypeLocator getTypeLocator();1521905437;{@code SimpleEvaluationContext} does not support use of type references._@return {@code TypeLocator} implementation that raises a_{@link SpelEvaluationException} with {@link SpelMessage#TYPE_NOT_FOUND}.;@Override_	public TypeLocator getTypeLocator() {_		return typeNotFoundTypeLocator__	};code,simple,evaluation,context,does,not,support,use,of,type,references,return,code,type,locator,implementation,that,raises,a,link,spel,evaluation,exception,with,link,spel,message;override,public,type,locator,get,type,locator,return,type,not,found,type,locator
SimpleEvaluationContext -> @Override 	public TypeLocator getTypeLocator();1522102974;{@code SimpleEvaluationContext} does not support use of type references._@return {@code TypeLocator} implementation that raises a_{@link SpelEvaluationException} with {@link SpelMessage#TYPE_NOT_FOUND}.;@Override_	public TypeLocator getTypeLocator() {_		return typeNotFoundTypeLocator__	};code,simple,evaluation,context,does,not,support,use,of,type,references,return,code,type,locator,implementation,that,raises,a,link,spel,evaluation,exception,with,link,spel,message;override,public,type,locator,get,type,locator,return,type,not,found,type,locator
SimpleEvaluationContext -> @Override 	public TypeLocator getTypeLocator();1522163223;{@code SimpleEvaluationContext} does not support use of type references._@return {@code TypeLocator} implementation that raises a_{@link SpelEvaluationException} with {@link SpelMessage#TYPE_NOT_FOUND}.;@Override_	public TypeLocator getTypeLocator() {_		return typeNotFoundTypeLocator__	};code,simple,evaluation,context,does,not,support,use,of,type,references,return,code,type,locator,implementation,that,raises,a,link,spel,evaluation,exception,with,link,spel,message;override,public,type,locator,get,type,locator,return,type,not,found,type,locator
SimpleEvaluationContext -> @Override 	public TypeLocator getTypeLocator();1530174524;{@code SimpleEvaluationContext} does not support use of type references._@return {@code TypeLocator} implementation that raises a_{@link SpelEvaluationException} with {@link SpelMessage#TYPE_NOT_FOUND}.;@Override_	public TypeLocator getTypeLocator() {_		return typeNotFoundTypeLocator__	};code,simple,evaluation,context,does,not,support,use,of,type,references,return,code,type,locator,implementation,that,raises,a,link,spel,evaluation,exception,with,link,spel,message;override,public,type,locator,get,type,locator,return,type,not,found,type,locator
SimpleEvaluationContext -> @Override 	public TypeComparator getTypeComparator();1521057199;Return an instance of {@link StandardTypeComparator}.;@Override_	public TypeComparator getTypeComparator() {_		return this.typeComparator__	};return,an,instance,of,link,standard,type,comparator;override,public,type,comparator,get,type,comparator,return,this,type,comparator
SimpleEvaluationContext -> @Override 	public TypeComparator getTypeComparator();1521686168;Return an instance of {@link StandardTypeComparator}.;@Override_	public TypeComparator getTypeComparator() {_		return this.typeComparator__	};return,an,instance,of,link,standard,type,comparator;override,public,type,comparator,get,type,comparator,return,this,type,comparator
SimpleEvaluationContext -> @Override 	public TypeComparator getTypeComparator();1521738567;Return an instance of {@link StandardTypeComparator}.;@Override_	public TypeComparator getTypeComparator() {_		return this.typeComparator__	};return,an,instance,of,link,standard,type,comparator;override,public,type,comparator,get,type,comparator,return,this,type,comparator
SimpleEvaluationContext -> @Override 	public TypeComparator getTypeComparator();1521822561;Return an instance of {@link StandardTypeComparator}.;@Override_	public TypeComparator getTypeComparator() {_		return this.typeComparator__	};return,an,instance,of,link,standard,type,comparator;override,public,type,comparator,get,type,comparator,return,this,type,comparator
SimpleEvaluationContext -> @Override 	public TypeComparator getTypeComparator();1521905437;Return an instance of {@link StandardTypeComparator}.;@Override_	public TypeComparator getTypeComparator() {_		return this.typeComparator__	};return,an,instance,of,link,standard,type,comparator;override,public,type,comparator,get,type,comparator,return,this,type,comparator
SimpleEvaluationContext -> @Override 	public TypeComparator getTypeComparator();1522102974;Return an instance of {@link StandardTypeComparator}.;@Override_	public TypeComparator getTypeComparator() {_		return this.typeComparator__	};return,an,instance,of,link,standard,type,comparator;override,public,type,comparator,get,type,comparator,return,this,type,comparator
SimpleEvaluationContext -> @Override 	public TypeComparator getTypeComparator();1522163223;Return an instance of {@link StandardTypeComparator}.;@Override_	public TypeComparator getTypeComparator() {_		return this.typeComparator__	};return,an,instance,of,link,standard,type,comparator;override,public,type,comparator,get,type,comparator,return,this,type,comparator
SimpleEvaluationContext -> @Override 	public TypeComparator getTypeComparator();1530174524;Return an instance of {@link StandardTypeComparator}.;@Override_	public TypeComparator getTypeComparator() {_		return this.typeComparator__	};return,an,instance,of,link,standard,type,comparator;override,public,type,comparator,get,type,comparator,return,this,type,comparator
SimpleEvaluationContext -> Builder -> public Builder withConversionService(ConversionService conversionService);1521738567;Register a custom {@link ConversionService}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService}_is used._@see #withTypeConverter_@see StandardTypeConverter#StandardTypeConverter(ConversionService);public Builder withConversionService(ConversionService conversionService) {_			this.typeConverter = new StandardTypeConverter(conversionService)__			return this__		};register,a,custom,link,conversion,service,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,type,converter,see,standard,type,converter,standard,type,converter,conversion,service;public,builder,with,conversion,service,conversion,service,conversion,service,this,type,converter,new,standard,type,converter,conversion,service,return,this
SimpleEvaluationContext -> Builder -> public Builder withConversionService(ConversionService conversionService);1521822561;Register a custom {@link ConversionService}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withTypeConverter_@see StandardTypeConverter#StandardTypeConverter(ConversionService);public Builder withConversionService(ConversionService conversionService) {_			this.typeConverter = new StandardTypeConverter(conversionService)__			return this__		};register,a,custom,link,conversion,service,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,type,converter,see,standard,type,converter,standard,type,converter,conversion,service;public,builder,with,conversion,service,conversion,service,conversion,service,this,type,converter,new,standard,type,converter,conversion,service,return,this
SimpleEvaluationContext -> Builder -> public Builder withConversionService(ConversionService conversionService);1521905437;Register a custom {@link ConversionService}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withTypeConverter_@see StandardTypeConverter#StandardTypeConverter(ConversionService);public Builder withConversionService(ConversionService conversionService) {_			this.typeConverter = new StandardTypeConverter(conversionService)__			return this__		};register,a,custom,link,conversion,service,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,type,converter,see,standard,type,converter,standard,type,converter,conversion,service;public,builder,with,conversion,service,conversion,service,conversion,service,this,type,converter,new,standard,type,converter,conversion,service,return,this
SimpleEvaluationContext -> Builder -> public Builder withConversionService(ConversionService conversionService);1522102974;Register a custom {@link ConversionService}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withTypeConverter_@see StandardTypeConverter#StandardTypeConverter(ConversionService);public Builder withConversionService(ConversionService conversionService) {_			this.typeConverter = new StandardTypeConverter(conversionService)__			return this__		};register,a,custom,link,conversion,service,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,type,converter,see,standard,type,converter,standard,type,converter,conversion,service;public,builder,with,conversion,service,conversion,service,conversion,service,this,type,converter,new,standard,type,converter,conversion,service,return,this
SimpleEvaluationContext -> Builder -> public Builder withConversionService(ConversionService conversionService);1522163223;Register a custom {@link ConversionService}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withTypeConverter_@see StandardTypeConverter#StandardTypeConverter(ConversionService);public Builder withConversionService(ConversionService conversionService) {_			this.typeConverter = new StandardTypeConverter(conversionService)__			return this__		};register,a,custom,link,conversion,service,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,type,converter,see,standard,type,converter,standard,type,converter,conversion,service;public,builder,with,conversion,service,conversion,service,conversion,service,this,type,converter,new,standard,type,converter,conversion,service,return,this
SimpleEvaluationContext -> Builder -> public Builder withConversionService(ConversionService conversionService);1530174524;Register a custom {@link ConversionService}._<p>By default a {@link StandardTypeConverter} backed by a_{@link org.springframework.core.convert.support.DefaultConversionService} is used._@see #withTypeConverter_@see StandardTypeConverter#StandardTypeConverter(ConversionService);public Builder withConversionService(ConversionService conversionService) {_			this.typeConverter = new StandardTypeConverter(conversionService)__			return this__		};register,a,custom,link,conversion,service,p,by,default,a,link,standard,type,converter,backed,by,a,link,org,springframework,core,convert,support,default,conversion,service,is,used,see,with,type,converter,see,standard,type,converter,standard,type,converter,conversion,service;public,builder,with,conversion,service,conversion,service,conversion,service,this,type,converter,new,standard,type,converter,conversion,service,return,this
SimpleEvaluationContext -> @Override 	public List<ConstructorResolver> getConstructorResolvers();1521057199;Return a single {@link ReflectiveConstructorResolver}.;@Override_	public List<ConstructorResolver> getConstructorResolvers() {_		return this.constructorResolvers__	};return,a,single,link,reflective,constructor,resolver;override,public,list,constructor,resolver,get,constructor,resolvers,return,this,constructor,resolvers
SimpleEvaluationContext -> @Override 	public List<ConstructorResolver> getConstructorResolvers();1521686168;Return an empty list, always, since this context does not support the_use of type references.;@Override_	public List<ConstructorResolver> getConstructorResolvers() {_		return this.constructorResolvers__	};return,an,empty,list,always,since,this,context,does,not,support,the,use,of,type,references;override,public,list,constructor,resolver,get,constructor,resolvers,return,this,constructor,resolvers
SimpleEvaluationContext -> @Override 	public List<ConstructorResolver> getConstructorResolvers();1521738567;Return an empty list, always, since this context does not support the_use of type references.;@Override_	public List<ConstructorResolver> getConstructorResolvers() {_		return Collections.emptyList()__	};return,an,empty,list,always,since,this,context,does,not,support,the,use,of,type,references;override,public,list,constructor,resolver,get,constructor,resolvers,return,collections,empty,list
SimpleEvaluationContext -> @Override 	public List<ConstructorResolver> getConstructorResolvers();1521822561;Return an empty list, always, since this context does not support the_use of type references.;@Override_	public List<ConstructorResolver> getConstructorResolvers() {_		return Collections.emptyList()__	};return,an,empty,list,always,since,this,context,does,not,support,the,use,of,type,references;override,public,list,constructor,resolver,get,constructor,resolvers,return,collections,empty,list
SimpleEvaluationContext -> @Override 	public List<ConstructorResolver> getConstructorResolvers();1521905437;Return an empty list, always, since this context does not support the_use of type references.;@Override_	public List<ConstructorResolver> getConstructorResolvers() {_		return Collections.emptyList()__	};return,an,empty,list,always,since,this,context,does,not,support,the,use,of,type,references;override,public,list,constructor,resolver,get,constructor,resolvers,return,collections,empty,list
SimpleEvaluationContext -> @Override 	public List<ConstructorResolver> getConstructorResolvers();1522102974;Return an empty list, always, since this context does not support the_use of type references.;@Override_	public List<ConstructorResolver> getConstructorResolvers() {_		return Collections.emptyList()__	};return,an,empty,list,always,since,this,context,does,not,support,the,use,of,type,references;override,public,list,constructor,resolver,get,constructor,resolvers,return,collections,empty,list
SimpleEvaluationContext -> @Override 	public List<ConstructorResolver> getConstructorResolvers();1522163223;Return an empty list, always, since this context does not support the_use of type references.;@Override_	public List<ConstructorResolver> getConstructorResolvers() {_		return Collections.emptyList()__	};return,an,empty,list,always,since,this,context,does,not,support,the,use,of,type,references;override,public,list,constructor,resolver,get,constructor,resolvers,return,collections,empty,list
SimpleEvaluationContext -> @Override 	public List<ConstructorResolver> getConstructorResolvers();1530174524;Return an empty list, always, since this context does not support the_use of type references.;@Override_	public List<ConstructorResolver> getConstructorResolvers() {_		return Collections.emptyList()__	};return,an,empty,list,always,since,this,context,does,not,support,the,use,of,type,references;override,public,list,constructor,resolver,get,constructor,resolvers,return,collections,empty,list
SimpleEvaluationContext -> @Override 	public TypedValue getRootObject();1521057199;{@code SimpleEvaluationContext} cannot be configured with a root object._It is meant for repeated use with_{@link org.springframework.expression.Expression Expression} method_variants that accept both an {@code EvaluationContext} and a root object._@return Always returns {@link TypedValue#NULL}.;@Override_	public TypedValue getRootObject() {_		return TypedValue.NULL__	};code,simple,evaluation,context,cannot,be,configured,with,a,root,object,it,is,meant,for,repeated,use,with,link,org,springframework,expression,expression,expression,method,variants,that,accept,both,an,code,evaluation,context,and,a,root,object,return,always,returns,link,typed,value,null;override,public,typed,value,get,root,object,return,typed,value,null
SimpleEvaluationContext -> @Override 	public TypedValue getRootObject();1521686168;{@code SimpleEvaluationContext} cannot be configured with a root object._It is meant for repeated use with_{@link org.springframework.expression.Expression Expression} method_variants that accept both an {@code EvaluationContext} and a root object._@return Always returns {@link TypedValue#NULL}.;@Override_	public TypedValue getRootObject() {_		return TypedValue.NULL__	};code,simple,evaluation,context,cannot,be,configured,with,a,root,object,it,is,meant,for,repeated,use,with,link,org,springframework,expression,expression,expression,method,variants,that,accept,both,an,code,evaluation,context,and,a,root,object,return,always,returns,link,typed,value,null;override,public,typed,value,get,root,object,return,typed,value,null
SimpleEvaluationContext -> @Override 	public TypedValue getRootObject();1521738567;{@code SimpleEvaluationContext} cannot be configured with a root object._It is meant for repeated use with_{@link org.springframework.expression.Expression Expression} method_variants that accept both an {@code EvaluationContext} and a root object._@return Always returns {@link TypedValue#NULL}.;@Override_	public TypedValue getRootObject() {_		return TypedValue.NULL__	};code,simple,evaluation,context,cannot,be,configured,with,a,root,object,it,is,meant,for,repeated,use,with,link,org,springframework,expression,expression,expression,method,variants,that,accept,both,an,code,evaluation,context,and,a,root,object,return,always,returns,link,typed,value,null;override,public,typed,value,get,root,object,return,typed,value,null
SimpleEvaluationContext -> @Override 	public TypedValue getRootObject();1521822561;{@code SimpleEvaluationContext} cannot be configured with a root object._It is meant for repeated use with_{@link org.springframework.expression.Expression Expression} method_variants that accept both an {@code EvaluationContext} and a root object._@return Always returns {@link TypedValue#NULL}.;@Override_	public TypedValue getRootObject() {_		return TypedValue.NULL__	};code,simple,evaluation,context,cannot,be,configured,with,a,root,object,it,is,meant,for,repeated,use,with,link,org,springframework,expression,expression,expression,method,variants,that,accept,both,an,code,evaluation,context,and,a,root,object,return,always,returns,link,typed,value,null;override,public,typed,value,get,root,object,return,typed,value,null
SimpleEvaluationContext -> @Override 	public TypedValue getRootObject();1521905437;{@code SimpleEvaluationContext} cannot be configured with a root object._It is meant for repeated use with_{@link org.springframework.expression.Expression Expression} method_variants that accept both an {@code EvaluationContext} and a root object._@return Always returns {@link TypedValue#NULL}.;@Override_	public TypedValue getRootObject() {_		return TypedValue.NULL__	};code,simple,evaluation,context,cannot,be,configured,with,a,root,object,it,is,meant,for,repeated,use,with,link,org,springframework,expression,expression,expression,method,variants,that,accept,both,an,code,evaluation,context,and,a,root,object,return,always,returns,link,typed,value,null;override,public,typed,value,get,root,object,return,typed,value,null
SimpleEvaluationContext -> @Override 	public TypedValue getRootObject();1522102974;Return the specified root object, if any.;@Override_	public TypedValue getRootObject() {_		return this.rootObject__	};return,the,specified,root,object,if,any;override,public,typed,value,get,root,object,return,this,root,object
SimpleEvaluationContext -> @Override 	public TypedValue getRootObject();1522163223;Return the specified root object, if any.;@Override_	public TypedValue getRootObject() {_		return this.rootObject__	};return,the,specified,root,object,if,any;override,public,typed,value,get,root,object,return,this,root,object
SimpleEvaluationContext -> @Override 	public TypedValue getRootObject();1530174524;Return the specified root object, if any.;@Override_	public TypedValue getRootObject() {_		return this.rootObject__	};return,the,specified,root,object,if,any;override,public,typed,value,get,root,object,return,this,root,object
SimpleEvaluationContext -> public static Builder forPropertyAccessors(PropertyAccessor... accessors);1521738567;Create a {@code SimpleEvaluationContext} for the specified_{@link PropertyAccessor} delegates._@see ReflectivePropertyAccessor_@see DataBindingPropertyAccessor;public static Builder forPropertyAccessors(PropertyAccessor... accessors) {_		return new Builder(accessors)__	};create,a,code,simple,evaluation,context,for,the,specified,link,property,accessor,delegates,see,reflective,property,accessor,see,data,binding,property,accessor;public,static,builder,for,property,accessors,property,accessor,accessors,return,new,builder,accessors
SimpleEvaluationContext -> public static Builder forPropertyAccessors(PropertyAccessor... accessors);1521822561;Create a {@code SimpleEvaluationContext} for the specified {@link PropertyAccessor}_delegates: typically a custom {@code PropertyAccessor} specific to a use case_(e.g. attribute resolution in a custom data structure), potentially combined with_a {@link DataBindingPropertyAccessor} if property dereferences are needed as well._@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see DataBindingPropertyAccessor#forReadWriteAccess();public static Builder forPropertyAccessors(PropertyAccessor... accessors) {_		for (PropertyAccessor accessor : accessors) {_			if (accessor.getClass() == ReflectivePropertyAccessor.class) {_				throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_						"ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass.")__			}_		}_		return new Builder(accessors)__	};create,a,code,simple,evaluation,context,for,the,specified,link,property,accessor,delegates,typically,a,custom,code,property,accessor,specific,to,a,use,case,e,g,attribute,resolution,in,a,custom,data,structure,potentially,combined,with,a,link,data,binding,property,accessor,if,property,dereferences,are,needed,as,well,see,data,binding,property,accessor,for,read,only,access,see,data,binding,property,accessor,for,read,write,access;public,static,builder,for,property,accessors,property,accessor,accessors,for,property,accessor,accessor,accessors,if,accessor,get,class,reflective,property,accessor,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,property,accessor,consider,using,data,binding,property,accessor,or,a,custom,subclass,return,new,builder,accessors
SimpleEvaluationContext -> public static Builder forPropertyAccessors(PropertyAccessor... accessors);1521905437;Create a {@code SimpleEvaluationContext} for the specified {@link PropertyAccessor}_delegates: typically a custom {@code PropertyAccessor} specific to a use case_(e.g. attribute resolution in a custom data structure), potentially combined with_a {@link DataBindingPropertyAccessor} if property dereferences are needed as well._@param accessors the accessor delegates to use_@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see DataBindingPropertyAccessor#forReadWriteAccess();public static Builder forPropertyAccessors(PropertyAccessor... accessors) {_		for (PropertyAccessor accessor : accessors) {_			if (accessor.getClass() == ReflectivePropertyAccessor.class) {_				throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_						"ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass.")__			}_		}_		return new Builder(accessors)__	};create,a,code,simple,evaluation,context,for,the,specified,link,property,accessor,delegates,typically,a,custom,code,property,accessor,specific,to,a,use,case,e,g,attribute,resolution,in,a,custom,data,structure,potentially,combined,with,a,link,data,binding,property,accessor,if,property,dereferences,are,needed,as,well,param,accessors,the,accessor,delegates,to,use,see,data,binding,property,accessor,for,read,only,access,see,data,binding,property,accessor,for,read,write,access;public,static,builder,for,property,accessors,property,accessor,accessors,for,property,accessor,accessor,accessors,if,accessor,get,class,reflective,property,accessor,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,property,accessor,consider,using,data,binding,property,accessor,or,a,custom,subclass,return,new,builder,accessors
SimpleEvaluationContext -> public static Builder forPropertyAccessors(PropertyAccessor... accessors);1522102974;Create a {@code SimpleEvaluationContext} for the specified {@link PropertyAccessor}_delegates: typically a custom {@code PropertyAccessor} specific to a use case_(e.g. attribute resolution in a custom data structure), potentially combined with_a {@link DataBindingPropertyAccessor} if property dereferences are needed as well._@param accessors the accessor delegates to use_@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see DataBindingPropertyAccessor#forReadWriteAccess();public static Builder forPropertyAccessors(PropertyAccessor... accessors) {_		for (PropertyAccessor accessor : accessors) {_			if (accessor.getClass() == ReflectivePropertyAccessor.class) {_				throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_						"ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass.")__			}_		}_		return new Builder(accessors)__	};create,a,code,simple,evaluation,context,for,the,specified,link,property,accessor,delegates,typically,a,custom,code,property,accessor,specific,to,a,use,case,e,g,attribute,resolution,in,a,custom,data,structure,potentially,combined,with,a,link,data,binding,property,accessor,if,property,dereferences,are,needed,as,well,param,accessors,the,accessor,delegates,to,use,see,data,binding,property,accessor,for,read,only,access,see,data,binding,property,accessor,for,read,write,access;public,static,builder,for,property,accessors,property,accessor,accessors,for,property,accessor,accessor,accessors,if,accessor,get,class,reflective,property,accessor,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,property,accessor,consider,using,data,binding,property,accessor,or,a,custom,subclass,return,new,builder,accessors
SimpleEvaluationContext -> public static Builder forPropertyAccessors(PropertyAccessor... accessors);1522163223;Create a {@code SimpleEvaluationContext} for the specified {@link PropertyAccessor}_delegates: typically a custom {@code PropertyAccessor} specific to a use case_(e.g. attribute resolution in a custom data structure), potentially combined with_a {@link DataBindingPropertyAccessor} if property dereferences are needed as well._@param accessors the accessor delegates to use_@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see DataBindingPropertyAccessor#forReadWriteAccess();public static Builder forPropertyAccessors(PropertyAccessor... accessors) {_		for (PropertyAccessor accessor : accessors) {_			if (accessor.getClass() == ReflectivePropertyAccessor.class) {_				throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_						"ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass.")__			}_		}_		return new Builder(accessors)__	};create,a,code,simple,evaluation,context,for,the,specified,link,property,accessor,delegates,typically,a,custom,code,property,accessor,specific,to,a,use,case,e,g,attribute,resolution,in,a,custom,data,structure,potentially,combined,with,a,link,data,binding,property,accessor,if,property,dereferences,are,needed,as,well,param,accessors,the,accessor,delegates,to,use,see,data,binding,property,accessor,for,read,only,access,see,data,binding,property,accessor,for,read,write,access;public,static,builder,for,property,accessors,property,accessor,accessors,for,property,accessor,accessor,accessors,if,accessor,get,class,reflective,property,accessor,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,property,accessor,consider,using,data,binding,property,accessor,or,a,custom,subclass,return,new,builder,accessors
SimpleEvaluationContext -> public static Builder forPropertyAccessors(PropertyAccessor... accessors);1530174524;Create a {@code SimpleEvaluationContext} for the specified {@link PropertyAccessor}_delegates: typically a custom {@code PropertyAccessor} specific to a use case_(e.g. attribute resolution in a custom data structure), potentially combined with_a {@link DataBindingPropertyAccessor} if property dereferences are needed as well._@param accessors the accessor delegates to use_@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see DataBindingPropertyAccessor#forReadWriteAccess();public static Builder forPropertyAccessors(PropertyAccessor... accessors) {_		for (PropertyAccessor accessor : accessors) {_			if (accessor.getClass() == ReflectivePropertyAccessor.class) {_				throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_						"ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass.")__			}_		}_		return new Builder(accessors)__	};create,a,code,simple,evaluation,context,for,the,specified,link,property,accessor,delegates,typically,a,custom,code,property,accessor,specific,to,a,use,case,e,g,attribute,resolution,in,a,custom,data,structure,potentially,combined,with,a,link,data,binding,property,accessor,if,property,dereferences,are,needed,as,well,param,accessors,the,accessor,delegates,to,use,see,data,binding,property,accessor,for,read,only,access,see,data,binding,property,accessor,for,read,write,access;public,static,builder,for,property,accessors,property,accessor,accessors,for,property,accessor,accessor,accessors,if,accessor,get,class,reflective,property,accessor,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,property,accessor,consider,using,data,binding,property,accessor,or,a,custom,subclass,return,new,builder,accessors
SimpleEvaluationContext -> @Override 	@Nullable 	public BeanResolver getBeanResolver();1521057199;{@code SimpleEvaluationContext} does not support use of bean references._@return Always returns {@code null};@Override_	@Nullable_	public BeanResolver getBeanResolver() {_		return null__	};code,simple,evaluation,context,does,not,support,use,of,bean,references,return,always,returns,code,null;override,nullable,public,bean,resolver,get,bean,resolver,return,null
SimpleEvaluationContext -> @Override 	@Nullable 	public BeanResolver getBeanResolver();1521686168;{@code SimpleEvaluationContext} does not support use of bean references._@return Always returns {@code null};@Override_	@Nullable_	public BeanResolver getBeanResolver() {_		return null__	};code,simple,evaluation,context,does,not,support,use,of,bean,references,return,always,returns,code,null;override,nullable,public,bean,resolver,get,bean,resolver,return,null
SimpleEvaluationContext -> @Override 	@Nullable 	public BeanResolver getBeanResolver();1521738567;{@code SimpleEvaluationContext} does not support use of bean references._@return Always returns {@code null};@Override_	@Nullable_	public BeanResolver getBeanResolver() {_		return null__	};code,simple,evaluation,context,does,not,support,use,of,bean,references,return,always,returns,code,null;override,nullable,public,bean,resolver,get,bean,resolver,return,null
SimpleEvaluationContext -> @Override 	@Nullable 	public BeanResolver getBeanResolver();1521822561;{@code SimpleEvaluationContext} does not support use of bean references._@return Always returns {@code null};@Override_	@Nullable_	public BeanResolver getBeanResolver() {_		return null__	};code,simple,evaluation,context,does,not,support,use,of,bean,references,return,always,returns,code,null;override,nullable,public,bean,resolver,get,bean,resolver,return,null
SimpleEvaluationContext -> @Override 	@Nullable 	public BeanResolver getBeanResolver();1521905437;{@code SimpleEvaluationContext} does not support the use of bean references._@return always {@code null};@Override_	@Nullable_	public BeanResolver getBeanResolver() {_		return null__	};code,simple,evaluation,context,does,not,support,the,use,of,bean,references,return,always,code,null;override,nullable,public,bean,resolver,get,bean,resolver,return,null
SimpleEvaluationContext -> @Override 	@Nullable 	public BeanResolver getBeanResolver();1522102974;{@code SimpleEvaluationContext} does not support the use of bean references._@return always {@code null};@Override_	@Nullable_	public BeanResolver getBeanResolver() {_		return null__	};code,simple,evaluation,context,does,not,support,the,use,of,bean,references,return,always,code,null;override,nullable,public,bean,resolver,get,bean,resolver,return,null
SimpleEvaluationContext -> @Override 	@Nullable 	public BeanResolver getBeanResolver();1522163223;{@code SimpleEvaluationContext} does not support the use of bean references._@return always {@code null};@Override_	@Nullable_	public BeanResolver getBeanResolver() {_		return null__	};code,simple,evaluation,context,does,not,support,the,use,of,bean,references,return,always,code,null;override,nullable,public,bean,resolver,get,bean,resolver,return,null
SimpleEvaluationContext -> @Override 	@Nullable 	public BeanResolver getBeanResolver();1530174524;{@code SimpleEvaluationContext} does not support the use of bean references._@return always {@code null};@Override_	@Nullable_	public BeanResolver getBeanResolver() {_		return null__	};code,simple,evaluation,context,does,not,support,the,use,of,bean,references,return,always,code,null;override,nullable,public,bean,resolver,get,bean,resolver,return,null
SimpleEvaluationContext -> public static Builder forReadOnlyDataBinding();1521738567;Create a {@code SimpleEvaluationContext} for read-only access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadOnlyAccess();public static Builder forReadOnlyDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadOnlyAccess())__	};create,a,code,simple,evaluation,context,for,read,only,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,only,access;public,static,builder,for,read,only,data,binding,return,new,builder,data,binding,property,accessor,for,read,only,access
SimpleEvaluationContext -> public static Builder forReadOnlyDataBinding();1521822561;Create a {@code SimpleEvaluationContext} for read-only access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see #forPropertyAccessors;public static Builder forReadOnlyDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadOnlyAccess())__	};create,a,code,simple,evaluation,context,for,read,only,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,only,access,see,for,property,accessors;public,static,builder,for,read,only,data,binding,return,new,builder,data,binding,property,accessor,for,read,only,access
SimpleEvaluationContext -> public static Builder forReadOnlyDataBinding();1521905437;Create a {@code SimpleEvaluationContext} for read-only access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see #forPropertyAccessors;public static Builder forReadOnlyDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadOnlyAccess())__	};create,a,code,simple,evaluation,context,for,read,only,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,only,access,see,for,property,accessors;public,static,builder,for,read,only,data,binding,return,new,builder,data,binding,property,accessor,for,read,only,access
SimpleEvaluationContext -> public static Builder forReadOnlyDataBinding();1522102974;Create a {@code SimpleEvaluationContext} for read-only access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see #forPropertyAccessors;public static Builder forReadOnlyDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadOnlyAccess())__	};create,a,code,simple,evaluation,context,for,read,only,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,only,access,see,for,property,accessors;public,static,builder,for,read,only,data,binding,return,new,builder,data,binding,property,accessor,for,read,only,access
SimpleEvaluationContext -> public static Builder forReadOnlyDataBinding();1522163223;Create a {@code SimpleEvaluationContext} for read-only access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see #forPropertyAccessors;public static Builder forReadOnlyDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadOnlyAccess())__	};create,a,code,simple,evaluation,context,for,read,only,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,only,access,see,for,property,accessors;public,static,builder,for,read,only,data,binding,return,new,builder,data,binding,property,accessor,for,read,only,access
SimpleEvaluationContext -> public static Builder forReadOnlyDataBinding();1530174524;Create a {@code SimpleEvaluationContext} for read-only access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadOnlyAccess()_@see #forPropertyAccessors;public static Builder forReadOnlyDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadOnlyAccess())__	};create,a,code,simple,evaluation,context,for,read,only,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,only,access,see,for,property,accessors;public,static,builder,for,read,only,data,binding,return,new,builder,data,binding,property,accessor,for,read,only,access
SimpleEvaluationContext -> Builder -> public Builder withTypedRootObject(Object rootObject, TypeDescriptor typeDescriptor);1522102974;Specify a typed root object to resolve against._<p>Default is none, expecting an object argument at evaluation time._@see Expression#getValue(EvaluationContext)_@see Expression#getValue(EvaluationContext, Object);public Builder withTypedRootObject(Object rootObject, TypeDescriptor typeDescriptor) {_			this.rootObject = new TypedValue(rootObject, typeDescriptor)__			return this__		};specify,a,typed,root,object,to,resolve,against,p,default,is,none,expecting,an,object,argument,at,evaluation,time,see,expression,get,value,evaluation,context,see,expression,get,value,evaluation,context,object;public,builder,with,typed,root,object,object,root,object,type,descriptor,type,descriptor,this,root,object,new,typed,value,root,object,type,descriptor,return,this
SimpleEvaluationContext -> Builder -> public Builder withTypedRootObject(Object rootObject, TypeDescriptor typeDescriptor);1522163223;Specify a typed root object to resolve against._<p>Default is none, expecting an object argument at evaluation time._@see org.springframework.expression.Expression#getValue(EvaluationContext)_@see org.springframework.expression.Expression#getValue(EvaluationContext, Object);public Builder withTypedRootObject(Object rootObject, TypeDescriptor typeDescriptor) {_			this.rootObject = new TypedValue(rootObject, typeDescriptor)__			return this__		};specify,a,typed,root,object,to,resolve,against,p,default,is,none,expecting,an,object,argument,at,evaluation,time,see,org,springframework,expression,expression,get,value,evaluation,context,see,org,springframework,expression,expression,get,value,evaluation,context,object;public,builder,with,typed,root,object,object,root,object,type,descriptor,type,descriptor,this,root,object,new,typed,value,root,object,type,descriptor,return,this
SimpleEvaluationContext -> Builder -> public Builder withTypedRootObject(Object rootObject, TypeDescriptor typeDescriptor);1530174524;Specify a typed root object to resolve against._<p>Default is none, expecting an object argument at evaluation time._@see org.springframework.expression.Expression#getValue(EvaluationContext)_@see org.springframework.expression.Expression#getValue(EvaluationContext, Object);public Builder withTypedRootObject(Object rootObject, TypeDescriptor typeDescriptor) {_			this.rootObject = new TypedValue(rootObject, typeDescriptor)__			return this__		};specify,a,typed,root,object,to,resolve,against,p,default,is,none,expecting,an,object,argument,at,evaluation,time,see,org,springframework,expression,expression,get,value,evaluation,context,see,org,springframework,expression,expression,get,value,evaluation,context,object;public,builder,with,typed,root,object,object,root,object,type,descriptor,type,descriptor,this,root,object,new,typed,value,root,object,type,descriptor,return,this
SimpleEvaluationContext -> Builder -> public Builder withInstanceMethods();1521905437;Register a {@link DataBindingMethodResolver} for instance method invocation purposes_(i.e. not supporting static methods) in addition to the specified property accessors,_typically in combination with a {@link DataBindingPropertyAccessor}._@see #withMethodResolvers_@see SimpleEvaluationContext#forReadOnlyDataBinding()_@see SimpleEvaluationContext#forReadWriteDataBinding();public Builder withInstanceMethods() {_			this.resolvers = Collections.singletonList(DataBindingMethodResolver.forInstanceMethodInvocation())__			return this__		};register,a,link,data,binding,method,resolver,for,instance,method,invocation,purposes,i,e,not,supporting,static,methods,in,addition,to,the,specified,property,accessors,typically,in,combination,with,a,link,data,binding,property,accessor,see,with,method,resolvers,see,simple,evaluation,context,for,read,only,data,binding,see,simple,evaluation,context,for,read,write,data,binding;public,builder,with,instance,methods,this,resolvers,collections,singleton,list,data,binding,method,resolver,for,instance,method,invocation,return,this
SimpleEvaluationContext -> Builder -> public Builder withInstanceMethods();1522102974;Register a {@link DataBindingMethodResolver} for instance method invocation purposes_(i.e. not supporting static methods) in addition to the specified property accessors,_typically in combination with a {@link DataBindingPropertyAccessor}._@see #withMethodResolvers_@see SimpleEvaluationContext#forReadOnlyDataBinding()_@see SimpleEvaluationContext#forReadWriteDataBinding();public Builder withInstanceMethods() {_			this.resolvers = Collections.singletonList(DataBindingMethodResolver.forInstanceMethodInvocation())__			return this__		};register,a,link,data,binding,method,resolver,for,instance,method,invocation,purposes,i,e,not,supporting,static,methods,in,addition,to,the,specified,property,accessors,typically,in,combination,with,a,link,data,binding,property,accessor,see,with,method,resolvers,see,simple,evaluation,context,for,read,only,data,binding,see,simple,evaluation,context,for,read,write,data,binding;public,builder,with,instance,methods,this,resolvers,collections,singleton,list,data,binding,method,resolver,for,instance,method,invocation,return,this
SimpleEvaluationContext -> Builder -> public Builder withInstanceMethods();1522163223;Register a {@link DataBindingMethodResolver} for instance method invocation purposes_(i.e. not supporting static methods) in addition to the specified property accessors,_typically in combination with a {@link DataBindingPropertyAccessor}._@see #withMethodResolvers_@see SimpleEvaluationContext#forReadOnlyDataBinding()_@see SimpleEvaluationContext#forReadWriteDataBinding();public Builder withInstanceMethods() {_			this.resolvers = Collections.singletonList(DataBindingMethodResolver.forInstanceMethodInvocation())__			return this__		};register,a,link,data,binding,method,resolver,for,instance,method,invocation,purposes,i,e,not,supporting,static,methods,in,addition,to,the,specified,property,accessors,typically,in,combination,with,a,link,data,binding,property,accessor,see,with,method,resolvers,see,simple,evaluation,context,for,read,only,data,binding,see,simple,evaluation,context,for,read,write,data,binding;public,builder,with,instance,methods,this,resolvers,collections,singleton,list,data,binding,method,resolver,for,instance,method,invocation,return,this
SimpleEvaluationContext -> Builder -> public Builder withInstanceMethods();1530174524;Register a {@link DataBindingMethodResolver} for instance method invocation purposes_(i.e. not supporting static methods) in addition to the specified property accessors,_typically in combination with a {@link DataBindingPropertyAccessor}._@see #withMethodResolvers_@see SimpleEvaluationContext#forReadOnlyDataBinding()_@see SimpleEvaluationContext#forReadWriteDataBinding();public Builder withInstanceMethods() {_			this.resolvers = Collections.singletonList(DataBindingMethodResolver.forInstanceMethodInvocation())__			return this__		};register,a,link,data,binding,method,resolver,for,instance,method,invocation,purposes,i,e,not,supporting,static,methods,in,addition,to,the,specified,property,accessors,typically,in,combination,with,a,link,data,binding,property,accessor,see,with,method,resolvers,see,simple,evaluation,context,for,read,only,data,binding,see,simple,evaluation,context,for,read,write,data,binding;public,builder,with,instance,methods,this,resolvers,collections,singleton,list,data,binding,method,resolver,for,instance,method,invocation,return,this
SimpleEvaluationContext -> Builder -> public Builder withRootObject(Object rootObject);1522102974;Specify a default root object to resolve against._<p>Default is none, expecting an object argument at evaluation time._@see Expression#getValue(EvaluationContext)_@see Expression#getValue(EvaluationContext, Object);public Builder withRootObject(Object rootObject) {_			this.rootObject = new TypedValue(rootObject)__			return this__		};specify,a,default,root,object,to,resolve,against,p,default,is,none,expecting,an,object,argument,at,evaluation,time,see,expression,get,value,evaluation,context,see,expression,get,value,evaluation,context,object;public,builder,with,root,object,object,root,object,this,root,object,new,typed,value,root,object,return,this
SimpleEvaluationContext -> Builder -> public Builder withRootObject(Object rootObject);1522163223;Specify a default root object to resolve against._<p>Default is none, expecting an object argument at evaluation time._@see org.springframework.expression.Expression#getValue(EvaluationContext)_@see org.springframework.expression.Expression#getValue(EvaluationContext, Object);public Builder withRootObject(Object rootObject) {_			this.rootObject = new TypedValue(rootObject)__			return this__		};specify,a,default,root,object,to,resolve,against,p,default,is,none,expecting,an,object,argument,at,evaluation,time,see,org,springframework,expression,expression,get,value,evaluation,context,see,org,springframework,expression,expression,get,value,evaluation,context,object;public,builder,with,root,object,object,root,object,this,root,object,new,typed,value,root,object,return,this
SimpleEvaluationContext -> Builder -> public Builder withRootObject(Object rootObject);1530174524;Specify a default root object to resolve against._<p>Default is none, expecting an object argument at evaluation time._@see org.springframework.expression.Expression#getValue(EvaluationContext)_@see org.springframework.expression.Expression#getValue(EvaluationContext, Object);public Builder withRootObject(Object rootObject) {_			this.rootObject = new TypedValue(rootObject)__			return this__		};specify,a,default,root,object,to,resolve,against,p,default,is,none,expecting,an,object,argument,at,evaluation,time,see,org,springframework,expression,expression,get,value,evaluation,context,see,org,springframework,expression,expression,get,value,evaluation,context,object;public,builder,with,root,object,object,root,object,this,root,object,new,typed,value,root,object,return,this
SimpleEvaluationContext -> @Override 	public List<MethodResolver> getMethodResolvers();1521057199;Return a single {@link ReflectiveMethodResolver}.;@Override_	public List<MethodResolver> getMethodResolvers() {_		return this.methodResolvers__	};return,a,single,link,reflective,method,resolver;override,public,list,method,resolver,get,method,resolvers,return,this,method,resolvers
SimpleEvaluationContext -> @Override 	public List<MethodResolver> getMethodResolvers();1521686168;Return a single {@link ReflectiveMethodResolver}.;@Override_	public List<MethodResolver> getMethodResolvers() {_		return this.methodResolvers__	};return,a,single,link,reflective,method,resolver;override,public,list,method,resolver,get,method,resolvers,return,this,method,resolvers
SimpleEvaluationContext -> @Override 	public List<MethodResolver> getMethodResolvers();1521738567;Return a single {@link ReflectiveMethodResolver}.;@Override_	public List<MethodResolver> getMethodResolvers() {_		return Collections.emptyList()__	};return,a,single,link,reflective,method,resolver;override,public,list,method,resolver,get,method,resolvers,return,collections,empty,list
SimpleEvaluationContext -> @Override 	public List<MethodResolver> getMethodResolvers();1521822561;Return a single {@link ReflectiveMethodResolver}.;@Override_	public List<MethodResolver> getMethodResolvers() {_		return Collections.emptyList()__	};return,a,single,link,reflective,method,resolver;override,public,list,method,resolver,get,method,resolvers,return,collections,empty,list
SimpleEvaluationContext -> @Override 	public List<MethodResolver> getMethodResolvers();1521905437;Return the specified {@link MethodResolver} delegates, if any._@see Builder#withMethodResolvers;@Override_	public List<MethodResolver> getMethodResolvers() {_		return this.methodResolvers__	};return,the,specified,link,method,resolver,delegates,if,any,see,builder,with,method,resolvers;override,public,list,method,resolver,get,method,resolvers,return,this,method,resolvers
SimpleEvaluationContext -> @Override 	public List<MethodResolver> getMethodResolvers();1522102974;Return the specified {@link MethodResolver} delegates, if any._@see Builder#withMethodResolvers;@Override_	public List<MethodResolver> getMethodResolvers() {_		return this.methodResolvers__	};return,the,specified,link,method,resolver,delegates,if,any,see,builder,with,method,resolvers;override,public,list,method,resolver,get,method,resolvers,return,this,method,resolvers
SimpleEvaluationContext -> @Override 	public List<MethodResolver> getMethodResolvers();1522163223;Return the specified {@link MethodResolver} delegates, if any._@see Builder#withMethodResolvers;@Override_	public List<MethodResolver> getMethodResolvers() {_		return this.methodResolvers__	};return,the,specified,link,method,resolver,delegates,if,any,see,builder,with,method,resolvers;override,public,list,method,resolver,get,method,resolvers,return,this,method,resolvers
SimpleEvaluationContext -> @Override 	public List<MethodResolver> getMethodResolvers();1530174524;Return the specified {@link MethodResolver} delegates, if any._@see Builder#withMethodResolvers;@Override_	public List<MethodResolver> getMethodResolvers() {_		return this.methodResolvers__	};return,the,specified,link,method,resolver,delegates,if,any,see,builder,with,method,resolvers;override,public,list,method,resolver,get,method,resolvers,return,this,method,resolvers
SimpleEvaluationContext -> public static Builder forReadWriteDataBinding();1521738567;Create a {@code SimpleEvaluationContext} for read-write access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadOnlyAccess();public static Builder forReadWriteDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadWriteAccess())__	};create,a,code,simple,evaluation,context,for,read,write,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,only,access;public,static,builder,for,read,write,data,binding,return,new,builder,data,binding,property,accessor,for,read,write,access
SimpleEvaluationContext -> public static Builder forReadWriteDataBinding();1521822561;Create a {@code SimpleEvaluationContext} for read-write access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadWriteAccess()_@see #forPropertyAccessors;public static Builder forReadWriteDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadWriteAccess())__	};create,a,code,simple,evaluation,context,for,read,write,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,write,access,see,for,property,accessors;public,static,builder,for,read,write,data,binding,return,new,builder,data,binding,property,accessor,for,read,write,access
SimpleEvaluationContext -> public static Builder forReadWriteDataBinding();1521905437;Create a {@code SimpleEvaluationContext} for read-write access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadWriteAccess()_@see #forPropertyAccessors;public static Builder forReadWriteDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadWriteAccess())__	};create,a,code,simple,evaluation,context,for,read,write,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,write,access,see,for,property,accessors;public,static,builder,for,read,write,data,binding,return,new,builder,data,binding,property,accessor,for,read,write,access
SimpleEvaluationContext -> public static Builder forReadWriteDataBinding();1522102974;Create a {@code SimpleEvaluationContext} for read-write access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadWriteAccess()_@see #forPropertyAccessors;public static Builder forReadWriteDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadWriteAccess())__	};create,a,code,simple,evaluation,context,for,read,write,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,write,access,see,for,property,accessors;public,static,builder,for,read,write,data,binding,return,new,builder,data,binding,property,accessor,for,read,write,access
SimpleEvaluationContext -> public static Builder forReadWriteDataBinding();1522163223;Create a {@code SimpleEvaluationContext} for read-write access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadWriteAccess()_@see #forPropertyAccessors;public static Builder forReadWriteDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadWriteAccess())__	};create,a,code,simple,evaluation,context,for,read,write,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,write,access,see,for,property,accessors;public,static,builder,for,read,write,data,binding,return,new,builder,data,binding,property,accessor,for,read,write,access
SimpleEvaluationContext -> public static Builder forReadWriteDataBinding();1530174524;Create a {@code SimpleEvaluationContext} for read-write access to_public properties via {@link DataBindingPropertyAccessor}._@see DataBindingPropertyAccessor#forReadWriteAccess()_@see #forPropertyAccessors;public static Builder forReadWriteDataBinding() {_		return new Builder(DataBindingPropertyAccessor.forReadWriteAccess())__	};create,a,code,simple,evaluation,context,for,read,write,access,to,public,properties,via,link,data,binding,property,accessor,see,data,binding,property,accessor,for,read,write,access,see,for,property,accessors;public,static,builder,for,read,write,data,binding,return,new,builder,data,binding,property,accessor,for,read,write,access
SimpleEvaluationContext -> @Override 	public List<PropertyAccessor> getPropertyAccessors();1521905437;Return the specified {@link PropertyAccessor} delegates, if any._@see #forPropertyAccessors;@Override_	public List<PropertyAccessor> getPropertyAccessors() {_		return this.propertyAccessors__	};return,the,specified,link,property,accessor,delegates,if,any,see,for,property,accessors;override,public,list,property,accessor,get,property,accessors,return,this,property,accessors
SimpleEvaluationContext -> @Override 	public List<PropertyAccessor> getPropertyAccessors();1522102974;Return the specified {@link PropertyAccessor} delegates, if any._@see #forPropertyAccessors;@Override_	public List<PropertyAccessor> getPropertyAccessors() {_		return this.propertyAccessors__	};return,the,specified,link,property,accessor,delegates,if,any,see,for,property,accessors;override,public,list,property,accessor,get,property,accessors,return,this,property,accessors
SimpleEvaluationContext -> @Override 	public List<PropertyAccessor> getPropertyAccessors();1522163223;Return the specified {@link PropertyAccessor} delegates, if any._@see #forPropertyAccessors;@Override_	public List<PropertyAccessor> getPropertyAccessors() {_		return this.propertyAccessors__	};return,the,specified,link,property,accessor,delegates,if,any,see,for,property,accessors;override,public,list,property,accessor,get,property,accessors,return,this,property,accessors
SimpleEvaluationContext -> @Override 	public List<PropertyAccessor> getPropertyAccessors();1530174524;Return the specified {@link PropertyAccessor} delegates, if any._@see #forPropertyAccessors;@Override_	public List<PropertyAccessor> getPropertyAccessors() {_		return this.propertyAccessors__	};return,the,specified,link,property,accessor,delegates,if,any,see,for,property,accessors;override,public,list,property,accessor,get,property,accessors,return,this,property,accessors
SimpleEvaluationContext -> @Override 	public TypeConverter getTypeConverter();1521057199;The configured {@link TypeConverter}._<p>By default this is {@link StandardTypeConverter}.;@Override_	public TypeConverter getTypeConverter() {_		return this.typeConverter__	};the,configured,link,type,converter,p,by,default,this,is,link,standard,type,converter;override,public,type,converter,get,type,converter,return,this,type,converter
SimpleEvaluationContext -> @Override 	public TypeConverter getTypeConverter();1521686168;The configured {@link TypeConverter}._<p>By default this is {@link StandardTypeConverter}.;@Override_	public TypeConverter getTypeConverter() {_		return this.typeConverter__	};the,configured,link,type,converter,p,by,default,this,is,link,standard,type,converter;override,public,type,converter,get,type,converter,return,this,type,converter
SimpleEvaluationContext -> @Override 	public TypeConverter getTypeConverter();1521738567;The configured {@link TypeConverter}._<p>By default this is {@link StandardTypeConverter}.;@Override_	public TypeConverter getTypeConverter() {_		return this.typeConverter__	};the,configured,link,type,converter,p,by,default,this,is,link,standard,type,converter;override,public,type,converter,get,type,converter,return,this,type,converter
SimpleEvaluationContext -> @Override 	public TypeConverter getTypeConverter();1521822561;The configured {@link TypeConverter}._<p>By default this is {@link StandardTypeConverter}.;@Override_	public TypeConverter getTypeConverter() {_		return this.typeConverter__	};the,configured,link,type,converter,p,by,default,this,is,link,standard,type,converter;override,public,type,converter,get,type,converter,return,this,type,converter
SimpleEvaluationContext -> @Override 	public TypeConverter getTypeConverter();1521905437;The configured {@link TypeConverter}._<p>By default this is {@link StandardTypeConverter}._@see Builder#withTypeConverter_@see Builder#withConversionService;@Override_	public TypeConverter getTypeConverter() {_		return this.typeConverter__	};the,configured,link,type,converter,p,by,default,this,is,link,standard,type,converter,see,builder,with,type,converter,see,builder,with,conversion,service;override,public,type,converter,get,type,converter,return,this,type,converter
SimpleEvaluationContext -> @Override 	public TypeConverter getTypeConverter();1522102974;The configured {@link TypeConverter}._<p>By default this is {@link StandardTypeConverter}._@see Builder#withTypeConverter_@see Builder#withConversionService;@Override_	public TypeConverter getTypeConverter() {_		return this.typeConverter__	};the,configured,link,type,converter,p,by,default,this,is,link,standard,type,converter,see,builder,with,type,converter,see,builder,with,conversion,service;override,public,type,converter,get,type,converter,return,this,type,converter
SimpleEvaluationContext -> @Override 	public TypeConverter getTypeConverter();1522163223;The configured {@link TypeConverter}._<p>By default this is {@link StandardTypeConverter}._@see Builder#withTypeConverter_@see Builder#withConversionService;@Override_	public TypeConverter getTypeConverter() {_		return this.typeConverter__	};the,configured,link,type,converter,p,by,default,this,is,link,standard,type,converter,see,builder,with,type,converter,see,builder,with,conversion,service;override,public,type,converter,get,type,converter,return,this,type,converter
SimpleEvaluationContext -> @Override 	public TypeConverter getTypeConverter();1530174524;The configured {@link TypeConverter}._<p>By default this is {@link StandardTypeConverter}._@see Builder#withTypeConverter_@see Builder#withConversionService;@Override_	public TypeConverter getTypeConverter() {_		return this.typeConverter__	};the,configured,link,type,converter,p,by,default,this,is,link,standard,type,converter,see,builder,with,type,converter,see,builder,with,conversion,service;override,public,type,converter,get,type,converter,return,this,type,converter
SimpleEvaluationContext -> Builder -> public Builder withMethodResolvers(MethodResolver... resolvers);1521905437;Register the specified {@link MethodResolver} delegates for_a combination of property access and method resolution._@param resolvers the resolver delegates to use_@see #withInstanceMethods()_@see SimpleEvaluationContext#forPropertyAccessors;public Builder withMethodResolvers(MethodResolver... resolvers) {_			for (MethodResolver resolver : resolvers) {_				if (resolver.getClass() == ReflectiveMethodResolver.class) {_					throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_							"ReflectiveMethodResolver. Consider using DataBindingMethodResolver or a custom subclass.")__				}_			}_			this.resolvers = Arrays.asList(resolvers)__			return this__		};register,the,specified,link,method,resolver,delegates,for,a,combination,of,property,access,and,method,resolution,param,resolvers,the,resolver,delegates,to,use,see,with,instance,methods,see,simple,evaluation,context,for,property,accessors;public,builder,with,method,resolvers,method,resolver,resolvers,for,method,resolver,resolver,resolvers,if,resolver,get,class,reflective,method,resolver,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,method,resolver,consider,using,data,binding,method,resolver,or,a,custom,subclass,this,resolvers,arrays,as,list,resolvers,return,this
SimpleEvaluationContext -> Builder -> public Builder withMethodResolvers(MethodResolver... resolvers);1522102974;Register the specified {@link MethodResolver} delegates for_a combination of property access and method resolution._@param resolvers the resolver delegates to use_@see #withInstanceMethods()_@see SimpleEvaluationContext#forPropertyAccessors;public Builder withMethodResolvers(MethodResolver... resolvers) {_			for (MethodResolver resolver : resolvers) {_				if (resolver.getClass() == ReflectiveMethodResolver.class) {_					throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_							"ReflectiveMethodResolver. Consider using DataBindingMethodResolver or a custom subclass.")__				}_			}_			this.resolvers = Arrays.asList(resolvers)__			return this__		};register,the,specified,link,method,resolver,delegates,for,a,combination,of,property,access,and,method,resolution,param,resolvers,the,resolver,delegates,to,use,see,with,instance,methods,see,simple,evaluation,context,for,property,accessors;public,builder,with,method,resolvers,method,resolver,resolvers,for,method,resolver,resolver,resolvers,if,resolver,get,class,reflective,method,resolver,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,method,resolver,consider,using,data,binding,method,resolver,or,a,custom,subclass,this,resolvers,arrays,as,list,resolvers,return,this
SimpleEvaluationContext -> Builder -> public Builder withMethodResolvers(MethodResolver... resolvers);1522163223;Register the specified {@link MethodResolver} delegates for_a combination of property access and method resolution._@param resolvers the resolver delegates to use_@see #withInstanceMethods()_@see SimpleEvaluationContext#forPropertyAccessors;public Builder withMethodResolvers(MethodResolver... resolvers) {_			for (MethodResolver resolver : resolvers) {_				if (resolver.getClass() == ReflectiveMethodResolver.class) {_					throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_							"ReflectiveMethodResolver. Consider using DataBindingMethodResolver or a custom subclass.")__				}_			}_			this.resolvers = Arrays.asList(resolvers)__			return this__		};register,the,specified,link,method,resolver,delegates,for,a,combination,of,property,access,and,method,resolution,param,resolvers,the,resolver,delegates,to,use,see,with,instance,methods,see,simple,evaluation,context,for,property,accessors;public,builder,with,method,resolvers,method,resolver,resolvers,for,method,resolver,resolver,resolvers,if,resolver,get,class,reflective,method,resolver,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,method,resolver,consider,using,data,binding,method,resolver,or,a,custom,subclass,this,resolvers,arrays,as,list,resolvers,return,this
SimpleEvaluationContext -> Builder -> public Builder withMethodResolvers(MethodResolver... resolvers);1530174524;Register the specified {@link MethodResolver} delegates for_a combination of property access and method resolution._@param resolvers the resolver delegates to use_@see #withInstanceMethods()_@see SimpleEvaluationContext#forPropertyAccessors;public Builder withMethodResolvers(MethodResolver... resolvers) {_			for (MethodResolver resolver : resolvers) {_				if (resolver.getClass() == ReflectiveMethodResolver.class) {_					throw new IllegalArgumentException("SimpleEvaluationContext is not designed for use with a plain " +_							"ReflectiveMethodResolver. Consider using DataBindingMethodResolver or a custom subclass.")__				}_			}_			this.resolvers = Arrays.asList(resolvers)__			return this__		};register,the,specified,link,method,resolver,delegates,for,a,combination,of,property,access,and,method,resolution,param,resolvers,the,resolver,delegates,to,use,see,with,instance,methods,see,simple,evaluation,context,for,property,accessors;public,builder,with,method,resolvers,method,resolver,resolvers,for,method,resolver,resolver,resolvers,if,resolver,get,class,reflective,method,resolver,class,throw,new,illegal,argument,exception,simple,evaluation,context,is,not,designed,for,use,with,a,plain,reflective,method,resolver,consider,using,data,binding,method,resolver,or,a,custom,subclass,this,resolvers,arrays,as,list,resolvers,return,this
