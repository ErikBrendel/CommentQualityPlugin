commented;modifiers;parameterAmount;loc;comment;code
true;;1;2;/**  * Evaluate the expression node in the context of the supplied expression state  * and return the value.  * @param expressionState the current expression state (includes the context)  * @return the value of this node evaluated against the specified state  */ ;/**  * Evaluate the expression node in the context of the supplied expression state  * and return the value.  * @param expressionState the current expression state (includes the context)  * @return the value of this node evaluated against the specified state  */ @Nullable Object getValue(ExpressionState expressionState) throws EvaluationException.
true;;1;1;/**  * Evaluate the expression node in the context of the supplied expression state  * and return the typed value.  * @param expressionState the current expression state (includes the context)  * @return the type value of this node evaluated against the specified state  */ ;/**  * Evaluate the expression node in the context of the supplied expression state  * and return the typed value.  * @param expressionState the current expression state (includes the context)  * @return the type value of this node evaluated against the specified state  */ TypedValue getTypedValue(ExpressionState expressionState) throws EvaluationException.
true;;1;1;/**  * Determine if this expression node will support a setValue() call.  * @param expressionState the current expression state (includes the context)  * @return true if the expression node will allow setValue()  * @throws EvaluationException if something went wrong trying to determine  * if the node supports writing  */ ;/**  * Determine if this expression node will support a setValue() call.  * @param expressionState the current expression state (includes the context)  * @return true if the expression node will allow setValue()  * @throws EvaluationException if something went wrong trying to determine  * if the node supports writing  */ boolean isWritable(ExpressionState expressionState) throws EvaluationException.
true;;2;1;/**  * Evaluate the expression to a node and then set the new value on that node.  * For example, if the expression evaluates to a property reference, then the  * property will be set to the new value.  * @param expressionState the current expression state (includes the context)  * @param newValue the new value  * @throws EvaluationException if any problem occurs evaluating the expression or  * setting the new value  */ ;/**  * Evaluate the expression to a node and then set the new value on that node.  * For example, if the expression evaluates to a property reference, then the  * property will be set to the new value.  * @param expressionState the current expression state (includes the context)  * @param newValue the new value  * @throws EvaluationException if any problem occurs evaluating the expression or  * setting the new value  */ void setValue(ExpressionState expressionState, @Nullable Object newValue) throws EvaluationException.
true;;0;1;/**  * Return the string form the this AST node.  * @return the string form  */ ;/**  * Return the string form the this AST node.  * @return the string form  */ String toStringAST().
true;;0;1;/**  * Return the number of children under this node.  * @return the child count  */ ;/**  * Return the number of children under this node.  * @return the child count  */ int getChildCount().
true;;1;1;/**  * Helper method that returns a SpelNode rather than an Antlr Tree node.  * @return the child node cast to a SpelNode  */ ;/**  * Helper method that returns a SpelNode rather than an Antlr Tree node.  * @return the child node cast to a SpelNode  */ SpelNode getChild(int index).
true;;1;2;/**  * Determine the class of the object passed in, unless it is already a class object.  * @param obj the object that the caller wants the class of  * @return the class of the object if it is not already a class object,  * or {@code null} if the object is {@code null}  */ ;/**  * Determine the class of the object passed in, unless it is already a class object.  * @param obj the object that the caller wants the class of  * @return the class of the object if it is not already a class object,  * or {@code null} if the object is {@code null}  */ @Nullable Class<?> getObjectClass(@Nullable Object obj).
true;;0;1;/**  * Return the start position of this AST node in the expression string.  * @return the start position  */ ;/**  * Return the start position of this AST node in the expression string.  * @return the start position  */ int getStartPosition().
true;;0;1;/**  * Return the end position of this AST node in the expression string.  * @return the end position  */ ;/**  * Return the end position of this AST node in the expression string.  * @return the end position  */ int getEndPosition().
