# id;timestamp;commentText;codeText;commentWords;codeWords
FormatHelper -> public static String formatClassNameForMessage(@Nullable Class<?> clazz);1496259743;Determine a readable name for a given Class object._<p>A String array will have the formatted name "java.lang.String[]"._@param clazz the Class whose name is to be formatted_@return a formatted String suitable for message inclusion_@see ClassUtils#getQualifiedName(Class);public static String formatClassNameForMessage(@Nullable Class<?> clazz) {_		return (clazz != null ? ClassUtils.getQualifiedName(clazz) : "null")__	};determine,a,readable,name,for,a,given,class,object,p,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion,see,class,utils,get,qualified,name,class;public,static,string,format,class,name,for,message,nullable,class,clazz,return,clazz,null,class,utils,get,qualified,name,clazz,null
FormatHelper -> public static String formatClassNameForMessage(@Nullable Class<?> clazz);1525211306;Determine a readable name for a given Class object._<p>A String array will have the formatted name "java.lang.String[]"._@param clazz the Class whose name is to be formatted_@return a formatted String suitable for message inclusion_@see ClassUtils#getQualifiedName(Class);public static String formatClassNameForMessage(@Nullable Class<?> clazz) {_		return (clazz != null ? ClassUtils.getQualifiedName(clazz) : "null")__	};determine,a,readable,name,for,a,given,class,object,p,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion,see,class,utils,get,qualified,name,class;public,static,string,format,class,name,for,message,nullable,class,clazz,return,clazz,null,class,utils,get,qualified,name,clazz,null
FormatHelper -> public static String formatClassNameForMessage(@Nullable Class<?> clazz);1550238935;Determine a readable name for a given Class object._<p>A String array will have the formatted name "java.lang.String[]"._@param clazz the Class whose name is to be formatted_@return a formatted String suitable for message inclusion_@see ClassUtils#getQualifiedName(Class);public static String formatClassNameForMessage(@Nullable Class<?> clazz) {_		return (clazz != null ? ClassUtils.getQualifiedName(clazz) : "null")__	};determine,a,readable,name,for,a,given,class,object,p,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion,see,class,utils,get,qualified,name,class;public,static,string,format,class,name,for,message,nullable,class,clazz,return,clazz,null,class,utils,get,qualified,name,clazz,null
FormatHelper -> public static String formatClassNameForMessage(Class<?> clazz);1328020251;Produce a nice string for a given class object._For example, a string array will have the formatted name "java.lang.String[]"._@param clazz The class whose name is to be formatted_@return a formatted string suitable for message inclusion;public static String formatClassNameForMessage(Class<?> clazz) {_		if (clazz == null) { _			return "null"__		}_		StringBuilder fmtd = new StringBuilder()__		if (clazz.isArray()) {_			int dims = 1__			Class baseClass = clazz.getComponentType()__			while (baseClass.isArray()) {_				baseClass = baseClass.getComponentType()__				dims++__			}_			fmtd.append(baseClass.getName())__			for (int i = 0_ i < dims_ i++) {_				fmtd.append("[]")__			}_		} else {_			fmtd.append(clazz.getName())__		}_		return fmtd.toString()__	};produce,a,nice,string,for,a,given,class,object,for,example,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion;public,static,string,format,class,name,for,message,class,clazz,if,clazz,null,return,null,string,builder,fmtd,new,string,builder,if,clazz,is,array,int,dims,1,class,base,class,clazz,get,component,type,while,base,class,is,array,base,class,base,class,get,component,type,dims,fmtd,append,base,class,get,name,for,int,i,0,i,dims,i,fmtd,append,else,fmtd,append,clazz,get,name,return,fmtd,to,string
FormatHelper -> public static String formatClassNameForMessage(Class<?> clazz);1356735495;Produce a nice string for a given class object._For example, a string array will have the formatted name "java.lang.String[]"._@param clazz The class whose name is to be formatted_@return a formatted string suitable for message inclusion;public static String formatClassNameForMessage(Class<?> clazz) {_		if (clazz == null) {_			return "null"__		}_		StringBuilder fmtd = new StringBuilder()__		if (clazz.isArray()) {_			int dims = 1__			Class baseClass = clazz.getComponentType()__			while (baseClass.isArray()) {_				baseClass = baseClass.getComponentType()__				dims++__			}_			fmtd.append(baseClass.getName())__			for (int i = 0_ i < dims_ i++) {_				fmtd.append("[]")__			}_		} else {_			fmtd.append(clazz.getName())__		}_		return fmtd.toString()__	};produce,a,nice,string,for,a,given,class,object,for,example,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion;public,static,string,format,class,name,for,message,class,clazz,if,clazz,null,return,null,string,builder,fmtd,new,string,builder,if,clazz,is,array,int,dims,1,class,base,class,clazz,get,component,type,while,base,class,is,array,base,class,base,class,get,component,type,dims,fmtd,append,base,class,get,name,for,int,i,0,i,dims,i,fmtd,append,else,fmtd,append,clazz,get,name,return,fmtd,to,string
FormatHelper -> public static String formatClassNameForMessage(Class<?> clazz);1372363092;Produce a nice string for a given class object._For example, a string array will have the formatted name "java.lang.String[]"._@param clazz The class whose name is to be formatted_@return a formatted string suitable for message inclusion;public static String formatClassNameForMessage(Class<?> clazz) {_		if (clazz == null) {_			return "null"__		}_		StringBuilder fmtd = new StringBuilder()__		if (clazz.isArray()) {_			int dims = 1__			Class baseClass = clazz.getComponentType()__			while (baseClass.isArray()) {_				baseClass = baseClass.getComponentType()__				dims++__			}_			fmtd.append(baseClass.getName())__			for (int i = 0_ i < dims_ i++) {_				fmtd.append("[]")__			}_		}_		else {_			fmtd.append(clazz.getName())__		}_		return fmtd.toString()__	};produce,a,nice,string,for,a,given,class,object,for,example,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion;public,static,string,format,class,name,for,message,class,clazz,if,clazz,null,return,null,string,builder,fmtd,new,string,builder,if,clazz,is,array,int,dims,1,class,base,class,clazz,get,component,type,while,base,class,is,array,base,class,base,class,get,component,type,dims,fmtd,append,base,class,get,name,for,int,i,0,i,dims,i,fmtd,append,else,fmtd,append,clazz,get,name,return,fmtd,to,string
FormatHelper -> public static String formatClassNameForMessage(Class<?> clazz);1385412762;Produce a nice string for a given class object._For example, a string array will have the formatted name "java.lang.String[]"._@param clazz The class whose name is to be formatted_@return a formatted string suitable for message inclusion;public static String formatClassNameForMessage(Class<?> clazz) {_		if (clazz == null) {_			return "null"__		}_		StringBuilder fmtd = new StringBuilder()__		if (clazz.isArray()) {_			int dims = 1__			Class<?> baseClass = clazz.getComponentType()__			while (baseClass.isArray()) {_				baseClass = baseClass.getComponentType()__				dims++__			}_			fmtd.append(baseClass.getName())__			for (int i = 0_ i < dims_ i++) {_				fmtd.append("[]")__			}_		}_		else {_			fmtd.append(clazz.getName())__		}_		return fmtd.toString()__	};produce,a,nice,string,for,a,given,class,object,for,example,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion;public,static,string,format,class,name,for,message,class,clazz,if,clazz,null,return,null,string,builder,fmtd,new,string,builder,if,clazz,is,array,int,dims,1,class,base,class,clazz,get,component,type,while,base,class,is,array,base,class,base,class,get,component,type,dims,fmtd,append,base,class,get,name,for,int,i,0,i,dims,i,fmtd,append,else,fmtd,append,clazz,get,name,return,fmtd,to,string
FormatHelper -> public static String formatClassNameForMessage(Class<?> clazz);1412630983;Produce a nice string for a given class object._For example, a string array will have the formatted name "java.lang.String[]"._@param clazz The class whose name is to be formatted_@return a formatted string suitable for message inclusion;public static String formatClassNameForMessage(Class<?> clazz) {_		if (clazz == null) {_			return "null"__		}_		if (clazz.isArray()) {_			StringBuilder sb = new StringBuilder()__			int dims = 1__			Class<?> baseClass = clazz.getComponentType()__			while (baseClass.isArray()) {_				baseClass = baseClass.getComponentType()__				dims++__			}_			sb.append(baseClass.getName())__			for (int i = 0_ i < dims_ i++) {_				sb.append("[]")__			}_			return sb.toString()__		}_		else {_			return clazz.getName()__		}_	};produce,a,nice,string,for,a,given,class,object,for,example,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion;public,static,string,format,class,name,for,message,class,clazz,if,clazz,null,return,null,if,clazz,is,array,string,builder,sb,new,string,builder,int,dims,1,class,base,class,clazz,get,component,type,while,base,class,is,array,base,class,base,class,get,component,type,dims,sb,append,base,class,get,name,for,int,i,0,i,dims,i,sb,append,return,sb,to,string,else,return,clazz,get,name
FormatHelper -> public static String formatClassNameForMessage(Class<?> clazz);1486596301;Produce a nice string for a given class object._For example, a string array will have the formatted name "java.lang.String[]"._@param clazz The class whose name is to be formatted_@return a formatted string suitable for message inclusion;public static String formatClassNameForMessage(Class<?> clazz) {_		if (clazz == null) {_			return "null"__		}_		return clazz.getTypeName()__	};produce,a,nice,string,for,a,given,class,object,for,example,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion;public,static,string,format,class,name,for,message,class,clazz,if,clazz,null,return,null,return,clazz,get,type,name
FormatHelper -> public static String formatClassNameForMessage(Class<?> clazz);1486720388;Determine a readable name for a given Class object._<p>A String array will have the formatted name "java.lang.String[]"._@param clazz the Class whose name is to be formatted_@return a formatted String suitable for message inclusion_@see ClassUtils#getQualifiedName(Class);public static String formatClassNameForMessage(Class<?> clazz) {_		return (clazz != null ? ClassUtils.getQualifiedName(clazz) : "null")__	};determine,a,readable,name,for,a,given,class,object,p,a,string,array,will,have,the,formatted,name,java,lang,string,param,clazz,the,class,whose,name,is,to,be,formatted,return,a,formatted,string,suitable,for,message,inclusion,see,class,utils,get,qualified,name,class;public,static,string,format,class,name,for,message,class,clazz,return,clazz,null,class,utils,get,qualified,name,clazz,null
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1328020251;Produce a nice string for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return nicely formatted string, eg. foo(String,int);public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder()__		sb.append(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))_				_			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,nice,string,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,nicely,formatted,string,eg,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,sb,append,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1356735495;Produce a nice string for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return nicely formatted string, eg. foo(String,int);public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder()__		sb.append(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))__			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,nice,string,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,nicely,formatted,string,eg,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,sb,append,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1372363092;Produce a nice string for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return nicely formatted string, eg. foo(String,int);public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder()__		sb.append(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))__			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,nice,string,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,nicely,formatted,string,eg,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,sb,append,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1385412762;Produce a nice string for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return nicely formatted string, eg. foo(String,int);public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder()__		sb.append(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))__			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,nice,string,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,nicely,formatted,string,eg,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,sb,append,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1412630983;Produce a nice string for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return nicely formatted string, eg. foo(String,int);public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))__			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,nice,string,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,nicely,formatted,string,eg,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1486596301;Produce a nice string for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return nicely formatted string, eg. foo(String,int);public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))__			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,nice,string,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,nicely,formatted,string,eg,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1486720388;Produce a readable representation for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return a nicely formatted representation, e.g. {@code foo(String,int)};public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))__			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,readable,representation,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,a,nicely,formatted,representation,e,g,code,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1496259743;Produce a readable representation for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return a nicely formatted representation, e.g. {@code foo(String,int)};public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))__			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,readable,representation,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,a,nicely,formatted,representation,e,g,code,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1525211306;Produce a readable representation for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return a nicely formatted representation, e.g. {@code foo(String,int)};public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringBuilder sb = new StringBuilder(name)__		sb.append("(")__		for (int i = 0_ i < argumentTypes.size()_ i++) {_			if (i > 0) {_				sb.append(",")__			}_			TypeDescriptor typeDescriptor = argumentTypes.get(i)__			if (typeDescriptor != null) {_				sb.append(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sb.append(formatClassNameForMessage(null))__			}_		}_		sb.append(")")__		return sb.toString()__	};produce,a,readable,representation,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,a,nicely,formatted,representation,e,g,code,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,builder,sb,new,string,builder,name,sb,append,for,int,i,0,i,argument,types,size,i,if,i,0,sb,append,type,descriptor,type,descriptor,argument,types,get,i,if,type,descriptor,null,sb,append,format,class,name,for,message,type,descriptor,get,type,else,sb,append,format,class,name,for,message,null,sb,append,return,sb,to,string
FormatHelper -> public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes);1550238935;Produce a readable representation for a given method name with specified arguments._@param name the name of the method_@param argumentTypes the types of the arguments to the method_@return a nicely formatted representation, e.g. {@code foo(String,int)};public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {_		StringJoiner sj = new StringJoiner(",", "(", ")")__		for (TypeDescriptor typeDescriptor : argumentTypes) {_			if (typeDescriptor != null) {_				sj.add(formatClassNameForMessage(typeDescriptor.getType()))__			}_			else {_				sj.add(formatClassNameForMessage(null))__			}_		}_		return name + sj.toString()__	};produce,a,readable,representation,for,a,given,method,name,with,specified,arguments,param,name,the,name,of,the,method,param,argument,types,the,types,of,the,arguments,to,the,method,return,a,nicely,formatted,representation,e,g,code,foo,string,int;public,static,string,format,method,for,message,string,name,list,type,descriptor,argument,types,string,joiner,sj,new,string,joiner,for,type,descriptor,type,descriptor,argument,types,if,type,descriptor,null,sj,add,format,class,name,for,message,type,descriptor,get,type,else,sj,add,format,class,name,for,message,null,return,name,sj,to,string
