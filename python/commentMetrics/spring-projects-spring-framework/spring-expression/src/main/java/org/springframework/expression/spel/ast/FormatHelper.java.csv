commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;12;/**  * Produce a readable representation for a given method name with specified arguments.  * @param name the name of the method  * @param argumentTypes the types of the arguments to the method  * @return a nicely formatted representation, e.g. {@code foo(String,int)}  */ ;/**  * Produce a readable representation for a given method name with specified arguments.  * @param name the name of the method  * @param argumentTypes the types of the arguments to the method  * @return a nicely formatted representation, e.g. {@code foo(String,int)}  */ public static String formatMethodForMessage(String name, List<TypeDescriptor> argumentTypes) {     StringJoiner sj = new StringJoiner(",", "(", ")").     for (TypeDescriptor typeDescriptor : argumentTypes) {         if (typeDescriptor != null) {             sj.add(formatClassNameForMessage(typeDescriptor.getType())).         } else {             sj.add(formatClassNameForMessage(null)).         }     }     return name + sj.toString(). }
true;public,static;1;3;/**  * Determine a readable name for a given Class object.  * <p>A String array will have the formatted name "java.lang.String[]".  * @param clazz the Class whose name is to be formatted  * @return a formatted String suitable for message inclusion  * @see ClassUtils#getQualifiedName(Class)  */ ;/**  * Determine a readable name for a given Class object.  * <p>A String array will have the formatted name "java.lang.String[]".  * @param clazz the Class whose name is to be formatted  * @return a formatted String suitable for message inclusion  * @see ClassUtils#getQualifiedName(Class)  */ public static String formatClassNameForMessage(@Nullable Class<?> clazz) {     return (clazz != null ? ClassUtils.getQualifiedName(clazz) : "null"). }
