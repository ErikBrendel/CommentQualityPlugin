# id;timestamp;commentText;codeText;commentWords;codeWords
InlineList -> public boolean isConstant();1328020251;@return whether this list is a constant value;public boolean isConstant() {_		return constant != null__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,constant,null
InlineList -> public boolean isConstant();1356735495;@return whether this list is a constant value;public boolean isConstant() {_		return constant != null__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,constant,null
InlineList -> public boolean isConstant();1372363092;@return whether this list is a constant value;public boolean isConstant() {_		return this.constant != null__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1407348911;@return whether this list is a constant value;public boolean isConstant() {_		return this.constant != null__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1412630983;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1413486529;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1413848647;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1467730834;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1467811755;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1496837955;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1497341397;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1498780456;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1530174524;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1530174524;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> public boolean isConstant();1548712256;Return whether this list is a constant value.;public boolean isConstant() {_		return (this.constant != null)__	};return,whether,this,list,is,a,constant,value;public,boolean,is,constant,return,this,constant,null
InlineList -> private void checkIfConstant();1328020251;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				} else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<Object>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				} else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,object,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1356735495;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				} else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<Object>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				} else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,object,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1372363092;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<Object>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,object,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1407348911;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<Object>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,object,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1412630983;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<Object>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,object,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1413486529;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<Object>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,object,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1413848647;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<Object>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,object,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1467730834;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1467811755;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1496837955;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1497341397;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1498780456;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1530174524;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1530174524;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
InlineList -> private void checkIfConstant();1548712256;If all the components of the list are constants, or lists that themselves contain constants, then a constant list_can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage_created.;private void checkIfConstant() {_		boolean isConstant = true__		for (int c = 0, max = getChildCount()_ c < max_ c++) {_			SpelNode child = getChild(c)__			if (!(child instanceof Literal)) {_				if (child instanceof InlineList) {_					InlineList inlineList = (InlineList) child__					if (!inlineList.isConstant()) {_						isConstant = false__					}_				}_				else {_					isConstant = false__				}_			}_		}_		if (isConstant) {_			List<Object> constantList = new ArrayList<>()__			int childcount = getChildCount()__			for (int c = 0_ c < childcount_ c++) {_				SpelNode child = getChild(c)__				if ((child instanceof Literal)) {_					constantList.add(((Literal) child).getLiteralValue().getValue())__				}_				else if (child instanceof InlineList) {_					constantList.add(((InlineList) child).getConstantValue())__				}_			}_			this.constant = new TypedValue(Collections.unmodifiableList(constantList))__		}_	};if,all,the,components,of,the,list,are,constants,or,lists,that,themselves,contain,constants,then,a,constant,list,can,be,built,to,represent,this,node,this,will,speed,up,later,get,value,calls,and,reduce,the,amount,of,garbage,created;private,void,check,if,constant,boolean,is,constant,true,for,int,c,0,max,get,child,count,c,max,c,spel,node,child,get,child,c,if,child,instanceof,literal,if,child,instanceof,inline,list,inline,list,inline,list,inline,list,child,if,inline,list,is,constant,is,constant,false,else,is,constant,false,if,is,constant,list,object,constant,list,new,array,list,int,childcount,get,child,count,for,int,c,0,c,childcount,c,spel,node,child,get,child,c,if,child,instanceof,literal,constant,list,add,literal,child,get,literal,value,get,value,else,if,child,instanceof,inline,list,constant,list,add,inline,list,child,get,constant,value,this,constant,new,typed,value,collections,unmodifiable,list,constant,list
