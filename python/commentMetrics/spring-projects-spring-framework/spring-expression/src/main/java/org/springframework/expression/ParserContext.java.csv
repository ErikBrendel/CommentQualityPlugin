commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Whether or not the expression being parsed is a template. A template expression  * consists of literal text that can be mixed with evaluatable blocks. Some examples:  * <pre class="code">  * 	   Some literal text  *     Hello #{name.firstName}!  *     #{3 + 4}  * </pre>  * @return true if the expression is a template, false otherwise  */ ;/**  * Whether or not the expression being parsed is a template. A template expression  * consists of literal text that can be mixed with evaluatable blocks. Some examples:  * <pre class="code">  * 	   Some literal text  *     Hello #{name.firstName}!  *     #{3 + 4}  * </pre>  * @return true if the expression is a template, false otherwise  */ boolean isTemplate().
true;;0;1;/**  * For template expressions, returns the prefix that identifies the start of an  * expression block within a string. For example: "${"  * @return the prefix that identifies the start of an expression  */ ;/**  * For template expressions, returns the prefix that identifies the start of an  * expression block within a string. For example: "${"  * @return the prefix that identifies the start of an expression  */ String getExpressionPrefix().
true;;0;1;/**  * For template expressions, return the prefix that identifies the end of an  * expression block within a string. For example: "}"  * @return the suffix that identifies the end of an expression  */ ;/**  * For template expressions, return the prefix that identifies the end of an  * expression block within a string. For example: "}"  * @return the suffix that identifies the end of an expression  */ String getExpressionSuffix().
false;public;0;4;;@Override public boolean isTemplate() {     return true. }
false;public;0;4;;@Override public String getExpressionPrefix() {     return "#{". }
false;public;0;4;;@Override public String getExpressionSuffix() {     return "}". }
