# id;timestamp;commentText;codeText;commentWords;codeWords
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1328020251;Compare the left operand to see it is an instance of the type specified as the right operand._The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = getRightOperand().getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		if (leftValue == null) {_			return BooleanTypedValue.FALSE_  _		}_		if (rightValue == null || !(rightValue instanceof Class<?>)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		return BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,get,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,if,left,value,null,return,boolean,typed,value,false,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,return,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1356735495;Compare the left operand to see it is an instance of the type specified as the right operand._The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = getRightOperand().getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		if (leftValue == null) {_			return BooleanTypedValue.FALSE_  _		}_		if (rightValue == null || !(rightValue instanceof Class<?>)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		return BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,get,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,if,left,value,null,return,boolean,typed,value,false,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,return,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1372363092;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise_false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = getRightOperand().getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		if (leftValue == null) {_			return BooleanTypedValue.FALSE_  _		}_		if (rightValue == null || !(rightValue instanceof Class<?>)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		return BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,get,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,if,left,value,null,return,boolean,typed,value,false,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,return,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405011154;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise_false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = getRightOperand().getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result = null__		if (rightValue == null || !(rightValue instanceof Class<?>)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		} else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		this.exitTypeDescriptor = "Z"__		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,get,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,null,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,this,exit,type,descriptor,z,return,result
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405514506;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise_false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = getRightOperand().getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result = null__		if (rightValue == null || !(rightValue instanceof Class<?>)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		} else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		this.exitTypeDescriptor = "Z"__		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,get,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,null,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,this,exit,type,descriptor,z,return,result
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405696918;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise_false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = getRightOperand().getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result = null__		if (rightValue == null || !(rightValue instanceof Class<?>)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		}_		else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		this.exitTypeDescriptor = "Z"__		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,get,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,null,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,this,exit,type,descriptor,z,return,result
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1412630983;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise_false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = getRightOperand().getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result = null__		if (rightValue == null || !(rightValue instanceof Class<?>)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		}_		else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		this.exitTypeDescriptor = "Z"__		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,get,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,null,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,this,exit,type,descriptor,z,return,result
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1462467435;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise_false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl rightOperand = getRightOperand()__		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = rightOperand.getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result = null__		if (rightValue == null || !(rightValue instanceof Class<?>)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		}_		else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		if (rightOperand instanceof TypeReference) {_			_			_			this.exitTypeDescriptor = "Z"__		}_		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,right,operand,get,right,operand,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,null,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,if,right,operand,instanceof,type,reference,this,exit,type,descriptor,z,return,result
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1477860027;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return true if the left operand is an instanceof of the right operand, otherwise_false_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl rightOperand = getRightOperand()__		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = rightOperand.getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result = null__		if (rightValue == null || !(rightValue instanceof Class)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		}_		else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		if (rightOperand instanceof TypeReference) {_			_			_			this.exitTypeDescriptor = "Z"__		}_		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,right,operand,get,right,operand,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,null,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,if,right,operand,instanceof,type,reference,this,exit,type,descriptor,z,return,result
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1500495740;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return {@code true} if the left operand is an instanceof of the right operand,_otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl rightOperand = getRightOperand()__		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = rightOperand.getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result__		if (rightValue == null || !(rightValue instanceof Class)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		}_		else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		if (rightOperand instanceof TypeReference) {_			_			_			this.exitTypeDescriptor = "Z"__		}_		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,code,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,right,operand,get,right,operand,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,if,right,operand,instanceof,type,reference,this,exit,type,descriptor,z,return,result
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1530174524;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return {@code true} if the left operand is an instanceof of the right operand,_otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl rightOperand = getRightOperand()__		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = rightOperand.getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result__		if (rightValue == null || !(rightValue instanceof Class)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		}_		else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		if (rightOperand instanceof TypeReference) {_			_			_			this.exitTypeDescriptor = "Z"__		}_		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,code,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,right,operand,get,right,operand,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,if,right,operand,instanceof,type,reference,this,exit,type,descriptor,z,return,result
OperatorInstanceof -> @Override 	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException;1548712256;Compare the left operand to see it is an instance of the type specified as the_right operand. The right operand must be a class._@param state the expression state_@return {@code true} if the left operand is an instanceof of the right operand,_otherwise {@code false}_@throws EvaluationException if there is a problem evaluating the expression;@Override_	public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		SpelNodeImpl rightOperand = getRightOperand()__		TypedValue left = getLeftOperand().getValueInternal(state)__		TypedValue right = rightOperand.getValueInternal(state)__		Object leftValue = left.getValue()__		Object rightValue = right.getValue()__		BooleanTypedValue result__		if (rightValue == null || !(rightValue instanceof Class)) {_			throw new SpelEvaluationException(getRightOperand().getStartPosition(),_					SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,_					(rightValue == null ? "null" : rightValue.getClass().getName()))__		}_		Class<?> rightClass = (Class<?>) rightValue__		if (leftValue == null) {_			result = BooleanTypedValue.FALSE_  _		}_		else {_			result = BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()))__		}_		this.type = rightClass__		if (rightOperand instanceof TypeReference) {_			_			_			this.exitTypeDescriptor = "Z"__		}_		return result__	};compare,the,left,operand,to,see,it,is,an,instance,of,the,type,specified,as,the,right,operand,the,right,operand,must,be,a,class,param,state,the,expression,state,return,code,true,if,the,left,operand,is,an,instanceof,of,the,right,operand,otherwise,code,false,throws,evaluation,exception,if,there,is,a,problem,evaluating,the,expression;override,public,boolean,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,spel,node,impl,right,operand,get,right,operand,typed,value,left,get,left,operand,get,value,internal,state,typed,value,right,right,operand,get,value,internal,state,object,left,value,left,get,value,object,right,value,right,get,value,boolean,typed,value,result,if,right,value,null,right,value,instanceof,class,throw,new,spel,evaluation,exception,get,right,operand,get,start,position,spel,message,right,value,null,null,right,value,get,class,get,name,class,right,class,class,right,value,if,left,value,null,result,boolean,typed,value,false,else,result,boolean,typed,value,for,value,right,class,is,assignable,from,left,value,get,class,this,type,right,class,if,right,operand,instanceof,type,reference,this,exit,type,descriptor,z,return,result
