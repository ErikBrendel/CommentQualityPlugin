commented;modifiers;parameterAmount;loc;comment;code
false;public;4;10;;@Override @Nullable public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException {     if (targetObject instanceof Class) {         throw new IllegalArgumentException("DataBindingMethodResolver does not support Class targets").     }     return super.resolve(context, targetObject, name, argumentTypes). }
false;protected;2;8;;@Override protected boolean isCandidateForInvocation(Method method, Class<?> targetClass) {     if (Modifier.isStatic(method.getModifiers())) {         return false.     }     Class<?> clazz = method.getDeclaringClass().     return (clazz != Object.class && clazz != Class.class && !ClassLoader.class.isAssignableFrom(targetClass)). }
true;public,static;0;3;/**  * Create a new data-binding method resolver for instance method resolution.  */ ;/**  * Create a new data-binding method resolver for instance method resolution.  */ public static DataBindingMethodResolver forInstanceMethodInvocation() {     return new DataBindingMethodResolver(). }
