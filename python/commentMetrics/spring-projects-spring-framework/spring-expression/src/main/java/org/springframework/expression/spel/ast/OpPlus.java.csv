# id;timestamp;commentText;codeText;commentWords;codeWords
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand);1413486529;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv,cf,plus.getLeftOperand())__			walk(mv,cf,plus.getRightOperand())__		}_		else {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,cf,enter,compilation,scope,operand,generate,code,mv,cf,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand);1415895163;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv,cf,plus.getLeftOperand())__			walk(mv,cf,plus.getRightOperand())__		}_		else {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (cf.lastDescriptor() != "Ljava/lang/String") {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,cf,last,descriptor,ljava,lang,string,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand);1425666762;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv,cf,plus.getLeftOperand())__			walk(mv,cf,plus.getRightOperand())__		}_		else {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (cf.lastDescriptor() != "Ljava/lang/String") {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,cf,last,descriptor,ljava,lang,string,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand);1448411708;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv,cf,plus.getLeftOperand())__			walk(mv,cf,plus.getRightOperand())__		}_		else {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (!"Ljava/lang/String".equals(cf.lastDescriptor())) {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,ljava,lang,string,equals,cf,last,descriptor,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand);1448489364;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv,cf,plus.getLeftOperand())__			walk(mv,cf,plus.getRightOperand())__		}_		else {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (!"Ljava/lang/String".equals(cf.lastDescriptor())) {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,ljava,lang,string,equals,cf,last,descriptor,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand);1485810955;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv,cf,plus.getLeftOperand())__			walk(mv,cf,plus.getRightOperand())__		}_		else {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (!"Ljava/lang/String".equals(cf.lastDescriptor())) {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,ljava,lang,string,equals,cf,last,descriptor,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1335795272;Convert operand value to string using registered converter or using_{@code toString} method.__@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)___		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			final Object obj = typeConverter.convertValue(value.getValue(), value.getTypeDescriptor(), typeDescriptor)__			return String.valueOf(obj)__		} else {_			return String.valueOf(value.getValue())__		}_	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,final,type,converter,type,converter,state,get,evaluation,context,get,type,converter,final,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,final,object,obj,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,obj,else,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1351080543;Convert operand value to string using registered converter or using_{@code toString} method.__@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)___		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			final Object obj = typeConverter.convertValue(value.getValue(), value.getTypeDescriptor(), typeDescriptor)__			return String.valueOf(obj)__		} else {_			return String.valueOf(value.getValue())__		}_	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,final,type,converter,type,converter,state,get,evaluation,context,get,type,converter,final,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,final,object,obj,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,obj,else,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1372363092;Convert operand value to string using registered converter or using_{@code toString} method.__@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)___		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			final Object obj = typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor)__			return String.valueOf(obj)__		}__		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,final,type,converter,type,converter,state,get,evaluation,context,get,type,converter,final,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,final,object,obj,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,obj,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1385073193;Convert operand value to string using registered converter or using_{@code toString} method.__@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)___		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			final Object obj = typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor)__			return String.valueOf(obj)__		}__		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,final,type,converter,type,converter,state,get,evaluation,context,get,type,converter,final,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,final,object,obj,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,obj,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1405011154;Convert operand value to string using registered converter or using_{@code toString} method.__@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)___		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			final Object obj = typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor)__			return String.valueOf(obj)__		}__		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,final,type,converter,type,converter,state,get,evaluation,context,get,type,converter,final,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,final,object,obj,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,obj,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1405514506;Convert operand value to string using registered converter or using_{@code toString} method.__@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)___		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			final Object obj = typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor)__			return String.valueOf(obj)__		}__		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,final,type,converter,type,converter,state,get,evaluation,context,get,type,converter,final,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,final,object,obj,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,obj,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1406656976;Convert operand value to string using registered converter or using_{@code toString} method.__@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		final TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		final TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)___		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			final Object obj = typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor)__			return String.valueOf(obj)__		}__		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,final,type,converter,type,converter,state,get,evaluation,context,get,type,converter,final,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,final,object,obj,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,obj,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1412630983;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1413486529;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1415895163;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1425666762;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1448411708;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1448489364;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1485810955;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1496837955;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1498780456;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1530174524;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1530174524;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private static String convertTypedValueToString(TypedValue value, ExpressionState state);1548712256;Convert operand value to string using registered converter or using_{@code toString} method._@param value typed value to be converted_@param state expression state_@return {@code TypedValue} instance converted to {@code String};private static String convertTypedValueToString(TypedValue value, ExpressionState state) {_		TypeConverter typeConverter = state.getEvaluationContext().getTypeConverter()__		TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(String.class)__		if (typeConverter.canConvert(value.getTypeDescriptor(), typeDescriptor)) {_			return String.valueOf(typeConverter.convertValue(value.getValue(),_					value.getTypeDescriptor(), typeDescriptor))__		}_		return String.valueOf(value.getValue())__	};convert,operand,value,to,string,using,registered,converter,or,using,code,to,string,method,param,value,typed,value,to,be,converted,param,state,expression,state,return,code,typed,value,instance,converted,to,code,string;private,static,string,convert,typed,value,to,string,typed,value,value,expression,state,state,type,converter,type,converter,state,get,evaluation,context,get,type,converter,type,descriptor,type,descriptor,type,descriptor,value,of,string,class,if,type,converter,can,convert,value,get,type,descriptor,type,descriptor,return,string,value,of,type,converter,convert,value,value,get,value,value,get,type,descriptor,type,descriptor,return,string,value,of,value,get,value
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand);1496837955;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv, cf, plus.getLeftOperand())__			walk(mv, cf, plus.getRightOperand())__		}_		else if (operand != null) {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (!"Ljava/lang/String".equals(cf.lastDescriptor())) {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,nullable,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,if,operand,null,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,ljava,lang,string,equals,cf,last,descriptor,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand);1498780456;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv, cf, plus.getLeftOperand())__			walk(mv, cf, plus.getRightOperand())__		}_		else if (operand != null) {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (!"Ljava/lang/String".equals(cf.lastDescriptor())) {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,nullable,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,if,operand,null,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,ljava,lang,string,equals,cf,last,descriptor,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand);1530174524;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv, cf, plus.getLeftOperand())__			walk(mv, cf, plus.getRightOperand())__		}_		else if (operand != null) {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (!"Ljava/lang/String".equals(cf.lastDescriptor())) {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,nullable,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,if,operand,null,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,ljava,lang,string,equals,cf,last,descriptor,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand);1530174524;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv, cf, plus.getLeftOperand())__			walk(mv, cf, plus.getRightOperand())__		}_		else if (operand != null) {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (!"Ljava/lang/String".equals(cf.lastDescriptor())) {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,nullable,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,if,operand,null,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,ljava,lang,string,equals,cf,last,descriptor,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
OpPlus -> private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand);1548712256;Walk through a possible tree of nodes that combine strings and append_them all to the same (on stack) StringBuilder.;private void walk(MethodVisitor mv, CodeFlow cf, @Nullable SpelNodeImpl operand) {_		if (operand instanceof OpPlus) {_			OpPlus plus = (OpPlus)operand__			walk(mv, cf, plus.getLeftOperand())__			walk(mv, cf, plus.getRightOperand())__		}_		else if (operand != null) {_			cf.enterCompilationScope()__			operand.generateCode(mv,cf)__			if (!"Ljava/lang/String".equals(cf.lastDescriptor())) {_				mv.visitTypeInsn(CHECKCAST, "java/lang/String")__			}_			cf.exitCompilationScope()__			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String_)Ljava/lang/StringBuilder_", false)__		}_	};walk,through,a,possible,tree,of,nodes,that,combine,strings,and,append,them,all,to,the,same,on,stack,string,builder;private,void,walk,method,visitor,mv,code,flow,cf,nullable,spel,node,impl,operand,if,operand,instanceof,op,plus,op,plus,plus,op,plus,operand,walk,mv,cf,plus,get,left,operand,walk,mv,cf,plus,get,right,operand,else,if,operand,null,cf,enter,compilation,scope,operand,generate,code,mv,cf,if,ljava,lang,string,equals,cf,last,descriptor,mv,visit,type,insn,checkcast,java,lang,string,cf,exit,compilation,scope,mv,visit,method,insn,invokevirtual,java,lang,string,builder,append,ljava,lang,string,ljava,lang,string,builder,false
