# id;timestamp;commentText;codeText;commentWords;codeWords
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1328020251;Implements multiply directly here for some types of operand, otherwise delegates to any registered overloader for_types it does not recognize. Supported types here are:_<ul>_<li>integers_<li>doubles_<li>string and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object operandOne = getLeftOperand().getValueInternal(state).getValue()__		Object operandTwo = getRightOperand().getValueInternal(state).getValue()__		if (operandOne instanceof Number && operandTwo instanceof Number) {_			Number leftNumber = (Number) operandOne__			Number rightNumber = (Number) operandTwo__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			} else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			} else {_				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_		} else if (operandOne instanceof String && operandTwo instanceof Integer) {_			int repeats = (Integer) operandTwo__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(operandOne)__			}_			return new TypedValue(result.toString())__		}_		return state.operate(Operation.MULTIPLY, operandOne, operandTwo)__	};implements,multiply,directly,here,for,some,types,of,operand,otherwise,delegates,to,any,registered,overloader,for,types,it,does,not,recognize,supported,types,here,are,ul,li,integers,li,doubles,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,operand,one,get,left,operand,get,value,internal,state,get,value,object,operand,two,get,right,operand,get,value,internal,state,get,value,if,operand,one,instanceof,number,operand,two,instanceof,number,number,left,number,number,operand,one,number,right,number,number,operand,two,if,left,number,instanceof,double,right,number,instanceof,double,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,long,right,number,instanceof,long,return,new,typed,value,left,number,long,value,right,number,long,value,else,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,operand,one,instanceof,string,operand,two,instanceof,integer,int,repeats,integer,operand,two,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,operand,one,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,operand,one,operand,two
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1335773184;Implements multiply directly here for some types of operand, otherwise delegates to any registered overloader for_types it does not recognize. Supported types here are:_<ul>_<li>integers_<li>doubles_<li>string and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object operandOne = getLeftOperand().getValueInternal(state).getValue()__		Object operandTwo = getRightOperand().getValueInternal(state).getValue()__		if (operandOne instanceof Number && operandTwo instanceof Number) {_			Number leftNumber = (Number) operandOne__			Number rightNumber = (Number) operandTwo__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			} else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			} else {_				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_		} else if (operandOne instanceof String && operandTwo instanceof Integer) {_			int repeats = (Integer) operandTwo__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(operandOne)__			}_			return new TypedValue(result.toString())__		}_		return state.operate(Operation.MULTIPLY, operandOne, operandTwo)__	};implements,multiply,directly,here,for,some,types,of,operand,otherwise,delegates,to,any,registered,overloader,for,types,it,does,not,recognize,supported,types,here,are,ul,li,integers,li,doubles,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,operand,one,get,left,operand,get,value,internal,state,get,value,object,operand,two,get,right,operand,get,value,internal,state,get,value,if,operand,one,instanceof,number,operand,two,instanceof,number,number,left,number,number,operand,one,number,right,number,number,operand,two,if,left,number,instanceof,double,right,number,instanceof,double,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,long,right,number,instanceof,long,return,new,typed,value,left,number,long,value,right,number,long,value,else,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,operand,one,instanceof,string,operand,two,instanceof,integer,int,repeats,integer,operand,two,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,operand,one,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,operand,one,operand,two
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1336611712;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here.__<p>Supported operand types:_<ul>_<li>doubles_<li>longs_<li>integers_<li>string and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object operandOne = getLeftOperand().getValueInternal(state).getValue()__		Object operandTwo = getRightOperand().getValueInternal(state).getValue()__		if (operandOne instanceof Number && operandTwo instanceof Number) {_			Number leftNumber = (Number) operandOne__			Number rightNumber = (Number) operandTwo__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else {_				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_		}_		else if (operandOne instanceof String && operandTwo instanceof Integer) {_			int repeats = (Integer) operandTwo__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(operandOne)__			}_			return new TypedValue(result.toString())__		}_		return state.operate(Operation.MULTIPLY, operandOne, operandTwo)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,operand,one,get,left,operand,get,value,internal,state,get,value,object,operand,two,get,right,operand,get,value,internal,state,get,value,if,operand,one,instanceof,number,operand,two,instanceof,number,number,left,number,number,operand,one,number,right,number,number,operand,two,if,left,number,instanceof,double,right,number,instanceof,double,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,long,right,number,instanceof,long,return,new,typed,value,left,number,long,value,right,number,long,value,else,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,operand,one,instanceof,string,operand,two,instanceof,integer,int,repeats,integer,operand,two,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,operand,one,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,operand,one,operand,two
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1350077656;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>doubles_<li>longs_<li>integers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object operandOne = getLeftOperand().getValueInternal(state).getValue()__		Object operandTwo = getRightOperand().getValueInternal(state).getValue()__		if (operandOne instanceof Number && operandTwo instanceof Number) {_			Number leftNumber = (Number) operandOne__			Number rightNumber = (Number) operandTwo__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else {_				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_		}_		else if (operandOne instanceof String && operandTwo instanceof Integer) {_			int repeats = (Integer) operandTwo__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(operandOne)__			}_			return new TypedValue(result.toString())__		}_		return state.operate(Operation.MULTIPLY, operandOne, operandTwo)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,operand,one,get,left,operand,get,value,internal,state,get,value,object,operand,two,get,right,operand,get,value,internal,state,get,value,if,operand,one,instanceof,number,operand,two,instanceof,number,number,left,number,number,operand,one,number,right,number,number,operand,two,if,left,number,instanceof,double,right,number,instanceof,double,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,long,right,number,instanceof,long,return,new,typed,value,left,number,long,value,right,number,long,value,else,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,operand,one,instanceof,string,operand,two,instanceof,integer,int,repeats,integer,operand,two,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,operand,one,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,operand,one,operand,two
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1351080543;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>doubles_<li>longs_<li>integers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object operandOne = getLeftOperand().getValueInternal(state).getValue()__		Object operandTwo = getRightOperand().getValueInternal(state).getValue()__		if (operandOne instanceof Number && operandTwo instanceof Number) {_			Number leftNumber = (Number) operandOne__			Number rightNumber = (Number) operandTwo__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Float || rightNumber instanceof Float) {_				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else {_				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_		}_		else if (operandOne instanceof String && operandTwo instanceof Integer) {_			int repeats = (Integer) operandTwo__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(operandOne)__			}_			return new TypedValue(result.toString())__		}_		return state.operate(Operation.MULTIPLY, operandOne, operandTwo)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,operand,one,get,left,operand,get,value,internal,state,get,value,object,operand,two,get,right,operand,get,value,internal,state,get,value,if,operand,one,instanceof,number,operand,two,instanceof,number,number,left,number,number,operand,one,number,right,number,number,operand,two,if,left,number,instanceof,double,right,number,instanceof,double,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,float,right,number,instanceof,float,return,new,typed,value,left,number,float,value,right,number,float,value,else,if,left,number,instanceof,long,right,number,instanceof,long,return,new,typed,value,left,number,long,value,right,number,long,value,else,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,operand,one,instanceof,string,operand,two,instanceof,integer,int,repeats,integer,operand,two,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,operand,one,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,operand,one,operand,two
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1356735495;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>doubles_<li>longs_<li>integers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object operandOne = getLeftOperand().getValueInternal(state).getValue()__		Object operandTwo = getRightOperand().getValueInternal(state).getValue()__		if (operandOne instanceof Number && operandTwo instanceof Number) {_			Number leftNumber = (Number) operandOne__			Number rightNumber = (Number) operandTwo__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Float || rightNumber instanceof Float) {_				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else {_				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_		}_		else if (operandOne instanceof String && operandTwo instanceof Integer) {_			int repeats = (Integer) operandTwo__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(operandOne)__			}_			return new TypedValue(result.toString())__		}_		return state.operate(Operation.MULTIPLY, operandOne, operandTwo)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,operand,one,get,left,operand,get,value,internal,state,get,value,object,operand,two,get,right,operand,get,value,internal,state,get,value,if,operand,one,instanceof,number,operand,two,instanceof,number,number,left,number,number,operand,one,number,right,number,number,operand,two,if,left,number,instanceof,double,right,number,instanceof,double,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,float,right,number,instanceof,float,return,new,typed,value,left,number,float,value,right,number,float,value,else,if,left,number,instanceof,long,right,number,instanceof,long,return,new,typed,value,left,number,long,value,right,number,long,value,else,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,operand,one,instanceof,string,operand,two,instanceof,integer,int,repeats,integer,operand,two,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,operand,one,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,operand,one,operand,two
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1372363092;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>doubles_<li>longs_<li>integers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {__		Object operandOne = getLeftOperand().getValueInternal(state).getValue()__		Object operandTwo = getRightOperand().getValueInternal(state).getValue()___		if (operandOne instanceof Number && operandTwo instanceof Number) {_			Number leftNumber = (Number) operandOne__			Number rightNumber = (Number) operandTwo__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				return new TypedValue(leftNumber.doubleValue()_						* rightNumber.doubleValue())__			}__			if (leftNumber instanceof Float || rightNumber instanceof Float) {_				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}__			if (leftNumber instanceof Long || rightNumber instanceof Long) {_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}__			return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__		}_		else if (operandOne instanceof String && operandTwo instanceof Integer) {_			int repeats = (Integer) operandTwo__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(operandOne)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, operandOne, operandTwo)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,operand,one,get,left,operand,get,value,internal,state,get,value,object,operand,two,get,right,operand,get,value,internal,state,get,value,if,operand,one,instanceof,number,operand,two,instanceof,number,number,left,number,number,operand,one,number,right,number,number,operand,two,if,left,number,instanceof,double,right,number,instanceof,double,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,number,instanceof,float,right,number,instanceof,float,return,new,typed,value,left,number,float,value,right,number,float,value,if,left,number,instanceof,long,right,number,instanceof,long,return,new,typed,value,left,number,long,value,right,number,long,value,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,operand,one,instanceof,string,operand,two,instanceof,integer,int,repeats,integer,operand,two,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,operand,one,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,operand,one,operand,two
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1385073193;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>{@code BigDecimal}_<li>doubles_<li>longs_<li>integers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {__		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand__			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}__			if (leftNumber instanceof Float || rightNumber instanceof Float) {_				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}__			if (leftNumber instanceof Long || rightNumber instanceof Long) {_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}__			return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__		}_		else if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,code,big,decimal,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,if,left,number,instanceof,double,right,number,instanceof,double,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,number,instanceof,float,right,number,instanceof,float,return,new,typed,value,left,number,float,value,right,number,float,value,if,left,number,instanceof,long,right,number,instanceof,long,return,new,typed,value,left,number,long,value,right,number,long,value,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405011154;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>{@code BigDecimal}_<li>doubles_<li>longs_<li>integers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {__		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand__			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				if (leftNumber instanceof Double && rightNumber instanceof Double) {_					this.exitTypeDescriptor = "D"__				}_				return new TypedValue(leftNumber.doubleValue()_						* rightNumber.doubleValue())__			}__			if (leftNumber instanceof Float || rightNumber instanceof Float) {_				if (leftNumber instanceof Float && rightNumber instanceof Float) {_					this.exitTypeDescriptor = "F"__				}_				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}__			if (leftNumber instanceof Long || rightNumber instanceof Long) {_				if (leftNumber instanceof Long && rightNumber instanceof Long) {_					this.exitTypeDescriptor = "J"__				}_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			if (leftNumber instanceof Integer && rightNumber instanceof Integer) {_				this.exitTypeDescriptor = "I"__			}_			return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__		}_		else if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,code,big,decimal,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,if,left,number,instanceof,double,right,number,instanceof,double,if,left,number,instanceof,double,right,number,instanceof,double,this,exit,type,descriptor,d,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,number,instanceof,float,right,number,instanceof,float,if,left,number,instanceof,float,right,number,instanceof,float,this,exit,type,descriptor,f,return,new,typed,value,left,number,float,value,right,number,float,value,if,left,number,instanceof,long,right,number,instanceof,long,if,left,number,instanceof,long,right,number,instanceof,long,this,exit,type,descriptor,j,return,new,typed,value,left,number,long,value,right,number,long,value,if,left,number,instanceof,integer,right,number,instanceof,integer,this,exit,type,descriptor,i,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1405514506;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>{@code BigDecimal}_<li>doubles_<li>longs_<li>integers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {__		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand__			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				if (leftNumber instanceof Double && rightNumber instanceof Double) {_					this.exitTypeDescriptor = "D"__				}_				return new TypedValue(leftNumber.doubleValue()_						* rightNumber.doubleValue())__			}__			if (leftNumber instanceof Float || rightNumber instanceof Float) {_				if (leftNumber instanceof Float && rightNumber instanceof Float) {_					this.exitTypeDescriptor = "F"__				}_				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}__			if (leftNumber instanceof Long || rightNumber instanceof Long) {_				if (leftNumber instanceof Long && rightNumber instanceof Long) {_					this.exitTypeDescriptor = "J"__				}_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			if (leftNumber instanceof Integer && rightNumber instanceof Integer) {_				this.exitTypeDescriptor = "I"__			}_			return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__		}_		else if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,code,big,decimal,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,if,left,number,instanceof,double,right,number,instanceof,double,if,left,number,instanceof,double,right,number,instanceof,double,this,exit,type,descriptor,d,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,number,instanceof,float,right,number,instanceof,float,if,left,number,instanceof,float,right,number,instanceof,float,this,exit,type,descriptor,f,return,new,typed,value,left,number,float,value,right,number,float,value,if,left,number,instanceof,long,right,number,instanceof,long,if,left,number,instanceof,long,right,number,instanceof,long,this,exit,type,descriptor,j,return,new,typed,value,left,number,long,value,right,number,long,value,if,left,number,instanceof,integer,right,number,instanceof,integer,this,exit,type,descriptor,i,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1406656976;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>{@code BigDecimal}_<li>doubles_<li>longs_<li>integers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {__		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand__			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}__			if (leftNumber instanceof Double || rightNumber instanceof Double) {_				if (leftNumber instanceof Double && rightNumber instanceof Double) {_					this.exitTypeDescriptor = "D"__				}_				return new TypedValue(leftNumber.doubleValue()_						* rightNumber.doubleValue())__			}__			if (leftNumber instanceof Float || rightNumber instanceof Float) {_				if (leftNumber instanceof Float && rightNumber instanceof Float) {_					this.exitTypeDescriptor = "F"__				}_				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}__			if (leftNumber instanceof Long || rightNumber instanceof Long) {_				if (leftNumber instanceof Long && rightNumber instanceof Long) {_					this.exitTypeDescriptor = "J"__				}_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			if (leftNumber instanceof Integer && rightNumber instanceof Integer) {_				this.exitTypeDescriptor = "I"__			}_			return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__		}_		else if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,code,big,decimal,li,doubles,li,longs,li,integers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,if,left,number,instanceof,double,right,number,instanceof,double,if,left,number,instanceof,double,right,number,instanceof,double,this,exit,type,descriptor,d,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,number,instanceof,float,right,number,instanceof,float,if,left,number,instanceof,float,right,number,instanceof,float,this,exit,type,descriptor,f,return,new,typed,value,left,number,float,value,right,number,float,value,if,left,number,instanceof,long,right,number,instanceof,long,if,left,number,instanceof,long,right,number,instanceof,long,this,exit,type,descriptor,j,return,new,typed,value,left,number,long,value,right,number,long,value,if,left,number,instanceof,integer,right,number,instanceof,integer,this,exit,type,descriptor,i,return,new,typed,value,left,number,int,value,right,number,int,value,else,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1412630983;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>numbers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand___			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}_			else if (leftNumber instanceof Double || rightNumber instanceof Double) {_				if (leftNumber.getClass() == rightNumber.getClass()) {_					this.exitTypeDescriptor = "D"__				}_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Float || rightNumber instanceof Float) {_				if (leftNumber.getClass() == rightNumber.getClass()) {_					this.exitTypeDescriptor = "F"__				}_				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}_			else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {_				BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)__				BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)__				return new TypedValue(leftBigInteger.multiply(rightBigInteger))__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				if (leftNumber.getClass() == rightNumber.getClass()) {_					this.exitTypeDescriptor = "J"__				}_				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) {_				if (leftNumber instanceof Integer && rightNumber instanceof Integer) {_					this.exitTypeDescriptor = "I"__				}_				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_			else {_				_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_		}__		if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,numbers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,else,if,left,number,instanceof,double,right,number,instanceof,double,if,left,number,get,class,right,number,get,class,this,exit,type,descriptor,d,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,float,right,number,instanceof,float,if,left,number,get,class,right,number,get,class,this,exit,type,descriptor,f,return,new,typed,value,left,number,float,value,right,number,float,value,else,if,left,number,instanceof,big,integer,right,number,instanceof,big,integer,big,integer,left,big,integer,number,utils,convert,number,to,target,class,left,number,big,integer,class,big,integer,right,big,integer,number,utils,convert,number,to,target,class,right,number,big,integer,class,return,new,typed,value,left,big,integer,multiply,right,big,integer,else,if,left,number,instanceof,long,right,number,instanceof,long,if,left,number,get,class,right,number,get,class,this,exit,type,descriptor,j,return,new,typed,value,left,number,long,value,right,number,long,value,else,if,code,flow,is,integer,for,numeric,op,left,number,code,flow,is,integer,for,numeric,op,right,number,if,left,number,instanceof,integer,right,number,instanceof,integer,this,exit,type,descriptor,i,return,new,typed,value,left,number,int,value,right,number,int,value,else,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1425666762;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>numbers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand___			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}_			else if (leftNumber instanceof Double || rightNumber instanceof Double) {_				this.exitTypeDescriptor = "D"__				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Float || rightNumber instanceof Float) {_				this.exitTypeDescriptor = "F"__				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}_			else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {_				BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)__				BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)__				return new TypedValue(leftBigInteger.multiply(rightBigInteger))__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				this.exitTypeDescriptor = "J"__				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) {_				this.exitTypeDescriptor = "I"__				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_			else {_				_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_		}__		if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,numbers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,else,if,left,number,instanceof,double,right,number,instanceof,double,this,exit,type,descriptor,d,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,float,right,number,instanceof,float,this,exit,type,descriptor,f,return,new,typed,value,left,number,float,value,right,number,float,value,else,if,left,number,instanceof,big,integer,right,number,instanceof,big,integer,big,integer,left,big,integer,number,utils,convert,number,to,target,class,left,number,big,integer,class,big,integer,right,big,integer,number,utils,convert,number,to,target,class,right,number,big,integer,class,return,new,typed,value,left,big,integer,multiply,right,big,integer,else,if,left,number,instanceof,long,right,number,instanceof,long,this,exit,type,descriptor,j,return,new,typed,value,left,number,long,value,right,number,long,value,else,if,code,flow,is,integer,for,numeric,op,left,number,code,flow,is,integer,for,numeric,op,right,number,this,exit,type,descriptor,i,return,new,typed,value,left,number,int,value,right,number,int,value,else,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1498780456;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>numbers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand___			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}_			else if (leftNumber instanceof Double || rightNumber instanceof Double) {_				this.exitTypeDescriptor = "D"__				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Float || rightNumber instanceof Float) {_				this.exitTypeDescriptor = "F"__				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}_			else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {_				BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)__				BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)__				return new TypedValue(leftBigInteger.multiply(rightBigInteger))__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				this.exitTypeDescriptor = "J"__				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) {_				this.exitTypeDescriptor = "I"__				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_			else {_				_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_		}__		if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,numbers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,else,if,left,number,instanceof,double,right,number,instanceof,double,this,exit,type,descriptor,d,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,float,right,number,instanceof,float,this,exit,type,descriptor,f,return,new,typed,value,left,number,float,value,right,number,float,value,else,if,left,number,instanceof,big,integer,right,number,instanceof,big,integer,big,integer,left,big,integer,number,utils,convert,number,to,target,class,left,number,big,integer,class,big,integer,right,big,integer,number,utils,convert,number,to,target,class,right,number,big,integer,class,return,new,typed,value,left,big,integer,multiply,right,big,integer,else,if,left,number,instanceof,long,right,number,instanceof,long,this,exit,type,descriptor,j,return,new,typed,value,left,number,long,value,right,number,long,value,else,if,code,flow,is,integer,for,numeric,op,left,number,code,flow,is,integer,for,numeric,op,right,number,this,exit,type,descriptor,i,return,new,typed,value,left,number,int,value,right,number,int,value,else,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1530174524;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>numbers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand___			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}_			else if (leftNumber instanceof Double || rightNumber instanceof Double) {_				this.exitTypeDescriptor = "D"__				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Float || rightNumber instanceof Float) {_				this.exitTypeDescriptor = "F"__				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}_			else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {_				BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)__				BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)__				return new TypedValue(leftBigInteger.multiply(rightBigInteger))__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				this.exitTypeDescriptor = "J"__				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) {_				this.exitTypeDescriptor = "I"__				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_			else {_				_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_		}__		if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,numbers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,else,if,left,number,instanceof,double,right,number,instanceof,double,this,exit,type,descriptor,d,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,float,right,number,instanceof,float,this,exit,type,descriptor,f,return,new,typed,value,left,number,float,value,right,number,float,value,else,if,left,number,instanceof,big,integer,right,number,instanceof,big,integer,big,integer,left,big,integer,number,utils,convert,number,to,target,class,left,number,big,integer,class,big,integer,right,big,integer,number,utils,convert,number,to,target,class,right,number,big,integer,class,return,new,typed,value,left,big,integer,multiply,right,big,integer,else,if,left,number,instanceof,long,right,number,instanceof,long,this,exit,type,descriptor,j,return,new,typed,value,left,number,long,value,right,number,long,value,else,if,code,flow,is,integer,for,numeric,op,left,number,code,flow,is,integer,for,numeric,op,right,number,this,exit,type,descriptor,i,return,new,typed,value,left,number,int,value,right,number,int,value,else,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
OpMultiply -> @Override 	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException;1548712256;Implements the {@code multiply} operator directly here for certain types_of supported operands and otherwise delegates to any registered overloader_for types not supported here._<p>Supported operand types:_<ul>_<li>numbers_<li>String and int ('abc' * 2 == 'abcabc')_</ul>;@Override_	public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {_		Object leftOperand = getLeftOperand().getValueInternal(state).getValue()__		Object rightOperand = getRightOperand().getValueInternal(state).getValue()___		if (leftOperand instanceof Number && rightOperand instanceof Number) {_			Number leftNumber = (Number) leftOperand__			Number rightNumber = (Number) rightOperand___			if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {_				BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)__				BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)__				return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))__			}_			else if (leftNumber instanceof Double || rightNumber instanceof Double) {_				this.exitTypeDescriptor = "D"__				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_			else if (leftNumber instanceof Float || rightNumber instanceof Float) {_				this.exitTypeDescriptor = "F"__				return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())__			}_			else if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {_				BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)__				BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)__				return new TypedValue(leftBigInteger.multiply(rightBigInteger))__			}_			else if (leftNumber instanceof Long || rightNumber instanceof Long) {_				this.exitTypeDescriptor = "J"__				return new TypedValue(leftNumber.longValue() * rightNumber.longValue())__			}_			else if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) {_				this.exitTypeDescriptor = "I"__				return new TypedValue(leftNumber.intValue() * rightNumber.intValue())__			}_			else {_				_				return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())__			}_		}__		if (leftOperand instanceof String && rightOperand instanceof Integer) {_			int repeats = (Integer) rightOperand__			StringBuilder result = new StringBuilder()__			for (int i = 0_ i < repeats_ i++) {_				result.append(leftOperand)__			}_			return new TypedValue(result.toString())__		}__		return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)__	};implements,the,code,multiply,operator,directly,here,for,certain,types,of,supported,operands,and,otherwise,delegates,to,any,registered,overloader,for,types,not,supported,here,p,supported,operand,types,ul,li,numbers,li,string,and,int,abc,2,abcabc,ul;override,public,typed,value,get,value,internal,expression,state,state,throws,evaluation,exception,object,left,operand,get,left,operand,get,value,internal,state,get,value,object,right,operand,get,right,operand,get,value,internal,state,get,value,if,left,operand,instanceof,number,right,operand,instanceof,number,number,left,number,number,left,operand,number,right,number,number,right,operand,if,left,number,instanceof,big,decimal,right,number,instanceof,big,decimal,big,decimal,left,big,decimal,number,utils,convert,number,to,target,class,left,number,big,decimal,class,big,decimal,right,big,decimal,number,utils,convert,number,to,target,class,right,number,big,decimal,class,return,new,typed,value,left,big,decimal,multiply,right,big,decimal,else,if,left,number,instanceof,double,right,number,instanceof,double,this,exit,type,descriptor,d,return,new,typed,value,left,number,double,value,right,number,double,value,else,if,left,number,instanceof,float,right,number,instanceof,float,this,exit,type,descriptor,f,return,new,typed,value,left,number,float,value,right,number,float,value,else,if,left,number,instanceof,big,integer,right,number,instanceof,big,integer,big,integer,left,big,integer,number,utils,convert,number,to,target,class,left,number,big,integer,class,big,integer,right,big,integer,number,utils,convert,number,to,target,class,right,number,big,integer,class,return,new,typed,value,left,big,integer,multiply,right,big,integer,else,if,left,number,instanceof,long,right,number,instanceof,long,this,exit,type,descriptor,j,return,new,typed,value,left,number,long,value,right,number,long,value,else,if,code,flow,is,integer,for,numeric,op,left,number,code,flow,is,integer,for,numeric,op,right,number,this,exit,type,descriptor,i,return,new,typed,value,left,number,int,value,right,number,int,value,else,return,new,typed,value,left,number,double,value,right,number,double,value,if,left,operand,instanceof,string,right,operand,instanceof,integer,int,repeats,integer,right,operand,string,builder,result,new,string,builder,for,int,i,0,i,repeats,i,result,append,left,operand,return,new,typed,value,result,to,string,return,state,operate,operation,multiply,left,operand,right,operand
