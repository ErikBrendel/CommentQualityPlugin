commented;modifiers;parameterAmount;loc;comment;code
true;;0;2;/**  * Return an array of classes for which this resolver should be called.  * <p>>Returning {@code null} indicates this is a general resolver that  * can be called in an attempt to resolve a property on any type.  * @return an array of classes that this resolver is suitable for  * (or {@code null} if a general resolver)  */ ;/**  * Return an array of classes for which this resolver should be called.  * <p>>Returning {@code null} indicates this is a general resolver that  * can be called in an attempt to resolve a property on any type.  * @return an array of classes that this resolver is suitable for  * (or {@code null} if a general resolver)  */ @Nullable Class<?>[] getSpecificTargetClasses().
true;;3;1;/**  * Called to determine if a resolver instance is able to access a specified property  * on a specified target object.  * @param context the evaluation context in which the access is being attempted  * @param target the target object upon which the property is being accessed  * @param name the name of the property being accessed  * @return true if this resolver is able to read the property  * @throws AccessException if there is any problem determining whether the property can be read  */ ;/**  * Called to determine if a resolver instance is able to access a specified property  * on a specified target object.  * @param context the evaluation context in which the access is being attempted  * @param target the target object upon which the property is being accessed  * @param name the name of the property being accessed  * @return true if this resolver is able to read the property  * @throws AccessException if there is any problem determining whether the property can be read  */ boolean canRead(EvaluationContext context, @Nullable Object target, String name) throws AccessException.
true;;3;1;/**  * Called to read a property from a specified target object.  * Should only succeed if {@link #canRead} also returns {@code true}.  * @param context the evaluation context in which the access is being attempted  * @param target the target object upon which the property is being accessed  * @param name the name of the property being accessed  * @return a TypedValue object wrapping the property value read and a type descriptor for it  * @throws AccessException if there is any problem accessing the property value  */ ;/**  * Called to read a property from a specified target object.  * Should only succeed if {@link #canRead} also returns {@code true}.  * @param context the evaluation context in which the access is being attempted  * @param target the target object upon which the property is being accessed  * @param name the name of the property being accessed  * @return a TypedValue object wrapping the property value read and a type descriptor for it  * @throws AccessException if there is any problem accessing the property value  */ TypedValue read(EvaluationContext context, @Nullable Object target, String name) throws AccessException.
true;;3;1;/**  * Called to determine if a resolver instance is able to write to a specified  * property on a specified target object.  * @param context the evaluation context in which the access is being attempted  * @param target the target object upon which the property is being accessed  * @param name the name of the property being accessed  * @return true if this resolver is able to write to the property  * @throws AccessException if there is any problem determining whether the  * property can be written to  */ ;/**  * Called to determine if a resolver instance is able to write to a specified  * property on a specified target object.  * @param context the evaluation context in which the access is being attempted  * @param target the target object upon which the property is being accessed  * @param name the name of the property being accessed  * @return true if this resolver is able to write to the property  * @throws AccessException if there is any problem determining whether the  * property can be written to  */ boolean canWrite(EvaluationContext context, @Nullable Object target, String name) throws AccessException.
true;;4;2;/**  * Called to write to a property on a specified target object.  * Should only succeed if {@link #canWrite} also returns {@code true}.  * @param context the evaluation context in which the access is being attempted  * @param target the target object upon which the property is being accessed  * @param name the name of the property being accessed  * @param newValue the new value for the property  * @throws AccessException if there is any problem writing to the property value  */ ;/**  * Called to write to a property on a specified target object.  * Should only succeed if {@link #canWrite} also returns {@code true}.  * @param context the evaluation context in which the access is being attempted  * @param target the target object upon which the property is being accessed  * @param name the name of the property being accessed  * @param newValue the new value for the property  * @throws AccessException if there is any problem writing to the property value  */ void write(EvaluationContext context, @Nullable Object target, String name, @Nullable Object newValue) throws AccessException.
