commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Return the default root context object against which unqualified  * properties/methods/etc should be resolved. This can be overridden  * when evaluating an expression.  */ ;/**  * Return the default root context object against which unqualified  * properties/methods/etc should be resolved. This can be overridden  * when evaluating an expression.  */ TypedValue getRootObject().
true;;0;1;/**  * Return a list of accessors that will be asked in turn to read/write a property.  */ ;/**  * Return a list of accessors that will be asked in turn to read/write a property.  */ List<PropertyAccessor> getPropertyAccessors().
true;;0;1;/**  * Return a list of resolvers that will be asked in turn to locate a constructor.  */ ;/**  * Return a list of resolvers that will be asked in turn to locate a constructor.  */ List<ConstructorResolver> getConstructorResolvers().
true;;0;1;/**  * Return a list of resolvers that will be asked in turn to locate a method.  */ ;/**  * Return a list of resolvers that will be asked in turn to locate a method.  */ List<MethodResolver> getMethodResolvers().
true;;0;2;/**  * Return a bean resolver that can look up beans by name.  */ ;/**  * Return a bean resolver that can look up beans by name.  */ @Nullable BeanResolver getBeanResolver().
true;;0;1;/**  * Return a type locator that can be used to find types, either by short or  * fully qualified name.  */ ;/**  * Return a type locator that can be used to find types, either by short or  * fully qualified name.  */ TypeLocator getTypeLocator().
true;;0;1;/**  * Return a type converter that can convert (or coerce) a value from one type to another.  */ ;/**  * Return a type converter that can convert (or coerce) a value from one type to another.  */ TypeConverter getTypeConverter().
true;;0;1;/**  * Return a type comparator for comparing pairs of objects for equality.  */ ;/**  * Return a type comparator for comparing pairs of objects for equality.  */ TypeComparator getTypeComparator().
true;;0;1;/**  * Return an operator overloader that may support mathematical operations  * between more than the standard set of types.  */ ;/**  * Return an operator overloader that may support mathematical operations  * between more than the standard set of types.  */ OperatorOverloader getOperatorOverloader().
true;;2;1;/**  * Set a named variable within this evaluation context to a specified value.  * @param name variable to set  * @param value value to be placed in the variable  */ ;/**  * Set a named variable within this evaluation context to a specified value.  * @param name variable to set  * @param value value to be placed in the variable  */ void setVariable(String name, @Nullable Object value).
true;;1;2;/**  * Look up a named variable within this evaluation context.  * @param name variable to lookup  * @return the value of the variable, or {@code null} if not found  */ ;/**  * Look up a named variable within this evaluation context.  * @param name variable to lookup  * @return the value of the variable, or {@code null} if not found  */ @Nullable Object lookupVariable(String name).
