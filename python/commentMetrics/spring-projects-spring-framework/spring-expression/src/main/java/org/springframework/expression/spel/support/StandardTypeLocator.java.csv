commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Register a new import prefix that will be used when searching for unqualified types.  * Expected format is something like "java.lang".  * @param prefix the prefix to register  */ ;/**  * Register a new import prefix that will be used when searching for unqualified types.  * Expected format is something like "java.lang".  * @param prefix the prefix to register  */ public void registerImport(String prefix) {     this.knownPackagePrefixes.add(prefix). }
true;public;1;3;/**  * Remove that specified prefix from this locator's list of imports.  * @param prefix the prefix to remove  */ ;/**  * Remove that specified prefix from this locator's list of imports.  * @param prefix the prefix to remove  */ public void removeImport(String prefix) {     this.knownPackagePrefixes.remove(prefix). }
true;public;0;3;/**  * Return a list of all the import prefixes registered with this StandardTypeLocator.  * @return a list of registered import prefixes  */ ;/**  * Return a list of all the import prefixes registered with this StandardTypeLocator.  * @return a list of registered import prefixes  */ public List<String> getImportPrefixes() {     return Collections.unmodifiableList(this.knownPackagePrefixes). }
true;public;1;20;/**  * Find a (possibly unqualified) type reference - first using the type name as-is,  * then trying any registered prefixes if the type name cannot be found.  * @param typeName the type to locate  * @return the class object for the type  * @throws EvaluationException if the type cannot be found  */ ;/**  * Find a (possibly unqualified) type reference - first using the type name as-is,  * then trying any registered prefixes if the type name cannot be found.  * @param typeName the type to locate  * @return the class object for the type  * @throws EvaluationException if the type cannot be found  */ @Override public Class<?> findType(String typeName) throws EvaluationException {     String nameToLookup = typeName.     try {         return ClassUtils.forName(nameToLookup, this.classLoader).     } catch (ClassNotFoundException ey) {     // try any registered prefixes before giving up     }     for (String prefix : this.knownPackagePrefixes) {         try {             nameToLookup = prefix + '.' + typeName.             return ClassUtils.forName(nameToLookup, this.classLoader).         } catch (ClassNotFoundException ex) {         // might be a different prefix         }     }     throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName). }
