# id;timestamp;commentText;codeText;commentWords;codeWords
StandardTypeLocator -> @Override 	public Class<?> findType(String typename) throws EvaluationException;1356735495;Find a (possibly unqualified) type reference - first using the typename as is, then trying any registered_prefixes if the typename cannot be found._@param typename the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typename) throws EvaluationException {_		String nameToLookup = typename__		try {_			return this.loader.loadClass(nameToLookup)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = new StringBuilder().append(prefix).append(".").append(typename).toString()__				return this.loader.loadClass(nameToLookup)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typename)__	};find,a,possibly,unqualified,type,reference,first,using,the,typename,as,is,then,trying,any,registered,prefixes,if,the,typename,cannot,be,found,param,typename,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,typename,throws,evaluation,exception,string,name,to,lookup,typename,try,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,new,string,builder,append,prefix,append,append,typename,to,string,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,typename
StandardTypeLocator -> @Override 	public Class<?> findType(String typename) throws EvaluationException;1368482696;Find a (possibly unqualified) type reference - first using the typename as is, then trying any registered_prefixes if the typename cannot be found._@param typename the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typename) throws EvaluationException {_		String nameToLookup = typename__		try {_			return this.loader.loadClass(nameToLookup)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = new StringBuilder().append(prefix).append(".").append(typename).toString()__				return this.loader.loadClass(nameToLookup)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typename)__	};find,a,possibly,unqualified,type,reference,first,using,the,typename,as,is,then,trying,any,registered,prefixes,if,the,typename,cannot,be,found,param,typename,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,typename,throws,evaluation,exception,string,name,to,lookup,typename,try,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,new,string,builder,append,prefix,append,append,typename,to,string,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,typename
StandardTypeLocator -> @Override 	public Class<?> findType(String typename) throws EvaluationException;1372363092;Find a (possibly unqualified) type reference - first using the typename as is, then trying any registered_prefixes if the typename cannot be found._@param typename the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typename) throws EvaluationException {_		String nameToLookup = typename__		try {_			return this.loader.loadClass(nameToLookup)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = new StringBuilder().append(prefix).append(".").append(typename).toString()__				return this.loader.loadClass(nameToLookup)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typename)__	};find,a,possibly,unqualified,type,reference,first,using,the,typename,as,is,then,trying,any,registered,prefixes,if,the,typename,cannot,be,found,param,typename,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,typename,throws,evaluation,exception,string,name,to,lookup,typename,try,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,new,string,builder,append,prefix,append,append,typename,to,string,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,typename
StandardTypeLocator -> public StandardTypeLocator(@Nullable ClassLoader classLoader);1496837955;Create a StandardTypeLocator for the given ClassLoader._@param classLoader the ClassLoader to delegate to;public StandardTypeLocator(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		_		registerImport("java.lang")__	};create,a,standard,type,locator,for,the,given,class,loader,param,class,loader,the,class,loader,to,delegate,to;public,standard,type,locator,nullable,class,loader,class,loader,this,class,loader,class,loader,register,import,java,lang
StandardTypeLocator -> public StandardTypeLocator(@Nullable ClassLoader classLoader);1498780456;Create a StandardTypeLocator for the given ClassLoader._@param classLoader the ClassLoader to delegate to;public StandardTypeLocator(@Nullable ClassLoader classLoader) {_		this.classLoader = classLoader__		_		registerImport("java.lang")__	};create,a,standard,type,locator,for,the,given,class,loader,param,class,loader,the,class,loader,to,delegate,to;public,standard,type,locator,nullable,class,loader,class,loader,this,class,loader,class,loader,register,import,java,lang
StandardTypeLocator -> public List<String> getImportPrefixes();1328020251;Return a list of all the import prefixes registered with this StandardTypeLocator._@return list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1356735495;Return a list of all the import prefixes registered with this StandardTypeLocator._@return list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1357119239;Return a list of all the import prefixes registered with this StandardTypeLocator._@return list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1368482696;Return a list of all the import prefixes registered with this StandardTypeLocator._@return list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1372363092;Return a list of all the import prefixes registered with this StandardTypeLocator._@return list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1389887689;Return a list of all the import prefixes registered with this StandardTypeLocator._@return a list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,a,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1398638841;Return a list of all the import prefixes registered with this StandardTypeLocator._@return a list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,a,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1467730834;Return a list of all the import prefixes registered with this StandardTypeLocator._@return a list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,a,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1477045587;Return a list of all the import prefixes registered with this StandardTypeLocator._@return a list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,a,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1496837955;Return a list of all the import prefixes registered with this StandardTypeLocator._@return a list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,a,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public List<String> getImportPrefixes();1498780456;Return a list of all the import prefixes registered with this StandardTypeLocator._@return a list of registered import prefixes;public List<String> getImportPrefixes() {_		return Collections.unmodifiableList(this.knownPackagePrefixes)__	};return,a,list,of,all,the,import,prefixes,registered,with,this,standard,type,locator,return,a,list,of,registered,import,prefixes;public,list,string,get,import,prefixes,return,collections,unmodifiable,list,this,known,package,prefixes
StandardTypeLocator -> public StandardTypeLocator();1389887689;Create a StandardTypeLocator for the default ClassLoader_(typically, the thread context ClassLoader).;public StandardTypeLocator() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,standard,type,locator,for,the,default,class,loader,typically,the,thread,context,class,loader;public,standard,type,locator,this,class,utils,get,default,class,loader
StandardTypeLocator -> public StandardTypeLocator();1398638841;Create a StandardTypeLocator for the default ClassLoader_(typically, the thread context ClassLoader).;public StandardTypeLocator() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,standard,type,locator,for,the,default,class,loader,typically,the,thread,context,class,loader;public,standard,type,locator,this,class,utils,get,default,class,loader
StandardTypeLocator -> public StandardTypeLocator();1467730834;Create a StandardTypeLocator for the default ClassLoader_(typically, the thread context ClassLoader).;public StandardTypeLocator() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,standard,type,locator,for,the,default,class,loader,typically,the,thread,context,class,loader;public,standard,type,locator,this,class,utils,get,default,class,loader
StandardTypeLocator -> public StandardTypeLocator();1477045587;Create a StandardTypeLocator for the default ClassLoader_(typically, the thread context ClassLoader).;public StandardTypeLocator() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,standard,type,locator,for,the,default,class,loader,typically,the,thread,context,class,loader;public,standard,type,locator,this,class,utils,get,default,class,loader
StandardTypeLocator -> public StandardTypeLocator();1496837955;Create a StandardTypeLocator for the default ClassLoader_(typically, the thread context ClassLoader).;public StandardTypeLocator() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,standard,type,locator,for,the,default,class,loader,typically,the,thread,context,class,loader;public,standard,type,locator,this,class,utils,get,default,class,loader
StandardTypeLocator -> public StandardTypeLocator();1498780456;Create a StandardTypeLocator for the default ClassLoader_(typically, the thread context ClassLoader).;public StandardTypeLocator() {_		this(ClassUtils.getDefaultClassLoader())__	};create,a,standard,type,locator,for,the,default,class,loader,typically,the,thread,context,class,loader;public,standard,type,locator,this,class,utils,get,default,class,loader
StandardTypeLocator -> public void removeImport(String prefix);1389887689;Remove that specified prefix from this locator's list of imports._@param prefix the prefix to remove;public void removeImport(String prefix) {_		this.knownPackagePrefixes.remove(prefix)__	};remove,that,specified,prefix,from,this,locator,s,list,of,imports,param,prefix,the,prefix,to,remove;public,void,remove,import,string,prefix,this,known,package,prefixes,remove,prefix
StandardTypeLocator -> public void removeImport(String prefix);1398638841;Remove that specified prefix from this locator's list of imports._@param prefix the prefix to remove;public void removeImport(String prefix) {_		this.knownPackagePrefixes.remove(prefix)__	};remove,that,specified,prefix,from,this,locator,s,list,of,imports,param,prefix,the,prefix,to,remove;public,void,remove,import,string,prefix,this,known,package,prefixes,remove,prefix
StandardTypeLocator -> public void removeImport(String prefix);1467730834;Remove that specified prefix from this locator's list of imports._@param prefix the prefix to remove;public void removeImport(String prefix) {_		this.knownPackagePrefixes.remove(prefix)__	};remove,that,specified,prefix,from,this,locator,s,list,of,imports,param,prefix,the,prefix,to,remove;public,void,remove,import,string,prefix,this,known,package,prefixes,remove,prefix
StandardTypeLocator -> public void removeImport(String prefix);1477045587;Remove that specified prefix from this locator's list of imports._@param prefix the prefix to remove;public void removeImport(String prefix) {_		this.knownPackagePrefixes.remove(prefix)__	};remove,that,specified,prefix,from,this,locator,s,list,of,imports,param,prefix,the,prefix,to,remove;public,void,remove,import,string,prefix,this,known,package,prefixes,remove,prefix
StandardTypeLocator -> public void removeImport(String prefix);1496837955;Remove that specified prefix from this locator's list of imports._@param prefix the prefix to remove;public void removeImport(String prefix) {_		this.knownPackagePrefixes.remove(prefix)__	};remove,that,specified,prefix,from,this,locator,s,list,of,imports,param,prefix,the,prefix,to,remove;public,void,remove,import,string,prefix,this,known,package,prefixes,remove,prefix
StandardTypeLocator -> public void removeImport(String prefix);1498780456;Remove that specified prefix from this locator's list of imports._@param prefix the prefix to remove;public void removeImport(String prefix) {_		this.knownPackagePrefixes.remove(prefix)__	};remove,that,specified,prefix,from,this,locator,s,list,of,imports,param,prefix,the,prefix,to,remove;public,void,remove,import,string,prefix,this,known,package,prefixes,remove,prefix
StandardTypeLocator -> @Override 	public Class<?> findType(String typeName) throws EvaluationException;1389887689;Find a (possibly unqualified) type reference - first using the type name as-is,_then trying any registered prefixes if the type name cannot be found._@param typeName the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typeName) throws EvaluationException {_		String nameToLookup = typeName__		try {_			return this.classLoader.loadClass(nameToLookup)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = prefix + "." + typeName__				return this.classLoader.loadClass(nameToLookup)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName)__	};find,a,possibly,unqualified,type,reference,first,using,the,type,name,as,is,then,trying,any,registered,prefixes,if,the,type,name,cannot,be,found,param,type,name,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,type,name,throws,evaluation,exception,string,name,to,lookup,type,name,try,return,this,class,loader,load,class,name,to,lookup,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,prefix,type,name,return,this,class,loader,load,class,name,to,lookup,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,type,name
StandardTypeLocator -> @Override 	public Class<?> findType(String typeName) throws EvaluationException;1398638841;Find a (possibly unqualified) type reference - first using the type name as-is,_then trying any registered prefixes if the type name cannot be found._@param typeName the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typeName) throws EvaluationException {_		String nameToLookup = typeName__		try {_			return ClassUtils.forName(nameToLookup, this.classLoader)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = prefix + "." + typeName__				return ClassUtils.forName(nameToLookup, this.classLoader)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName)__	};find,a,possibly,unqualified,type,reference,first,using,the,type,name,as,is,then,trying,any,registered,prefixes,if,the,type,name,cannot,be,found,param,type,name,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,type,name,throws,evaluation,exception,string,name,to,lookup,type,name,try,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,prefix,type,name,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,type,name
StandardTypeLocator -> @Override 	public Class<?> findType(String typeName) throws EvaluationException;1467730834;Find a (possibly unqualified) type reference - first using the type name as-is,_then trying any registered prefixes if the type name cannot be found._@param typeName the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typeName) throws EvaluationException {_		String nameToLookup = typeName__		try {_			return ClassUtils.forName(nameToLookup, this.classLoader)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = prefix + "." + typeName__				return ClassUtils.forName(nameToLookup, this.classLoader)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName)__	};find,a,possibly,unqualified,type,reference,first,using,the,type,name,as,is,then,trying,any,registered,prefixes,if,the,type,name,cannot,be,found,param,type,name,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,type,name,throws,evaluation,exception,string,name,to,lookup,type,name,try,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,prefix,type,name,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,type,name
StandardTypeLocator -> @Override 	public Class<?> findType(String typeName) throws EvaluationException;1477045587;Find a (possibly unqualified) type reference - first using the type name as-is,_then trying any registered prefixes if the type name cannot be found._@param typeName the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typeName) throws EvaluationException {_		String nameToLookup = typeName__		try {_			return ClassUtils.forName(nameToLookup, this.classLoader)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = prefix + '.' + typeName__				return ClassUtils.forName(nameToLookup, this.classLoader)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName)__	};find,a,possibly,unqualified,type,reference,first,using,the,type,name,as,is,then,trying,any,registered,prefixes,if,the,type,name,cannot,be,found,param,type,name,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,type,name,throws,evaluation,exception,string,name,to,lookup,type,name,try,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,prefix,type,name,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,type,name
StandardTypeLocator -> @Override 	public Class<?> findType(String typeName) throws EvaluationException;1496837955;Find a (possibly unqualified) type reference - first using the type name as-is,_then trying any registered prefixes if the type name cannot be found._@param typeName the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typeName) throws EvaluationException {_		String nameToLookup = typeName__		try {_			return ClassUtils.forName(nameToLookup, this.classLoader)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = prefix + '.' + typeName__				return ClassUtils.forName(nameToLookup, this.classLoader)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName)__	};find,a,possibly,unqualified,type,reference,first,using,the,type,name,as,is,then,trying,any,registered,prefixes,if,the,type,name,cannot,be,found,param,type,name,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,type,name,throws,evaluation,exception,string,name,to,lookup,type,name,try,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,prefix,type,name,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,type,name
StandardTypeLocator -> @Override 	public Class<?> findType(String typeName) throws EvaluationException;1498780456;Find a (possibly unqualified) type reference - first using the type name as-is,_then trying any registered prefixes if the type name cannot be found._@param typeName the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;@Override_	public Class<?> findType(String typeName) throws EvaluationException {_		String nameToLookup = typeName__		try {_			return ClassUtils.forName(nameToLookup, this.classLoader)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = prefix + '.' + typeName__				return ClassUtils.forName(nameToLookup, this.classLoader)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typeName)__	};find,a,possibly,unqualified,type,reference,first,using,the,type,name,as,is,then,trying,any,registered,prefixes,if,the,type,name,cannot,be,found,param,type,name,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;override,public,class,find,type,string,type,name,throws,evaluation,exception,string,name,to,lookup,type,name,try,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,prefix,type,name,return,class,utils,for,name,name,to,lookup,this,class,loader,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,type,name
StandardTypeLocator -> public void registerImport(String prefix);1328020251;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1356735495;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1357119239;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1368482696;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1372363092;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1389887689;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1398638841;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1467730834;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1477045587;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1496837955;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public void registerImport(String prefix);1498780456;Register a new import prefix that will be used when searching for unqualified types._Expected format is something like "java.lang"._@param prefix the prefix to register;public void registerImport(String prefix) {_		this.knownPackagePrefixes.add(prefix)__	};register,a,new,import,prefix,that,will,be,used,when,searching,for,unqualified,types,expected,format,is,something,like,java,lang,param,prefix,the,prefix,to,register;public,void,register,import,string,prefix,this,known,package,prefixes,add,prefix
StandardTypeLocator -> public Class<?> findType(String typename) throws EvaluationException;1328020251;Find a (possibly unqualified) type reference - first using the typename as is, then trying any registered_prefixes if the typename cannot be found._@param typename the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;public Class<?> findType(String typename) throws EvaluationException {_		String nameToLookup = typename__		try {_			return this.loader.loadClass(nameToLookup)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = new StringBuilder().append(prefix).append(".").append(typename).toString()__				return this.loader.loadClass(nameToLookup)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typename)__	};find,a,possibly,unqualified,type,reference,first,using,the,typename,as,is,then,trying,any,registered,prefixes,if,the,typename,cannot,be,found,param,typename,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;public,class,find,type,string,typename,throws,evaluation,exception,string,name,to,lookup,typename,try,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,new,string,builder,append,prefix,append,append,typename,to,string,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,typename
StandardTypeLocator -> public Class<?> findType(String typename) throws EvaluationException;1357119239;Find a (possibly unqualified) type reference - first using the typename as is, then trying any registered_prefixes if the typename cannot be found._@param typename the type to locate_@return the class object for the type_@throws EvaluationException if the type cannot be found;public Class<?> findType(String typename) throws EvaluationException {_		String nameToLookup = typename__		try {_			return this.loader.loadClass(nameToLookup)__		}_		catch (ClassNotFoundException ey) {_			_		}_		for (String prefix : this.knownPackagePrefixes) {_			try {_				nameToLookup = new StringBuilder().append(prefix).append(".").append(typename).toString()__				return this.loader.loadClass(nameToLookup)__			}_			catch (ClassNotFoundException ex) {_				_			}_		}_		throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND, typename)__	};find,a,possibly,unqualified,type,reference,first,using,the,typename,as,is,then,trying,any,registered,prefixes,if,the,typename,cannot,be,found,param,typename,the,type,to,locate,return,the,class,object,for,the,type,throws,evaluation,exception,if,the,type,cannot,be,found;public,class,find,type,string,typename,throws,evaluation,exception,string,name,to,lookup,typename,try,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ey,for,string,prefix,this,known,package,prefixes,try,name,to,lookup,new,string,builder,append,prefix,append,append,typename,to,string,return,this,loader,load,class,name,to,lookup,catch,class,not,found,exception,ex,throw,new,spel,evaluation,exception,spel,message,typename
StandardTypeLocator -> public StandardTypeLocator(ClassLoader classLoader);1389887689;Create a StandardTypeLocator for the given ClassLoader._@param classLoader the ClassLoader to delegate to;public StandardTypeLocator(ClassLoader classLoader) {_		this.classLoader = classLoader__		_		registerImport("java.lang")__	};create,a,standard,type,locator,for,the,given,class,loader,param,class,loader,the,class,loader,to,delegate,to;public,standard,type,locator,class,loader,class,loader,this,class,loader,class,loader,register,import,java,lang
StandardTypeLocator -> public StandardTypeLocator(ClassLoader classLoader);1398638841;Create a StandardTypeLocator for the given ClassLoader._@param classLoader the ClassLoader to delegate to;public StandardTypeLocator(ClassLoader classLoader) {_		this.classLoader = classLoader__		_		registerImport("java.lang")__	};create,a,standard,type,locator,for,the,given,class,loader,param,class,loader,the,class,loader,to,delegate,to;public,standard,type,locator,class,loader,class,loader,this,class,loader,class,loader,register,import,java,lang
StandardTypeLocator -> public StandardTypeLocator(ClassLoader classLoader);1467730834;Create a StandardTypeLocator for the given ClassLoader._@param classLoader the ClassLoader to delegate to;public StandardTypeLocator(ClassLoader classLoader) {_		this.classLoader = classLoader__		_		registerImport("java.lang")__	};create,a,standard,type,locator,for,the,given,class,loader,param,class,loader,the,class,loader,to,delegate,to;public,standard,type,locator,class,loader,class,loader,this,class,loader,class,loader,register,import,java,lang
StandardTypeLocator -> public StandardTypeLocator(ClassLoader classLoader);1477045587;Create a StandardTypeLocator for the given ClassLoader._@param classLoader the ClassLoader to delegate to;public StandardTypeLocator(ClassLoader classLoader) {_		this.classLoader = classLoader__		_		registerImport("java.lang")__	};create,a,standard,type,locator,for,the,given,class,loader,param,class,loader,the,class,loader,to,delegate,to;public,standard,type,locator,class,loader,class,loader,this,class,loader,class,loader,register,import,java,lang
