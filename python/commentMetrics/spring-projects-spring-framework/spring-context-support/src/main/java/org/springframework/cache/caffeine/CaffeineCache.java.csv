commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final String getName() {     return this.name. }
false;public,final;0;4;;@Override public final com.github.benmanes.caffeine.cache.Cache<Object, Object> getNativeCache() {     return this.cache. }
false;public;1;9;;@Override @Nullable public ValueWrapper get(Object key) {     if (this.cache instanceof LoadingCache) {         Object value = ((LoadingCache<Object, Object>) this.cache).get(key).         return toValueWrapper(value).     }     return super.get(key). }
false;public;2;6;;@SuppressWarnings("unchecked") @Override @Nullable public <T> T get(Object key, final Callable<T> valueLoader) {     return (T) fromStoreValue(this.cache.get(key, new LoadFunction(valueLoader))). }
false;protected;1;5;;@Override @Nullable protected Object lookup(Object key) {     return this.cache.getIfPresent(key). }
false;public;2;4;;@Override public void put(Object key, @Nullable Object value) {     this.cache.put(key, toStoreValue(value)). }
false;public;2;7;;@Override @Nullable public ValueWrapper putIfAbsent(Object key, @Nullable final Object value) {     PutIfAbsentFunction callable = new PutIfAbsentFunction(value).     Object result = this.cache.get(key, callable).     return (callable.called ? null : toValueWrapper(result)). }
false;public;1;4;;@Override public void evict(Object key) {     this.cache.invalidate(key). }
false;public;0;4;;@Override public void clear() {     this.cache.invalidateAll(). }
false;public;1;5;;@Override public Object apply(Object key) {     this.called = true.     return toStoreValue(this.value). }
false;public;1;9;;@Override public Object apply(Object o) {     try {         return toStoreValue(this.valueLoader.call()).     } catch (Exception ex) {         throw new ValueRetrievalException(o, this.valueLoader, ex).     } }
