commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the backing JCache {@link CacheManager javax.cache.CacheManager}.  */ ;/**  * Set the backing JCache {@link CacheManager javax.cache.CacheManager}.  */ public void setCacheManager(@Nullable CacheManager cacheManager) {     this.cacheManager = cacheManager. }
true;public;0;4;/**  * Return the backing JCache {@link CacheManager javax.cache.CacheManager}.  */ ;/**  * Return the backing JCache {@link CacheManager javax.cache.CacheManager}.  */ @Nullable public CacheManager getCacheManager() {     return this.cacheManager. }
true;public;1;3;/**  * Specify whether to accept and convert {@code null} values for all caches  * in this cache manager.  * <p>Default is "true", despite JSR-107 itself not supporting {@code null} values.  * An internal holder object will be used to store user-level {@code null}s.  */ ;/**  * Specify whether to accept and convert {@code null} values for all caches  * in this cache manager.  * <p>Default is "true", despite JSR-107 itself not supporting {@code null} values.  * An internal holder object will be used to store user-level {@code null}s.  */ public void setAllowNullValues(boolean allowNullValues) {     this.allowNullValues = allowNullValues. }
true;public;0;3;/**  * Return whether this cache manager accepts and converts {@code null} values  * for all of its caches.  */ ;/**  * Return whether this cache manager accepts and converts {@code null} values  * for all of its caches.  */ public boolean isAllowNullValues() {     return this.allowNullValues. }
false;public;0;7;;@Override public void afterPropertiesSet() {     if (getCacheManager() == null) {         setCacheManager(Caching.getCachingProvider().getCacheManager()).     }     super.afterPropertiesSet(). }
false;protected;0;12;;@Override protected Collection<Cache> loadCaches() {     CacheManager cacheManager = getCacheManager().     Assert.state(cacheManager != null, "No CacheManager set").     Collection<Cache> caches = new LinkedHashSet<>().     for (String cacheName : cacheManager.getCacheNames()) {         javax.cache.Cache<Object, Object> jcache = cacheManager.getCache(cacheName).         caches.add(new JCacheCache(jcache, isAllowNullValues())).     }     return caches. }
false;protected;1;12;;@Override protected Cache getMissingCache(String name) {     CacheManager cacheManager = getCacheManager().     Assert.state(cacheManager != null, "No CacheManager set").     // Check the JCache cache again (in case the cache was added at runtime)     javax.cache.Cache<Object, Object> jcache = cacheManager.getCache(name).     if (jcache != null) {         return new JCacheCache(jcache, isAllowNullValues()).     }     return null. }
