commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public boolean matches(Method method, Class<?> targetClass) {     JCacheOperationSource cas = getCacheOperationSource().     return (cas != null && cas.getCacheOperation(method, targetClass) != null). }
true;protected,abstract;0;2;/**  * Obtain the underlying {@link JCacheOperationSource} (may be {@code null}).  * To be implemented by subclasses.  */ ;/**  * Obtain the underlying {@link JCacheOperationSource} (may be {@code null}).  * To be implemented by subclasses.  */ @Nullable protected abstract JCacheOperationSource getCacheOperationSource().
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof JCacheOperationSourcePointcut)) {         return false.     }     JCacheOperationSourcePointcut otherPc = (JCacheOperationSourcePointcut) other.     return ObjectUtils.nullSafeEquals(getCacheOperationSource(), otherPc.getCacheOperationSource()). }
false;public;0;4;;@Override public int hashCode() {     return JCacheOperationSourcePointcut.class.hashCode(). }
false;public;0;4;;@Override public String toString() {     return getClass().getName() + ": " + getCacheOperationSource(). }
