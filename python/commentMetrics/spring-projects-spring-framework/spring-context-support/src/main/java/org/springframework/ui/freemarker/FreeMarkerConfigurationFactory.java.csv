# id;timestamp;commentText;codeText;commentWords;codeWords
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1362408075;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1367508310;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1385501137;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1413922749;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1450368890;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1461047077;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1467730834;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1492013197;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1495868221;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1498780456;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1519295386;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1530174524;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1531945062;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders);1532091916;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader... preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1362408075;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader_@see #setTemplateLoaders;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader,see,set,template,loaders;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1367508310;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader_@see #setTemplateLoaders;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader,see,set,template,loaders;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1385501137;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1413922749;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1450368890;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1461047077;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1467730834;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1492013197;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1495868221;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1498780456;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1519295386;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1530174524;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1531945062;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String... templateLoaderPaths);1532091916;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader;public void setTemplateLoaderPaths(String... templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1328020251;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1356735495;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1362408075;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1367508310;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1385501137;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1413922749;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1450368890;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1461047077;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1467730834;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1492013197;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1495868221;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1498780456;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1519295386;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1530174524;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1531945062;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> protected ResourceLoader getResourceLoader();1532091916;Return the Spring ResourceLoader to use for loading FreeMarker template files.;protected ResourceLoader getResourceLoader() {_		return this.resourceLoader__	};return,the,spring,resource,loader,to,use,for,loading,free,marker,template,files;protected,resource,loader,get,resource,loader,return,this,resource,loader
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1328020251;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1356735495;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1362408075;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1367508310;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1385501137;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1413922749;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1450368890;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1461047077;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1467730834;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1492013197;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1495868221;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1498780456;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1519295386;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1530174524;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1531945062;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> public void setDefaultEncoding(String defaultEncoding);1532091916;Set the default encoding for the FreeMarker configuration._If not specified, FreeMarker will use the platform file encoding._<p>Used for template rendering unless there is an explicit encoding specified_for the rendering process (for example, on Spring's FreeMarkerView)._@see freemarker.template.Configuration#setDefaultEncoding_@see org.springframework.web.servlet.view.freemarker.FreeMarkerView#setEncoding;public void setDefaultEncoding(String defaultEncoding) {_		this.defaultEncoding = defaultEncoding__	};set,the,default,encoding,for,the,free,marker,configuration,if,not,specified,free,marker,will,use,the,platform,file,encoding,p,used,for,template,rendering,unless,there,is,an,explicit,encoding,specified,for,the,rendering,process,for,example,on,spring,s,free,marker,view,see,freemarker,template,configuration,set,default,encoding,see,org,springframework,web,servlet,view,freemarker,free,marker,view,set,encoding;public,void,set,default,encoding,string,default,encoding,this,default,encoding,default,encoding
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1328020251;To be overridden by subclasses that want to to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by <code>createConfiguration()</code>._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,code,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1356735495;To be overridden by subclasses that want to to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1362408075;To be overridden by subclasses that want to to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1367508310;To be overridden by subclasses that want to to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1385501137;To be overridden by subclasses that want to to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1413922749;To be overridden by subclasses that want to to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1450368890;To be overridden by subclasses that want to to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1461047077;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1467730834;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1492013197;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1495868221;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1498780456;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1519295386;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1530174524;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1531945062;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException;1532091916;To be overridden by subclasses that want to perform custom_post-processing of the Configuration object after this factory_performed its default initialization._<p>Called by {@code createConfiguration()}._@param config the current Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected void postProcessConfiguration(Configuration config) throws IOException, TemplateException {_	};to,be,overridden,by,subclasses,that,want,to,perform,custom,post,processing,of,the,configuration,object,after,this,factory,performed,its,default,initialization,p,called,by,code,create,configuration,param,config,the,current,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,void,post,process,configuration,configuration,config,throws,ioexception,template,exception
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader[] postTemplateLoaders);1328020251;Set a List of <code>TemplateLoader<code>s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader[] postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,code,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader[] postTemplateLoaders);1356735495;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader[] postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1328020251;Return a new Configuration object. Subclasses can override this for_custom initialization, or for using a mock object for testing._<p>Called by <code>createConfiguration()</code>._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration()__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,code,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1356735495;Return a new Configuration object. Subclasses can override this for_custom initialization, or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration()__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1362408075;Return a new Configuration object. Subclasses can override this for_custom initialization, or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration()__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1367508310;Return a new Configuration object. Subclasses can override this for_custom initialization, or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration()__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1385501137;Return a new Configuration object. Subclasses can override this for_custom initialization, or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration()__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1450368890;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1461047077;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1467730834;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1492013197;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1495868221;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1498780456;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1519295386;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1530174524;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1531945062;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> protected Configuration newConfiguration() throws IOException, TemplateException;1532091916;Return a new Configuration object. Subclasses can override this for custom_initialization (e.g. specifying a FreeMarker compatibility level which is a_new feature in FreeMarker 2.3.21), or for using a mock object for testing._<p>Called by {@code createConfiguration()}._@return the Configuration object_@throws IOException if a config file wasn't found_@throws TemplateException on FreeMarker initialization failure_@see #createConfiguration();protected Configuration newConfiguration() throws IOException, TemplateException {_		return new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS)__	};return,a,new,configuration,object,subclasses,can,override,this,for,custom,initialization,e,g,specifying,a,free,marker,compatibility,level,which,is,a,new,feature,in,free,marker,2,3,21,or,for,using,a,mock,object,for,testing,p,called,by,code,create,configuration,return,the,configuration,object,throws,ioexception,if,a,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure,see,create,configuration;protected,configuration,new,configuration,throws,ioexception,template,exception,return,new,configuration,configuration
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1328020251;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's <code>Configuration.setSettings</code> method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,code,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1356735495;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1362408075;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1367508310;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1385501137;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1413922749;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1450368890;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1461047077;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1467730834;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1492013197;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1495868221;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1498780456;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1519295386;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1530174524;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1531945062;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setFreemarkerSettings(Properties settings);1532091916;Set properties that contain well-known FreeMarker keys which will be_passed to FreeMarker's {@code Configuration.setSettings} method._@see freemarker.template.Configuration#setSettings;public void setFreemarkerSettings(Properties settings) {_		this.freemarkerSettings = settings__	};set,properties,that,contain,well,known,free,marker,keys,which,will,be,passed,to,free,marker,s,code,configuration,set,settings,method,see,freemarker,template,configuration,set,settings;public,void,set,freemarker,settings,properties,settings,this,freemarker,settings,settings
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader[] preTemplateLoaders);1328020251;Set a List of <code>TemplateLoader<code>s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader[] preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,code,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setPreTemplateLoaders(TemplateLoader[] preTemplateLoaders);1356735495;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>before</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPreTemplateLoaders(TemplateLoader[] preTemplateLoaders) {_		this.preTemplateLoaders = Arrays.asList(preTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,before,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,pre,template,loaders,template,loader,pre,template,loaders,this,pre,template,loaders,arrays,as,list,pre,template,loaders
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1328020251;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1356735495;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1362408075;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1367508310;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1385501137;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1413922749;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1450368890;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1461047077;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1467730834;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1492013197;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1495868221;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1498780456;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1519295386;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1530174524;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1531945062;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setResourceLoader(ResourceLoader resourceLoader);1532091916;Set the Spring ResourceLoader to use for loading FreeMarker template files._The default is DefaultResourceLoader. Will get overridden by the_ApplicationContext if running in a context._@see org.springframework.core.io.DefaultResourceLoader;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,spring,resource,loader,to,use,for,loading,free,marker,template,files,the,default,is,default,resource,loader,will,get,overridden,by,the,application,context,if,running,in,a,context,see,org,springframework,core,io,default,resource,loader;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1362408075;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1367508310;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1385501137;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1413922749;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1450368890;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1461047077;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1467730834;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1492013197;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1495868221;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1498780456;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1519295386;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1530174524;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1531945062;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders);1532091916;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders can be configured._<p>The {@link TemplateLoader TemplateLoaders} specified here will be_registered <i>after</i> the default template loaders that this factory_registers (such as loaders for specified "templateLoaderPaths" or any_loaders registered in {@link #postProcessTemplateLoaders})._@see #setTemplateLoaderPaths_@see #postProcessTemplateLoaders;public void setPostTemplateLoaders(TemplateLoader... postTemplateLoaders) {_		this.postTemplateLoaders = Arrays.asList(postTemplateLoaders)__	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,can,be,configured,p,the,link,template,loader,template,loaders,specified,here,will,be,registered,i,after,i,the,default,template,loaders,that,this,factory,registers,such,as,loaders,for,specified,template,loader,paths,or,any,loaders,registered,in,link,post,process,template,loaders,see,set,template,loader,paths,see,post,process,template,loaders;public,void,set,post,template,loaders,template,loader,post,template,loaders,this,post,template,loaders,arrays,as,list,post,template,loaders
FreeMarkerConfigurationFactory -> @Nullable 	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1495868221;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;@Nullable_	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;nullable,protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> @Nullable 	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1498780456;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;@Nullable_	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;nullable,protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> @Nullable 	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1519295386;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;@Nullable_	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		switch (templateLoaders.size()) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[0])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;nullable,protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,switch,template,loaders,size,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,0,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> @Nullable 	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1530174524;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;@Nullable_	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		switch (templateLoaders.size()) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[0])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;nullable,protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,switch,template,loaders,size,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,0,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> @Nullable 	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1531945062;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;@Nullable_	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		switch (templateLoaders.size()) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[0])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;nullable,protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,switch,template,loaders,size,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,0,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> @Nullable 	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1532091916;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;@Nullable_	protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		switch (templateLoaders.size()) {_			case 0:_				logger.debug("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[0])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;nullable,protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,switch,template,loaders,size,case,0,logger,debug,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,0,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1328020251;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1356735495;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1362408075;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1367508310;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1385501137;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1413922749;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1450368890;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1461047077;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1467730834;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1492013197;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1495868221;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1498780456;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1519295386;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1530174524;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1531945062;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> public void setPreferFileSystemAccess(boolean preferFileSystemAccess);1532091916;Set whether to prefer file system access for template loading._File system access enables hot detection of template changes._<p>If this is enabled, FreeMarkerConfigurationFactory will try to resolve_the specified "templateLoaderPath" as file system resource (which will work_for expanded class path resources and ServletContext resources too)._<p>Default is "true". Turn this off to always load via SpringTemplateLoader_(i.e. as stream, without hot detection of template changes), which might_be necessary if some of your templates reside in an expanded classes_directory while others reside in jar files._@see #setTemplateLoaderPath;public void setPreferFileSystemAccess(boolean preferFileSystemAccess) {_		this.preferFileSystemAccess = preferFileSystemAccess__	};set,whether,to,prefer,file,system,access,for,template,loading,file,system,access,enables,hot,detection,of,template,changes,p,if,this,is,enabled,free,marker,configuration,factory,will,try,to,resolve,the,specified,template,loader,path,as,file,system,resource,which,will,work,for,expanded,class,path,resources,and,servlet,context,resources,too,p,default,is,true,turn,this,off,to,always,load,via,spring,template,loader,i,e,as,stream,without,hot,detection,of,template,changes,which,might,be,necessary,if,some,of,your,templates,reside,in,an,expanded,classes,directory,while,others,reside,in,jar,files,see,set,template,loader,path;public,void,set,prefer,file,system,access,boolean,prefer,file,system,access,this,prefer,file,system,access,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1328020251;To be overridden by subclasses that want to to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by <code>createConfiguration()</code>. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,code,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1356735495;To be overridden by subclasses that want to to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1362408075;To be overridden by subclasses that want to to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1367508310;To be overridden by subclasses that want to to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1385501137;To be overridden by subclasses that want to to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1413922749;To be overridden by subclasses that want to to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1450368890;To be overridden by subclasses that want to to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1461047077;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1467730834;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1492013197;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1495868221;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1498780456;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1519295386;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1530174524;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1531945062;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders);1532091916;To be overridden by subclasses that want to register custom_TemplateLoader instances after this factory created its default_template loaders._<p>Called by {@code createConfiguration()}. Note that specified_"postTemplateLoaders" will be registered <i>after</i> any loaders_registered by this callback_ as a consequence, they are <i>not</i>_included in the given List._@param templateLoaders the current List of TemplateLoader instances,_to be modified by a subclass_@see #createConfiguration()_@see #setPostTemplateLoaders;protected void postProcessTemplateLoaders(List<TemplateLoader> templateLoaders) {_	};to,be,overridden,by,subclasses,that,want,to,register,custom,template,loader,instances,after,this,factory,created,its,default,template,loaders,p,called,by,code,create,configuration,note,that,specified,post,template,loaders,will,be,registered,i,after,i,any,loaders,registered,by,this,callback,as,a,consequence,they,are,i,not,i,included,in,the,given,list,param,template,loaders,the,current,list,of,template,loader,instances,to,be,modified,by,a,subclass,see,create,configuration,see,set,post,template,loaders;protected,void,post,process,template,loaders,list,template,loader,template,loaders
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1328020251;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1356735495;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1362408075;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1367508310;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1385501137;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1413922749;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1450368890;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1461047077;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1467730834;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1492013197;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1495868221;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1498780456;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1519295386;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1530174524;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		this.configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,this,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1531945062;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		this.configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,this,config,location,resource
FreeMarkerConfigurationFactory -> public void setConfigLocation(Resource resource);1532091916;Set the location of the FreeMarker config file._Alternatively, you can specify all setting locally._@see #setFreemarkerSettings_@see #setTemplateLoaderPath;public void setConfigLocation(Resource resource) {_		this.configLocation = resource__	};set,the,location,of,the,free,marker,config,file,alternatively,you,can,specify,all,setting,locally,see,set,freemarker,settings,see,set,template,loader,path;public,void,set,config,location,resource,resource,this,config,location,resource
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1328020251;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		_		if (this.preTemplateLoaders != null) {_			this.templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				this.templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(this.templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			this.templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(this.templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,if,this,pre,template,loaders,null,this,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,this,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,this,template,loaders,if,this,post,template,loaders,null,this,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,this,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1356735495;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		_		if (this.preTemplateLoaders != null) {_			this.templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				this.templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(this.templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			this.templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(this.templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,if,this,pre,template,loaders,null,this,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,this,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,this,template,loaders,if,this,post,template,loaders,null,this,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,this,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1362408075;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<TemplateLoader>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,template,loader,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1367508310;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<TemplateLoader>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,template,loader,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1385501137;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<TemplateLoader>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,template,loader,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1413922749;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<TemplateLoader>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,template,loader,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1450368890;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<TemplateLoader>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,template,loader,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1461047077;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<TemplateLoader>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,template,loader,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1467730834;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1492013197;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1495868221;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1498780456;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1519295386;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1530174524;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new LinkedList<>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,linked,list,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1531945062;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new ArrayList<>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,array,list,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> public Configuration createConfiguration() throws IOException, TemplateException;1532091916;Prepare the FreeMarker Configuration and return it._@return the FreeMarker Configuration object_@throws IOException if the config file wasn't found_@throws TemplateException on FreeMarker initialization failure;public Configuration createConfiguration() throws IOException, TemplateException {_		Configuration config = newConfiguration()__		Properties props = new Properties()___		_		if (this.configLocation != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Loading FreeMarker configuration from " + this.configLocation)__			}_			PropertiesLoaderUtils.fillProperties(props, this.configLocation)__		}__		_		if (this.freemarkerSettings != null) {_			props.putAll(this.freemarkerSettings)__		}__		_		_		if (!props.isEmpty()) {_			config.setSettings(props)__		}__		if (!CollectionUtils.isEmpty(this.freemarkerVariables)) {_			config.setAllSharedVariables(new SimpleHash(this.freemarkerVariables, config.getObjectWrapper()))__		}__		if (this.defaultEncoding != null) {_			config.setDefaultEncoding(this.defaultEncoding)__		}__		List<TemplateLoader> templateLoaders = new ArrayList<>(this.templateLoaders)___		_		if (this.preTemplateLoaders != null) {_			templateLoaders.addAll(this.preTemplateLoaders)__		}__		_		if (this.templateLoaderPaths != null) {_			for (String path : this.templateLoaderPaths) {_				templateLoaders.add(getTemplateLoaderForPath(path))__			}_		}_		postProcessTemplateLoaders(templateLoaders)___		_		if (this.postTemplateLoaders != null) {_			templateLoaders.addAll(this.postTemplateLoaders)__		}__		TemplateLoader loader = getAggregateTemplateLoader(templateLoaders)__		if (loader != null) {_			config.setTemplateLoader(loader)__		}__		postProcessConfiguration(config)__		return config__	};prepare,the,free,marker,configuration,and,return,it,return,the,free,marker,configuration,object,throws,ioexception,if,the,config,file,wasn,t,found,throws,template,exception,on,free,marker,initialization,failure;public,configuration,create,configuration,throws,ioexception,template,exception,configuration,config,new,configuration,properties,props,new,properties,if,this,config,location,null,if,logger,is,debug,enabled,logger,debug,loading,free,marker,configuration,from,this,config,location,properties,loader,utils,fill,properties,props,this,config,location,if,this,freemarker,settings,null,props,put,all,this,freemarker,settings,if,props,is,empty,config,set,settings,props,if,collection,utils,is,empty,this,freemarker,variables,config,set,all,shared,variables,new,simple,hash,this,freemarker,variables,config,get,object,wrapper,if,this,default,encoding,null,config,set,default,encoding,this,default,encoding,list,template,loader,template,loaders,new,array,list,this,template,loaders,if,this,pre,template,loaders,null,template,loaders,add,all,this,pre,template,loaders,if,this,template,loader,paths,null,for,string,path,this,template,loader,paths,template,loaders,add,get,template,loader,for,path,path,post,process,template,loaders,template,loaders,if,this,post,template,loaders,null,template,loaders,add,all,this,post,template,loaders,template,loader,loader,get,aggregate,template,loader,template,loaders,if,loader,null,config,set,template,loader,loader,post,process,configuration,config,return,config
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1328020251;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1356735495;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1362408075;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1367508310;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1385501137;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1413922749;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1450368890;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1461047077;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1467730834;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (IOException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,ioexception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1492013197;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1495868221;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1498780456;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1519295386;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1530174524;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1531945062;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath);1532091916;Determine a FreeMarker TemplateLoader for the given path._<p>Default implementation creates either a FileTemplateLoader or_a SpringTemplateLoader._@param templateLoaderPath the path to load templates from_@return an appropriate TemplateLoader_@see freemarker.cache.FileTemplateLoader_@see SpringTemplateLoader;protected TemplateLoader getTemplateLoaderForPath(String templateLoaderPath) {_		if (isPreferFileSystemAccess()) {_			_			_			try {_				Resource path = getResourceLoader().getResource(templateLoaderPath)__				File file = path.getFile()_  _				if (logger.isDebugEnabled()) {_					logger.debug(_							"Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]")__				}_				return new FileTemplateLoader(file)__			}_			catch (Exception ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Cannot resolve template loader path [" + templateLoaderPath +_							"] to [java.io.File]: using SpringTemplateLoader as fallback", ex)__				}_				return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__			}_		}_		else {_			_			logger.debug("File system access not preferred: using SpringTemplateLoader")__			return new SpringTemplateLoader(getResourceLoader(), templateLoaderPath)__		}_	};determine,a,free,marker,template,loader,for,the,given,path,p,default,implementation,creates,either,a,file,template,loader,or,a,spring,template,loader,param,template,loader,path,the,path,to,load,templates,from,return,an,appropriate,template,loader,see,freemarker,cache,file,template,loader,see,spring,template,loader;protected,template,loader,get,template,loader,for,path,string,template,loader,path,if,is,prefer,file,system,access,try,resource,path,get,resource,loader,get,resource,template,loader,path,file,file,path,get,file,if,logger,is,debug,enabled,logger,debug,template,loader,path,path,resolved,to,file,path,file,get,absolute,path,return,new,file,template,loader,file,catch,exception,ex,if,logger,is,debug,enabled,logger,debug,cannot,resolve,template,loader,path,template,loader,path,to,java,io,file,using,spring,template,loader,as,fallback,ex,return,new,spring,template,loader,get,resource,loader,template,loader,path,else,logger,debug,file,system,access,not,preferred,using,spring,template,loader,return,new,spring,template,loader,get,resource,loader,template,loader,path
FreeMarkerConfigurationFactory -> @Deprecated 	public void setTemplateLoaders(TemplateLoader[] templateLoaders);1328020251;Set a List of <code>TemplateLoader<code>s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._@deprecated as of Spring 2.0.1, in favor of the "preTemplateLoaders"_and "postTemplateLoaders" properties_@see #setPreTemplateLoaders_@see #setPostTemplateLoaders;@Deprecated_	public void setTemplateLoaders(TemplateLoader[] templateLoaders) {_		if (templateLoaders != null) {_			this.templateLoaders.addAll(Arrays.asList(templateLoaders))__		}_	};set,a,list,of,code,template,loader,code,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,deprecated,as,of,spring,2,0,1,in,favor,of,the,pre,template,loaders,and,post,template,loaders,properties,see,set,pre,template,loaders,see,set,post,template,loaders;deprecated,public,void,set,template,loaders,template,loader,template,loaders,if,template,loaders,null,this,template,loaders,add,all,arrays,as,list,template,loaders
FreeMarkerConfigurationFactory -> @Deprecated 	public void setTemplateLoaders(TemplateLoader[] templateLoaders);1356735495;Set a List of {@code TemplateLoader}s that will be used to search_for templates. For example, one or more custom loaders such as database_loaders could be configured and injected here._@deprecated as of Spring 2.0.1, in favor of the "preTemplateLoaders"_and "postTemplateLoaders" properties_@see #setPreTemplateLoaders_@see #setPostTemplateLoaders;@Deprecated_	public void setTemplateLoaders(TemplateLoader[] templateLoaders) {_		if (templateLoaders != null) {_			this.templateLoaders.addAll(Arrays.asList(templateLoaders))__		}_	};set,a,list,of,code,template,loader,s,that,will,be,used,to,search,for,templates,for,example,one,or,more,custom,loaders,such,as,database,loaders,could,be,configured,and,injected,here,deprecated,as,of,spring,2,0,1,in,favor,of,the,pre,template,loaders,and,post,template,loaders,properties,see,set,pre,template,loaders,see,set,post,template,loaders;deprecated,public,void,set,template,loaders,template,loader,template,loaders,if,template,loaders,null,this,template,loaders,add,all,arrays,as,list,template,loaders
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1328020251;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's <code>Configuration.setAllSharedVariables()</code> method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,code,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1356735495;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1362408075;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1367508310;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1385501137;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1413922749;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1450368890;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1461047077;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1467730834;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1492013197;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1495868221;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1498780456;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1519295386;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1530174524;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1531945062;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> public void setFreemarkerVariables(Map<String, Object> variables);1532091916;Set a Map that contains well-known FreeMarker objects which will be passed_to FreeMarker's {@code Configuration.setAllSharedVariables()} method._@see freemarker.template.Configuration#setAllSharedVariables;public void setFreemarkerVariables(Map<String, Object> variables) {_		this.freemarkerVariables = variables__	};set,a,map,that,contains,well,known,free,marker,objects,which,will,be,passed,to,free,marker,s,code,configuration,set,all,shared,variables,method,see,freemarker,template,configuration,set,all,shared,variables;public,void,set,freemarker,variables,map,string,object,variables,this,freemarker,variables,variables
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1328020251;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1356735495;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1362408075;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1367508310;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1385501137;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1413922749;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1450368890;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1461047077;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1467730834;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1492013197;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1495868221;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1498780456;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1519295386;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1530174524;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1531945062;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected boolean isPreferFileSystemAccess();1532091916;Return whether to prefer file system access for template loading.;protected boolean isPreferFileSystemAccess() {_		return this.preferFileSystemAccess__	};return,whether,to,prefer,file,system,access,for,template,loading;protected,boolean,is,prefer,file,system,access,return,this,prefer,file,system,access
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1328020251;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1356735495;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1362408075;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1367508310;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1385501137;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1413922749;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1450368890;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1461047077;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1467730834;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders);1492013197;Return a TemplateLoader based on the given TemplateLoader list._If more than one TemplateLoader has been registered, a FreeMarker_MultiTemplateLoader needs to be created._@param templateLoaders the final List of TemplateLoader instances_@return the aggregate TemplateLoader;protected TemplateLoader getAggregateTemplateLoader(List<TemplateLoader> templateLoaders) {_		int loaderCount = templateLoaders.size()__		switch (loaderCount) {_			case 0:_				logger.info("No FreeMarker TemplateLoaders specified")__				return null__			case 1:_				return templateLoaders.get(0)__			default:_				TemplateLoader[] loaders = templateLoaders.toArray(new TemplateLoader[loaderCount])__				return new MultiTemplateLoader(loaders)__		}_	};return,a,template,loader,based,on,the,given,template,loader,list,if,more,than,one,template,loader,has,been,registered,a,free,marker,multi,template,loader,needs,to,be,created,param,template,loaders,the,final,list,of,template,loader,instances,return,the,aggregate,template,loader;protected,template,loader,get,aggregate,template,loader,list,template,loader,template,loaders,int,loader,count,template,loaders,size,switch,loader,count,case,0,logger,info,no,free,marker,template,loaders,specified,return,null,case,1,return,template,loaders,get,0,default,template,loader,loaders,template,loaders,to,array,new,template,loader,loader,count,return,new,multi,template,loader,loaders
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String[] templateLoaderPaths);1328020251;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a <code>java.io.File</code>,_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use <code>setTemplateLoaders(List templateLoaders)</code>_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader_@see #setTemplateLoaders;public void setTemplateLoaderPaths(String[] templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,code,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,code,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader,see,set,template,loaders;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPaths(String[] templateLoaderPaths);1356735495;Set multiple Freemarker template loader paths via Spring resource locations._<p>When populated via a String, standard URLs like "file:" and "classpath:"_pseudo URLs are supported, as understood by ResourceEditor. Allows for_relative paths when running in an ApplicationContext._<p>Will define a path for the default FreeMarker template loader._If a specified resource cannot be resolved to a {@code java.io.File},_a generic SpringTemplateLoader will be used, without modification detection._<p>To enforce the use of SpringTemplateLoader, i.e. to not resolve a path_as file system resource in any case, turn off the "preferFileSystemAccess"_flag. See the latter's javadoc for details._<p>If you wish to specify your own list of TemplateLoaders, do not set this_property and instead use {@code setTemplateLoaders(List templateLoaders)}_@see org.springframework.core.io.ResourceEditor_@see org.springframework.context.ApplicationContext#getResource_@see freemarker.template.Configuration#setDirectoryForTemplateLoading_@see SpringTemplateLoader_@see #setTemplateLoaders;public void setTemplateLoaderPaths(String[] templateLoaderPaths) {_		this.templateLoaderPaths = templateLoaderPaths__	};set,multiple,freemarker,template,loader,paths,via,spring,resource,locations,p,when,populated,via,a,string,standard,urls,like,file,and,classpath,pseudo,urls,are,supported,as,understood,by,resource,editor,allows,for,relative,paths,when,running,in,an,application,context,p,will,define,a,path,for,the,default,free,marker,template,loader,if,a,specified,resource,cannot,be,resolved,to,a,code,java,io,file,a,generic,spring,template,loader,will,be,used,without,modification,detection,p,to,enforce,the,use,of,spring,template,loader,i,e,to,not,resolve,a,path,as,file,system,resource,in,any,case,turn,off,the,prefer,file,system,access,flag,see,the,latter,s,javadoc,for,details,p,if,you,wish,to,specify,your,own,list,of,template,loaders,do,not,set,this,property,and,instead,use,code,set,template,loaders,list,template,loaders,see,org,springframework,core,io,resource,editor,see,org,springframework,context,application,context,get,resource,see,freemarker,template,configuration,set,directory,for,template,loading,see,spring,template,loader,see,set,template,loaders;public,void,set,template,loader,paths,string,template,loader,paths,this,template,loader,paths,template,loader,paths
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1328020251;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1356735495;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1362408075;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1367508310;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1385501137;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1413922749;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1450368890;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1461047077;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1467730834;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1492013197;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1495868221;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1498780456;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1519295386;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1530174524;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1531945062;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
FreeMarkerConfigurationFactory -> public void setTemplateLoaderPath(String templateLoaderPath);1532091916;Set the Freemarker template loader path via a Spring resource location._See the "templateLoaderPaths" property for details on path handling._@see #setTemplateLoaderPaths;public void setTemplateLoaderPath(String templateLoaderPath) {_		this.templateLoaderPaths = new String[] {templateLoaderPath}__	};set,the,freemarker,template,loader,path,via,a,spring,resource,location,see,the,template,loader,paths,property,for,details,on,path,handling,see,set,template,loader,paths;public,void,set,template,loader,path,string,template,loader,path,this,template,loader,paths,new,string,template,loader,path
