commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to wait for running jobs to complete on shutdown.  * Default is "false".  * @see org.quartz.simpl.SimpleThreadPool#shutdown(boolean)  */ ;/**  * Set whether to wait for running jobs to complete on shutdown.  * Default is "false".  * @see org.quartz.simpl.SimpleThreadPool#shutdown(boolean)  */ public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {     this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown. }
false;public;0;4;;@Override public void afterPropertiesSet() throws SchedulerConfigException {     initialize(). }
false;public;1;7;;@Override public void execute(Runnable task) {     Assert.notNull(task, "Runnable must not be null").     if (!runInThread(task)) {         throw new SchedulingException("Quartz SimpleThreadPool already shut down").     } }
false;public;2;4;;@Override public void execute(Runnable task, long startTimeout) {     execute(task). }
false;public;1;6;;@Override public Future<?> submit(Runnable task) {     FutureTask<Object> future = new FutureTask<>(task, null).     execute(future).     return future. }
false;public;1;6;;@Override public <T> Future<T> submit(Callable<T> task) {     FutureTask<T> future = new FutureTask<>(task).     execute(future).     return future. }
false;public;1;6;;@Override public ListenableFuture<?> submitListenable(Runnable task) {     ListenableFutureTask<Object> future = new ListenableFutureTask<>(task, null).     execute(future).     return future. }
false;public;1;6;;@Override public <T> ListenableFuture<T> submitListenable(Callable<T> task) {     ListenableFutureTask<T> future = new ListenableFutureTask<>(task).     execute(future).     return future. }
false;public;0;4;;@Override public void destroy() {     shutdown(this.waitForJobsToCompleteOnShutdown). }
