commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the target Cache that this Cache should delegate to.  */ ;/**  * Return the target Cache that this Cache should delegate to.  */ public Cache getTargetCache() {     return this.targetCache. }
false;public;0;4;;@Override public String getName() {     return this.targetCache.getName(). }
false;public;0;4;;@Override public Object getNativeCache() {     return this.targetCache.getNativeCache(). }
false;public;1;5;;@Override @Nullable public ValueWrapper get(Object key) {     return this.targetCache.get(key). }
false;public;2;4;;@Override public <T> T get(Object key, @Nullable Class<T> type) {     return this.targetCache.get(key, type). }
false;public;2;5;;@Override @Nullable public <T> T get(Object key, Callable<T> valueLoader) {     return this.targetCache.get(key, valueLoader). }
false;public;0;4;;@Override public void afterCommit() {     TransactionAwareCacheDecorator.this.targetCache.put(key, value). }
false;public;2;14;;@Override public void put(final Object key, @Nullable final Object value) {     if (TransactionSynchronizationManager.isSynchronizationActive()) {         TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() {              @Override             public void afterCommit() {                 TransactionAwareCacheDecorator.this.targetCache.put(key, value).             }         }).     } else {         this.targetCache.put(key, value).     } }
false;public;2;5;;@Override @Nullable public ValueWrapper putIfAbsent(Object key, @Nullable Object value) {     return this.targetCache.putIfAbsent(key, value). }
false;public;0;4;;@Override public void afterCommit() {     TransactionAwareCacheDecorator.this.targetCache.evict(key). }
false;public;1;14;;@Override public void evict(final Object key) {     if (TransactionSynchronizationManager.isSynchronizationActive()) {         TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() {              @Override             public void afterCommit() {                 TransactionAwareCacheDecorator.this.targetCache.evict(key).             }         }).     } else {         this.targetCache.evict(key).     } }
false;public;0;4;;@Override public void afterCommit() {     targetCache.clear(). }
false;public;0;14;;@Override public void clear() {     if (TransactionSynchronizationManager.isSynchronizationActive()) {         TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() {              @Override             public void afterCommit() {                 targetCache.clear().             }         }).     } else {         this.targetCache.clear().     } }
