commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;29;;@Override protected JCacheOperation<?> findCacheOperation(Method method, @Nullable Class<?> targetType) {     CacheResult cacheResult = method.getAnnotation(CacheResult.class).     CachePut cachePut = method.getAnnotation(CachePut.class).     CacheRemove cacheRemove = method.getAnnotation(CacheRemove.class).     CacheRemoveAll cacheRemoveAll = method.getAnnotation(CacheRemoveAll.class).     int found = countNonNull(cacheResult, cachePut, cacheRemove, cacheRemoveAll).     if (found == 0) {         return null.     }     if (found > 1) {         throw new IllegalStateException("More than one cache annotation found on '" + method + "'").     }     CacheDefaults defaults = getCacheDefaults(method, targetType).     if (cacheResult != null) {         return createCacheResultOperation(method, defaults, cacheResult).     } else if (cachePut != null) {         return createCachePutOperation(method, defaults, cachePut).     } else if (cacheRemove != null) {         return createCacheRemoveOperation(method, defaults, cacheRemove).     } else {         return createCacheRemoveAllOperation(method, defaults, cacheRemoveAll).     } }
false;protected;2;8;;@Nullable protected CacheDefaults getCacheDefaults(Method method, @Nullable Class<?> targetType) {     CacheDefaults annotation = method.getDeclaringClass().getAnnotation(CacheDefaults.class).     if (annotation != null) {         return annotation.     }     return (targetType != null ? targetType.getAnnotation(CacheDefaults.class) : null). }
false;protected;3;17;;protected CacheResultOperation createCacheResultOperation(Method method, @Nullable CacheDefaults defaults, CacheResult ann) {     String cacheName = determineCacheName(method, defaults, ann.cacheName()).     CacheResolverFactory cacheResolverFactory = determineCacheResolverFactory(defaults, ann.cacheResolverFactory()).     KeyGenerator keyGenerator = determineKeyGenerator(defaults, ann.cacheKeyGenerator()).     CacheMethodDetails<CacheResult> methodDetails = createMethodDetails(method, ann, cacheName).     CacheResolver cacheResolver = getCacheResolver(cacheResolverFactory, methodDetails).     CacheResolver exceptionCacheResolver = null.     final String exceptionCacheName = ann.exceptionCacheName().     if (StringUtils.hasText(exceptionCacheName)) {         exceptionCacheResolver = getExceptionCacheResolver(cacheResolverFactory, methodDetails).     }     return new CacheResultOperation(methodDetails, cacheResolver, keyGenerator, exceptionCacheResolver). }
false;protected;3;10;;protected CachePutOperation createCachePutOperation(Method method, @Nullable CacheDefaults defaults, CachePut ann) {     String cacheName = determineCacheName(method, defaults, ann.cacheName()).     CacheResolverFactory cacheResolverFactory = determineCacheResolverFactory(defaults, ann.cacheResolverFactory()).     KeyGenerator keyGenerator = determineKeyGenerator(defaults, ann.cacheKeyGenerator()).     CacheMethodDetails<CachePut> methodDetails = createMethodDetails(method, ann, cacheName).     CacheResolver cacheResolver = getCacheResolver(cacheResolverFactory, methodDetails).     return new CachePutOperation(methodDetails, cacheResolver, keyGenerator). }
false;protected;3;10;;protected CacheRemoveOperation createCacheRemoveOperation(Method method, @Nullable CacheDefaults defaults, CacheRemove ann) {     String cacheName = determineCacheName(method, defaults, ann.cacheName()).     CacheResolverFactory cacheResolverFactory = determineCacheResolverFactory(defaults, ann.cacheResolverFactory()).     KeyGenerator keyGenerator = determineKeyGenerator(defaults, ann.cacheKeyGenerator()).     CacheMethodDetails<CacheRemove> methodDetails = createMethodDetails(method, ann, cacheName).     CacheResolver cacheResolver = getCacheResolver(cacheResolverFactory, methodDetails).     return new CacheRemoveOperation(methodDetails, cacheResolver, keyGenerator). }
false;protected;3;9;;protected CacheRemoveAllOperation createCacheRemoveAllOperation(Method method, @Nullable CacheDefaults defaults, CacheRemoveAll ann) {     String cacheName = determineCacheName(method, defaults, ann.cacheName()).     CacheResolverFactory cacheResolverFactory = determineCacheResolverFactory(defaults, ann.cacheResolverFactory()).     CacheMethodDetails<CacheRemoveAll> methodDetails = createMethodDetails(method, ann, cacheName).     CacheResolver cacheResolver = getCacheResolver(cacheResolverFactory, methodDetails).     return new CacheRemoveAllOperation(methodDetails, cacheResolver). }
false;private;3;3;;private <A extends Annotation> CacheMethodDetails<A> createMethodDetails(Method method, A annotation, String cacheName) {     return new DefaultCacheMethodDetails<>(method, annotation, cacheName). }
false;protected;2;11;;protected CacheResolver getCacheResolver(@Nullable CacheResolverFactory factory, CacheMethodDetails<?> details) {     if (factory != null) {         javax.cache.annotation.CacheResolver cacheResolver = factory.getCacheResolver(details).         return new CacheResolverAdapter(cacheResolver).     } else {         return getDefaultCacheResolver().     } }
false;protected;2;11;;protected CacheResolver getExceptionCacheResolver(@Nullable CacheResolverFactory factory, CacheMethodDetails<CacheResult> details) {     if (factory != null) {         javax.cache.annotation.CacheResolver cacheResolver = factory.getExceptionCacheResolver(details).         return new CacheResolverAdapter(cacheResolver).     } else {         return getDefaultExceptionCacheResolver().     } }
false;protected;2;14;;@Nullable protected CacheResolverFactory determineCacheResolverFactory(@Nullable CacheDefaults defaults, Class<? extends CacheResolverFactory> candidate) {     if (candidate != CacheResolverFactory.class) {         return getBean(candidate).     } else if (defaults != null && defaults.cacheResolverFactory() != CacheResolverFactory.class) {         return getBean(defaults.cacheResolverFactory()).     } else {         return null.     } }
false;protected;2;13;;protected KeyGenerator determineKeyGenerator(@Nullable CacheDefaults defaults, Class<? extends CacheKeyGenerator> candidate) {     if (candidate != CacheKeyGenerator.class) {         return new KeyGeneratorAdapter(this, getBean(candidate)).     } else if (defaults != null && CacheKeyGenerator.class != defaults.cacheKeyGenerator()) {         return new KeyGeneratorAdapter(this, getBean(defaults.cacheKeyGenerator())).     } else {         return getDefaultKeyGenerator().     } }
false;protected;3;9;;protected String determineCacheName(Method method, @Nullable CacheDefaults defaults, String candidate) {     if (StringUtils.hasText(candidate)) {         return candidate.     }     if (defaults != null && StringUtils.hasText(defaults.cacheName())) {         return defaults.cacheName().     }     return generateDefaultCacheName(method). }
true;protected;1;12;/**  * Generate a default cache name for the specified {@link Method}.  * @param method the annotated method  * @return the default cache name, according to JSR-107  */ ;/**  * Generate a default cache name for the specified {@link Method}.  * @param method the annotated method  * @return the default cache name, according to JSR-107  */ protected String generateDefaultCacheName(Method method) {     Class<?>[] parameterTypes = method.getParameterTypes().     List<String> parameters = new ArrayList<>(parameterTypes.length).     for (Class<?> parameterType : parameterTypes) {         parameters.add(parameterType.getName()).     }     StringBuilder sb = new StringBuilder(method.getDeclaringClass().getName()).     sb.append(".").append(method.getName()).     sb.append("(").append(StringUtils.collectionToCommaDelimitedString(parameters)).append(")").     return sb.toString(). }
false;private;1;9;;private int countNonNull(Object... instances) {     int result = 0.     for (Object instance : instances) {         if (instance != null) {             result += 1.         }     }     return result. }
true;protected,abstract;1;1;/**  * Locate or create an instance of the specified cache strategy {@code type}.  * @param type the type of the bean to manage  * @return the required bean  */ ;/**  * Locate or create an instance of the specified cache strategy {@code type}.  * @param type the type of the bean to manage  * @return the required bean  */ protected abstract <T> T getBean(Class<T> type).
true;protected,abstract;0;1;/**  * Return the default {@link CacheResolver} if none is set.  */ ;/**  * Return the default {@link CacheResolver} if none is set.  */ protected abstract CacheResolver getDefaultCacheResolver().
true;protected,abstract;0;1;/**  * Return the default exception {@link CacheResolver} if none is set.  */ ;/**  * Return the default exception {@link CacheResolver} if none is set.  */ protected abstract CacheResolver getDefaultExceptionCacheResolver().
true;protected,abstract;0;1;/**  * Return the default {@link KeyGenerator} if none is set.  */ ;/**  * Return the default {@link KeyGenerator} if none is set.  */ protected abstract KeyGenerator getDefaultKeyGenerator().
