commented;modifiers;parameterAmount;loc;comment;code
true;public;0;7;/**  * Return the target key generator to use in the form of either a {@link KeyGenerator}  * or a {@link CacheKeyGenerator}.  */ ;/**  * Return the target key generator to use in the form of either a {@link KeyGenerator}  * or a {@link CacheKeyGenerator}.  */ public Object getTarget() {     if (this.cacheKeyGenerator != null) {         return this.cacheKeyGenerator.     }     Assert.state(this.keyGenerator != null, "No key generator").     return this.keyGenerator. }
false;public;3;16;;@Override public Object generate(Object target, Method method, Object... params) {     JCacheOperation<?> operation = this.cacheOperationSource.getCacheOperation(method, target.getClass()).     if (!(AbstractJCacheKeyOperation.class.isInstance(operation))) {         throw new IllegalStateException("Invalid operation, should be a key-based operation " + operation).     }     CacheKeyInvocationContext<?> invocationContext = createCacheKeyInvocationContext(target, operation, params).     if (this.cacheKeyGenerator != null) {         return this.cacheKeyGenerator.generateCacheKey(invocationContext).     } else {         Assert.state(this.keyGenerator != null, "No key generator").         return doGenerate(this.keyGenerator, invocationContext).     } }
false;private,static;2;15;;@SuppressWarnings("unchecked") private static Object doGenerate(KeyGenerator keyGenerator, CacheKeyInvocationContext<?> context) {     List<Object> parameters = new ArrayList<>().     for (CacheInvocationParameter param : context.getKeyParameters()) {         Object value = param.getValue().         if (param.getParameterPosition() == context.getAllParameters().length - 1 && context.getMethod().isVarArgs()) {             parameters.addAll((List<Object>) CollectionUtils.arrayToList(value)).         } else {             parameters.add(value).         }     }     return keyGenerator.generate(context.getTarget(), context.getMethod(), parameters.toArray()). }
false;private;3;7;;@SuppressWarnings("unchecked") private CacheKeyInvocationContext<?> createCacheKeyInvocationContext(Object target, JCacheOperation<?> operation, Object[] params) {     AbstractJCacheKeyOperation<Annotation> keyCacheOperation = (AbstractJCacheKeyOperation<Annotation>) operation.     return new DefaultCacheKeyInvocationContext<>(keyCacheOperation, target, params). }
