# id;timestamp;commentText;codeText;commentWords;codeWords
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1328020251;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1356735495;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1357119239;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1362408075;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1363730577;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1368482696;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1375198429;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1385412762;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1388939058;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1388954345;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1395953963;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1403791284;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1405696904;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1408389938;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1467730834;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1477045587;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1485810955;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1496837955;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1498780456;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1502974979;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1517327709;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1517344264;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1517348142;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1518264213;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(startupDelay * 1000)__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,startup,delay,1000,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1520537868;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay))__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,time,unit,seconds,to,millis,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1526424333;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay))__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,time,unit,seconds,to,millis,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1530174524;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay))__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,time,unit,seconds,to,millis,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1530174524;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay))__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,time,unit,seconds,to,millis,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1530190293;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay))__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,time,unit,seconds,to,millis,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1532091916;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						Thread.sleep(TimeUnit.SECONDS.toMillis(startupDelay))__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,thread,sleep,time,unit,seconds,to,millis,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1532612815;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						TimeUnit.SECONDS.sleep(startupDelay)__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,time,unit,seconds,sleep,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1533213510;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						TimeUnit.SECONDS.sleep(startupDelay)__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,time,unit,seconds,sleep,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1534414082;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						TimeUnit.SECONDS.sleep(startupDelay)__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,time,unit,seconds,sleep,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1537388368;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						TimeUnit.SECONDS.sleep(startupDelay)__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,time,unit,seconds,sleep,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException;1539119605;Start the Quartz Scheduler, respecting the "startupDelay" setting._@param scheduler the Scheduler to start_@param startupDelay the number of seconds to wait before starting_the Scheduler asynchronously;protected void startScheduler(final Scheduler scheduler, final int startupDelay) throws SchedulerException {_		if (startupDelay <= 0) {_			logger.info("Starting Quartz Scheduler now")__			scheduler.start()__		}_		else {_			if (logger.isInfoEnabled()) {_				logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() +_						"] in " + startupDelay + " seconds")__			}_			_			_			Thread schedulerThread = new Thread() {_				@Override_				public void run() {_					try {_						TimeUnit.SECONDS.sleep(startupDelay)__					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__						_					}_					if (logger.isInfoEnabled()) {_						logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds")__					}_					try {_						scheduler.start()__					}_					catch (SchedulerException ex) {_						throw new SchedulingException("Could not start Quartz Scheduler after delay", ex)__					}_				}_			}__			schedulerThread.setName("Quartz Scheduler [" + scheduler.getSchedulerName() + "]")__			schedulerThread.setDaemon(true)__			schedulerThread.start()__		}_	};start,the,quartz,scheduler,respecting,the,startup,delay,setting,param,scheduler,the,scheduler,to,start,param,startup,delay,the,number,of,seconds,to,wait,before,starting,the,scheduler,asynchronously;protected,void,start,scheduler,final,scheduler,scheduler,final,int,startup,delay,throws,scheduler,exception,if,startup,delay,0,logger,info,starting,quartz,scheduler,now,scheduler,start,else,if,logger,is,info,enabled,logger,info,will,start,quartz,scheduler,scheduler,get,scheduler,name,in,startup,delay,seconds,thread,scheduler,thread,new,thread,override,public,void,run,try,time,unit,seconds,sleep,startup,delay,catch,interrupted,exception,ex,thread,current,thread,interrupt,if,logger,is,info,enabled,logger,info,starting,quartz,scheduler,now,after,delay,of,startup,delay,seconds,try,scheduler,start,catch,scheduler,exception,ex,throw,new,scheduling,exception,could,not,start,quartz,scheduler,after,delay,ex,scheduler,thread,set,name,quartz,scheduler,scheduler,get,scheduler,name,scheduler,thread,set,daemon,true,scheduler,thread,start
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1526424333;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1530174524;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1530174524;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1530190293;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1532091916;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1532612815;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1533213510;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1534414082;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1537388368;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException;1539119605;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext(Scheduler scheduler) throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,scheduler,scheduler,throws,scheduler,exception,if,this,scheduler,context,map,null,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1328020251;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1356735495;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1357119239;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1362408075;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1363730577;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1368482696;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1375198429;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1385412762;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1388939058;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1388954345;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1395953963;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1403791284;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1405696904;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1408389938;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1467730834;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1477045587;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public static ResourceLoader getConfigTimeResourceLoader();1485810955;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1388954345;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1395953963;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1403791284;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1405696904;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1408389938;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1467730834;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1477045587;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1485810955;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1496837955;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1498780456;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1502974979;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException;1517327709;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1328020251;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1356735495;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1357119239;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1362408075;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1363730577;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1368482696;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1375198429;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1385412762;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1388939058;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1388954345;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1395953963;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1403791284;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1405696904;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1408389938;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1467730834;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1477045587;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1485810955;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1496837955;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1498780456;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1502974979;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1517327709;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1517344264;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1517348142;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1518264213;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1520537868;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1526424333;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1530174524;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1530174524;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1530190293;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1532091916;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1532612815;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1533213510;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1534414082;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1537388368;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setQuartzProperties(Properties quartzProperties);1539119605;Set Quartz properties, like "org.quartz.threadPool.class"._<p>Can be used to override values in a Quartz properties config file,_or to specify all necessary properties locally._@see #setConfigLocation;public void setQuartzProperties(Properties quartzProperties) {_		this.quartzProperties = quartzProperties__	};set,quartz,properties,like,org,quartz,thread,pool,class,p,can,be,used,to,override,values,in,a,quartz,properties,config,file,or,to,specify,all,necessary,properties,locally,see,set,config,location;public,void,set,quartz,properties,properties,quartz,properties,this,quartz,properties,quartz,properties
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1328020251;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1356735495;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1357119239;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1362408075;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1363730577;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1368482696;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1375198429;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1385412762;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1388939058;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1388954345;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1395953963;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1403791284;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1405696904;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1408389938;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1467730834;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1477045587;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1485810955;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1496837955;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1498780456;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1502974979;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1517327709;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1517344264;Set the DataSource to be used by the Scheduler <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,data,source,to,be,used,by,the,scheduler,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1517348142;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1518264213;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1520537868;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1526424333;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1530174524;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1530174524;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1530190293;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1532091916;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1532612815;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1533213510;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1534414082;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1537388368;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource);1539119605;Set the {@link DataSource} to be used <i>for non-transactional access</i>._<p>This is only necessary if the default DataSource is an XA DataSource that will_always participate in transactions: A non-XA version of that DataSource should_be specified as "nonTransactionalDataSource" in such a scenario._<p>This is not relevant with a local DataSource instance and Spring transactions._Specifying a single default DataSource as "dataSource" is sufficient there._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;public void setNonTransactionalDataSource(DataSource nonTransactionalDataSource) {_		this.nonTransactionalDataSource = nonTransactionalDataSource__	};set,the,link,data,source,to,be,used,i,for,non,transactional,access,i,p,this,is,only,necessary,if,the,default,data,source,is,an,xa,data,source,that,will,always,participate,in,transactions,a,non,xa,version,of,that,data,source,should,be,specified,as,non,transactional,data,source,in,such,a,scenario,p,this,is,not,relevant,with,a,local,data,source,instance,and,spring,transactions,specifying,a,single,default,data,source,as,data,source,is,sufficient,there,since,1,1,see,set,data,source,see,local,data,source,job,store;public,void,set,non,transactional,data,source,data,source,non,transactional,data,source,this,non,transactional,data,source,non,transactional,data,source
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map schedulerContextAsMap);1328020251;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map schedulerContextAsMap);1356735495;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map schedulerContextAsMap);1357119239;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map schedulerContextAsMap);1362408075;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map schedulerContextAsMap);1363730577;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map schedulerContextAsMap);1368482696;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map schedulerContextAsMap);1375198429;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1496837955;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1498780456;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1502974979;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1517327709;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1517344264;Return the ResourceLoader for the currently configured Quartz Scheduler,_to be used by ResourceLoaderClassLoadHelper._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1517348142;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1518264213;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1520537868;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1526424333;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1530174524;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1530174524;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1530190293;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1532091916;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1532612815;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1533213510;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1534414082;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1537388368;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> @Nullable 	public static ResourceLoader getConfigTimeResourceLoader();1539119605;Return the {@link ResourceLoader} for the currently configured Quartz Scheduler,_to be used by {@link ResourceLoaderClassLoadHelper}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@see #setApplicationContext_@see ResourceLoaderClassLoadHelper;@Nullable_	public static ResourceLoader getConfigTimeResourceLoader() {_		return configTimeResourceLoaderHolder.get()__	};return,the,link,resource,loader,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,resource,loader,class,load,helper,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,application,context,see,resource,loader,class,load,helper;nullable,public,static,resource,loader,get,config,time,resource,loader,return,config,time,resource,loader,holder,get
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1388939058;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1388954345;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1395953963;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1403791284;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1405696904;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1408389938;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1467730834;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1477045587;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1485810955;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1496837955;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1498780456;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1502974979;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1517327709;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1517344264;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1517348142;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1518264213;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1520537868;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1526424333;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1530174524;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1530174524;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1530190293;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1532091916;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1532612815;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1533213510;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1534414082;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1537388368;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap);1539119605;Register objects in the Scheduler context via a given Map._These objects will be available to any Job that runs in this Scheduler._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param schedulerContextAsMap a Map with String keys and any objects as_values (for example Spring-managed beans)_@see JobDetailFactoryBean#setJobDataAsMap;public void setSchedulerContextAsMap(Map<String, ?> schedulerContextAsMap) {_		this.schedulerContextMap = schedulerContextAsMap__	};register,objects,in,the,scheduler,context,via,a,given,map,these,objects,will,be,available,to,any,job,that,runs,in,this,scheduler,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,scheduler,context,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,job,detail,factory,bean,set,job,data,as,map;public,void,set,scheduler,context,as,map,map,string,scheduler,context,as,map,this,scheduler,context,map,scheduler,context,as,map
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1328020251;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1356735495;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1357119239;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1362408075;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1363730577;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1368482696;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1375198429;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1385412762;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1388939058;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1388954345;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1395953963;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1403791284;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1405696904;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1408389938;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1467730834;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1477045587;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1485810955;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1496837955;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1498780456;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1502974979;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1517327709;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1517344264;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1517348142;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1518264213;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1520537868;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1526424333;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1530174524;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1530174524;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1530190293;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1532091916;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1532612815;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1533213510;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1534414082;Set the name of the Scheduler to create via the SchedulerFactory._<p>If not specified, the bean name will be used as default scheduler name._@see #setBeanName_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,p,if,not,specified,the,bean,name,will,be,used,as,default,scheduler,name,see,set,bean,name,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1537388368;Set the name of the Scheduler to create via the SchedulerFactory, as an_alternative to the {@code org.quartz.scheduler.instanceName} property._<p>If not specified, the name will be taken from Quartz properties_({@code org.quartz.scheduler.instanceName}), or from the declared_{@code SchedulerFactoryBean} bean name as a fallback._@see #setBeanName_@see StdSchedulerFactory#PROP_SCHED_INSTANCE_NAME_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,as,an,alternative,to,the,code,org,quartz,scheduler,instance,name,property,p,if,not,specified,the,name,will,be,taken,from,quartz,properties,code,org,quartz,scheduler,instance,name,or,from,the,declared,code,scheduler,factory,bean,bean,name,as,a,fallback,see,set,bean,name,see,std,scheduler,factory,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerName(String schedulerName);1539119605;Set the name of the Scheduler to create via the SchedulerFactory, as an_alternative to the {@code org.quartz.scheduler.instanceName} property._<p>If not specified, the name will be taken from Quartz properties_({@code org.quartz.scheduler.instanceName}), or from the declared_{@code SchedulerFactoryBean} bean name as a fallback._@see #setBeanName_@see StdSchedulerFactory#PROP_SCHED_INSTANCE_NAME_@see org.quartz.SchedulerFactory#getScheduler()_@see org.quartz.SchedulerFactory#getScheduler(String);public void setSchedulerName(String schedulerName) {_		this.schedulerName = schedulerName__	};set,the,name,of,the,scheduler,to,create,via,the,scheduler,factory,as,an,alternative,to,the,code,org,quartz,scheduler,instance,name,property,p,if,not,specified,the,name,will,be,taken,from,quartz,properties,code,org,quartz,scheduler,instance,name,or,from,the,declared,code,scheduler,factory,bean,bean,name,as,a,fallback,see,set,bean,name,see,std,scheduler,factory,see,org,quartz,scheduler,factory,get,scheduler,see,org,quartz,scheduler,factory,get,scheduler,string;public,void,set,scheduler,name,string,scheduler,name,this,scheduler,name,scheduler,name
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1388939058;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass)__		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,assert,is,assignable,scheduler,factory,class,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1388954345;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass)__		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,assert,is,assignable,scheduler,factory,class,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1395953963;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass)__		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,assert,is,assignable,scheduler,factory,class,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1403791284;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass)__		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,assert,is,assignable,scheduler,factory,class,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1405696904;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass)__		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,assert,is,assignable,scheduler,factory,class,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1408389938;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass)__		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,assert,is,assignable,scheduler,factory,class,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1467730834;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass)__		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,assert,is,assignable,scheduler,factory,class,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1477045587;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		Assert.isAssignable(SchedulerFactory.class, schedulerFactoryClass)__		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,assert,is,assignable,scheduler,factory,class,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1485810955;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1496837955;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1498780456;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1502974979;Set the Quartz SchedulerFactory implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1517327709;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is {@link StdSchedulerFactory}, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,link,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1517344264;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} or_{@link #setQuartzProperties "quartzProperties"} on {@code SchedulerFactoryBean}._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,or,link,set,quartz,properties,quartz,properties,on,code,scheduler,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1517348142;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1518264213;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1520537868;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1526424333;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1530174524;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1530174524;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1530190293;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1532091916;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1532612815;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1533213510;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1534414082;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1537388368;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass);1539119605;Set the Quartz {@link SchedulerFactory} implementation to use._<p>Default is the {@link StdSchedulerFactory} class, reading in the standard_{@code quartz.properties} from {@code quartz.jar}. For applying custom Quartz_properties, specify {@link #setConfigLocation "configLocation"} and/or_{@link #setQuartzProperties "quartzProperties"} etc on this local_{@code SchedulerFactoryBean} instance._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties_@see #setTaskExecutor_@see #setDataSource;public void setSchedulerFactoryClass(Class<? extends SchedulerFactory> schedulerFactoryClass) {_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,link,scheduler,factory,implementation,to,use,p,default,is,the,link,std,scheduler,factory,class,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,for,applying,custom,quartz,properties,specify,link,set,config,location,config,location,and,or,link,set,quartz,properties,quartz,properties,etc,on,this,local,code,scheduler,factory,bean,instance,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties,see,set,task,executor,see,set,data,source;public,void,set,scheduler,factory,class,class,extends,scheduler,factory,scheduler,factory,class,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1328020251;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1356735495;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1357119239;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1362408075;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1363730577;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1368482696;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1375198429;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1385412762;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1388939058;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1388954345;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1395953963;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1403791284;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1405696904;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1408389938;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1467730834;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1477045587;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeDataSource();1485810955;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Override 	public int getPhase();1356735495;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1368482696;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1375198429;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1385412762;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1388939058;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1388954345;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1395953963;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1403791284;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1405696904;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1408389938;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1467730834;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1477045587;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1485810955;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1496837955;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1498780456;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1502974979;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1517327709;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1517344264;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1517348142;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1518264213;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1520537868;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1526424333;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1530174524;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1530174524;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1530190293;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1532091916;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1532612815;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1533213510;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1534414082;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1537388368;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> @Override 	public int getPhase();1539119605;Return the phase in which this scheduler will be started and stopped.;@Override_	public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;override,public,int,get,phase,return,this,phase
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1496837955;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1498780456;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1502974979;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1517327709;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1517344264;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1517348142;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1518264213;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1520537868;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1526424333;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1530174524;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1530174524;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1530190293;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1532091916;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1532612815;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1533213510;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1534414082;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1537388368;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName) 			throws SchedulerException;1539119605;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, @Nullable String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				this.resourceLoader.getClassLoader() != threadContextClassLoader)__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,nullable,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1517327709;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance._If this method is being called, it overrides any class specified_through {@link #setSchedulerFactoryClass}._@since 5.0.4_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,being,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,since,5,0,4,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1517344264;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}._<p>An externally provided {@code SchedulerFactory} instance may get initialized_from local {@code SchedulerFactoryBean} settings (such as {@link #setConfigLocation}_or {@link #setQuartzProperties}) but only if it extends from {@link StdSchedulerFactory},_inheriting the common {@link StdSchedulerFactory#initialize(Properties)} method._Otherwise, all such local settings will be ignored here in {@code SchedulerFactoryBean},_expecting the external {@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,p,an,externally,provided,code,scheduler,factory,instance,may,get,initialized,from,local,code,scheduler,factory,bean,settings,such,as,link,set,config,location,or,link,set,quartz,properties,but,only,if,it,extends,from,link,std,scheduler,factory,inheriting,the,common,link,std,scheduler,factory,initialize,properties,method,otherwise,all,such,local,settings,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1517348142;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1518264213;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1520537868;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1526424333;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1530174524;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1530174524;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1530190293;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1532091916;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1532612815;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1533213510;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1534414082;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1537388368;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setSchedulerFactory(SchedulerFactory schedulerFactory);1539119605;Set an external Quartz {@link SchedulerFactory} instance to use._<p>Default is an internal {@link StdSchedulerFactory} instance. If this method is_called, it overrides any class specified through {@link #setSchedulerFactoryClass}_as well as any settings specified through {@link #setConfigLocation},_{@link #setQuartzProperties}, {@link #setTaskExecutor} or {@link #setDataSource}._<p><b>NOTE:</b> With an externally provided {@code SchedulerFactory} instance,_local settings such as {@link #setConfigLocation} or {@link #setQuartzProperties}_will be ignored here in {@code SchedulerFactoryBean}, expecting the external_{@code SchedulerFactory} instance to get initialized on its own._@since 4.3.15_@see #setSchedulerFactoryClass;public void setSchedulerFactory(SchedulerFactory schedulerFactory) {_		this.schedulerFactory = schedulerFactory__	};set,an,external,quartz,link,scheduler,factory,instance,to,use,p,default,is,an,internal,link,std,scheduler,factory,instance,if,this,method,is,called,it,overrides,any,class,specified,through,link,set,scheduler,factory,class,as,well,as,any,settings,specified,through,link,set,config,location,link,set,quartz,properties,link,set,task,executor,or,link,set,data,source,p,b,note,b,with,an,externally,provided,code,scheduler,factory,instance,local,settings,such,as,link,set,config,location,or,link,set,quartz,properties,will,be,ignored,here,in,code,scheduler,factory,bean,expecting,the,external,code,scheduler,factory,instance,to,get,initialized,on,its,own,since,4,3,15,see,set,scheduler,factory,class;public,void,set,scheduler,factory,scheduler,factory,scheduler,factory,this,scheduler,factory,scheduler,factory
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1328020251;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1356735495;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1357119239;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1362408075;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1363730577;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1368482696;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1375198429;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1385412762;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1388939058;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1388954345;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1395953963;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1403791284;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1405696904;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1408389938;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1467730834;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1477045587;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1485810955;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1496837955;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1498780456;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1502974979;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1517327709;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1517344264;Set the Spring TaskExecutor to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a JDK 1.5 ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,spring,task,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,jdk,1,5,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1517348142;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1518264213;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1520537868;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1526424333;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1530174524;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1530174524;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1530190293;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1532091916;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1532612815;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.commonj.WorkManagerTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,commonj,work,manager,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1533213510;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,concurrent,default,managed,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1534414082;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,concurrent,default,managed,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1537388368;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,concurrent,default,managed,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setTaskExecutor(Executor taskExecutor);1539119605;Set a Spring-managed {@link Executor} to use as Quartz backend._Exposed as thread pool through the Quartz SPI._<p>Can be used to assign a local JDK ThreadPoolExecutor or a CommonJ_WorkManager as Quartz backend, to avoid Quartz's manual thread creation._<p>By default, a Quartz SimpleThreadPool will be used, configured through_the corresponding Quartz properties._@since 2.0_@see #setQuartzProperties_@see LocalTaskExecutorThreadPool_@see org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor_@see org.springframework.scheduling.concurrent.DefaultManagedTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,spring,managed,link,executor,to,use,as,quartz,backend,exposed,as,thread,pool,through,the,quartz,spi,p,can,be,used,to,assign,a,local,jdk,thread,pool,executor,or,a,common,j,work,manager,as,quartz,backend,to,avoid,quartz,s,manual,thread,creation,p,by,default,a,quartz,simple,thread,pool,will,be,used,configured,through,the,corresponding,quartz,properties,since,2,0,see,set,quartz,properties,see,local,task,executor,thread,pool,see,org,springframework,scheduling,concurrent,thread,pool,task,executor,see,org,springframework,scheduling,concurrent,default,managed,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1328020251;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1356735495;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1357119239;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1362408075;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1363730577;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1368482696;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1375198429;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1385412762;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1388939058;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1388954345;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1395953963;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1403791284;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1405696904;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1408389938;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1467730834;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1477045587;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1485810955;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1496837955;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1498780456;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1502974979;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1517327709;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1517344264;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1517348142;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1518264213;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1520537868;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1526424333;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1530174524;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1530174524;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1530190293;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1532091916;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1532612815;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1533213510;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1534414082;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1537388368;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void setAutoStartup(boolean autoStartup);1539119605;Set whether to automatically start the scheduler after initialization._<p>Default is "true"_ set this to "false" to allow for manual startup.;public void setAutoStartup(boolean autoStartup) {_		this.autoStartup = autoStartup__	};set,whether,to,automatically,start,the,scheduler,after,initialization,p,default,is,true,set,this,to,false,to,allow,for,manual,startup;public,void,set,auto,startup,boolean,auto,startup,this,auto,startup,auto,startup
SchedulerFactoryBean -> public void destroy() throws SchedulerException;1328020251;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void destroy() throws SchedulerException;1357119239;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void destroy() throws SchedulerException;1362408075;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void destroy() throws SchedulerException;1363730577;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1328020251;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1356735495;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1357119239;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1362408075;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1363730577;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1368482696;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1375198429;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1385412762;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1388939058;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1388954345;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1395953963;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1403791284;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1405696904;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1408389938;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1467730834;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1477045587;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public static Executor getConfigTimeTaskExecutor();1485810955;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1328020251;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1356735495;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1357119239;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1362408075;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1363730577;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1368482696;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1375198429;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1385412762;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1388939058;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1388954345;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1395953963;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1403791284;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1405696904;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1408389938;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1467730834;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1477045587;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1485810955;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1496837955;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1498780456;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1502974979;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1517327709;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1517344264;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1517348142;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1518264213;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1520537868;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1526424333;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1530174524;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1530174524;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1530190293;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1532091916;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1532612815;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1533213510;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1534414082;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1537388368;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> public void setStartupDelay(int startupDelay);1539119605;Set the number of seconds to wait after initialization before_starting the scheduler asynchronously. Default is 0, meaning_immediate synchronous startup on initialization of this bean._<p>Setting this to 10 or 20 seconds makes sense if no jobs_should be run before the entire application has started up.;public void setStartupDelay(int startupDelay) {_		this.startupDelay = startupDelay__	};set,the,number,of,seconds,to,wait,after,initialization,before,starting,the,scheduler,asynchronously,default,is,0,meaning,immediate,synchronous,startup,on,initialization,of,this,bean,p,setting,this,to,10,or,20,seconds,makes,sense,if,no,jobs,should,be,run,before,the,entire,application,has,started,up;public,void,set,startup,delay,int,startup,delay,this,startup,delay,startup,delay
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1496837955;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1498780456;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1502974979;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1517327709;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1517344264;Return the TaskExecutor for the currently configured Quartz Scheduler,_to be used by LocalTaskExecutorThreadPool._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,task,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1517348142;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1518264213;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1520537868;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1526424333;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1530174524;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1530174524;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1530190293;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1532091916;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1532612815;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1533213510;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1534414082;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1537388368;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> @Nullable 	public static Executor getConfigTimeTaskExecutor();1539119605;Return the {@link Executor} for the currently configured Quartz Scheduler,_to be used by {@link LocalTaskExecutorThreadPool}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 2.0_@see #setTaskExecutor_@see LocalTaskExecutorThreadPool;@Nullable_	public static Executor getConfigTimeTaskExecutor() {_		return configTimeTaskExecutorHolder.get()__	};return,the,link,executor,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,task,executor,thread,pool,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,2,0,see,set,task,executor,see,local,task,executor,thread,pool;nullable,public,static,executor,get,config,time,task,executor,return,config,time,task,executor,holder,get
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1328020251;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1356735495;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1357119239;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1362408075;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1363730577;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1368482696;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1375198429;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1385412762;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1388939058;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1388954345;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1395953963;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1403791284;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1405696904;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1408389938;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1467730834;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1477045587;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1485810955;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1496837955;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1498780456;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1502974979;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1517327709;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1517344264;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1517348142;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1518264213;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1520537868;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1526424333;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1530174524;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1530174524;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1530190293;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1532091916;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1532612815;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1533213510;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1534414082;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1537388368;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository);1539119605;Set whether to expose the Spring-managed {@link Scheduler} instance in the_Quartz {@link SchedulerRepository}. Default is "false", since the Spring-managed_Scheduler is usually exclusively intended for access within the Spring context._<p>Switch this flag to "true" in order to expose the Scheduler globally._This is not recommended unless you have an existing Spring application that_relies on this behavior. Note that such global exposure was the accidental_default in earlier Spring versions_ this has been fixed as of Spring 2.5.6.;public void setExposeSchedulerInRepository(boolean exposeSchedulerInRepository) {_		this.exposeSchedulerInRepository = exposeSchedulerInRepository__	};set,whether,to,expose,the,spring,managed,link,scheduler,instance,in,the,quartz,link,scheduler,repository,default,is,false,since,the,spring,managed,scheduler,is,usually,exclusively,intended,for,access,within,the,spring,context,p,switch,this,flag,to,true,in,order,to,expose,the,scheduler,globally,this,is,not,recommended,unless,you,have,an,existing,spring,application,that,relies,on,this,behavior,note,that,such,global,exposure,was,the,accidental,default,in,earlier,spring,versions,this,has,been,fixed,as,of,spring,2,5,6;public,void,set,expose,scheduler,in,repository,boolean,expose,scheduler,in,repository,this,expose,scheduler,in,repository,expose,scheduler,in,repository
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1496837955;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1498780456;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1502974979;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1517327709;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1517344264;Return the DataSource for the currently configured Quartz Scheduler,_to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1517348142;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1518264213;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1520537868;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1526424333;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1530174524;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1530174524;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1530190293;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1532091916;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1532612815;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1533213510;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1534414082;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1537388368;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeDataSource();1539119605;Return the {@link DataSource} for the currently configured Quartz Scheduler,_to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeDataSource() {_		return configTimeDataSourceHolder.get()__	};return,the,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,data,source,return,config,time,data,source,holder,get
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1356735495;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1368482696;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1375198429;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1385412762;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1388939058;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1388954345;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1395953963;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1403791284;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1405696904;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1408389938;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1467730834;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1477045587;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1485810955;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1496837955;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		logger.info("Shutting down Quartz Scheduler")__		this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1498780456;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1502974979;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1517327709;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1517344264;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1517348142;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1518264213;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1520537868;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1526424333;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1530174524;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1530174524;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1530190293;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1532091916;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1532612815;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1533213510;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1534414082;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1537388368;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> @Override 	public void destroy() throws SchedulerException;1539119605;Shut down the Quartz scheduler on bean factory shutdown,_stopping all scheduled jobs.;@Override_	public void destroy() throws SchedulerException {_		if (this.scheduler != null) {_			logger.info("Shutting down Quartz Scheduler")__			this.scheduler.shutdown(this.waitForJobsToCompleteOnShutdown)__		}_	};shut,down,the,quartz,scheduler,on,bean,factory,shutdown,stopping,all,scheduled,jobs;override,public,void,destroy,throws,scheduler,exception,if,this,scheduler,null,logger,info,shutting,down,quartz,scheduler,this,scheduler,shutdown,this,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setPhase(int phase);1328020251;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1356735495;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1357119239;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1362408075;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1363730577;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1368482696;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1375198429;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1385412762;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1388939058;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1388954345;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1395953963;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1403791284;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1405696904;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1408389938;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1467730834;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1477045587;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1485810955;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1496837955;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1498780456;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1502974979;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1517327709;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1517344264;Specify the phase in which this scheduler should be started and_stopped. The startup order proceeds from lowest to highest, and_the shutdown order is the reverse of that. By default this value_is Integer.MAX_VALUE meaning that this scheduler starts as late_as possible and stops as soon as possible.;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1517348142;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1518264213;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1520537868;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1526424333;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1530174524;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1530174524;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1530190293;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1532091916;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1532612815;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1533213510;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1534414082;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1537388368;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setPhase(int phase);1539119605;Specify the phase in which this scheduler should be started and stopped._The startup order proceeds from lowest to highest, and the shutdown order_is the reverse of that. By default this value is {@code Integer.MAX_VALUE}_meaning that this scheduler starts as late as possible and stops as soon_as possible._@since 3.0;public void setPhase(int phase) {_		this.phase = phase__	};specify,the,phase,in,which,this,scheduler,should,be,started,and,stopped,the,startup,order,proceeds,from,lowest,to,highest,and,the,shutdown,order,is,the,reverse,of,that,by,default,this,value,is,code,integer,meaning,that,this,scheduler,starts,as,late,as,possible,and,stops,as,soon,as,possible,since,3,0;public,void,set,phase,int,phase,this,phase,phase
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1328020251;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1356735495;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1357119239;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1362408075;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1363730577;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1368482696;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1375198429;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1385412762;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1388939058;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1388954345;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1395953963;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1403791284;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is reponsible for the lifecycle of its Jobs._@see JobDetailBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,reponsible,for,the,lifecycle,of,its,jobs,see,job,detail,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1405696904;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1408389938;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1467730834;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1477045587;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1485810955;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1496837955;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1498780456;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1502974979;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1517327709;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1517344264;Set the key of an ApplicationContext reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1517348142;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1518264213;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1520537868;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1526424333;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1530174524;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1530174524;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1530190293;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1532091916;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1532612815;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1533213510;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1534414082;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1537388368;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey);1539119605;Set the key of an {@link ApplicationContext} reference to expose in the_SchedulerContext, for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put an ApplicationContext reference into the JobDataMap_but rather into the SchedulerContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will_correspond to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._@see JobDetailFactoryBean#setApplicationContextJobDataKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextSchedulerContextKey(String applicationContextSchedulerContextKey) {_		this.applicationContextSchedulerContextKey = applicationContextSchedulerContextKey__	};set,the,key,of,an,link,application,context,reference,to,expose,in,the,scheduler,context,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,see,job,detail,factory,bean,set,application,context,job,data,key,see,org,springframework,context,application,context;public,void,set,application,context,scheduler,context,key,string,application,context,scheduler,context,key,this,application,context,scheduler,context,key,application,context,scheduler,context,key
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1328020251;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1356735495;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1357119239;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1362408075;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1363730577;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1368482696;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1375198429;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1385412762;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1388939058;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1388954345;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1395953963;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1403791284;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1405696904;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1408389938;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1467730834;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1477045587;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1485810955;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1496837955;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1498780456;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1502974979;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1517327709;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1517344264;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1517348142;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1518264213;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1520537868;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1526424333;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1530174524;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1530174524;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1530190293;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1532091916;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1532612815;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1533213510;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1534414082;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1537388368;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> public void setConfigLocation(Resource configLocation);1539119605;Set the location of the Quartz properties config file, for example_as classpath resource "classpath:quartz.properties"._<p>Note: Can be omitted when all necessary properties are specified_locally via this bean, or when relying on Quartz' default configuration._@see #setQuartzProperties;public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,quartz,properties,config,file,for,example,as,classpath,resource,classpath,quartz,properties,p,note,can,be,omitted,when,all,necessary,properties,are,specified,locally,via,this,bean,or,when,relying,on,quartz,default,configuration,see,set,quartz,properties;public,void,set,config,location,resource,config,location,this,config,location,config,location
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1328020251;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1356735495;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1357119239;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1362408075;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1363730577;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1368482696;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1375198429;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1385412762;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(SchedulerFactory schedulerFactory) 			throws SchedulerException, IOException;1388939058;Load and/or apply Quartz properties to the given SchedulerFactory._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(SchedulerFactory schedulerFactory)_			throws SchedulerException, IOException {__		if (!(schedulerFactory instanceof StdSchedulerFactory)) {_			if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_			return__		}__		Properties mergedProps = new Properties()___		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)___		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		((StdSchedulerFactory) schedulerFactory).initialize(mergedProps)__	};load,and,or,apply,quartz,properties,to,the,given,scheduler,factory,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,if,scheduler,factory,instanceof,std,scheduler,factory,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,std,scheduler,factory,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class schedulerFactoryClass);1328020251;Set the Quartz SchedulerFactory implementation to use._<p>Default is StdSchedulerFactory, reading in the standard_<code>quartz.properties</code> from <code>quartz.jar</code>._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class schedulerFactoryClass) {_		if (schedulerFactoryClass == null || !SchedulerFactory.class.isAssignableFrom(schedulerFactoryClass)) {_			throw new IllegalArgumentException("schedulerFactoryClass must implement [org.quartz.SchedulerFactory]")__		}_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,code,from,code,quartz,jar,code,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,scheduler,factory,class,if,scheduler,factory,class,null,scheduler,factory,class,is,assignable,from,scheduler,factory,class,throw,new,illegal,argument,exception,scheduler,factory,class,must,implement,org,quartz,scheduler,factory,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class schedulerFactoryClass);1356735495;Set the Quartz SchedulerFactory implementation to use._<p>Default is StdSchedulerFactory, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class schedulerFactoryClass) {_		if (schedulerFactoryClass == null || !SchedulerFactory.class.isAssignableFrom(schedulerFactoryClass)) {_			throw new IllegalArgumentException("schedulerFactoryClass must implement [org.quartz.SchedulerFactory]")__		}_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,scheduler,factory,class,if,scheduler,factory,class,null,scheduler,factory,class,is,assignable,from,scheduler,factory,class,throw,new,illegal,argument,exception,scheduler,factory,class,must,implement,org,quartz,scheduler,factory,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class schedulerFactoryClass);1357119239;Set the Quartz SchedulerFactory implementation to use._<p>Default is StdSchedulerFactory, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class schedulerFactoryClass) {_		if (schedulerFactoryClass == null || !SchedulerFactory.class.isAssignableFrom(schedulerFactoryClass)) {_			throw new IllegalArgumentException("schedulerFactoryClass must implement [org.quartz.SchedulerFactory]")__		}_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,scheduler,factory,class,if,scheduler,factory,class,null,scheduler,factory,class,is,assignable,from,scheduler,factory,class,throw,new,illegal,argument,exception,scheduler,factory,class,must,implement,org,quartz,scheduler,factory,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class schedulerFactoryClass);1362408075;Set the Quartz SchedulerFactory implementation to use._<p>Default is StdSchedulerFactory, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class schedulerFactoryClass) {_		if (schedulerFactoryClass == null || !SchedulerFactory.class.isAssignableFrom(schedulerFactoryClass)) {_			throw new IllegalArgumentException("schedulerFactoryClass must implement [org.quartz.SchedulerFactory]")__		}_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,scheduler,factory,class,if,scheduler,factory,class,null,scheduler,factory,class,is,assignable,from,scheduler,factory,class,throw,new,illegal,argument,exception,scheduler,factory,class,must,implement,org,quartz,scheduler,factory,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class schedulerFactoryClass);1363730577;Set the Quartz SchedulerFactory implementation to use._<p>Default is StdSchedulerFactory, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class schedulerFactoryClass) {_		if (schedulerFactoryClass == null || !SchedulerFactory.class.isAssignableFrom(schedulerFactoryClass)) {_			throw new IllegalArgumentException("schedulerFactoryClass must implement [org.quartz.SchedulerFactory]")__		}_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,scheduler,factory,class,if,scheduler,factory,class,null,scheduler,factory,class,is,assignable,from,scheduler,factory,class,throw,new,illegal,argument,exception,scheduler,factory,class,must,implement,org,quartz,scheduler,factory,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class schedulerFactoryClass);1368482696;Set the Quartz SchedulerFactory implementation to use._<p>Default is StdSchedulerFactory, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class schedulerFactoryClass) {_		if (schedulerFactoryClass == null || !SchedulerFactory.class.isAssignableFrom(schedulerFactoryClass)) {_			throw new IllegalArgumentException("schedulerFactoryClass must implement [org.quartz.SchedulerFactory]")__		}_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,scheduler,factory,class,if,scheduler,factory,class,null,scheduler,factory,class,is,assignable,from,scheduler,factory,class,throw,new,illegal,argument,exception,scheduler,factory,class,must,implement,org,quartz,scheduler,factory,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> public void setSchedulerFactoryClass(Class schedulerFactoryClass);1375198429;Set the Quartz SchedulerFactory implementation to use._<p>Default is StdSchedulerFactory, reading in the standard_{@code quartz.properties} from {@code quartz.jar}._To use custom Quartz properties, specify the "configLocation"_or "quartzProperties" bean property on this FactoryBean._@see org.quartz.impl.StdSchedulerFactory_@see #setConfigLocation_@see #setQuartzProperties;public void setSchedulerFactoryClass(Class schedulerFactoryClass) {_		if (schedulerFactoryClass == null || !SchedulerFactory.class.isAssignableFrom(schedulerFactoryClass)) {_			throw new IllegalArgumentException("schedulerFactoryClass must implement [org.quartz.SchedulerFactory]")__		}_		this.schedulerFactoryClass = schedulerFactoryClass__	};set,the,quartz,scheduler,factory,implementation,to,use,p,default,is,std,scheduler,factory,reading,in,the,standard,code,quartz,properties,from,code,quartz,jar,to,use,custom,quartz,properties,specify,the,config,location,or,quartz,properties,bean,property,on,this,factory,bean,see,org,quartz,impl,std,scheduler,factory,see,set,config,location,see,set,quartz,properties;public,void,set,scheduler,factory,class,class,scheduler,factory,class,if,scheduler,factory,class,null,scheduler,factory,class,is,assignable,from,scheduler,factory,class,throw,new,illegal,argument,exception,scheduler,factory,class,must,implement,org,quartz,scheduler,factory,this,scheduler,factory,class,scheduler,factory,class
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1328020251;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's <code>getScheduler</code>_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,code,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1356735495;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1357119239;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1362408075;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1363730577;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1368482696;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1375198429;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1385412762;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1388939058;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1388954345;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1395953963;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1403791284;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1405696904;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1408389938;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1467730834;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1477045587;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName) 			throws SchedulerException;1485810955;Create the Scheduler instance for the given factory and scheduler name._Called by {@link #afterPropertiesSet}._<p>The default implementation invokes SchedulerFactory's {@code getScheduler}_method. Can be overridden for custom Scheduler creation._@param schedulerFactory the factory to create the Scheduler with_@param schedulerName the name of the scheduler to create_@return the Scheduler instance_@throws SchedulerException if thrown by Quartz methods_@see #afterPropertiesSet_@see org.quartz.SchedulerFactory#getScheduler;protected Scheduler createScheduler(SchedulerFactory schedulerFactory, String schedulerName)_			throws SchedulerException {__		_		Thread currentThread = Thread.currentThread()__		ClassLoader threadContextClassLoader = currentThread.getContextClassLoader()__		boolean overrideClassLoader = (this.resourceLoader != null &&_				!this.resourceLoader.getClassLoader().equals(threadContextClassLoader))__		if (overrideClassLoader) {_			currentThread.setContextClassLoader(this.resourceLoader.getClassLoader())__		}_		try {_			SchedulerRepository repository = SchedulerRepository.getInstance()__			synchronized (repository) {_				Scheduler existingScheduler = (schedulerName != null ? repository.lookup(schedulerName) : null)__				Scheduler newScheduler = schedulerFactory.getScheduler()__				if (newScheduler == existingScheduler) {_					throw new IllegalStateException("Active Scheduler of name '" + schedulerName + "' already registered " +_							"in Quartz SchedulerRepository. Cannot create a new Spring-managed Scheduler of the same name!")__				}_				if (!this.exposeSchedulerInRepository) {_					_					SchedulerRepository.getInstance().remove(newScheduler.getSchedulerName())__				}_				return newScheduler__			}_		}_		finally {_			if (overrideClassLoader) {_				_				currentThread.setContextClassLoader(threadContextClassLoader)__			}_		}_	};create,the,scheduler,instance,for,the,given,factory,and,scheduler,name,called,by,link,after,properties,set,p,the,default,implementation,invokes,scheduler,factory,s,code,get,scheduler,method,can,be,overridden,for,custom,scheduler,creation,param,scheduler,factory,the,factory,to,create,the,scheduler,with,param,scheduler,name,the,name,of,the,scheduler,to,create,return,the,scheduler,instance,throws,scheduler,exception,if,thrown,by,quartz,methods,see,after,properties,set,see,org,quartz,scheduler,factory,get,scheduler;protected,scheduler,create,scheduler,scheduler,factory,scheduler,factory,string,scheduler,name,throws,scheduler,exception,thread,current,thread,thread,current,thread,class,loader,thread,context,class,loader,current,thread,get,context,class,loader,boolean,override,class,loader,this,resource,loader,null,this,resource,loader,get,class,loader,equals,thread,context,class,loader,if,override,class,loader,current,thread,set,context,class,loader,this,resource,loader,get,class,loader,try,scheduler,repository,repository,scheduler,repository,get,instance,synchronized,repository,scheduler,existing,scheduler,scheduler,name,null,repository,lookup,scheduler,name,null,scheduler,new,scheduler,scheduler,factory,get,scheduler,if,new,scheduler,existing,scheduler,throw,new,illegal,state,exception,active,scheduler,of,name,scheduler,name,already,registered,in,quartz,scheduler,repository,cannot,create,a,new,spring,managed,scheduler,of,the,same,name,if,this,expose,scheduler,in,repository,scheduler,repository,get,instance,remove,new,scheduler,get,scheduler,name,return,new,scheduler,finally,if,override,class,loader,current,thread,set,context,class,loader,thread,context,class,loader
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1517344264;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1517348142;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1518264213;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1520537868;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1526424333;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1530174524;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1530174524;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1530190293;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isInfoEnabled()) {_				logger.info("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,info,enabled,logger,info,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1532091916;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,debug,enabled,logger,debug,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1532612815;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,debug,enabled,logger,debug,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1533213510;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,debug,enabled,logger,debug,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1534414082;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.put(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}_		if (this.schedulerName != null) {_			mergedProps.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,debug,enabled,logger,debug,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,put,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,put,std,scheduler,factory,this,scheduler,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1537388368;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}_		else {_			String nameProp = mergedProps.getProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME)__			if (nameProp != null) {_				this.schedulerName = nameProp__			}_			else if (this.beanName != null) {_				mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.beanName)__				this.schedulerName = this.beanName__			}_		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,debug,enabled,logger,debug,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,set,property,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,set,property,std,scheduler,factory,this,scheduler,name,else,string,name,prop,merged,props,get,property,std,scheduler,factory,if,name,prop,null,this,scheduler,name,name,prop,else,if,this,bean,name,null,merged,props,set,property,std,scheduler,factory,this,bean,name,this,scheduler,name,this,bean,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException;1539119605;Initialize the given SchedulerFactory, applying locally defined Quartz properties to it._@param schedulerFactory the SchedulerFactory to initialize;private void initSchedulerFactory(StdSchedulerFactory schedulerFactory) throws SchedulerException, IOException {_		Properties mergedProps = new Properties()__		if (this.resourceLoader != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_CLASS_LOAD_HELPER_CLASS,_					ResourceLoaderClassLoadHelper.class.getName())__		}__		if (this.taskExecutor != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS,_					LocalTaskExecutorThreadPool.class.getName())__		}_		else {_			_			_			mergedProps.setProperty(StdSchedulerFactory.PROP_THREAD_POOL_CLASS, SimpleThreadPool.class.getName())__			mergedProps.setProperty(PROP_THREAD_COUNT, Integer.toString(DEFAULT_THREAD_COUNT))__		}__		if (this.configLocation != null) {_			if (logger.isDebugEnabled()) {_				logger.debug("Loading Quartz config from [" + this.configLocation + "]")__			}_			PropertiesLoaderUtils.fillProperties(mergedProps, this.configLocation)__		}__		CollectionUtils.mergePropertiesIntoMap(this.quartzProperties, mergedProps)__		if (this.dataSource != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_JOB_STORE_CLASS, LocalDataSourceJobStore.class.getName())__		}__		_		if (this.schedulerName != null) {_			mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.schedulerName)__		}_		else {_			String nameProp = mergedProps.getProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME)__			if (nameProp != null) {_				this.schedulerName = nameProp__			}_			else if (this.beanName != null) {_				mergedProps.setProperty(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME, this.beanName)__				this.schedulerName = this.beanName__			}_		}__		schedulerFactory.initialize(mergedProps)__	};initialize,the,given,scheduler,factory,applying,locally,defined,quartz,properties,to,it,param,scheduler,factory,the,scheduler,factory,to,initialize;private,void,init,scheduler,factory,std,scheduler,factory,scheduler,factory,throws,scheduler,exception,ioexception,properties,merged,props,new,properties,if,this,resource,loader,null,merged,props,set,property,std,scheduler,factory,resource,loader,class,load,helper,class,get,name,if,this,task,executor,null,merged,props,set,property,std,scheduler,factory,local,task,executor,thread,pool,class,get,name,else,merged,props,set,property,std,scheduler,factory,simple,thread,pool,class,get,name,merged,props,set,property,integer,to,string,if,this,config,location,null,if,logger,is,debug,enabled,logger,debug,loading,quartz,config,from,this,config,location,properties,loader,utils,fill,properties,merged,props,this,config,location,collection,utils,merge,properties,into,map,this,quartz,properties,merged,props,if,this,data,source,null,merged,props,set,property,std,scheduler,factory,local,data,source,job,store,class,get,name,if,this,scheduler,name,null,merged,props,set,property,std,scheduler,factory,this,scheduler,name,else,string,name,prop,merged,props,get,property,std,scheduler,factory,if,name,prop,null,this,scheduler,name,name,prop,else,if,this,bean,name,null,merged,props,set,property,std,scheduler,factory,this,bean,name,this,scheduler,name,this,bean,name,scheduler,factory,initialize,merged,props
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1328020251;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1356735495;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1357119239;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1362408075;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1363730577;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1368482696;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1375198429;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1385412762;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1388939058;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1388954345;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1395953963;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1403791284;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1405696904;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1408389938;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1467730834;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1477045587;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1485810955;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1496837955;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1498780456;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1502974979;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1517327709;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1517344264;Set the Quartz JobFactory to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1517348142;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1518264213;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1520537868;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1526424333;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1530174524;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1530174524;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1530190293;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1532091916;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1532612815;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1533213510;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1534414082;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1537388368;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> public void setJobFactory(JobFactory jobFactory);1539119605;Set the Quartz {@link JobFactory} to use for this Scheduler._<p>Default is Spring's {@link AdaptableJobFactory}, which supports_{@link java.lang.Runnable} objects as well as standard Quartz_{@link org.quartz.Job} instances. Note that this default only applies_to a <i>local</i> Scheduler, not to a RemoteScheduler (where setting_a custom JobFactory is not supported by Quartz)._<p>Specify an instance of Spring's {@link SpringBeanJobFactory} here_(typically as an inner bean definition) to automatically populate a job's_bean properties from the specified job data map and scheduler context._@since 2.0_@see AdaptableJobFactory_@see SpringBeanJobFactory;public void setJobFactory(JobFactory jobFactory) {_		this.jobFactory = jobFactory__		this.jobFactorySet = true__	};set,the,quartz,link,job,factory,to,use,for,this,scheduler,p,default,is,spring,s,link,adaptable,job,factory,which,supports,link,java,lang,runnable,objects,as,well,as,standard,quartz,link,org,quartz,job,instances,note,that,this,default,only,applies,to,a,i,local,i,scheduler,not,to,a,remote,scheduler,where,setting,a,custom,job,factory,is,not,supported,by,quartz,p,specify,an,instance,of,spring,s,link,spring,bean,job,factory,here,typically,as,an,inner,bean,definition,to,automatically,populate,a,job,s,bean,properties,from,the,specified,job,data,map,and,scheduler,context,since,2,0,see,adaptable,job,factory,see,spring,bean,job,factory;public,void,set,job,factory,job,factory,job,factory,this,job,factory,job,factory,this,job,factory,set,true
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1328020251;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1356735495;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1357119239;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1362408075;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1363730577;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1368482696;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1375198429;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1385412762;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1388939058;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1388954345;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1395953963;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1403791284;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1405696904;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1408389938;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1467730834;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1477045587;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1485810955;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1496837955;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			this.scheduler.getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			this.scheduler.getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,this,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,this,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1498780456;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			getScheduler().getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			getScheduler().getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,get,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,get,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1502974979;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			getScheduler().getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			getScheduler().getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,get,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,get,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1517327709;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			getScheduler().getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			getScheduler().getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,get,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,get,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1517344264;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			getScheduler().getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			getScheduler().getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,get,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,get,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1517348142;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			getScheduler().getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			getScheduler().getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,get,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,get,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1518264213;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			getScheduler().getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			getScheduler().getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,get,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,get,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> private void populateSchedulerContext() throws SchedulerException;1520537868;Expose the specified context attributes and/or the current_ApplicationContext in the Quartz SchedulerContext.;private void populateSchedulerContext() throws SchedulerException {_		_		if (this.schedulerContextMap != null) {_			getScheduler().getContext().putAll(this.schedulerContextMap)__		}__		_		if (this.applicationContextSchedulerContextKey != null) {_			if (this.applicationContext == null) {_				throw new IllegalStateException(_					"SchedulerFactoryBean needs to be set up in an ApplicationContext " +_					"to be able to handle an 'applicationContextSchedulerContextKey'")__			}_			getScheduler().getContext().put(this.applicationContextSchedulerContextKey, this.applicationContext)__		}_	};expose,the,specified,context,attributes,and,or,the,current,application,context,in,the,quartz,scheduler,context;private,void,populate,scheduler,context,throws,scheduler,exception,if,this,scheduler,context,map,null,get,scheduler,get,context,put,all,this,scheduler,context,map,if,this,application,context,scheduler,context,key,null,if,this,application,context,null,throw,new,illegal,state,exception,scheduler,factory,bean,needs,to,be,set,up,in,an,application,context,to,be,able,to,handle,an,application,context,scheduler,context,key,get,scheduler,get,context,put,this,application,context,scheduler,context,key,this,application,context
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1496837955;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1498780456;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1502974979;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1517327709;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1517344264;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1517348142;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1518264213;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1520537868;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1526424333;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1530174524;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1530174524;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1530190293;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1532091916;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1532612815;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1533213510;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1534414082;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1537388368;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> @Nullable 	public static DataSource getConfigTimeNonTransactionalDataSource();1539119605;Return the non-transactional {@link DataSource} for the currently configured_Quartz Scheduler, to be used by {@link LocalDataSourceJobStore}._<p>This instance will be set before initialization of the corresponding Scheduler,_and reset immediately afterwards. It is thus only available during configuration._@since 1.1_@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;@Nullable_	public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,link,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,link,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,since,1,1,see,set,non,transactional,data,source,see,local,data,source,job,store;nullable,public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public int getPhase();1328020251;Return the phase in which this scheduler will be started and stopped.;public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;public,int,get,phase,return,this,phase
SchedulerFactoryBean -> public int getPhase();1357119239;Return the phase in which this scheduler will be started and stopped.;public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;public,int,get,phase,return,this,phase
SchedulerFactoryBean -> public int getPhase();1362408075;Return the phase in which this scheduler will be started and stopped.;public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;public,int,get,phase,return,this,phase
SchedulerFactoryBean -> public int getPhase();1363730577;Return the phase in which this scheduler will be started and stopped.;public int getPhase() {_		return this.phase__	};return,the,phase,in,which,this,scheduler,will,be,started,and,stopped;public,int,get,phase,return,this,phase
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1517344264;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory != null) {_			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			_		}_		else {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1517348142;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1518264213;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1520537868;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1526424333;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1530174524;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1530174524;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1530190293;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1532091916;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1532612815;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1533213510;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1534414082;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1537388368;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException;1539119605;Create a SchedulerFactory if necessary and apply locally defined Quartz properties to it._@return the initialized SchedulerFactory;private SchedulerFactory prepareSchedulerFactory() throws SchedulerException, IOException {_		SchedulerFactory schedulerFactory = this.schedulerFactory__		if (schedulerFactory == null) {_			_			schedulerFactory = BeanUtils.instantiateClass(this.schedulerFactoryClass)__			if (schedulerFactory instanceof StdSchedulerFactory) {_				initSchedulerFactory((StdSchedulerFactory) schedulerFactory)__			}_			else if (this.configLocation != null || this.quartzProperties != null ||_					this.taskExecutor != null || this.dataSource != null) {_				throw new IllegalArgumentException(_						"StdSchedulerFactory required for applying Quartz properties: " + schedulerFactory)__			}_			_		}_		_		return schedulerFactory__	};create,a,scheduler,factory,if,necessary,and,apply,locally,defined,quartz,properties,to,it,return,the,initialized,scheduler,factory;private,scheduler,factory,prepare,scheduler,factory,throws,scheduler,exception,ioexception,scheduler,factory,scheduler,factory,this,scheduler,factory,if,scheduler,factory,null,scheduler,factory,bean,utils,instantiate,class,this,scheduler,factory,class,if,scheduler,factory,instanceof,std,scheduler,factory,init,scheduler,factory,std,scheduler,factory,scheduler,factory,else,if,this,config,location,null,this,quartz,properties,null,this,task,executor,null,this,data,source,null,throw,new,illegal,argument,exception,std,scheduler,factory,required,for,applying,quartz,properties,scheduler,factory,return,scheduler,factory
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1328020251;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1356735495;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1357119239;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1362408075;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1363730577;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1368482696;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1375198429;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1385412762;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1388939058;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1388954345;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1395953963;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1403791284;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1405696904;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1408389938;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1467730834;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1477045587;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1485810955;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1496837955;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1498780456;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1502974979;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1517327709;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1517344264;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1517348142;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1518264213;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1520537868;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1526424333;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1530174524;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1530174524;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1530190293;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1532091916;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1532612815;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1533213510;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1534414082;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1537388368;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown);1539119605;Set whether to wait for running jobs to complete on shutdown._<p>Default is "false". Switch this to "true" if you prefer_fully completed jobs at the expense of a longer shutdown phase._@see org.quartz.Scheduler#shutdown(boolean);public void setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown) {_		this.waitForJobsToCompleteOnShutdown = waitForJobsToCompleteOnShutdown__	};set,whether,to,wait,for,running,jobs,to,complete,on,shutdown,p,default,is,false,switch,this,to,true,if,you,prefer,fully,completed,jobs,at,the,expense,of,a,longer,shutdown,phase,see,org,quartz,scheduler,shutdown,boolean;public,void,set,wait,for,jobs,to,complete,on,shutdown,boolean,wait,for,jobs,to,complete,on,shutdown,this,wait,for,jobs,to,complete,on,shutdown,wait,for,jobs,to,complete,on,shutdown
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1328020251;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1356735495;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1357119239;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1362408075;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1363730577;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1368482696;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1375198429;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1385412762;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1388939058;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1388954345;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1395953963;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1403791284;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1405696904;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1408389938;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1467730834;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1477045587;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public static DataSource getConfigTimeNonTransactionalDataSource();1485810955;Return the non-transactional DataSource for the currently configured_Quartz Scheduler, to be used by LocalDataSourceJobStore._<p>This instance will be set before initialization of the corresponding_Scheduler, and reset immediately afterwards. It is thus only available_during configuration._@see #setNonTransactionalDataSource_@see LocalDataSourceJobStore;public static DataSource getConfigTimeNonTransactionalDataSource() {_		return configTimeNonTransactionalDataSourceHolder.get()__	};return,the,non,transactional,data,source,for,the,currently,configured,quartz,scheduler,to,be,used,by,local,data,source,job,store,p,this,instance,will,be,set,before,initialization,of,the,corresponding,scheduler,and,reset,immediately,afterwards,it,is,thus,only,available,during,configuration,see,set,non,transactional,data,source,see,local,data,source,job,store;public,static,data,source,get,config,time,non,transactional,data,source,return,config,time,non,transactional,data,source,holder,get
SchedulerFactoryBean -> public boolean isAutoStartup();1328020251;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> public boolean isAutoStartup();1357119239;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> public boolean isAutoStartup();1362408075;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> public boolean isAutoStartup();1363730577;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1328020251;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1356735495;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1357119239;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1362408075;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1363730577;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1368482696;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1375198429;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1385412762;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1388939058;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1388954345;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1395953963;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1403791284;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1405696904;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1408389938;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1467730834;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1477045587;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1485810955;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1496837955;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1498780456;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1502974979;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1517327709;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1517344264;Set the default DataSource to be used by the Scheduler. If set,_this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1517348142;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1518264213;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1520537868;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1526424333;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1530174524;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1530174524;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1530190293;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1532091916;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1532612815;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1533213510;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1534414082;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1537388368;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> public void setDataSource(DataSource dataSource);1539119605;Set the default {@link DataSource} to be used by the Scheduler._If set, this will override corresponding settings in Quartz properties._<p>Note: If this is set, the Quartz settings should not define_a job store "dataSource" to avoid meaningless double configuration._<p>A Spring-specific subclass of Quartz' JobStoreCMT will be used._It is therefore strongly recommended to perform all operations on_the Scheduler within Spring-managed (or plain JTA) transactions._Else, database locking will not properly work and might even break_(e.g. if trying to obtain a lock on Oracle without a transaction)._<p>Supports both transactional and non-transactional DataSource access._With a non-XA DataSource and local Spring transactions, a single DataSource_argument is sufficient. In case of an XA DataSource and global JTA transactions,_SchedulerFactoryBean's "nonTransactionalDataSource" property should be set,_passing in a non-XA DataSource that will not participate in global transactions._@since 1.1_@see #setNonTransactionalDataSource_@see #setQuartzProperties_@see #setTransactionManager_@see LocalDataSourceJobStore;public void setDataSource(DataSource dataSource) {_		this.dataSource = dataSource__	};set,the,default,link,data,source,to,be,used,by,the,scheduler,if,set,this,will,override,corresponding,settings,in,quartz,properties,p,note,if,this,is,set,the,quartz,settings,should,not,define,a,job,store,data,source,to,avoid,meaningless,double,configuration,p,a,spring,specific,subclass,of,quartz,job,store,cmt,will,be,used,it,is,therefore,strongly,recommended,to,perform,all,operations,on,the,scheduler,within,spring,managed,or,plain,jta,transactions,else,database,locking,will,not,properly,work,and,might,even,break,e,g,if,trying,to,obtain,a,lock,on,oracle,without,a,transaction,p,supports,both,transactional,and,non,transactional,data,source,access,with,a,non,xa,data,source,and,local,spring,transactions,a,single,data,source,argument,is,sufficient,in,case,of,an,xa,data,source,and,global,jta,transactions,scheduler,factory,bean,s,non,transactional,data,source,property,should,be,set,passing,in,a,non,xa,data,source,that,will,not,participate,in,global,transactions,since,1,1,see,set,non,transactional,data,source,see,set,quartz,properties,see,set,transaction,manager,see,local,data,source,job,store;public,void,set,data,source,data,source,data,source,this,data,source,data,source
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1356735495;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1368482696;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1375198429;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1385412762;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1388939058;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1388954345;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1395953963;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1403791284;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1405696904;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1408389938;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1467730834;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1477045587;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1485810955;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1496837955;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1498780456;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1502974979;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1517327709;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1517344264;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1517348142;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1518264213;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1520537868;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1526424333;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1530174524;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1530174524;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1530190293;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1532091916;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1532612815;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1533213510;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1534414082;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1537388368;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
SchedulerFactoryBean -> @Override 	public boolean isAutoStartup();1539119605;Return whether this scheduler is configured for auto-startup. If "true",_the scheduler will start after the context is refreshed and after the_start delay, if any.;@Override_	public boolean isAutoStartup() {_		return this.autoStartup__	};return,whether,this,scheduler,is,configured,for,auto,startup,if,true,the,scheduler,will,start,after,the,context,is,refreshed,and,after,the,start,delay,if,any;override,public,boolean,is,auto,startup,return,this,auto,startup
