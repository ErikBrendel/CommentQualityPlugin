# id;timestamp;commentText;codeText;commentWords;codeWords
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1328020251;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1355313310;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1356735495;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1357119239;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1363730577;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1368482696;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1375197763;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1385412762;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1388939442;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1388954345;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1390908324;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1395953963;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1397568289;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1408389938;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1467730834;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1496259743;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1498780456;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1530174524;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> protected abstract Scheduler getScheduler()_;1533213002;Template method that determines the Scheduler to operate on._To be implemented by subclasses.;protected abstract Scheduler getScheduler()_;template,method,that,determines,the,scheduler,to,operate,on,to,be,implemented,by,subclasses;protected,abstract,scheduler,get,scheduler
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1388939442;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1388954345;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1390908324;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1395953963;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1397568289;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1408389938;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1467730834;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1496259743;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1498780456;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1530174524;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger... triggers);1533213002;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail;public void setTriggers(Trigger... triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1388939442;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1388954345;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1390908324;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1395953963;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1397568289;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1408389938;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1467730834;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1496259743;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1498780456;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1530174524;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations);1533213002;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String... jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1388939442;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1388954345;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1390908324;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1395953963;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1397568289;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1408389938;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1467730834;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1496259743;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1498780456;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1530174524;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener... globalJobListeners);1533213002;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener... globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1328020251;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar_@see org.quartz.Trigger#setCalendarName;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar,see,org,quartz,trigger,set,calendar,name;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1355313310;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar_@see org.quartz.Trigger#setCalendarName;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar,see,org,quartz,trigger,set,calendar,name;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1356735495;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar_@see org.quartz.Trigger#setCalendarName;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar,see,org,quartz,trigger,set,calendar,name;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1357119239;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar_@see org.quartz.Trigger#setCalendarName;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar,see,org,quartz,trigger,set,calendar,name;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1363730577;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar_@see org.quartz.Trigger#setCalendarName;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar,see,org,quartz,trigger,set,calendar,name;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1368482696;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar_@see org.quartz.Trigger#setCalendarName;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar,see,org,quartz,trigger,set,calendar,name;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1375197763;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar_@see org.quartz.Trigger#setCalendarName;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar,see,org,quartz,trigger,set,calendar,name;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1385412762;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar_@see org.quartz.Trigger#setCalendarName;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar,see,org,quartz,trigger,set,calendar,name;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1388939442;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1388954345;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1390908324;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1395953963;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1397568289;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1408389938;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1467730834;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1496259743;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1498780456;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1530174524;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars a Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,a,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setCalendars(Map<String, Calendar> calendars);1533213002;Register a list of Quartz Calendar objects with the Scheduler_that this FactoryBean creates, to be referenced by Triggers._@param calendars a Map with calendar names as keys as Calendar_objects as values_@see org.quartz.Calendar;public void setCalendars(Map<String, Calendar> calendars) {_		this.calendars = calendars__	};register,a,list,of,quartz,calendar,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,param,calendars,a,map,with,calendar,names,as,keys,as,calendar,objects,as,values,see,org,quartz,calendar;public,void,set,calendars,map,string,calendar,calendars,this,calendars,calendars
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1328020251;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1355313310;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1356735495;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1357119239;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1363730577;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1368482696;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1375197763;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1385412762;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1388939442;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1388954345;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1390908324;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1395953963;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1397568289;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1408389938;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1467730834;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1496259743;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1498780456;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1530174524;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setOverwriteExistingJobs(boolean overwriteExistingJobs);1533213002;Set whether any jobs defined on this SchedulerFactoryBean should overwrite_existing job definitions. Default is "false", to not overwrite already_registered jobs that have been read in from a persistent job store.;public void setOverwriteExistingJobs(boolean overwriteExistingJobs) {_		this.overwriteExistingJobs = overwriteExistingJobs__	};set,whether,any,jobs,defined,on,this,scheduler,factory,bean,should,overwrite,existing,job,definitions,default,is,false,to,not,overwrite,already,registered,jobs,that,have,been,read,in,from,a,persistent,job,store;public,void,set,overwrite,existing,jobs,boolean,overwrite,existing,jobs,this,overwrite,existing,jobs,overwrite,existing,jobs
SchedulerAccessor -> public void setJobDetails(JobDetail[] jobDetails);1328020251;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger_@see org.quartz.Trigger#setJobName;public void setJobDetails(JobDetail[] jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger,see,org,quartz,trigger,set,job,name;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail[] jobDetails);1355313310;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger_@see org.quartz.Trigger#setJobName;public void setJobDetails(JobDetail[] jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger,see,org,quartz,trigger,set,job,name;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail[] jobDetails);1356735495;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger_@see org.quartz.Trigger#setJobName;public void setJobDetails(JobDetail[] jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger,see,org,quartz,trigger,set,job,name;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail[] jobDetails);1357119239;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger_@see org.quartz.Trigger#setJobName;public void setJobDetails(JobDetail[] jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger,see,org,quartz,trigger,set,job,name;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail[] jobDetails);1363730577;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger_@see org.quartz.Trigger#setJobName;public void setJobDetails(JobDetail[] jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger,see,org,quartz,trigger,set,job,name;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail[] jobDetails);1368482696;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger_@see org.quartz.Trigger#setJobName;public void setJobDetails(JobDetail[] jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger,see,org,quartz,trigger,set,job,name;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail[] jobDetails);1375197763;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger_@see org.quartz.Trigger#setJobName;public void setJobDetails(JobDetail[] jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger,see,org,quartz,trigger,set,job,name;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail[] jobDetails);1385412762;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger_@see org.quartz.Trigger#setJobName;public void setJobDetails(JobDetail[] jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger,see,org,quartz,trigger,set,job,name;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener[] schedulerListeners);1328020251;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener[] schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener[] schedulerListeners);1355313310;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener[] schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener[] schedulerListeners);1356735495;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener[] schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener[] schedulerListeners);1357119239;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener[] schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener[] schedulerListeners);1363730577;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener[] schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener[] schedulerListeners);1368482696;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener[] schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener[] schedulerListeners);1375197763;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener[] schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener[] schedulerListeners);1385412762;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener[] schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1328020251;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1355313310;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1356735495;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1357119239;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1363730577;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1368482696;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1375197763;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1385412762;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1388939442;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1388954345;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1390908324;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1395953963;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1397568289;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1408389938;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1467730834;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1496259743;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1498780456;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1530174524;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> public void setTransactionManager(PlatformTransactionManager transactionManager);1533213002;Set the transaction manager to be used for registering jobs and triggers_that are defined by this SchedulerFactoryBean. Default is none_ setting_this only makes sense when specifying a DataSource for the Scheduler.;public void setTransactionManager(PlatformTransactionManager transactionManager) {_		this.transactionManager = transactionManager__	};set,the,transaction,manager,to,be,used,for,registering,jobs,and,triggers,that,are,defined,by,this,scheduler,factory,bean,default,is,none,setting,this,only,makes,sense,when,specifying,a,data,source,for,the,scheduler;public,void,set,transaction,manager,platform,transaction,manager,transaction,manager,this,transaction,manager,transaction,manager
SchedulerAccessor -> @Deprecated 	public void setJobListeners(JobListener... jobListeners);1388954345;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._<p>Note that non-global JobListeners are not supported on Quartz 2.x -_manually register a Matcher against the Quartz ListenerManager instead._@see org.quartz.JobListener#getName_@see JobDetailBean#setJobListenerNames_@deprecated as of Spring 4.0, since it only works on Quartz 1.x;@Deprecated_	public void setJobListeners(JobListener... jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,p,note,that,non,global,job,listeners,are,not,supported,on,quartz,2,x,manually,register,a,matcher,against,the,quartz,listener,manager,instead,see,org,quartz,job,listener,get,name,see,job,detail,bean,set,job,listener,names,deprecated,as,of,spring,4,0,since,it,only,works,on,quartz,1,x;deprecated,public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> @Deprecated 	public void setJobListeners(JobListener... jobListeners);1390908324;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._<p>Note that non-global JobListeners are not supported on Quartz 2.x -_manually register a Matcher against the Quartz ListenerManager instead._@see org.quartz.JobListener#getName_@see JobDetailBean#setJobListenerNames_@deprecated as of Spring 4.0, since it only works on Quartz 1.x;@Deprecated_	public void setJobListeners(JobListener... jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,p,note,that,non,global,job,listeners,are,not,supported,on,quartz,2,x,manually,register,a,matcher,against,the,quartz,listener,manager,instead,see,org,quartz,job,listener,get,name,see,job,detail,bean,set,job,listener,names,deprecated,as,of,spring,4,0,since,it,only,works,on,quartz,1,x;deprecated,public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1328020251;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}_		try {__			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				try {_					_					Class dataProcessorClass = getClass().getClassLoader().loadClass("org.quartz.xml.XMLSchedulingDataProcessor")__					logger.debug("Using Quartz 1.8 XMLSchedulingDataProcessor")__					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class).newInstance(clh)__					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class)__					for (String location : this.jobSchedulingDataLocations) {_						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler())__					}_				}_				catch (ClassNotFoundException ex) {_					_					Class dataProcessorClass = getClass().getClassLoader().loadClass("org.quartz.xml.JobSchedulingDataProcessor")__					logger.debug("Using Quartz 1.6 JobSchedulingDataProcessor")__					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class, boolean.class, boolean.class).newInstance(clh, true, true)__					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class, boolean.class)__					for (String location : this.jobSchedulingDataLocations) {_						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler(), this.overwriteExistingJobs)__					}_				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,try,class,data,processor,class,get,class,get,class,loader,load,class,org,quartz,xml,xmlscheduling,data,processor,logger,debug,using,quartz,1,8,xmlscheduling,data,processor,object,data,processor,data,processor,class,get,constructor,class,load,helper,class,new,instance,clh,method,process,file,and,schedule,jobs,data,processor,class,get,method,process,file,and,schedule,jobs,string,class,scheduler,class,for,string,location,this,job,scheduling,data,locations,process,file,and,schedule,jobs,invoke,data,processor,location,get,scheduler,catch,class,not,found,exception,ex,class,data,processor,class,get,class,get,class,loader,load,class,org,quartz,xml,job,scheduling,data,processor,logger,debug,using,quartz,1,6,job,scheduling,data,processor,object,data,processor,data,processor,class,get,constructor,class,load,helper,class,boolean,class,boolean,class,new,instance,clh,true,true,method,process,file,and,schedule,jobs,data,processor,class,get,method,process,file,and,schedule,jobs,string,class,scheduler,class,boolean,class,for,string,location,this,job,scheduling,data,locations,process,file,and,schedule,jobs,invoke,data,processor,location,get,scheduler,this,overwrite,existing,jobs,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1355313310;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}_		try {__			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				try {_					_					Class dataProcessorClass = getClass().getClassLoader().loadClass("org.quartz.xml.XMLSchedulingDataProcessor")__					logger.debug("Using Quartz 1.8 XMLSchedulingDataProcessor")__					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class).newInstance(clh)__					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class)__					for (String location : this.jobSchedulingDataLocations) {_						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler())__					}_				}_				catch (ClassNotFoundException ex) {_					_					Class dataProcessorClass = getClass().getClassLoader().loadClass("org.quartz.xml.JobSchedulingDataProcessor")__					logger.debug("Using Quartz 1.6 JobSchedulingDataProcessor")__					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class, boolean.class, boolean.class).newInstance(clh, true, true)__					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class, boolean.class)__					for (String location : this.jobSchedulingDataLocations) {_						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler(), this.overwriteExistingJobs)__					}_				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,try,class,data,processor,class,get,class,get,class,loader,load,class,org,quartz,xml,xmlscheduling,data,processor,logger,debug,using,quartz,1,8,xmlscheduling,data,processor,object,data,processor,data,processor,class,get,constructor,class,load,helper,class,new,instance,clh,method,process,file,and,schedule,jobs,data,processor,class,get,method,process,file,and,schedule,jobs,string,class,scheduler,class,for,string,location,this,job,scheduling,data,locations,process,file,and,schedule,jobs,invoke,data,processor,location,get,scheduler,catch,class,not,found,exception,ex,class,data,processor,class,get,class,get,class,loader,load,class,org,quartz,xml,job,scheduling,data,processor,logger,debug,using,quartz,1,6,job,scheduling,data,processor,object,data,processor,data,processor,class,get,constructor,class,load,helper,class,boolean,class,boolean,class,new,instance,clh,true,true,method,process,file,and,schedule,jobs,data,processor,class,get,method,process,file,and,schedule,jobs,string,class,scheduler,class,boolean,class,for,string,location,this,job,scheduling,data,locations,process,file,and,schedule,jobs,invoke,data,processor,location,get,scheduler,this,overwrite,existing,jobs,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1356735495;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}_		try {__			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				try {_					_					Class dataProcessorClass = getClass().getClassLoader().loadClass("org.quartz.xml.XMLSchedulingDataProcessor")__					logger.debug("Using Quartz 1.8 XMLSchedulingDataProcessor")__					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class).newInstance(clh)__					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class)__					for (String location : this.jobSchedulingDataLocations) {_						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler())__					}_				}_				catch (ClassNotFoundException ex) {_					_					Class dataProcessorClass = getClass().getClassLoader().loadClass("org.quartz.xml.JobSchedulingDataProcessor")__					logger.debug("Using Quartz 1.6 JobSchedulingDataProcessor")__					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class, boolean.class, boolean.class).newInstance(clh, true, true)__					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class, boolean.class)__					for (String location : this.jobSchedulingDataLocations) {_						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler(), this.overwriteExistingJobs)__					}_				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,try,class,data,processor,class,get,class,get,class,loader,load,class,org,quartz,xml,xmlscheduling,data,processor,logger,debug,using,quartz,1,8,xmlscheduling,data,processor,object,data,processor,data,processor,class,get,constructor,class,load,helper,class,new,instance,clh,method,process,file,and,schedule,jobs,data,processor,class,get,method,process,file,and,schedule,jobs,string,class,scheduler,class,for,string,location,this,job,scheduling,data,locations,process,file,and,schedule,jobs,invoke,data,processor,location,get,scheduler,catch,class,not,found,exception,ex,class,data,processor,class,get,class,get,class,loader,load,class,org,quartz,xml,job,scheduling,data,processor,logger,debug,using,quartz,1,6,job,scheduling,data,processor,object,data,processor,data,processor,class,get,constructor,class,load,helper,class,boolean,class,boolean,class,new,instance,clh,true,true,method,process,file,and,schedule,jobs,data,processor,class,get,method,process,file,and,schedule,jobs,string,class,scheduler,class,boolean,class,for,string,location,this,job,scheduling,data,locations,process,file,and,schedule,jobs,invoke,data,processor,location,get,scheduler,this,overwrite,existing,jobs,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1357119239;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}_		try {__			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				try {_					_					Class dataProcessorClass = getClass().getClassLoader().loadClass("org.quartz.xml.XMLSchedulingDataProcessor")__					logger.debug("Using Quartz 1.8 XMLSchedulingDataProcessor")__					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class).newInstance(clh)__					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class)__					for (String location : this.jobSchedulingDataLocations) {_						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler())__					}_				}_				catch (ClassNotFoundException ex) {_					_					Class dataProcessorClass = getClass().getClassLoader().loadClass("org.quartz.xml.JobSchedulingDataProcessor")__					logger.debug("Using Quartz 1.6 JobSchedulingDataProcessor")__					Object dataProcessor = dataProcessorClass.getConstructor(ClassLoadHelper.class, boolean.class, boolean.class).newInstance(clh, true, true)__					Method processFileAndScheduleJobs = dataProcessorClass.getMethod("processFileAndScheduleJobs", String.class, Scheduler.class, boolean.class)__					for (String location : this.jobSchedulingDataLocations) {_						processFileAndScheduleJobs.invoke(dataProcessor, location, getScheduler(), this.overwriteExistingJobs)__					}_				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,try,class,data,processor,class,get,class,get,class,loader,load,class,org,quartz,xml,xmlscheduling,data,processor,logger,debug,using,quartz,1,8,xmlscheduling,data,processor,object,data,processor,data,processor,class,get,constructor,class,load,helper,class,new,instance,clh,method,process,file,and,schedule,jobs,data,processor,class,get,method,process,file,and,schedule,jobs,string,class,scheduler,class,for,string,location,this,job,scheduling,data,locations,process,file,and,schedule,jobs,invoke,data,processor,location,get,scheduler,catch,class,not,found,exception,ex,class,data,processor,class,get,class,get,class,loader,load,class,org,quartz,xml,job,scheduling,data,processor,logger,debug,using,quartz,1,6,job,scheduling,data,processor,object,data,processor,data,processor,class,get,constructor,class,load,helper,class,boolean,class,boolean,class,new,instance,clh,true,true,method,process,file,and,schedule,jobs,data,processor,class,get,method,process,file,and,schedule,jobs,string,class,scheduler,class,boolean,class,for,string,location,this,job,scheduling,data,locations,process,file,and,schedule,jobs,invoke,data,processor,location,get,scheduler,this,overwrite,existing,jobs,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1363730577;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1368482696;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1375197763;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1385412762;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1388939442;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1388954345;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1390908324;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1395953963;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1397568289;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1408389938;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<JobDetail>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,job,detail,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1467730834;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1496259743;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1498780456;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1530174524;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> protected void registerJobsAndTriggers() throws SchedulerException;1533213002;Register jobs and triggers (within a transaction, if possible).;protected void registerJobsAndTriggers() throws SchedulerException {_		TransactionStatus transactionStatus = null__		if (this.transactionManager != null) {_			transactionStatus = this.transactionManager.getTransaction(new DefaultTransactionDefinition())__		}__		try {_			if (this.jobSchedulingDataLocations != null) {_				ClassLoadHelper clh = new ResourceLoaderClassLoadHelper(this.resourceLoader)__				clh.initialize()__				XMLSchedulingDataProcessor dataProcessor = new XMLSchedulingDataProcessor(clh)__				for (String location : this.jobSchedulingDataLocations) {_					dataProcessor.processFileAndScheduleJobs(location, getScheduler())__				}_			}__			_			if (this.jobDetails != null) {_				for (JobDetail jobDetail : this.jobDetails) {_					addJobToScheduler(jobDetail)__				}_			}_			else {_				_				this.jobDetails = new LinkedList<>()__			}__			_			if (this.calendars != null) {_				for (String calendarName : this.calendars.keySet()) {_					Calendar calendar = this.calendars.get(calendarName)__					getScheduler().addCalendar(calendarName, calendar, true, true)__				}_			}__			_			if (this.triggers != null) {_				for (Trigger trigger : this.triggers) {_					addTriggerToScheduler(trigger)__				}_			}_		}__		catch (Throwable ex) {_			if (transactionStatus != null) {_				try {_					this.transactionManager.rollback(transactionStatus)__				}_				catch (TransactionException tex) {_					logger.error("Job registration exception overridden by rollback exception", ex)__					throw tex__				}_			}_			if (ex instanceof SchedulerException) {_				throw (SchedulerException) ex__			}_			if (ex instanceof Exception) {_				throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage(), ex)__			}_			throw new SchedulerException("Registration of jobs and triggers failed: " + ex.getMessage())__		}__		if (transactionStatus != null) {_			this.transactionManager.commit(transactionStatus)__		}_	};register,jobs,and,triggers,within,a,transaction,if,possible;protected,void,register,jobs,and,triggers,throws,scheduler,exception,transaction,status,transaction,status,null,if,this,transaction,manager,null,transaction,status,this,transaction,manager,get,transaction,new,default,transaction,definition,try,if,this,job,scheduling,data,locations,null,class,load,helper,clh,new,resource,loader,class,load,helper,this,resource,loader,clh,initialize,xmlscheduling,data,processor,data,processor,new,xmlscheduling,data,processor,clh,for,string,location,this,job,scheduling,data,locations,data,processor,process,file,and,schedule,jobs,location,get,scheduler,if,this,job,details,null,for,job,detail,job,detail,this,job,details,add,job,to,scheduler,job,detail,else,this,job,details,new,linked,list,if,this,calendars,null,for,string,calendar,name,this,calendars,key,set,calendar,calendar,this,calendars,get,calendar,name,get,scheduler,add,calendar,calendar,name,calendar,true,true,if,this,triggers,null,for,trigger,trigger,this,triggers,add,trigger,to,scheduler,trigger,catch,throwable,ex,if,transaction,status,null,try,this,transaction,manager,rollback,transaction,status,catch,transaction,exception,tex,logger,error,job,registration,exception,overridden,by,rollback,exception,ex,throw,tex,if,ex,instanceof,scheduler,exception,throw,scheduler,exception,ex,if,ex,instanceof,exception,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,ex,throw,new,scheduler,exception,registration,of,jobs,and,triggers,failed,ex,get,message,if,transaction,status,null,this,transaction,manager,commit,transaction,status
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1328020251;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return <code>true</code> if the job was actually added,_<code>false</code> if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,code,if,the,job,was,actually,added,code,false,code,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1355313310;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return <code>true</code> if the job was actually added,_<code>false</code> if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,code,if,the,job,was,actually,added,code,false,code,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1356735495;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1357119239;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1363730577;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1368482696;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1375197763;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1385412762;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1388939442;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1388954345;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1390908324;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || !jobDetailExists(jobDetail)) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,job,detail,exists,job,detail,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1395953963;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1397568289;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1408389938;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1467730834;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1496259743;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1498780456;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1530174524;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException;1533213002;Add the given job to the Scheduler, if it doesn't already exist._Overwrites the job in any case if "overwriteExistingJobs" is set._@param jobDetail the job to add_@return {@code true} if the job was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addJobToScheduler(JobDetail jobDetail) throws SchedulerException {_		if (this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null) {_			getScheduler().addJob(jobDetail, true)__			return true__		}_		else {_			return false__		}_	};add,the,given,job,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,job,in,any,case,if,overwrite,existing,jobs,is,set,param,job,detail,the,job,to,add,return,code,true,if,the,job,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,job,to,scheduler,job,detail,job,detail,throws,scheduler,exception,if,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,add,job,job,detail,true,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1328020251;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return <code>true</code> if the trigger was actually added,_<code>false</code> if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,code,if,the,trigger,was,actually,added,code,false,code,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1355313310;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return <code>true</code> if the trigger was actually added,_<code>false</code> if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,code,if,the,trigger,was,actually,added,code,false,code,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1356735495;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1357119239;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1363730577;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1368482696;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1375197763;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1385412762;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1388939442;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1388954345;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1390908324;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = triggerExists(trigger)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = findJobDetail(trigger)__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						rescheduleJob(trigger)__					}_				}_			}_			else {_				rescheduleJob(trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,trigger,exists,trigger,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,find,job,detail,trigger,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,reschedule,job,trigger,else,reschedule,job,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1395953963;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = (getScheduler().getTrigger(trigger.getKey()) != null)__		if (!triggerExists || this.overwriteExistingJobs) {_			_			JobDetail jobDetail = (JobDetail) trigger.getJobDataMap().remove("jobDetail")__			if (jobDetail != null) {_				_				if (!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_					this.jobDetails.add(jobDetail)__				}_			}_			if (!triggerExists) {_				try {_					getScheduler().scheduleJob(trigger)__				}_				catch (ObjectAlreadyExistsException ex) {_					if (logger.isDebugEnabled()) {_						logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_								ex.getMessage() + " - can safely be ignored")__					}_					if (this.overwriteExistingJobs) {_						getScheduler().rescheduleJob(trigger.getKey(), trigger)__					}_				}_			}_			else {_				getScheduler().rescheduleJob(trigger.getKey(), trigger)__			}_			return true__		}_		else {_			return false__		}_	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,get,scheduler,get,trigger,trigger,get,key,null,if,trigger,exists,this,overwrite,existing,jobs,job,detail,job,detail,job,detail,trigger,get,job,data,map,remove,job,detail,if,job,detail,null,if,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,if,trigger,exists,try,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,get,scheduler,reschedule,job,trigger,get,key,trigger,else,get,scheduler,reschedule,job,trigger,get,key,trigger,return,true,else,return,false
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1397568289;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = (getScheduler().getTrigger(trigger.getKey()) != null)__		if (triggerExists && !this.overwriteExistingJobs) {_			return false__		}__		_		JobDetail jobDetail = (JobDetail) trigger.getJobDataMap().remove("jobDetail")__		if (triggerExists) {_			if (jobDetail != null && !this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_				this.jobDetails.add(jobDetail)__			}_			getScheduler().rescheduleJob(trigger.getKey(), trigger)__		}_		else {_			try {_				if (jobDetail != null && !this.jobDetails.contains(jobDetail) &&_						(this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null)) {_					getScheduler().scheduleJob(jobDetail, trigger)__					this.jobDetails.add(jobDetail)__				}_				else {_					getScheduler().scheduleJob(trigger)__				}_			}_			catch (ObjectAlreadyExistsException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_							ex.getMessage() + " - can safely be ignored")__				}_				if (this.overwriteExistingJobs) {_					getScheduler().rescheduleJob(trigger.getKey(), trigger)__				}_			}_		}_		return true__	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,get,scheduler,get,trigger,trigger,get,key,null,if,trigger,exists,this,overwrite,existing,jobs,return,false,job,detail,job,detail,job,detail,trigger,get,job,data,map,remove,job,detail,if,trigger,exists,if,job,detail,null,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,get,scheduler,reschedule,job,trigger,get,key,trigger,else,try,if,job,detail,null,this,job,details,contains,job,detail,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,schedule,job,job,detail,trigger,this,job,details,add,job,detail,else,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,get,scheduler,reschedule,job,trigger,get,key,trigger,return,true
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1408389938;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = (getScheduler().getTrigger(trigger.getKey()) != null)__		if (triggerExists && !this.overwriteExistingJobs) {_			return false__		}__		_		JobDetail jobDetail = (JobDetail) trigger.getJobDataMap().remove("jobDetail")__		if (triggerExists) {_			if (jobDetail != null && !this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_				this.jobDetails.add(jobDetail)__			}_			getScheduler().rescheduleJob(trigger.getKey(), trigger)__		}_		else {_			try {_				if (jobDetail != null && !this.jobDetails.contains(jobDetail) &&_						(this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null)) {_					getScheduler().scheduleJob(jobDetail, trigger)__					this.jobDetails.add(jobDetail)__				}_				else {_					getScheduler().scheduleJob(trigger)__				}_			}_			catch (ObjectAlreadyExistsException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_							ex.getMessage() + " - can safely be ignored")__				}_				if (this.overwriteExistingJobs) {_					getScheduler().rescheduleJob(trigger.getKey(), trigger)__				}_			}_		}_		return true__	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,get,scheduler,get,trigger,trigger,get,key,null,if,trigger,exists,this,overwrite,existing,jobs,return,false,job,detail,job,detail,job,detail,trigger,get,job,data,map,remove,job,detail,if,trigger,exists,if,job,detail,null,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,get,scheduler,reschedule,job,trigger,get,key,trigger,else,try,if,job,detail,null,this,job,details,contains,job,detail,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,schedule,job,job,detail,trigger,this,job,details,add,job,detail,else,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,get,scheduler,reschedule,job,trigger,get,key,trigger,return,true
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1467730834;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = (getScheduler().getTrigger(trigger.getKey()) != null)__		if (triggerExists && !this.overwriteExistingJobs) {_			return false__		}__		_		JobDetail jobDetail = (JobDetail) trigger.getJobDataMap().remove("jobDetail")__		if (triggerExists) {_			if (jobDetail != null && !this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_				this.jobDetails.add(jobDetail)__			}_			getScheduler().rescheduleJob(trigger.getKey(), trigger)__		}_		else {_			try {_				if (jobDetail != null && !this.jobDetails.contains(jobDetail) &&_						(this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null)) {_					getScheduler().scheduleJob(jobDetail, trigger)__					this.jobDetails.add(jobDetail)__				}_				else {_					getScheduler().scheduleJob(trigger)__				}_			}_			catch (ObjectAlreadyExistsException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_							ex.getMessage() + " - can safely be ignored")__				}_				if (this.overwriteExistingJobs) {_					getScheduler().rescheduleJob(trigger.getKey(), trigger)__				}_			}_		}_		return true__	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,get,scheduler,get,trigger,trigger,get,key,null,if,trigger,exists,this,overwrite,existing,jobs,return,false,job,detail,job,detail,job,detail,trigger,get,job,data,map,remove,job,detail,if,trigger,exists,if,job,detail,null,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,get,scheduler,reschedule,job,trigger,get,key,trigger,else,try,if,job,detail,null,this,job,details,contains,job,detail,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,schedule,job,job,detail,trigger,this,job,details,add,job,detail,else,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,get,scheduler,reschedule,job,trigger,get,key,trigger,return,true
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1496259743;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = (getScheduler().getTrigger(trigger.getKey()) != null)__		if (triggerExists && !this.overwriteExistingJobs) {_			return false__		}__		_		JobDetail jobDetail = (JobDetail) trigger.getJobDataMap().remove("jobDetail")__		if (triggerExists) {_			if (jobDetail != null && !this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_				this.jobDetails.add(jobDetail)__			}_			getScheduler().rescheduleJob(trigger.getKey(), trigger)__		}_		else {_			try {_				if (jobDetail != null && !this.jobDetails.contains(jobDetail) &&_						(this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null)) {_					getScheduler().scheduleJob(jobDetail, trigger)__					this.jobDetails.add(jobDetail)__				}_				else {_					getScheduler().scheduleJob(trigger)__				}_			}_			catch (ObjectAlreadyExistsException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_							ex.getMessage() + " - can safely be ignored")__				}_				if (this.overwriteExistingJobs) {_					getScheduler().rescheduleJob(trigger.getKey(), trigger)__				}_			}_		}_		return true__	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,get,scheduler,get,trigger,trigger,get,key,null,if,trigger,exists,this,overwrite,existing,jobs,return,false,job,detail,job,detail,job,detail,trigger,get,job,data,map,remove,job,detail,if,trigger,exists,if,job,detail,null,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,get,scheduler,reschedule,job,trigger,get,key,trigger,else,try,if,job,detail,null,this,job,details,contains,job,detail,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,schedule,job,job,detail,trigger,this,job,details,add,job,detail,else,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,get,scheduler,reschedule,job,trigger,get,key,trigger,return,true
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1498780456;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = (getScheduler().getTrigger(trigger.getKey()) != null)__		if (triggerExists && !this.overwriteExistingJobs) {_			return false__		}__		_		JobDetail jobDetail = (JobDetail) trigger.getJobDataMap().remove("jobDetail")__		if (triggerExists) {_			if (jobDetail != null && this.jobDetails != null &&_					!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_				this.jobDetails.add(jobDetail)__			}_			getScheduler().rescheduleJob(trigger.getKey(), trigger)__		}_		else {_			try {_				if (jobDetail != null && this.jobDetails != null && !this.jobDetails.contains(jobDetail) &&_						(this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null)) {_					getScheduler().scheduleJob(jobDetail, trigger)__					this.jobDetails.add(jobDetail)__				}_				else {_					getScheduler().scheduleJob(trigger)__				}_			}_			catch (ObjectAlreadyExistsException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_							ex.getMessage() + " - can safely be ignored")__				}_				if (this.overwriteExistingJobs) {_					getScheduler().rescheduleJob(trigger.getKey(), trigger)__				}_			}_		}_		return true__	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,get,scheduler,get,trigger,trigger,get,key,null,if,trigger,exists,this,overwrite,existing,jobs,return,false,job,detail,job,detail,job,detail,trigger,get,job,data,map,remove,job,detail,if,trigger,exists,if,job,detail,null,this,job,details,null,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,get,scheduler,reschedule,job,trigger,get,key,trigger,else,try,if,job,detail,null,this,job,details,null,this,job,details,contains,job,detail,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,schedule,job,job,detail,trigger,this,job,details,add,job,detail,else,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,get,scheduler,reschedule,job,trigger,get,key,trigger,return,true
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1530174524;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = (getScheduler().getTrigger(trigger.getKey()) != null)__		if (triggerExists && !this.overwriteExistingJobs) {_			return false__		}__		_		JobDetail jobDetail = (JobDetail) trigger.getJobDataMap().remove("jobDetail")__		if (triggerExists) {_			if (jobDetail != null && this.jobDetails != null &&_					!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_				this.jobDetails.add(jobDetail)__			}_			getScheduler().rescheduleJob(trigger.getKey(), trigger)__		}_		else {_			try {_				if (jobDetail != null && this.jobDetails != null && !this.jobDetails.contains(jobDetail) &&_						(this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null)) {_					getScheduler().scheduleJob(jobDetail, trigger)__					this.jobDetails.add(jobDetail)__				}_				else {_					getScheduler().scheduleJob(trigger)__				}_			}_			catch (ObjectAlreadyExistsException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " +_							ex.getMessage() + " - can safely be ignored")__				}_				if (this.overwriteExistingJobs) {_					getScheduler().rescheduleJob(trigger.getKey(), trigger)__				}_			}_		}_		return true__	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,get,scheduler,get,trigger,trigger,get,key,null,if,trigger,exists,this,overwrite,existing,jobs,return,false,job,detail,job,detail,job,detail,trigger,get,job,data,map,remove,job,detail,if,trigger,exists,if,job,detail,null,this,job,details,null,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,get,scheduler,reschedule,job,trigger,get,key,trigger,else,try,if,job,detail,null,this,job,details,null,this,job,details,contains,job,detail,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,schedule,job,job,detail,trigger,this,job,details,add,job,detail,else,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,found,existing,trigger,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,get,scheduler,reschedule,job,trigger,get,key,trigger,return,true
SchedulerAccessor -> private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException;1533213002;Add the given trigger to the Scheduler, if it doesn't already exist._Overwrites the trigger in any case if "overwriteExistingJobs" is set._@param trigger the trigger to add_@return {@code true} if the trigger was actually added,_{@code false} if it already existed before_@see #setOverwriteExistingJobs;private boolean addTriggerToScheduler(Trigger trigger) throws SchedulerException {_		boolean triggerExists = (getScheduler().getTrigger(trigger.getKey()) != null)__		if (triggerExists && !this.overwriteExistingJobs) {_			return false__		}__		_		JobDetail jobDetail = (JobDetail) trigger.getJobDataMap().remove("jobDetail")__		if (triggerExists) {_			if (jobDetail != null && this.jobDetails != null &&_					!this.jobDetails.contains(jobDetail) && addJobToScheduler(jobDetail)) {_				this.jobDetails.add(jobDetail)__			}_			try {_				getScheduler().rescheduleJob(trigger.getKey(), trigger)__			}_			catch (ObjectAlreadyExistsException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unexpectedly encountered existing trigger on rescheduling, assumably due to " +_							"cluster race condition: " + ex.getMessage() + " - can safely be ignored")__				}_			}_		}_		else {_			try {_				if (jobDetail != null && this.jobDetails != null && !this.jobDetails.contains(jobDetail) &&_						(this.overwriteExistingJobs || getScheduler().getJobDetail(jobDetail.getKey()) == null)) {_					getScheduler().scheduleJob(jobDetail, trigger)__					this.jobDetails.add(jobDetail)__				}_				else {_					getScheduler().scheduleJob(trigger)__				}_			}_			catch (ObjectAlreadyExistsException ex) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unexpectedly encountered existing trigger on job scheduling, assumably due to " +_							"cluster race condition: " + ex.getMessage() + " - can safely be ignored")__				}_				if (this.overwriteExistingJobs) {_					getScheduler().rescheduleJob(trigger.getKey(), trigger)__				}_			}_		}_		return true__	};add,the,given,trigger,to,the,scheduler,if,it,doesn,t,already,exist,overwrites,the,trigger,in,any,case,if,overwrite,existing,jobs,is,set,param,trigger,the,trigger,to,add,return,code,true,if,the,trigger,was,actually,added,code,false,if,it,already,existed,before,see,set,overwrite,existing,jobs;private,boolean,add,trigger,to,scheduler,trigger,trigger,throws,scheduler,exception,boolean,trigger,exists,get,scheduler,get,trigger,trigger,get,key,null,if,trigger,exists,this,overwrite,existing,jobs,return,false,job,detail,job,detail,job,detail,trigger,get,job,data,map,remove,job,detail,if,trigger,exists,if,job,detail,null,this,job,details,null,this,job,details,contains,job,detail,add,job,to,scheduler,job,detail,this,job,details,add,job,detail,try,get,scheduler,reschedule,job,trigger,get,key,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,encountered,existing,trigger,on,rescheduling,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,else,try,if,job,detail,null,this,job,details,null,this,job,details,contains,job,detail,this,overwrite,existing,jobs,get,scheduler,get,job,detail,job,detail,get,key,null,get,scheduler,schedule,job,job,detail,trigger,this,job,details,add,job,detail,else,get,scheduler,schedule,job,trigger,catch,object,already,exists,exception,ex,if,logger,is,debug,enabled,logger,debug,unexpectedly,encountered,existing,trigger,on,job,scheduling,assumably,due,to,cluster,race,condition,ex,get,message,can,safely,be,ignored,if,this,overwrite,existing,jobs,get,scheduler,reschedule,job,trigger,get,key,trigger,return,true
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1388939442;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1388954345;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1390908324;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1395953963;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1397568289;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1408389938;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1467730834;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1496259743;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1498780456;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1530174524;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners);1533213002;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener... globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setTriggers(Trigger[] triggers);1328020251;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger[] triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger[] triggers);1355313310;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger[] triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger[] triggers);1356735495;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger[] triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger[] triggers);1357119239;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger[] triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger[] triggers);1363730577;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger[] triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger[] triggers);1368482696;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger[] triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger[] triggers);1375197763;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger[] triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setTriggers(Trigger[] triggers);1385412762;Register a list of Trigger objects with the Scheduler that_this FactoryBean creates._<p>If the Trigger determines the corresponding JobDetail itself,_the job will be automatically registered with the Scheduler._Else, the respective JobDetail needs to be registered via the_"jobDetails" property of this FactoryBean._@see #setJobDetails_@see org.quartz.JobDetail_@see JobDetailAwareTrigger_@see CronTriggerBean_@see SimpleTriggerBean;public void setTriggers(Trigger[] triggers) {_		this.triggers = Arrays.asList(triggers)__	};register,a,list,of,trigger,objects,with,the,scheduler,that,this,factory,bean,creates,p,if,the,trigger,determines,the,corresponding,job,detail,itself,the,job,will,be,automatically,registered,with,the,scheduler,else,the,respective,job,detail,needs,to,be,registered,via,the,job,details,property,of,this,factory,bean,see,set,job,details,see,org,quartz,job,detail,see,job,detail,aware,trigger,see,cron,trigger,bean,see,simple,trigger,bean;public,void,set,triggers,trigger,triggers,this,triggers,arrays,as,list,triggers
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1388939442;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1388954345;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1390908324;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1395953963;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1397568289;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1408389938;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1467730834;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1496259743;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1498780456;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1530174524;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setSchedulerListeners(SchedulerListener... schedulerListeners);1533213002;Specify Quartz SchedulerListeners to be registered with the Scheduler.;public void setSchedulerListeners(SchedulerListener... schedulerListeners) {_		this.schedulerListeners = schedulerListeners__	};specify,quartz,scheduler,listeners,to,be,registered,with,the,scheduler;public,void,set,scheduler,listeners,scheduler,listener,scheduler,listeners,this,scheduler,listeners,scheduler,listeners
SchedulerAccessor -> public void setJobListeners(JobListener[] jobListeners);1328020251;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._@see org.quartz.JobListener#getName_@see org.quartz.JobDetail#addJobListener_@see JobDetailBean#setJobListenerNames;public void setJobListeners(JobListener[] jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,see,org,quartz,job,listener,get,name,see,org,quartz,job,detail,add,job,listener,see,job,detail,bean,set,job,listener,names;public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> public void setJobListeners(JobListener[] jobListeners);1355313310;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._@see org.quartz.JobListener#getName_@see org.quartz.JobDetail#addJobListener_@see JobDetailBean#setJobListenerNames;public void setJobListeners(JobListener[] jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,see,org,quartz,job,listener,get,name,see,org,quartz,job,detail,add,job,listener,see,job,detail,bean,set,job,listener,names;public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> public void setJobListeners(JobListener[] jobListeners);1356735495;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._@see org.quartz.JobListener#getName_@see org.quartz.JobDetail#addJobListener_@see JobDetailBean#setJobListenerNames;public void setJobListeners(JobListener[] jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,see,org,quartz,job,listener,get,name,see,org,quartz,job,detail,add,job,listener,see,job,detail,bean,set,job,listener,names;public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> public void setJobListeners(JobListener[] jobListeners);1357119239;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._@see org.quartz.JobListener#getName_@see org.quartz.JobDetail#addJobListener_@see JobDetailBean#setJobListenerNames;public void setJobListeners(JobListener[] jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,see,org,quartz,job,listener,get,name,see,org,quartz,job,detail,add,job,listener,see,job,detail,bean,set,job,listener,names;public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> public void setJobListeners(JobListener[] jobListeners);1363730577;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._@see org.quartz.JobListener#getName_@see org.quartz.JobDetail#addJobListener_@see JobDetailBean#setJobListenerNames;public void setJobListeners(JobListener[] jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,see,org,quartz,job,listener,get,name,see,org,quartz,job,detail,add,job,listener,see,job,detail,bean,set,job,listener,names;public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> public void setJobListeners(JobListener[] jobListeners);1368482696;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._@see org.quartz.JobListener#getName_@see org.quartz.JobDetail#addJobListener_@see JobDetailBean#setJobListenerNames;public void setJobListeners(JobListener[] jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,see,org,quartz,job,listener,get,name,see,org,quartz,job,detail,add,job,listener,see,job,detail,bean,set,job,listener,names;public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> public void setJobListeners(JobListener[] jobListeners);1375197763;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._@see org.quartz.JobListener#getName_@see org.quartz.JobDetail#addJobListener_@see JobDetailBean#setJobListenerNames;public void setJobListeners(JobListener[] jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,see,org,quartz,job,listener,get,name,see,org,quartz,job,detail,add,job,listener,see,job,detail,bean,set,job,listener,names;public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> public void setJobListeners(JobListener[] jobListeners);1385412762;Specify named Quartz JobListeners to be registered with the Scheduler._Such JobListeners will only apply to Jobs that explicitly activate_them via their name._@see org.quartz.JobListener#getName_@see org.quartz.JobDetail#addJobListener_@see JobDetailBean#setJobListenerNames;public void setJobListeners(JobListener[] jobListeners) {_		this.jobListeners = jobListeners__	};specify,named,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,only,apply,to,jobs,that,explicitly,activate,them,via,their,name,see,org,quartz,job,listener,get,name,see,org,quartz,job,detail,add,job,listener,see,job,detail,bean,set,job,listener,names;public,void,set,job,listeners,job,listener,job,listeners,this,job,listeners,job,listeners
SchedulerAccessor -> public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations);1328020251;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.JobSchedulingDataProcessor;public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,job,scheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations);1355313310;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XmlSchedulingDataProcessor;public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xml,scheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations);1356735495;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XmlSchedulingDataProcessor;public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xml,scheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations);1357119239;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XmlSchedulingDataProcessor;public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xml,scheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations);1363730577;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations);1368482696;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations);1375197763;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations);1385412762;Set the locations of Quartz job definition XML files that follow the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such files, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocations(String[] jobSchedulingDataLocations) {_		this.jobSchedulingDataLocations = jobSchedulingDataLocations__	};set,the,locations,of,quartz,job,definition,xml,files,that,follow,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,files,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,locations,string,job,scheduling,data,locations,this,job,scheduling,data,locations,job,scheduling,data,locations
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners);1328020251;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners);1355313310;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners);1356735495;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners);1357119239;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners);1363730577;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners);1368482696;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners);1375197763;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners);1385412762;Specify global Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will apply to all Triggers in the Scheduler.;public void setGlobalTriggerListeners(TriggerListener[] globalTriggerListeners) {_		this.globalTriggerListeners = globalTriggerListeners__	};specify,global,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,apply,to,all,triggers,in,the,scheduler;public,void,set,global,trigger,listeners,trigger,listener,global,trigger,listeners,this,global,trigger,listeners,global,trigger,listeners
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1388939442;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1388954345;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1390908324;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail_@see JobDetailBean_@see JobDetailAwareTrigger;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail,see,job,detail,bean,see,job,detail,aware,trigger;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1395953963;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1397568289;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1408389938;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<JobDetail>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,job,detail,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1467730834;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1496259743;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1498780456;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1530174524;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,arrays,as,list,job,details
SchedulerAccessor -> public void setJobDetails(JobDetail... jobDetails);1533213002;Register a list of JobDetail objects with the Scheduler that_this FactoryBean creates, to be referenced by Triggers._<p>This is not necessary when a Trigger determines the JobDetail_itself: In this case, the JobDetail will be implicitly registered_in combination with the Trigger._@see #setTriggers_@see org.quartz.JobDetail;public void setJobDetails(JobDetail... jobDetails) {_		_		_		this.jobDetails = new ArrayList<>(Arrays.asList(jobDetails))__	};register,a,list,of,job,detail,objects,with,the,scheduler,that,this,factory,bean,creates,to,be,referenced,by,triggers,p,this,is,not,necessary,when,a,trigger,determines,the,job,detail,itself,in,this,case,the,job,detail,will,be,implicitly,registered,in,combination,with,the,trigger,see,set,triggers,see,org,quartz,job,detail;public,void,set,job,details,job,detail,job,details,this,job,details,new,array,list,arrays,as,list,job,details
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1328020251;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1355313310;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1356735495;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1357119239;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1363730577;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1368482696;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1375197763;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1385412762;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1388939442;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1388954345;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}__		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = target.getClass().getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener = target.getClass().getMethod(_						(quartz2 ? "addJobListener" : "addGlobalJobListener"), JobListener.class)__				for (JobListener listener : this.globalJobListeners) {_					ReflectionUtils.invokeMethod(addJobListener, target, listener)__				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener = target.getClass().getMethod(_						(quartz2 ? "addTriggerListener" : "addGlobalTriggerListener"), TriggerListener.class)__				for (TriggerListener listener : this.globalTriggerListeners) {_					ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,get,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,target,get,class,get,method,quartz2,add,job,listener,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,target,get,class,get,method,quartz2,add,trigger,listener,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1390908324;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		Object target__		boolean quartz2__		try {_			Method getListenerManager = Scheduler.class.getMethod("getListenerManager")__			target = ReflectionUtils.invokeMethod(getListenerManager, getScheduler())__			quartz2 = true__		}_		catch (NoSuchMethodException ex) {_			target = getScheduler()__			quartz2 = false__		}_		Class<?> targetClass = target.getClass()___		try {_			if (this.schedulerListeners != null) {_				Method addSchedulerListener = targetClass.getMethod("addSchedulerListener", SchedulerListener.class)__				for (SchedulerListener listener : this.schedulerListeners) {_					ReflectionUtils.invokeMethod(addSchedulerListener, target, listener)__				}_			}_			if (this.globalJobListeners != null) {_				Method addJobListener__				if (quartz2) {_					_					_					addJobListener = targetClass.getMethod("addJobListener", JobListener.class, List.class)__				}_				else {_					addJobListener = targetClass.getMethod("addGlobalJobListener", JobListener.class)__				}_				for (JobListener listener : this.globalJobListeners) {_					if (quartz2) {_						List<?> emptyMatchers = new LinkedList<Object>()__						ReflectionUtils.invokeMethod(addJobListener, target, listener, emptyMatchers)__					}_					else {_						ReflectionUtils.invokeMethod(addJobListener, target, listener)__					}_				}_			}_			if (this.jobListeners != null) {_				for (JobListener listener : this.jobListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global JobListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addJobListener(listener)__				}_			}_			if (this.globalTriggerListeners != null) {_				Method addTriggerListener__				if (quartz2) {_					_					_					addTriggerListener = targetClass.getMethod("addTriggerListener", TriggerListener.class, List.class)__				}_				else {_					addTriggerListener = targetClass.getMethod("addGlobalTriggerListener", TriggerListener.class)__				}_				for (TriggerListener listener : this.globalTriggerListeners) {_					if (quartz2) {_						List<?> emptyMatchers = new LinkedList<Object>()__						ReflectionUtils.invokeMethod(addTriggerListener, target, listener, emptyMatchers)__					}_					else {_						ReflectionUtils.invokeMethod(addTriggerListener, target, listener)__					}_				}_			}_			if (this.triggerListeners != null) {_				for (TriggerListener listener : this.triggerListeners) {_					if (quartz2) {_						throw new IllegalStateException("Non-global TriggerListeners not supported on Quartz 2 - " +_								"manually register a Matcher against the Quartz ListenerManager instead")__					}_					getScheduler().addTriggerListener(listener)__				}_			}_		}_		catch (NoSuchMethodException ex) {_			throw new IllegalStateException("Expected Quartz API not present: " + ex)__		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,object,target,boolean,quartz2,try,method,get,listener,manager,scheduler,class,get,method,get,listener,manager,target,reflection,utils,invoke,method,get,listener,manager,get,scheduler,quartz2,true,catch,no,such,method,exception,ex,target,get,scheduler,quartz2,false,class,target,class,target,get,class,try,if,this,scheduler,listeners,null,method,add,scheduler,listener,target,class,get,method,add,scheduler,listener,scheduler,listener,class,for,scheduler,listener,listener,this,scheduler,listeners,reflection,utils,invoke,method,add,scheduler,listener,target,listener,if,this,global,job,listeners,null,method,add,job,listener,if,quartz2,add,job,listener,target,class,get,method,add,job,listener,job,listener,class,list,class,else,add,job,listener,target,class,get,method,add,global,job,listener,job,listener,class,for,job,listener,listener,this,global,job,listeners,if,quartz2,list,empty,matchers,new,linked,list,object,reflection,utils,invoke,method,add,job,listener,target,listener,empty,matchers,else,reflection,utils,invoke,method,add,job,listener,target,listener,if,this,job,listeners,null,for,job,listener,listener,this,job,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,job,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,job,listener,listener,if,this,global,trigger,listeners,null,method,add,trigger,listener,if,quartz2,add,trigger,listener,target,class,get,method,add,trigger,listener,trigger,listener,class,list,class,else,add,trigger,listener,target,class,get,method,add,global,trigger,listener,trigger,listener,class,for,trigger,listener,listener,this,global,trigger,listeners,if,quartz2,list,empty,matchers,new,linked,list,object,reflection,utils,invoke,method,add,trigger,listener,target,listener,empty,matchers,else,reflection,utils,invoke,method,add,trigger,listener,target,listener,if,this,trigger,listeners,null,for,trigger,listener,listener,this,trigger,listeners,if,quartz2,throw,new,illegal,state,exception,non,global,trigger,listeners,not,supported,on,quartz,2,manually,register,a,matcher,against,the,quartz,listener,manager,instead,get,scheduler,add,trigger,listener,listener,catch,no,such,method,exception,ex,throw,new,illegal,state,exception,expected,quartz,api,not,present,ex
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1395953963;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		ListenerManager listenerManager = getScheduler().getListenerManager()__		if (this.schedulerListeners != null) {_			for (SchedulerListener listener : this.schedulerListeners) {_				listenerManager.addSchedulerListener(listener)__			}_		}_		if (this.globalJobListeners != null) {_			for (JobListener listener : this.globalJobListeners) {_				listenerManager.addJobListener(listener)__			}_		}_		if (this.globalTriggerListeners != null) {_			for (TriggerListener listener : this.globalTriggerListeners) {_				listenerManager.addTriggerListener(listener)__			}_		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,listener,manager,listener,manager,get,scheduler,get,listener,manager,if,this,scheduler,listeners,null,for,scheduler,listener,listener,this,scheduler,listeners,listener,manager,add,scheduler,listener,listener,if,this,global,job,listeners,null,for,job,listener,listener,this,global,job,listeners,listener,manager,add,job,listener,listener,if,this,global,trigger,listeners,null,for,trigger,listener,listener,this,global,trigger,listeners,listener,manager,add,trigger,listener,listener
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1397568289;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		ListenerManager listenerManager = getScheduler().getListenerManager()__		if (this.schedulerListeners != null) {_			for (SchedulerListener listener : this.schedulerListeners) {_				listenerManager.addSchedulerListener(listener)__			}_		}_		if (this.globalJobListeners != null) {_			for (JobListener listener : this.globalJobListeners) {_				listenerManager.addJobListener(listener)__			}_		}_		if (this.globalTriggerListeners != null) {_			for (TriggerListener listener : this.globalTriggerListeners) {_				listenerManager.addTriggerListener(listener)__			}_		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,listener,manager,listener,manager,get,scheduler,get,listener,manager,if,this,scheduler,listeners,null,for,scheduler,listener,listener,this,scheduler,listeners,listener,manager,add,scheduler,listener,listener,if,this,global,job,listeners,null,for,job,listener,listener,this,global,job,listeners,listener,manager,add,job,listener,listener,if,this,global,trigger,listeners,null,for,trigger,listener,listener,this,global,trigger,listeners,listener,manager,add,trigger,listener,listener
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1408389938;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		ListenerManager listenerManager = getScheduler().getListenerManager()__		if (this.schedulerListeners != null) {_			for (SchedulerListener listener : this.schedulerListeners) {_				listenerManager.addSchedulerListener(listener)__			}_		}_		if (this.globalJobListeners != null) {_			for (JobListener listener : this.globalJobListeners) {_				listenerManager.addJobListener(listener)__			}_		}_		if (this.globalTriggerListeners != null) {_			for (TriggerListener listener : this.globalTriggerListeners) {_				listenerManager.addTriggerListener(listener)__			}_		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,listener,manager,listener,manager,get,scheduler,get,listener,manager,if,this,scheduler,listeners,null,for,scheduler,listener,listener,this,scheduler,listeners,listener,manager,add,scheduler,listener,listener,if,this,global,job,listeners,null,for,job,listener,listener,this,global,job,listeners,listener,manager,add,job,listener,listener,if,this,global,trigger,listeners,null,for,trigger,listener,listener,this,global,trigger,listeners,listener,manager,add,trigger,listener,listener
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1467730834;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		ListenerManager listenerManager = getScheduler().getListenerManager()__		if (this.schedulerListeners != null) {_			for (SchedulerListener listener : this.schedulerListeners) {_				listenerManager.addSchedulerListener(listener)__			}_		}_		if (this.globalJobListeners != null) {_			for (JobListener listener : this.globalJobListeners) {_				listenerManager.addJobListener(listener)__			}_		}_		if (this.globalTriggerListeners != null) {_			for (TriggerListener listener : this.globalTriggerListeners) {_				listenerManager.addTriggerListener(listener)__			}_		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,listener,manager,listener,manager,get,scheduler,get,listener,manager,if,this,scheduler,listeners,null,for,scheduler,listener,listener,this,scheduler,listeners,listener,manager,add,scheduler,listener,listener,if,this,global,job,listeners,null,for,job,listener,listener,this,global,job,listeners,listener,manager,add,job,listener,listener,if,this,global,trigger,listeners,null,for,trigger,listener,listener,this,global,trigger,listeners,listener,manager,add,trigger,listener,listener
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1496259743;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		ListenerManager listenerManager = getScheduler().getListenerManager()__		if (this.schedulerListeners != null) {_			for (SchedulerListener listener : this.schedulerListeners) {_				listenerManager.addSchedulerListener(listener)__			}_		}_		if (this.globalJobListeners != null) {_			for (JobListener listener : this.globalJobListeners) {_				listenerManager.addJobListener(listener)__			}_		}_		if (this.globalTriggerListeners != null) {_			for (TriggerListener listener : this.globalTriggerListeners) {_				listenerManager.addTriggerListener(listener)__			}_		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,listener,manager,listener,manager,get,scheduler,get,listener,manager,if,this,scheduler,listeners,null,for,scheduler,listener,listener,this,scheduler,listeners,listener,manager,add,scheduler,listener,listener,if,this,global,job,listeners,null,for,job,listener,listener,this,global,job,listeners,listener,manager,add,job,listener,listener,if,this,global,trigger,listeners,null,for,trigger,listener,listener,this,global,trigger,listeners,listener,manager,add,trigger,listener,listener
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1498780456;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		ListenerManager listenerManager = getScheduler().getListenerManager()__		if (this.schedulerListeners != null) {_			for (SchedulerListener listener : this.schedulerListeners) {_				listenerManager.addSchedulerListener(listener)__			}_		}_		if (this.globalJobListeners != null) {_			for (JobListener listener : this.globalJobListeners) {_				listenerManager.addJobListener(listener)__			}_		}_		if (this.globalTriggerListeners != null) {_			for (TriggerListener listener : this.globalTriggerListeners) {_				listenerManager.addTriggerListener(listener)__			}_		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,listener,manager,listener,manager,get,scheduler,get,listener,manager,if,this,scheduler,listeners,null,for,scheduler,listener,listener,this,scheduler,listeners,listener,manager,add,scheduler,listener,listener,if,this,global,job,listeners,null,for,job,listener,listener,this,global,job,listeners,listener,manager,add,job,listener,listener,if,this,global,trigger,listeners,null,for,trigger,listener,listener,this,global,trigger,listeners,listener,manager,add,trigger,listener,listener
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1530174524;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		ListenerManager listenerManager = getScheduler().getListenerManager()__		if (this.schedulerListeners != null) {_			for (SchedulerListener listener : this.schedulerListeners) {_				listenerManager.addSchedulerListener(listener)__			}_		}_		if (this.globalJobListeners != null) {_			for (JobListener listener : this.globalJobListeners) {_				listenerManager.addJobListener(listener)__			}_		}_		if (this.globalTriggerListeners != null) {_			for (TriggerListener listener : this.globalTriggerListeners) {_				listenerManager.addTriggerListener(listener)__			}_		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,listener,manager,listener,manager,get,scheduler,get,listener,manager,if,this,scheduler,listeners,null,for,scheduler,listener,listener,this,scheduler,listeners,listener,manager,add,scheduler,listener,listener,if,this,global,job,listeners,null,for,job,listener,listener,this,global,job,listeners,listener,manager,add,job,listener,listener,if,this,global,trigger,listeners,null,for,trigger,listener,listener,this,global,trigger,listeners,listener,manager,add,trigger,listener,listener
SchedulerAccessor -> protected void registerListeners() throws SchedulerException;1533213002;Register all specified listeners with the Scheduler.;protected void registerListeners() throws SchedulerException {_		ListenerManager listenerManager = getScheduler().getListenerManager()__		if (this.schedulerListeners != null) {_			for (SchedulerListener listener : this.schedulerListeners) {_				listenerManager.addSchedulerListener(listener)__			}_		}_		if (this.globalJobListeners != null) {_			for (JobListener listener : this.globalJobListeners) {_				listenerManager.addJobListener(listener)__			}_		}_		if (this.globalTriggerListeners != null) {_			for (TriggerListener listener : this.globalTriggerListeners) {_				listenerManager.addTriggerListener(listener)__			}_		}_	};register,all,specified,listeners,with,the,scheduler;protected,void,register,listeners,throws,scheduler,exception,listener,manager,listener,manager,get,scheduler,get,listener,manager,if,this,scheduler,listeners,null,for,scheduler,listener,listener,this,scheduler,listeners,listener,manager,add,scheduler,listener,listener,if,this,global,job,listeners,null,for,job,listener,listener,this,global,job,listeners,listener,manager,add,job,listener,listener,if,this,global,trigger,listeners,null,for,trigger,listener,listener,this,global,trigger,listeners,listener,manager,add,trigger,listener,listener
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1328020251;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.JobSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,job,scheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1355313310;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XmlSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xml,scheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1356735495;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XmlSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xml,scheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1357119239;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XmlSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xml,scheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1363730577;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1368482696;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1375197763;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1385412762;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1388939442;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1388954345;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1390908324;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1395953963;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1397568289;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1408389938;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1467730834;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1496259743;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1498780456;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1530174524;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setJobSchedulingDataLocation(String jobSchedulingDataLocation);1533213002;Set the location of a Quartz job definition XML file that follows the_"job_scheduling_data_1_5" XSD or better. Can be specified to automatically_register jobs that are defined in such a file, possibly in addition_to jobs defined directly on this SchedulerFactoryBean._@see org.quartz.xml.XMLSchedulingDataProcessor;public void setJobSchedulingDataLocation(String jobSchedulingDataLocation) {_		this.jobSchedulingDataLocations = new String[] {jobSchedulingDataLocation}__	};set,the,location,of,a,quartz,job,definition,xml,file,that,follows,the,xsd,or,better,can,be,specified,to,automatically,register,jobs,that,are,defined,in,such,a,file,possibly,in,addition,to,jobs,defined,directly,on,this,scheduler,factory,bean,see,org,quartz,xml,xmlscheduling,data,processor;public,void,set,job,scheduling,data,location,string,job,scheduling,data,location,this,job,scheduling,data,locations,new,string,job,scheduling,data,location
SchedulerAccessor -> public void setGlobalJobListeners(JobListener[] globalJobListeners);1328020251;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener[] globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener[] globalJobListeners);1355313310;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener[] globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener[] globalJobListeners);1356735495;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener[] globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener[] globalJobListeners);1357119239;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener[] globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener[] globalJobListeners);1363730577;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener[] globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener[] globalJobListeners);1368482696;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener[] globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener[] globalJobListeners);1375197763;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener[] globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setGlobalJobListeners(JobListener[] globalJobListeners);1385412762;Specify global Quartz JobListeners to be registered with the Scheduler._Such JobListeners will apply to all Jobs in the Scheduler.;public void setGlobalJobListeners(JobListener[] globalJobListeners) {_		this.globalJobListeners = globalJobListeners__	};specify,global,quartz,job,listeners,to,be,registered,with,the,scheduler,such,job,listeners,will,apply,to,all,jobs,in,the,scheduler;public,void,set,global,job,listeners,job,listener,global,job,listeners,this,global,job,listeners,global,job,listeners
SchedulerAccessor -> public void setTriggerListeners(TriggerListener[] triggerListeners);1328020251;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._@see org.quartz.TriggerListener#getName_@see org.quartz.Trigger#addTriggerListener_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames;public void setTriggerListeners(TriggerListener[] triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,see,org,quartz,trigger,listener,get,name,see,org,quartz,trigger,add,trigger,listener,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names;public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> public void setTriggerListeners(TriggerListener[] triggerListeners);1355313310;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._@see org.quartz.TriggerListener#getName_@see org.quartz.Trigger#addTriggerListener_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames;public void setTriggerListeners(TriggerListener[] triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,see,org,quartz,trigger,listener,get,name,see,org,quartz,trigger,add,trigger,listener,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names;public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> public void setTriggerListeners(TriggerListener[] triggerListeners);1356735495;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._@see org.quartz.TriggerListener#getName_@see org.quartz.Trigger#addTriggerListener_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames;public void setTriggerListeners(TriggerListener[] triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,see,org,quartz,trigger,listener,get,name,see,org,quartz,trigger,add,trigger,listener,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names;public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> public void setTriggerListeners(TriggerListener[] triggerListeners);1357119239;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._@see org.quartz.TriggerListener#getName_@see org.quartz.Trigger#addTriggerListener_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames;public void setTriggerListeners(TriggerListener[] triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,see,org,quartz,trigger,listener,get,name,see,org,quartz,trigger,add,trigger,listener,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names;public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> public void setTriggerListeners(TriggerListener[] triggerListeners);1363730577;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._@see org.quartz.TriggerListener#getName_@see org.quartz.Trigger#addTriggerListener_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames;public void setTriggerListeners(TriggerListener[] triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,see,org,quartz,trigger,listener,get,name,see,org,quartz,trigger,add,trigger,listener,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names;public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> public void setTriggerListeners(TriggerListener[] triggerListeners);1368482696;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._@see org.quartz.TriggerListener#getName_@see org.quartz.Trigger#addTriggerListener_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames;public void setTriggerListeners(TriggerListener[] triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,see,org,quartz,trigger,listener,get,name,see,org,quartz,trigger,add,trigger,listener,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names;public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> public void setTriggerListeners(TriggerListener[] triggerListeners);1375197763;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._@see org.quartz.TriggerListener#getName_@see org.quartz.Trigger#addTriggerListener_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames;public void setTriggerListeners(TriggerListener[] triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,see,org,quartz,trigger,listener,get,name,see,org,quartz,trigger,add,trigger,listener,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names;public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> public void setTriggerListeners(TriggerListener[] triggerListeners);1385412762;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._@see org.quartz.TriggerListener#getName_@see org.quartz.Trigger#addTriggerListener_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames;public void setTriggerListeners(TriggerListener[] triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,see,org,quartz,trigger,listener,get,name,see,org,quartz,trigger,add,trigger,listener,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names;public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> @Deprecated 	public void setTriggerListeners(TriggerListener... triggerListeners);1388954345;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._<p>Note that non-global TriggerListeners are not supported on Quartz 2.x -_manually register a Matcher against the Quartz ListenerManager instead._@see org.quartz.TriggerListener#getName_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames_@deprecated as of Spring 4.0, since it only works on Quartz 1.x;@Deprecated_	public void setTriggerListeners(TriggerListener... triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,p,note,that,non,global,trigger,listeners,are,not,supported,on,quartz,2,x,manually,register,a,matcher,against,the,quartz,listener,manager,instead,see,org,quartz,trigger,listener,get,name,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names,deprecated,as,of,spring,4,0,since,it,only,works,on,quartz,1,x;deprecated,public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
SchedulerAccessor -> @Deprecated 	public void setTriggerListeners(TriggerListener... triggerListeners);1390908324;Specify named Quartz TriggerListeners to be registered with the Scheduler._Such TriggerListeners will only apply to Triggers that explicitly activate_them via their name._<p>Note that non-global TriggerListeners are not supported on Quartz 2.x -_manually register a Matcher against the Quartz ListenerManager instead._@see org.quartz.TriggerListener#getName_@see CronTriggerBean#setTriggerListenerNames_@see SimpleTriggerBean#setTriggerListenerNames_@deprecated as of Spring 4.0, since it only works on Quartz 1.x;@Deprecated_	public void setTriggerListeners(TriggerListener... triggerListeners) {_		this.triggerListeners = triggerListeners__	};specify,named,quartz,trigger,listeners,to,be,registered,with,the,scheduler,such,trigger,listeners,will,only,apply,to,triggers,that,explicitly,activate,them,via,their,name,p,note,that,non,global,trigger,listeners,are,not,supported,on,quartz,2,x,manually,register,a,matcher,against,the,quartz,listener,manager,instead,see,org,quartz,trigger,listener,get,name,see,cron,trigger,bean,set,trigger,listener,names,see,simple,trigger,bean,set,trigger,listener,names,deprecated,as,of,spring,4,0,since,it,only,works,on,quartz,1,x;deprecated,public,void,set,trigger,listeners,trigger,listener,trigger,listeners,this,trigger,listeners,trigger,listeners
