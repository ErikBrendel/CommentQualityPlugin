commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Provide an {@link ErrorHandler} strategy.  */ ;/**  * Provide an {@link ErrorHandler} strategy.  */ public void setErrorHandler(ErrorHandler errorHandler) {     this.errorHandler = errorHandler. }
false;public;2;5;;@Override @Nullable public ScheduledFuture<?> schedule(Runnable task, Trigger trigger) {     return new ReschedulingTimerListener(errorHandlingTask(task, true), trigger).schedule(). }
false;public;2;7;;@Override public ScheduledFuture<?> schedule(Runnable task, Date startTime) {     TimerScheduledFuture futureTask = new TimerScheduledFuture(errorHandlingTask(task, false)).     Timer timer = obtainTimerManager().schedule(futureTask, startTime).     futureTask.setTimer(timer).     return futureTask. }
false;public;3;7;;@Override public ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period) {     TimerScheduledFuture futureTask = new TimerScheduledFuture(errorHandlingTask(task, true)).     Timer timer = obtainTimerManager().scheduleAtFixedRate(futureTask, startTime, period).     futureTask.setTimer(timer).     return futureTask. }
false;public;2;7;;@Override public ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period) {     TimerScheduledFuture futureTask = new TimerScheduledFuture(errorHandlingTask(task, true)).     Timer timer = obtainTimerManager().scheduleAtFixedRate(futureTask, 0, period).     futureTask.setTimer(timer).     return futureTask. }
false;public;3;7;;@Override public ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay) {     TimerScheduledFuture futureTask = new TimerScheduledFuture(errorHandlingTask(task, true)).     Timer timer = obtainTimerManager().schedule(futureTask, startTime, delay).     futureTask.setTimer(timer).     return futureTask. }
false;public;2;7;;@Override public ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay) {     TimerScheduledFuture futureTask = new TimerScheduledFuture(errorHandlingTask(task, true)).     Timer timer = obtainTimerManager().schedule(futureTask, 0, delay).     futureTask.setTimer(timer).     return futureTask. }
false;private;2;3;;private Runnable errorHandlingTask(Runnable delegate, boolean isRepeatingTask) {     return TaskUtils.decorateTaskWithErrorHandler(delegate, this.errorHandler, isRepeatingTask). }
false;public;1;3;;public void setTimer(Timer timer) {     this.timer = timer. }
false;public;1;4;;@Override public void timerExpired(Timer timer) {     runAndReset(). }
false;public;1;9;;@Override public boolean cancel(boolean mayInterruptIfRunning) {     boolean result = super.cancel(mayInterruptIfRunning).     if (this.timer != null) {         this.timer.cancel().     }     this.cancelled = true.     return result. }
false;public;1;5;;@Override public long getDelay(TimeUnit unit) {     Assert.state(this.timer != null, "No Timer available").     return unit.convert(this.timer.getScheduledExecutionTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS). }
false;public;1;8;;@Override public int compareTo(Delayed other) {     if (this == other) {         return 0.     }     long diff = getDelay(TimeUnit.MILLISECONDS) - other.getDelay(TimeUnit.MILLISECONDS).     return (diff == 0 ? 0 : ((diff < 0) ? -1 : 1)). }
false;public;0;10;;@Nullable public ScheduledFuture<?> schedule() {     Date nextExecutionTime = this.trigger.nextExecutionTime(this.triggerContext).     if (nextExecutionTime == null) {         return null.     }     this.scheduledExecutionTime = nextExecutionTime.     setTimer(obtainTimerManager().schedule(this, this.scheduledExecutionTime)).     return this. }
false;public;1;10;;@Override public void timerExpired(Timer timer) {     Date actualExecutionTime = new Date().     super.timerExpired(timer).     Date completionTime = new Date().     this.triggerContext.update(this.scheduledExecutionTime, actualExecutionTime, completionTime).     if (!this.cancelled) {         schedule().     } }
