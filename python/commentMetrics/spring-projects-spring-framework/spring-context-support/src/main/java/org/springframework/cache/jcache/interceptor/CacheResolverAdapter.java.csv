commented;modifiers;parameterAmount;loc;comment;code
true;protected;0;3;/**  * Return the underlying {@link javax.cache.annotation.CacheResolver}  * that this instance is using.  */ ;/**  * Return the underlying {@link javax.cache.annotation.CacheResolver}  * that this instance is using.  */ protected javax.cache.annotation.CacheResolver getTarget() {     return this.target. }
false;public;1;12;;@Override public Collection<? extends Cache> resolveCaches(CacheOperationInvocationContext<?> context) {     if (!(context instanceof CacheInvocationContext<?>)) {         throw new IllegalStateException("Unexpected context " + context).     }     CacheInvocationContext<?> cacheInvocationContext = (CacheInvocationContext<?>) context.     javax.cache.Cache<Object, Object> cache = this.target.resolveCache(cacheInvocationContext).     if (cache == null) {         throw new IllegalStateException("Could not resolve cache for " + context + " using " + this.target).     }     return Collections.singleton(new JCacheCache(cache)). }
