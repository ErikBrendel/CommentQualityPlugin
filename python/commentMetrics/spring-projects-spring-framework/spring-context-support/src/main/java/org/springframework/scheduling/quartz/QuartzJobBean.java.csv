commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;14;/**  * This implementation applies the passed-in job data map as bean property  * values, and delegates to {@code executeInternal} afterwards.  * @see #executeInternal  */ ;/**  * This implementation applies the passed-in job data map as bean property  * values, and delegates to {@code executeInternal} afterwards.  * @see #executeInternal  */ @Override public final void execute(JobExecutionContext context) throws JobExecutionException {     try {         BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this).         MutablePropertyValues pvs = new MutablePropertyValues().         pvs.addPropertyValues(context.getScheduler().getContext()).         pvs.addPropertyValues(context.getMergedJobDataMap()).         bw.setPropertyValues(pvs, true).     } catch (SchedulerException ex) {         throw new JobExecutionException(ex).     }     executeInternal(context). }
true;protected,abstract;1;1;/**  * Execute the actual job. The job data map will already have been  * applied as bean property values by execute. The contract is  * exactly the same as for the standard Quartz execute method.  * @see #execute  */ ;/**  * Execute the actual job. The job data map will already have been  * applied as bean property values by execute. The contract is  * exactly the same as for the standard Quartz execute method.  * @see #execute  */ protected abstract void executeInternal(JobExecutionContext context) throws JobExecutionException.
