commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the {@link KeyGenerator} to use to compute cache keys.  */ ;/**  * Return the {@link KeyGenerator} to use to compute cache keys.  */ public KeyGenerator getKeyGenerator() {     return this.keyGenerator. }
true;public;1;12;/**  * Return the {@link CacheInvocationParameter} for the parameters that are to be  * used to compute the key.  * <p>Per the spec, if some method parameters are annotated with  * {@link javax.cache.annotation.CacheKey}, only those parameters should be part  * of the key. If none are annotated, all parameters except the parameter annotated  * with {@link javax.cache.annotation.CacheValue} should be part of the key.  * <p>The method arguments must match the signature of the related method invocation  * @param values the parameters value for a particular invocation  * @return the {@link CacheInvocationParameter} instances for the parameters to be  * used to compute the key  */ ;/**  * Return the {@link CacheInvocationParameter} for the parameters that are to be  * used to compute the key.  * <p>Per the spec, if some method parameters are annotated with  * {@link javax.cache.annotation.CacheKey}, only those parameters should be part  * of the key. If none are annotated, all parameters except the parameter annotated  * with {@link javax.cache.annotation.CacheValue} should be part of the key.  * <p>The method arguments must match the signature of the related method invocation  * @param values the parameters value for a particular invocation  * @return the {@link CacheInvocationParameter} instances for the parameters to be  * used to compute the key  */ public CacheInvocationParameter[] getKeyParameters(Object... values) {     List<CacheInvocationParameter> result = new ArrayList<>().     for (CacheParameterDetail keyParameterDetail : this.keyParameterDetails) {         int parameterPosition = keyParameterDetail.getParameterPosition().         if (parameterPosition >= values.length) {             throw new IllegalStateException("Values mismatch, key parameter at position " + parameterPosition + " cannot be matched against " + values.length + " value(s)").         }         result.add(keyParameterDetail.toCacheInvocationParameter(values[parameterPosition])).     }     return result.toArray(new CacheInvocationParameter[0]). }
false;private,static;1;13;;private static List<CacheParameterDetail> initializeKeyParameterDetails(List<CacheParameterDetail> allParameters) {     List<CacheParameterDetail> all = new ArrayList<>().     List<CacheParameterDetail> annotated = new ArrayList<>().     for (CacheParameterDetail allParameter : allParameters) {         if (!allParameter.isValue()) {             all.add(allParameter).         }         if (allParameter.isKey()) {             annotated.add(allParameter).         }     }     return (annotated.isEmpty() ? all : annotated). }
