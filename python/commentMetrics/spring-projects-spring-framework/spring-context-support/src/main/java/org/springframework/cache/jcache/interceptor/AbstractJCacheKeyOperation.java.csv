# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractJCacheKeyOperation -> protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails, 			CacheResolver cacheResolver, KeyGenerator keyGenerator);1406128099;Create a new instance._@param methodDetails the {@link CacheMethodDetails} related to the cached method_@param cacheResolver the cache resolver to resolve regular caches_@param keyGenerator the key generator to compute cache keys;protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails,_			CacheResolver cacheResolver, KeyGenerator keyGenerator) {__		super(methodDetails, cacheResolver)__		this.keyGenerator = keyGenerator__		this.keyParameterDetails = initializeKeyParameterDetails(this.allParameterDetails)__	};create,a,new,instance,param,method,details,the,link,cache,method,details,related,to,the,cached,method,param,cache,resolver,the,cache,resolver,to,resolve,regular,caches,param,key,generator,the,key,generator,to,compute,cache,keys;protected,abstract,jcache,key,operation,cache,method,details,a,method,details,cache,resolver,cache,resolver,key,generator,key,generator,super,method,details,cache,resolver,this,key,generator,key,generator,this,key,parameter,details,initialize,key,parameter,details,this,all,parameter,details
AbstractJCacheKeyOperation -> protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails, 			CacheResolver cacheResolver, KeyGenerator keyGenerator);1413848647;Create a new instance._@param methodDetails the {@link CacheMethodDetails} related to the cached method_@param cacheResolver the cache resolver to resolve regular caches_@param keyGenerator the key generator to compute cache keys;protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails,_			CacheResolver cacheResolver, KeyGenerator keyGenerator) {__		super(methodDetails, cacheResolver)__		this.keyGenerator = keyGenerator__		this.keyParameterDetails = initializeKeyParameterDetails(this.allParameterDetails)__	};create,a,new,instance,param,method,details,the,link,cache,method,details,related,to,the,cached,method,param,cache,resolver,the,cache,resolver,to,resolve,regular,caches,param,key,generator,the,key,generator,to,compute,cache,keys;protected,abstract,jcache,key,operation,cache,method,details,a,method,details,cache,resolver,cache,resolver,key,generator,key,generator,super,method,details,cache,resolver,this,key,generator,key,generator,this,key,parameter,details,initialize,key,parameter,details,this,all,parameter,details
AbstractJCacheKeyOperation -> protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails, 			CacheResolver cacheResolver, KeyGenerator keyGenerator);1467730834;Create a new instance._@param methodDetails the {@link CacheMethodDetails} related to the cached method_@param cacheResolver the cache resolver to resolve regular caches_@param keyGenerator the key generator to compute cache keys;protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails,_			CacheResolver cacheResolver, KeyGenerator keyGenerator) {__		super(methodDetails, cacheResolver)__		this.keyGenerator = keyGenerator__		this.keyParameterDetails = initializeKeyParameterDetails(this.allParameterDetails)__	};create,a,new,instance,param,method,details,the,link,cache,method,details,related,to,the,cached,method,param,cache,resolver,the,cache,resolver,to,resolve,regular,caches,param,key,generator,the,key,generator,to,compute,cache,keys;protected,abstract,jcache,key,operation,cache,method,details,a,method,details,cache,resolver,cache,resolver,key,generator,key,generator,super,method,details,cache,resolver,this,key,generator,key,generator,this,key,parameter,details,initialize,key,parameter,details,this,all,parameter,details
AbstractJCacheKeyOperation -> protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails, 			CacheResolver cacheResolver, KeyGenerator keyGenerator);1519295386;Create a new instance._@param methodDetails the {@link CacheMethodDetails} related to the cached method_@param cacheResolver the cache resolver to resolve regular caches_@param keyGenerator the key generator to compute cache keys;protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails,_			CacheResolver cacheResolver, KeyGenerator keyGenerator) {__		super(methodDetails, cacheResolver)__		this.keyGenerator = keyGenerator__		this.keyParameterDetails = initializeKeyParameterDetails(this.allParameterDetails)__	};create,a,new,instance,param,method,details,the,link,cache,method,details,related,to,the,cached,method,param,cache,resolver,the,cache,resolver,to,resolve,regular,caches,param,key,generator,the,key,generator,to,compute,cache,keys;protected,abstract,jcache,key,operation,cache,method,details,a,method,details,cache,resolver,cache,resolver,key,generator,key,generator,super,method,details,cache,resolver,this,key,generator,key,generator,this,key,parameter,details,initialize,key,parameter,details,this,all,parameter,details
AbstractJCacheKeyOperation -> protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails, 			CacheResolver cacheResolver, KeyGenerator keyGenerator);1530174524;Create a new instance._@param methodDetails the {@link CacheMethodDetails} related to the cached method_@param cacheResolver the cache resolver to resolve regular caches_@param keyGenerator the key generator to compute cache keys;protected AbstractJCacheKeyOperation(CacheMethodDetails<A> methodDetails,_			CacheResolver cacheResolver, KeyGenerator keyGenerator) {__		super(methodDetails, cacheResolver)__		this.keyGenerator = keyGenerator__		this.keyParameterDetails = initializeKeyParameterDetails(this.allParameterDetails)__	};create,a,new,instance,param,method,details,the,link,cache,method,details,related,to,the,cached,method,param,cache,resolver,the,cache,resolver,to,resolve,regular,caches,param,key,generator,the,key,generator,to,compute,cache,keys;protected,abstract,jcache,key,operation,cache,method,details,a,method,details,cache,resolver,cache,resolver,key,generator,key,generator,super,method,details,cache,resolver,this,key,generator,key,generator,this,key,parameter,details,initialize,key,parameter,details,this,all,parameter,details
AbstractJCacheKeyOperation -> public KeyGenerator getKeyGenerator();1406128099;Return the {@link KeyGenerator} to use to compute cache keys.;public KeyGenerator getKeyGenerator() {_		return this.keyGenerator__	};return,the,link,key,generator,to,use,to,compute,cache,keys;public,key,generator,get,key,generator,return,this,key,generator
AbstractJCacheKeyOperation -> public KeyGenerator getKeyGenerator();1413848647;Return the {@link KeyGenerator} to use to compute cache keys.;public KeyGenerator getKeyGenerator() {_		return this.keyGenerator__	};return,the,link,key,generator,to,use,to,compute,cache,keys;public,key,generator,get,key,generator,return,this,key,generator
AbstractJCacheKeyOperation -> public KeyGenerator getKeyGenerator();1467730834;Return the {@link KeyGenerator} to use to compute cache keys.;public KeyGenerator getKeyGenerator() {_		return this.keyGenerator__	};return,the,link,key,generator,to,use,to,compute,cache,keys;public,key,generator,get,key,generator,return,this,key,generator
AbstractJCacheKeyOperation -> public KeyGenerator getKeyGenerator();1519295386;Return the {@link KeyGenerator} to use to compute cache keys.;public KeyGenerator getKeyGenerator() {_		return this.keyGenerator__	};return,the,link,key,generator,to,use,to,compute,cache,keys;public,key,generator,get,key,generator,return,this,key,generator
AbstractJCacheKeyOperation -> public KeyGenerator getKeyGenerator();1530174524;Return the {@link KeyGenerator} to use to compute cache keys.;public KeyGenerator getKeyGenerator() {_		return this.keyGenerator__	};return,the,link,key,generator,to,use,to,compute,cache,keys;public,key,generator,get,key,generator,return,this,key,generator
AbstractJCacheKeyOperation -> public CacheInvocationParameter[] getKeyParameters(Object... values);1406128099;Return the {@link CacheInvocationParameter} for the parameters that are to be_used to compute the key._<p>Per the spec, if some method parameters are annotated with_{@link javax.cache.annotation.CacheKey}, only those parameters should be part_of the key. If none are annotated, all parameters except the parameter annotated_with {@link javax.cache.annotation.CacheValue} should be part of the key._<p>The method arguments must match the signature of the related method invocation_@param values the parameters value for a particular invocation_@return the {@link CacheInvocationParameter} instances for the parameters to be_used to compute the key;public CacheInvocationParameter[] getKeyParameters(Object... values) {_		List<CacheInvocationParameter> result = new ArrayList<CacheInvocationParameter>()__		for (CacheParameterDetail keyParameterDetail : this.keyParameterDetails) {_			int parameterPosition = keyParameterDetail.getParameterPosition()__			if (parameterPosition >= values.length) {_				throw new IllegalStateException("Values mismatch, key parameter at position "_						+ parameterPosition + " cannot be matched against " + values.length + " value(s)")__			}_			result.add(keyParameterDetail.toCacheInvocationParameter(values[parameterPosition]))__		}_		return result.toArray(new CacheInvocationParameter[result.size()])__	};return,the,link,cache,invocation,parameter,for,the,parameters,that,are,to,be,used,to,compute,the,key,p,per,the,spec,if,some,method,parameters,are,annotated,with,link,javax,cache,annotation,cache,key,only,those,parameters,should,be,part,of,the,key,if,none,are,annotated,all,parameters,except,the,parameter,annotated,with,link,javax,cache,annotation,cache,value,should,be,part,of,the,key,p,the,method,arguments,must,match,the,signature,of,the,related,method,invocation,param,values,the,parameters,value,for,a,particular,invocation,return,the,link,cache,invocation,parameter,instances,for,the,parameters,to,be,used,to,compute,the,key;public,cache,invocation,parameter,get,key,parameters,object,values,list,cache,invocation,parameter,result,new,array,list,cache,invocation,parameter,for,cache,parameter,detail,key,parameter,detail,this,key,parameter,details,int,parameter,position,key,parameter,detail,get,parameter,position,if,parameter,position,values,length,throw,new,illegal,state,exception,values,mismatch,key,parameter,at,position,parameter,position,cannot,be,matched,against,values,length,value,s,result,add,key,parameter,detail,to,cache,invocation,parameter,values,parameter,position,return,result,to,array,new,cache,invocation,parameter,result,size
AbstractJCacheKeyOperation -> public CacheInvocationParameter[] getKeyParameters(Object... values);1413848647;Return the {@link CacheInvocationParameter} for the parameters that are to be_used to compute the key._<p>Per the spec, if some method parameters are annotated with_{@link javax.cache.annotation.CacheKey}, only those parameters should be part_of the key. If none are annotated, all parameters except the parameter annotated_with {@link javax.cache.annotation.CacheValue} should be part of the key._<p>The method arguments must match the signature of the related method invocation_@param values the parameters value for a particular invocation_@return the {@link CacheInvocationParameter} instances for the parameters to be_used to compute the key;public CacheInvocationParameter[] getKeyParameters(Object... values) {_		List<CacheInvocationParameter> result = new ArrayList<CacheInvocationParameter>()__		for (CacheParameterDetail keyParameterDetail : this.keyParameterDetails) {_			int parameterPosition = keyParameterDetail.getParameterPosition()__			if (parameterPosition >= values.length) {_				throw new IllegalStateException("Values mismatch, key parameter at position "_						+ parameterPosition + " cannot be matched against " + values.length + " value(s)")__			}_			result.add(keyParameterDetail.toCacheInvocationParameter(values[parameterPosition]))__		}_		return result.toArray(new CacheInvocationParameter[result.size()])__	};return,the,link,cache,invocation,parameter,for,the,parameters,that,are,to,be,used,to,compute,the,key,p,per,the,spec,if,some,method,parameters,are,annotated,with,link,javax,cache,annotation,cache,key,only,those,parameters,should,be,part,of,the,key,if,none,are,annotated,all,parameters,except,the,parameter,annotated,with,link,javax,cache,annotation,cache,value,should,be,part,of,the,key,p,the,method,arguments,must,match,the,signature,of,the,related,method,invocation,param,values,the,parameters,value,for,a,particular,invocation,return,the,link,cache,invocation,parameter,instances,for,the,parameters,to,be,used,to,compute,the,key;public,cache,invocation,parameter,get,key,parameters,object,values,list,cache,invocation,parameter,result,new,array,list,cache,invocation,parameter,for,cache,parameter,detail,key,parameter,detail,this,key,parameter,details,int,parameter,position,key,parameter,detail,get,parameter,position,if,parameter,position,values,length,throw,new,illegal,state,exception,values,mismatch,key,parameter,at,position,parameter,position,cannot,be,matched,against,values,length,value,s,result,add,key,parameter,detail,to,cache,invocation,parameter,values,parameter,position,return,result,to,array,new,cache,invocation,parameter,result,size
AbstractJCacheKeyOperation -> public CacheInvocationParameter[] getKeyParameters(Object... values);1467730834;Return the {@link CacheInvocationParameter} for the parameters that are to be_used to compute the key._<p>Per the spec, if some method parameters are annotated with_{@link javax.cache.annotation.CacheKey}, only those parameters should be part_of the key. If none are annotated, all parameters except the parameter annotated_with {@link javax.cache.annotation.CacheValue} should be part of the key._<p>The method arguments must match the signature of the related method invocation_@param values the parameters value for a particular invocation_@return the {@link CacheInvocationParameter} instances for the parameters to be_used to compute the key;public CacheInvocationParameter[] getKeyParameters(Object... values) {_		List<CacheInvocationParameter> result = new ArrayList<>()__		for (CacheParameterDetail keyParameterDetail : this.keyParameterDetails) {_			int parameterPosition = keyParameterDetail.getParameterPosition()__			if (parameterPosition >= values.length) {_				throw new IllegalStateException("Values mismatch, key parameter at position "_						+ parameterPosition + " cannot be matched against " + values.length + " value(s)")__			}_			result.add(keyParameterDetail.toCacheInvocationParameter(values[parameterPosition]))__		}_		return result.toArray(new CacheInvocationParameter[result.size()])__	};return,the,link,cache,invocation,parameter,for,the,parameters,that,are,to,be,used,to,compute,the,key,p,per,the,spec,if,some,method,parameters,are,annotated,with,link,javax,cache,annotation,cache,key,only,those,parameters,should,be,part,of,the,key,if,none,are,annotated,all,parameters,except,the,parameter,annotated,with,link,javax,cache,annotation,cache,value,should,be,part,of,the,key,p,the,method,arguments,must,match,the,signature,of,the,related,method,invocation,param,values,the,parameters,value,for,a,particular,invocation,return,the,link,cache,invocation,parameter,instances,for,the,parameters,to,be,used,to,compute,the,key;public,cache,invocation,parameter,get,key,parameters,object,values,list,cache,invocation,parameter,result,new,array,list,for,cache,parameter,detail,key,parameter,detail,this,key,parameter,details,int,parameter,position,key,parameter,detail,get,parameter,position,if,parameter,position,values,length,throw,new,illegal,state,exception,values,mismatch,key,parameter,at,position,parameter,position,cannot,be,matched,against,values,length,value,s,result,add,key,parameter,detail,to,cache,invocation,parameter,values,parameter,position,return,result,to,array,new,cache,invocation,parameter,result,size
AbstractJCacheKeyOperation -> public CacheInvocationParameter[] getKeyParameters(Object... values);1519295386;Return the {@link CacheInvocationParameter} for the parameters that are to be_used to compute the key._<p>Per the spec, if some method parameters are annotated with_{@link javax.cache.annotation.CacheKey}, only those parameters should be part_of the key. If none are annotated, all parameters except the parameter annotated_with {@link javax.cache.annotation.CacheValue} should be part of the key._<p>The method arguments must match the signature of the related method invocation_@param values the parameters value for a particular invocation_@return the {@link CacheInvocationParameter} instances for the parameters to be_used to compute the key;public CacheInvocationParameter[] getKeyParameters(Object... values) {_		List<CacheInvocationParameter> result = new ArrayList<>()__		for (CacheParameterDetail keyParameterDetail : this.keyParameterDetails) {_			int parameterPosition = keyParameterDetail.getParameterPosition()__			if (parameterPosition >= values.length) {_				throw new IllegalStateException("Values mismatch, key parameter at position "_						+ parameterPosition + " cannot be matched against " + values.length + " value(s)")__			}_			result.add(keyParameterDetail.toCacheInvocationParameter(values[parameterPosition]))__		}_		return result.toArray(new CacheInvocationParameter[0])__	};return,the,link,cache,invocation,parameter,for,the,parameters,that,are,to,be,used,to,compute,the,key,p,per,the,spec,if,some,method,parameters,are,annotated,with,link,javax,cache,annotation,cache,key,only,those,parameters,should,be,part,of,the,key,if,none,are,annotated,all,parameters,except,the,parameter,annotated,with,link,javax,cache,annotation,cache,value,should,be,part,of,the,key,p,the,method,arguments,must,match,the,signature,of,the,related,method,invocation,param,values,the,parameters,value,for,a,particular,invocation,return,the,link,cache,invocation,parameter,instances,for,the,parameters,to,be,used,to,compute,the,key;public,cache,invocation,parameter,get,key,parameters,object,values,list,cache,invocation,parameter,result,new,array,list,for,cache,parameter,detail,key,parameter,detail,this,key,parameter,details,int,parameter,position,key,parameter,detail,get,parameter,position,if,parameter,position,values,length,throw,new,illegal,state,exception,values,mismatch,key,parameter,at,position,parameter,position,cannot,be,matched,against,values,length,value,s,result,add,key,parameter,detail,to,cache,invocation,parameter,values,parameter,position,return,result,to,array,new,cache,invocation,parameter,0
AbstractJCacheKeyOperation -> public CacheInvocationParameter[] getKeyParameters(Object... values);1530174524;Return the {@link CacheInvocationParameter} for the parameters that are to be_used to compute the key._<p>Per the spec, if some method parameters are annotated with_{@link javax.cache.annotation.CacheKey}, only those parameters should be part_of the key. If none are annotated, all parameters except the parameter annotated_with {@link javax.cache.annotation.CacheValue} should be part of the key._<p>The method arguments must match the signature of the related method invocation_@param values the parameters value for a particular invocation_@return the {@link CacheInvocationParameter} instances for the parameters to be_used to compute the key;public CacheInvocationParameter[] getKeyParameters(Object... values) {_		List<CacheInvocationParameter> result = new ArrayList<>()__		for (CacheParameterDetail keyParameterDetail : this.keyParameterDetails) {_			int parameterPosition = keyParameterDetail.getParameterPosition()__			if (parameterPosition >= values.length) {_				throw new IllegalStateException("Values mismatch, key parameter at position "_						+ parameterPosition + " cannot be matched against " + values.length + " value(s)")__			}_			result.add(keyParameterDetail.toCacheInvocationParameter(values[parameterPosition]))__		}_		return result.toArray(new CacheInvocationParameter[0])__	};return,the,link,cache,invocation,parameter,for,the,parameters,that,are,to,be,used,to,compute,the,key,p,per,the,spec,if,some,method,parameters,are,annotated,with,link,javax,cache,annotation,cache,key,only,those,parameters,should,be,part,of,the,key,if,none,are,annotated,all,parameters,except,the,parameter,annotated,with,link,javax,cache,annotation,cache,value,should,be,part,of,the,key,p,the,method,arguments,must,match,the,signature,of,the,related,method,invocation,param,values,the,parameters,value,for,a,particular,invocation,return,the,link,cache,invocation,parameter,instances,for,the,parameters,to,be,used,to,compute,the,key;public,cache,invocation,parameter,get,key,parameters,object,values,list,cache,invocation,parameter,result,new,array,list,for,cache,parameter,detail,key,parameter,detail,this,key,parameter,details,int,parameter,position,key,parameter,detail,get,parameter,position,if,parameter,position,values,length,throw,new,illegal,state,exception,values,mismatch,key,parameter,at,position,parameter,position,cannot,be,matched,against,values,length,value,s,result,add,key,parameter,detail,to,cache,invocation,parameter,values,parameter,position,return,result,to,array,new,cache,invocation,parameter,0
