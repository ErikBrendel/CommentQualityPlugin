commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ExceptionTypeFilter getExceptionTypeFilter() {     return this.exceptionTypeFilter. }
true;public;0;3;/**  * Specify if the cache should be updated before invoking the method. By default,  * the cache is updated after the method invocation.  * @see javax.cache.annotation.CachePut#afterInvocation()  */ ;/**  * Specify if the cache should be updated before invoking the method. By default,  * the cache is updated after the method invocation.  * @see javax.cache.annotation.CachePut#afterInvocation()  */ public boolean isEarlyPut() {     return !getCacheAnnotation().afterInvocation(). }
true;public;1;8;/**  * Return the {@link CacheInvocationParameter} for the parameter holding the value  * to cache.  * <p>The method arguments must match the signature of the related method invocation  * @param values the parameters value for a particular invocation  * @return the {@link CacheInvocationParameter} instance for the value parameter  */ ;/**  * Return the {@link CacheInvocationParameter} for the parameter holding the value  * to cache.  * <p>The method arguments must match the signature of the related method invocation  * @param values the parameters value for a particular invocation  * @return the {@link CacheInvocationParameter} instance for the value parameter  */ public CacheInvocationParameter getValueParameter(Object... values) {     int parameterPosition = this.valueParameterDetail.getParameterPosition().     if (parameterPosition >= values.length) {         throw new IllegalStateException("Values mismatch, value parameter at position " + parameterPosition + " cannot be matched against " + values.length + " value(s)").     }     return this.valueParameterDetail.toCacheInvocationParameter(values[parameterPosition]). }
false;private,static;2;17;;@Nullable private static CacheParameterDetail initializeValueParameterDetail(Method method, List<CacheParameterDetail> allParameters) {     CacheParameterDetail result = null.     for (CacheParameterDetail parameter : allParameters) {         if (parameter.isValue()) {             if (result == null) {                 result = parameter.             } else {                 throw new IllegalArgumentException("More than one @CacheValue found on " + method + "").             }         }     }     return result. }
