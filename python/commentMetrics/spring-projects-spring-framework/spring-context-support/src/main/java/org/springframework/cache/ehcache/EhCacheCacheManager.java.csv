commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the backing EhCache {@link net.sf.ehcache.CacheManager}.  */ ;/**  * Set the backing EhCache {@link net.sf.ehcache.CacheManager}.  */ public void setCacheManager(@Nullable net.sf.ehcache.CacheManager cacheManager) {     this.cacheManager = cacheManager. }
true;public;0;4;/**  * Return the backing EhCache {@link net.sf.ehcache.CacheManager}.  */ ;/**  * Return the backing EhCache {@link net.sf.ehcache.CacheManager}.  */ @Nullable public net.sf.ehcache.CacheManager getCacheManager() {     return this.cacheManager. }
false;public;0;7;;@Override public void afterPropertiesSet() {     if (getCacheManager() == null) {         setCacheManager(EhCacheManagerUtils.buildCacheManager()).     }     super.afterPropertiesSet(). }
false;protected;0;18;;@Override protected Collection<Cache> loadCaches() {     net.sf.ehcache.CacheManager cacheManager = getCacheManager().     Assert.state(cacheManager != null, "No CacheManager set").     Status status = cacheManager.getStatus().     if (!Status.STATUS_ALIVE.equals(status)) {         throw new IllegalStateException("An 'alive' EhCache CacheManager is required - current cache is " + status.toString()).     }     String[] names = getCacheManager().getCacheNames().     Collection<Cache> caches = new LinkedHashSet<>(names.length).     for (String name : names) {         caches.add(new EhCacheCache(getCacheManager().getEhcache(name))).     }     return caches. }
false;protected;1;12;;@Override protected Cache getMissingCache(String name) {     net.sf.ehcache.CacheManager cacheManager = getCacheManager().     Assert.state(cacheManager != null, "No CacheManager set").     // Check the EhCache cache again (in case the cache was added at runtime)     Ehcache ehcache = cacheManager.getEhcache(name).     if (ehcache != null) {         return new EhCacheCache(ehcache).     }     return null. }
