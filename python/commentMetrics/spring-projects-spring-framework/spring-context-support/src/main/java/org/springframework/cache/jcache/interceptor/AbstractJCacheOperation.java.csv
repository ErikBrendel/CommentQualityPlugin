commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;9;;private static List<CacheParameterDetail> initializeAllParameterDetails(Method method) {     int parameterCount = method.getParameterCount().     List<CacheParameterDetail> result = new ArrayList<>(parameterCount).     for (int i = 0. i < parameterCount. i++) {         CacheParameterDetail detail = new CacheParameterDetail(method, i).         result.add(detail).     }     return result. }
false;public;0;4;;@Override public Method getMethod() {     return this.methodDetails.getMethod(). }
false;public;0;4;;@Override public Set<Annotation> getAnnotations() {     return this.methodDetails.getAnnotations(). }
false;public;0;4;;@Override public A getCacheAnnotation() {     return this.methodDetails.getCacheAnnotation(). }
false;public;0;4;;@Override public String getCacheName() {     return this.methodDetails.getCacheName(). }
false;public;0;4;;@Override public Set<String> getCacheNames() {     return Collections.singleton(getCacheName()). }
false;public;0;4;;@Override public CacheResolver getCacheResolver() {     return this.cacheResolver. }
false;public;1;12;;@Override public CacheInvocationParameter[] getAllParameters(Object... values) {     if (this.allParameterDetails.size() != values.length) {         throw new IllegalStateException("Values mismatch, operation has " + this.allParameterDetails.size() + " parameter(s) but got " + values.length + " value(s)").     }     List<CacheInvocationParameter> result = new ArrayList<>().     for (int i = 0. i < this.allParameterDetails.size(). i++) {         result.add(this.allParameterDetails.get(i).toCacheInvocationParameter(values[i])).     }     return result.toArray(new CacheInvocationParameter[0]). }
true;public,abstract;0;1;/**  * Return the {@link ExceptionTypeFilter} to use to filter exceptions thrown while  * invoking the method.  * @see #createExceptionTypeFilter  */ ;/**  * Return the {@link ExceptionTypeFilter} to use to filter exceptions thrown while  * invoking the method.  * @see #createExceptionTypeFilter  */ public abstract ExceptionTypeFilter getExceptionTypeFilter().
true;protected;2;5;/**  * Convenience method for subclasses to create a specific {@code ExceptionTypeFilter}.  * @see #getExceptionTypeFilter()  */ ;/**  * Convenience method for subclasses to create a specific {@code ExceptionTypeFilter}.  * @see #getExceptionTypeFilter()  */ protected ExceptionTypeFilter createExceptionTypeFilter(Class<? extends Throwable>[] includes, Class<? extends Throwable>[] excludes) {     return new ExceptionTypeFilter(Arrays.asList(includes), Arrays.asList(excludes), true). }
false;public;0;4;;@Override public String toString() {     return getOperationDescription().append("]").toString(). }
true;protected;0;7;/**  * Return an identifying description for this caching operation.  * <p>Available to subclasses, for inclusion in their {@code toString()} result.  */ ;/**  * Return an identifying description for this caching operation.  * <p>Available to subclasses, for inclusion in their {@code toString()} result.  */ protected StringBuilder getOperationDescription() {     StringBuilder result = new StringBuilder().     result.append(getClass().getSimpleName()).     result.append("[").     result.append(this.methodDetails).     return result. }
false;public;0;3;;public int getParameterPosition() {     return this.parameterPosition. }
false;protected;0;3;;protected boolean isKey() {     return this.isKey. }
false;protected;0;3;;protected boolean isValue() {     return this.isValue. }
false;public;1;3;;public CacheInvocationParameter toCacheInvocationParameter(Object value) {     return new CacheInvocationParameterImpl(this, value). }
false;public;0;4;;@Override public Class<?> getRawType() {     return this.detail.rawType. }
false;public;0;4;;@Override public Object getValue() {     return this.value. }
false;public;0;4;;@Override public Set<Annotation> getAnnotations() {     return this.detail.annotations. }
false;public;0;4;;@Override public int getParameterPosition() {     return this.detail.parameterPosition. }
