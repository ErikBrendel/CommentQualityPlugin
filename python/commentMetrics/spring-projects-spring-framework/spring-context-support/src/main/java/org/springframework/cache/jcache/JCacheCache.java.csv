commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final String getName() {     return this.cache.getName(). }
false;public,final;0;4;;@Override public final Cache<Object, Object> getNativeCache() {     return this.cache. }
false;protected;1;5;;@Override @Nullable protected Object lookup(Object key) {     return this.cache.get(key). }
false;public;2;10;;@Override @Nullable public <T> T get(Object key, Callable<T> valueLoader) {     try {         return this.cache.invoke(key, new ValueLoaderEntryProcessor<T>(), valueLoader).     } catch (EntryProcessorException ex) {         throw new ValueRetrievalException(key, valueLoader, ex.getCause()).     } }
false;public;2;4;;@Override public void put(Object key, @Nullable Object value) {     this.cache.put(key, toStoreValue(value)). }
false;public;2;6;;@Override @Nullable public ValueWrapper putIfAbsent(Object key, @Nullable Object value) {     boolean set = this.cache.putIfAbsent(key, toStoreValue(value)).     return (set ? null : get(key)). }
false;public;1;4;;@Override public void evict(Object key) {     this.cache.remove(key). }
false;public;0;4;;@Override public void clear() {     this.cache.removeAll(). }
false;public;2;21;;@SuppressWarnings("unchecked") @Override @Nullable public T process(MutableEntry<Object, Object> entry, Object... arguments) throws EntryProcessorException {     Callable<T> valueLoader = (Callable<T>) arguments[0].     if (entry.exists()) {         return (T) fromStoreValue(entry.getValue()).     } else {         T value.         try {             value = valueLoader.call().         } catch (Exception ex) {             throw new EntryProcessorException("Value loader '" + valueLoader + "' failed " + "to compute value for key '" + entry.getKey() + "'", ex).         }         entry.setValue(toStoreValue(value)).         return value.     } }
