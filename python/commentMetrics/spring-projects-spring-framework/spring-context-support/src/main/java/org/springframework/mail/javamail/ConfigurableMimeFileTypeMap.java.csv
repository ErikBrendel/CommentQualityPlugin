commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the {@code Resource} from which mappings are loaded.  * <p>Needs to follow the {@code mime.types} file format, as specified  * by the Java Activation Framework, containing lines such as:<br>  * {@code text/html  html htm HTML HTM}  */ ;/**  * Specify the {@code Resource} from which mappings are loaded.  * <p>Needs to follow the {@code mime.types} file format, as specified  * by the Java Activation Framework, containing lines such as:<br>  * {@code text/html  html htm HTML HTM}  */ public void setMappingLocation(Resource mappingLocation) {     this.mappingLocation = mappingLocation. }
true;public;1;3;/**  * Specify additional MIME type mappings as lines that follow the  * {@code mime.types} file format, as specified by the  * Java Activation Framework. For example:<br>  * {@code text/html  html htm HTML HTM}  */ ;/**  * Specify additional MIME type mappings as lines that follow the  * {@code mime.types} file format, as specified by the  * Java Activation Framework. For example:<br>  * {@code text/html  html htm HTML HTM}  */ public void setMappings(String... mappings) {     this.mappings = mappings. }
true;public;0;4;/**  * Creates the final merged mapping set.  */ ;/**  * Creates the final merged mapping set.  */ @Override public void afterPropertiesSet() {     getFileTypeMap(). }
true;protected,final;0;12;/**  * Return the delegate FileTypeMap, compiled from the mappings in the mapping file  * and the entries in the {@code mappings} property.  * @see #setMappingLocation  * @see #setMappings  * @see #createFileTypeMap  */ ;/**  * Return the delegate FileTypeMap, compiled from the mappings in the mapping file  * and the entries in the {@code mappings} property.  * @see #setMappingLocation  * @see #setMappings  * @see #createFileTypeMap  */ protected final FileTypeMap getFileTypeMap() {     if (this.fileTypeMap == null) {         try {             this.fileTypeMap = createFileTypeMap(this.mappingLocation, this.mappings).         } catch (IOException ex) {             throw new IllegalStateException("Could not load specified MIME type mapping file: " + this.mappingLocation, ex).         }     }     return this.fileTypeMap. }
true;protected;2;21;/**  * Compile a {@link FileTypeMap} from the mappings in the given mapping file  * and the given mapping entries.  * <p>The default implementation creates an Activation Framework {@link MimetypesFileTypeMap},  * passing in an InputStream from the mapping resource (if any) and registering  * the mapping lines programmatically.  * @param mappingLocation a {@code mime.types} mapping resource (can be {@code null})  * @param mappings an array of MIME type mapping lines (can be {@code null})  * @return the compiled FileTypeMap  * @throws IOException if resource access failed  * @see javax.activation.MimetypesFileTypeMap#MimetypesFileTypeMap(java.io.InputStream)  * @see javax.activation.MimetypesFileTypeMap#addMimeTypes(String)  */ ;/**  * Compile a {@link FileTypeMap} from the mappings in the given mapping file  * and the given mapping entries.  * <p>The default implementation creates an Activation Framework {@link MimetypesFileTypeMap},  * passing in an InputStream from the mapping resource (if any) and registering  * the mapping lines programmatically.  * @param mappingLocation a {@code mime.types} mapping resource (can be {@code null})  * @param mappings an array of MIME type mapping lines (can be {@code null})  * @return the compiled FileTypeMap  * @throws IOException if resource access failed  * @see javax.activation.MimetypesFileTypeMap#MimetypesFileTypeMap(java.io.InputStream)  * @see javax.activation.MimetypesFileTypeMap#addMimeTypes(String)  */ protected FileTypeMap createFileTypeMap(@Nullable Resource mappingLocation, @Nullable String[] mappings) throws IOException {     MimetypesFileTypeMap fileTypeMap = null.     if (mappingLocation != null) {         InputStream is = mappingLocation.getInputStream().         try {             fileTypeMap = new MimetypesFileTypeMap(is).         } finally {             is.close().         }     } else {         fileTypeMap = new MimetypesFileTypeMap().     }     if (mappings != null) {         for (String mapping : mappings) {             fileTypeMap.addMimeTypes(mapping).         }     }     return fileTypeMap. }
true;public;1;4;/**  * Delegates to the underlying FileTypeMap.  * @see #getFileTypeMap()  */ ;/**  * Delegates to the underlying FileTypeMap.  * @see #getFileTypeMap()  */ @Override public String getContentType(File file) {     return getFileTypeMap().getContentType(file). }
true;public;1;4;/**  * Delegates to the underlying FileTypeMap.  * @see #getFileTypeMap()  */ ;/**  * Delegates to the underlying FileTypeMap.  * @see #getFileTypeMap()  */ @Override public String getContentType(String fileName) {     return getFileTypeMap().getContentType(fileName). }
