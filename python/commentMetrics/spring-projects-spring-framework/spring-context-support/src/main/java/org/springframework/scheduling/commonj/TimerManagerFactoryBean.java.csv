commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Register a list of ScheduledTimerListener objects with the TimerManager  * that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,  * it will be registered via one of TimerManager's schedule methods.  * @see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)  * @see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)  * @see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long)  */ ;/**  * Register a list of ScheduledTimerListener objects with the TimerManager  * that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,  * it will be registered via one of TimerManager's schedule methods.  * @see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)  * @see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)  * @see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long)  */ public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {     this.scheduledTimerListeners = scheduledTimerListeners. }
false;public;0;25;;// --------------------------------------------------------------------- // Implementation of InitializingBean interface // --------------------------------------------------------------------- @Override public void afterPropertiesSet() throws NamingException {     super.afterPropertiesSet().     if (this.scheduledTimerListeners != null) {         TimerManager timerManager = obtainTimerManager().         for (ScheduledTimerListener scheduledTask : this.scheduledTimerListeners) {             Timer timer.             if (scheduledTask.isOneTimeTask()) {                 timer = timerManager.schedule(scheduledTask.getTimerListener(), scheduledTask.getDelay()).             } else {                 if (scheduledTask.isFixedRate()) {                     timer = timerManager.scheduleAtFixedRate(scheduledTask.getTimerListener(), scheduledTask.getDelay(), scheduledTask.getPeriod()).                 } else {                     timer = timerManager.schedule(scheduledTask.getTimerListener(), scheduledTask.getDelay(), scheduledTask.getPeriod()).                 }             }             this.timers.add(timer).         }     } }
false;public;0;5;;// --------------------------------------------------------------------- // Implementation of FactoryBean interface // --------------------------------------------------------------------- @Override @Nullable public TimerManager getObject() {     return getTimerManager(). }
false;public;0;5;;@Override public Class<? extends TimerManager> getObjectType() {     TimerManager timerManager = getTimerManager().     return (timerManager != null ? timerManager.getClass() : TimerManager.class). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
true;public;0;16;/**  * Cancels all statically registered Timers on shutdown,  * and stops the underlying TimerManager (if not shared).  * @see commonj.timers.Timer#cancel()  * @see commonj.timers.TimerManager#stop()  */ ;// --------------------------------------------------------------------- // Implementation of DisposableBean interface // --------------------------------------------------------------------- /**  * Cancels all statically registered Timers on shutdown,  * and stops the underlying TimerManager (if not shared).  * @see commonj.timers.Timer#cancel()  * @see commonj.timers.TimerManager#stop()  */ @Override public void destroy() {     // Cancel all registered timers.     for (Timer timer : this.timers) {         try {             timer.cancel().         } catch (Throwable ex) {             logger.debug("Could not cancel CommonJ Timer", ex).         }     }     this.timers.clear().     // Stop the TimerManager itself.     super.destroy(). }
