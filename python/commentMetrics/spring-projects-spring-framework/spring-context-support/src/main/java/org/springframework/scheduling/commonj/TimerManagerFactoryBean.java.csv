# id;timestamp;commentText;codeText;commentWords;codeWords
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1328020251;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1356735495;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1357119239;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1368482696;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1467730834;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1496837955;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1497341594;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1498780456;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1502974979;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1532091916;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners);1533213510;Register a list of ScheduledTimerListener objects with the TimerManager_that this FactoryBean creates. Depending on each ScheduledTimerListener's settings,_it will be registered via one of TimerManager's schedule methods._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long)_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setScheduledTimerListeners(ScheduledTimerListener[] scheduledTimerListeners) {_		this.scheduledTimerListeners = scheduledTimerListeners__	};register,a,list,of,scheduled,timer,listener,objects,with,the,timer,manager,that,this,factory,bean,creates,depending,on,each,scheduled,timer,listener,s,settings,it,will,be,registered,via,one,of,timer,manager,s,schedule,methods,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,scheduled,timer,listeners,scheduled,timer,listener,scheduled,timer,listeners,this,scheduled,timer,listeners,scheduled,timer,listeners
TimerManagerFactoryBean -> @Override 	public void destroy();1328020251;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1356735495;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1357119239;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1368482696;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1467730834;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1496837955;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1497341594;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1498780456;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1502974979;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.warn("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,warn,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1532091916;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.debug("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,debug,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
TimerManagerFactoryBean -> @Override 	public void destroy();1533213510;Cancels all statically registered Timers on shutdown,_and stops the underlying TimerManager (if not shared)._@see commonj.timers.Timer#cancel()_@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		for (Timer timer : this.timers) {_			try {_				timer.cancel()__			}_			catch (Throwable ex) {_				logger.debug("Could not cancel CommonJ Timer", ex)__			}_		}_		this.timers.clear()___		_		super.destroy()__	};cancels,all,statically,registered,timers,on,shutdown,and,stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,cancel,see,commonj,timers,timer,manager,stop;override,public,void,destroy,for,timer,timer,this,timers,try,timer,cancel,catch,throwable,ex,logger,debug,could,not,cancel,common,j,timer,ex,this,timers,clear,super,destroy
