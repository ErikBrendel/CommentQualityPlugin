# id;timestamp;commentText;codeText;commentWords;codeWords
MimeMessageHelper -> protected String getDefaultEncoding(MimeMessage mimeMessage);1328020251;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or <code>null</code> if none found;protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,code,if,none,found;protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> protected String getDefaultEncoding(MimeMessage mimeMessage);1356735495;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> protected String getDefaultEncoding(MimeMessage mimeMessage);1357119239;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> protected String getDefaultEncoding(MimeMessage mimeMessage);1362408075;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> protected String getDefaultEncoding(MimeMessage mimeMessage);1368482696;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1328020251;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1356735495;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1357119239;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1362408075;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1368482696;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1495868221;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1496259743;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1496837955;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1498780456;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public void setPriority(int priority) throws MessagingException;1530174524;Set the priority ("X-Priority" header) of the message._@param priority the priority value__typically between 1 (highest) and 5 (lowest)_@throws MessagingException in case of errors;public void setPriority(int priority) throws MessagingException {_		this.mimeMessage.setHeader(HEADER_PRIORITY, Integer.toString(priority))__	};set,the,priority,x,priority,header,of,the,message,param,priority,the,priority,value,typically,between,1,highest,and,5,lowest,throws,messaging,exception,in,case,of,errors;public,void,set,priority,int,priority,throws,messaging,exception,this,mime,message,set,header,integer,to,string,priority
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1328020251;Return the <code>FileTypeMap</code> used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,code,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1356735495;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1357119239;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1362408075;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1368482696;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1495868221;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1496259743;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1496837955;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1498780456;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> public FileTypeMap getFileTypeMap();1530174524;Return the {@code FileTypeMap} used by this MimeMessageHelper.;public FileTypeMap getFileTypeMap() {_		return this.fileTypeMap__	};return,the,code,file,type,map,used,by,this,mime,message,helper;public,file,type,map,get,file,type,map,return,this,file,type,map
MimeMessageHelper -> @Nullable 	protected String getDefaultEncoding(MimeMessage mimeMessage);1495868221;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;@Nullable_	protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;nullable,protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> @Nullable 	protected String getDefaultEncoding(MimeMessage mimeMessage);1496259743;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;@Nullable_	protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;nullable,protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> @Nullable 	protected String getDefaultEncoding(MimeMessage mimeMessage);1496837955;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;@Nullable_	protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;nullable,protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> @Nullable 	protected String getDefaultEncoding(MimeMessage mimeMessage);1498780456;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;@Nullable_	protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;nullable,protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> @Nullable 	protected String getDefaultEncoding(MimeMessage mimeMessage);1530174524;Determine the default encoding for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default encoding associated with the MimeMessage,_or {@code null} if none found;@Nullable_	protected String getDefaultEncoding(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			return ((SmartMimeMessage) mimeMessage).getDefaultEncoding()__		}_		return null__	};determine,the,default,encoding,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,encoding,associated,with,the,mime,message,or,code,null,if,none,found;nullable,protected,string,get,default,encoding,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,return,smart,mime,message,mime,message,get,default,encoding,return,null
MimeMessageHelper -> public boolean isValidateAddresses();1328020251;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1356735495;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1357119239;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1362408075;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1368482696;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1495868221;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1496259743;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1496837955;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1498780456;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public boolean isValidateAddresses();1530174524;Return whether this helper will validate all addresses passed to it.;public boolean isValidateAddresses() {_		return this.validateAddresses__	};return,whether,this,helper,will,validate,all,addresses,passed,to,it;public,boolean,is,validate,addresses,return,this,validate,addresses
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1328020251;Add an inline element to the MimeMessage, taking the content from a_<code>org.springframework.core.io.Resource</code>._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_<code>getInputStream()</code> multiple times._<p><b>NOTE:</b> Invoke <code>addInline</code> <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,code,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,code,multiple,times,p,b,note,b,invoke,code,add,inline,code,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1356735495;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1357119239;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1362408075;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1368482696;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1495868221;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1496259743;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1496837955;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1498780456;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public void addInline(String contentId, Resource resource) throws MessagingException;1530174524;Add an inline element to the MimeMessage, taking the content from a_{@code org.springframework.core.io.Resource}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p>Note that the InputStream returned by the Resource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param resource the resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, java.io.File)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, Resource resource) throws MessagingException {_		Assert.notNull(resource, "Resource must not be null")__		String contentType = getFileTypeMap().getContentType(resource.getFilename())__		addInline(contentId, resource, contentType)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,org,springframework,core,io,resource,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,note,that,the,input,stream,returned,by,the,resource,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,resource,the,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,java,io,file,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,resource,resource,throws,messaging,exception,assert,not,null,resource,resource,must,not,be,null,string,content,type,get,file,type,map,get,content,type,resource,get,filename,add,inline,content,id,resource,content,type
MimeMessageHelper -> public final boolean isMultipart();1328020251;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1356735495;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1357119239;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1362408075;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1368482696;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1495868221;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1496259743;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1496837955;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1498780456;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public final boolean isMultipart();1530174524;Return whether this helper is in multipart mode,_i.e. whether it holds a multipart message._@see #MimeMessageHelper(MimeMessage, boolean);public final boolean isMultipart() {_		return (this.rootMimeMultipart != null)__	};return,whether,this,helper,is,in,multipart,mode,i,e,whether,it,holds,a,multipart,message,see,mime,message,helper,mime,message,boolean;public,final,boolean,is,multipart,return,this,root,mime,multipart,null
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1328020251;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> <code>setText</code>__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,code,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1356735495;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1357119239;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1362408075;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1368482696;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1495868221;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1496259743;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1496837955;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1498780456;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> public void setText(String plainText, String htmlText) throws MessagingException;1530174524;Set the given plain text and HTML text as alternatives, offering_both options to the email client. Requires multipart mode._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param plainText the plain text for the message_@param htmlText the HTML text for the message_@throws MessagingException in case of errors;public void setText(String plainText, String htmlText) throws MessagingException {_		Assert.notNull(plainText, "Plain text must not be null")__		Assert.notNull(htmlText, "HTML text must not be null")___		MimeMultipart messageBody = new MimeMultipart(MULTIPART_SUBTYPE_ALTERNATIVE)__		getMainPart().setContent(messageBody, CONTENT_TYPE_ALTERNATIVE)___		_		MimeBodyPart plainTextPart = new MimeBodyPart()__		setPlainTextToMimePart(plainTextPart, plainText)__		messageBody.addBodyPart(plainTextPart)___		_		MimeBodyPart htmlTextPart = new MimeBodyPart()__		setHtmlTextToMimePart(htmlTextPart, htmlText)__		messageBody.addBodyPart(htmlTextPart)__	};set,the,given,plain,text,and,html,text,as,alternatives,offering,both,options,to,the,email,client,requires,multipart,mode,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,plain,text,the,plain,text,for,the,message,param,html,text,the,html,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,plain,text,string,html,text,throws,messaging,exception,assert,not,null,plain,text,plain,text,must,not,be,null,assert,not,null,html,text,html,text,must,not,be,null,mime,multipart,message,body,new,mime,multipart,get,main,part,set,content,message,body,mime,body,part,plain,text,part,new,mime,body,part,set,plain,text,to,mime,part,plain,text,part,plain,text,message,body,add,body,part,plain,text,part,mime,body,part,html,text,part,new,mime,body,part,set,html,text,to,mime,part,html,text,part,html,text,message,body,add,body,part,html,text,part
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1328020251;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes <code>InternetAddress.validate()</code>,_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,code,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1356735495;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1357119239;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1362408075;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1368482696;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1495868221;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1496259743;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1496837955;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1498780456;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> protected void validateAddress(InternetAddress address) throws AddressException;1530174524;Validate the given mail address._Called by all of MimeMessageHelper's address setters and adders._<p>Default implementation invokes {@code InternetAddress.validate()},_provided that address validation is activated for the helper instance._<p>Note that this method will just work on JavaMail >= 1.3. You can override_it for validation on older JavaMail versions or for custom validation._@param address the address to validate_@throws AddressException if validation failed_@see #isValidateAddresses()_@see javax.mail.internet.InternetAddress#validate();protected void validateAddress(InternetAddress address) throws AddressException {_		if (isValidateAddresses()) {_			address.validate()__		}_	};validate,the,given,mail,address,called,by,all,of,mime,message,helper,s,address,setters,and,adders,p,default,implementation,invokes,code,internet,address,validate,provided,that,address,validation,is,activated,for,the,helper,instance,p,note,that,this,method,will,just,work,on,java,mail,1,3,you,can,override,it,for,validation,on,older,java,mail,versions,or,for,custom,validation,param,address,the,address,to,validate,throws,address,exception,if,validation,failed,see,is,validate,addresses,see,javax,mail,internet,internet,address,validate;protected,void,validate,address,internet,address,address,throws,address,exception,if,is,validate,addresses,address,validate
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1328020251;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1356735495;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1357119239;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1362408075;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1368482696;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1495868221;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1496259743;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1496837955;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1498780456;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> public void setSubject(String subject) throws MessagingException;1530174524;Set the subject of the message, using the correct encoding._@param subject the subject text_@throws MessagingException in case of errors;public void setSubject(String subject) throws MessagingException {_		Assert.notNull(subject, "Subject must not be null")__		if (getEncoding() != null) {_			this.mimeMessage.setSubject(subject, getEncoding())__		}_		else {_			this.mimeMessage.setSubject(subject)__		}_	};set,the,subject,of,the,message,using,the,correct,encoding,param,subject,the,subject,text,throws,messaging,exception,in,case,of,errors;public,void,set,subject,string,subject,throws,messaging,exception,assert,not,null,subject,subject,must,not,be,null,if,get,encoding,null,this,mime,message,set,subject,subject,get,encoding,else,this,mime,message,set,subject,subject
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1356735495;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			@Override_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			@Override_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			@Override_			public String getContentType() {_				return contentType__			}_			@Override_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,override,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,override,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,override,public,string,get,content,type,return,content,type,override,public,string,get,name,return,name
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1357119239;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			public String getContentType() {_				return contentType__			}_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,public,string,get,content,type,return,content,type,public,string,get,name,return,name
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1362408075;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			public String getContentType() {_				return contentType__			}_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,public,string,get,content,type,return,content,type,public,string,get,name,return,name
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1368482696;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			@Override_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			@Override_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			@Override_			public String getContentType() {_				return contentType__			}_			@Override_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,override,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,override,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,override,public,string,get,content,type,return,content,type,override,public,string,get,name,return,name
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1495868221;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			@Override_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			@Override_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			@Override_			public String getContentType() {_				return contentType__			}_			@Override_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,override,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,override,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,override,public,string,get,content,type,return,content,type,override,public,string,get,name,return,name
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1496259743;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			@Override_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			@Override_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			@Override_			public String getContentType() {_				return contentType__			}_			@Override_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,override,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,override,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,override,public,string,get,content,type,return,content,type,override,public,string,get,name,return,name
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1496837955;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			@Override_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			@Override_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			@Override_			public String getContentType() {_				return contentType__			}_			@Override_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,override,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,override,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,override,public,string,get,content,type,return,content,type,override,public,string,get,name,return,name
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1498780456;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			@Override_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			@Override_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			@Override_			public String getContentType() {_				return contentType__			}_			@Override_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,override,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,override,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,override,public,string,get,content,type,return,content,type,override,public,string,get,name,return,name
MimeMessageHelper -> protected DataSource createDataSource( 		final InputStreamSource inputStreamSource, final String contentType, final String name);1530174524;Create an Activation Framework DataSource for the given InputStreamSource._@param inputStreamSource the InputStreamSource (typically a Spring Resource)_@param contentType the content type_@param name the name of the DataSource_@return the Activation Framework DataSource;protected DataSource createDataSource(_		final InputStreamSource inputStreamSource, final String contentType, final String name) {__		return new DataSource() {_			@Override_			public InputStream getInputStream() throws IOException {_				return inputStreamSource.getInputStream()__			}_			@Override_			public OutputStream getOutputStream() {_				throw new UnsupportedOperationException("Read-only javax.activation.DataSource")__			}_			@Override_			public String getContentType() {_				return contentType__			}_			@Override_			public String getName() {_				return name__			}_		}__	};create,an,activation,framework,data,source,for,the,given,input,stream,source,param,input,stream,source,the,input,stream,source,typically,a,spring,resource,param,content,type,the,content,type,param,name,the,name,of,the,data,source,return,the,activation,framework,data,source;protected,data,source,create,data,source,final,input,stream,source,input,stream,source,final,string,content,type,final,string,name,return,new,data,source,override,public,input,stream,get,input,stream,throws,ioexception,return,input,stream,source,get,input,stream,override,public,output,stream,get,output,stream,throw,new,unsupported,operation,exception,read,only,javax,activation,data,source,override,public,string,get,content,type,return,content,type,override,public,string,get,name,return,name
MimeMessageHelper -> @Nullable 	public String getEncoding();1495868221;Return the specific character encoding used for this message, if any.;@Nullable_	public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;nullable,public,string,get,encoding,return,this,encoding
MimeMessageHelper -> @Nullable 	public String getEncoding();1496259743;Return the specific character encoding used for this message, if any.;@Nullable_	public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;nullable,public,string,get,encoding,return,this,encoding
MimeMessageHelper -> @Nullable 	public String getEncoding();1496837955;Return the specific character encoding used for this message, if any.;@Nullable_	public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;nullable,public,string,get,encoding,return,this,encoding
MimeMessageHelper -> @Nullable 	public String getEncoding();1498780456;Return the specific character encoding used for this message, if any.;@Nullable_	public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;nullable,public,string,get,encoding,return,this,encoding
MimeMessageHelper -> @Nullable 	public String getEncoding();1530174524;Return the specific character encoding used for this message, if any.;@Nullable_	public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;nullable,public,string,get,encoding,return,this,encoding
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 		throws MessagingException;1356735495;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_		throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 		throws MessagingException;1357119239;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_		throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> private void checkMultipart() throws IllegalStateException;1328020251;Throw an IllegalStateException if this helper is not in multipart mode.;private void checkMultipart() throws IllegalStateException {_		if (!isMultipart()) {_			throw new IllegalStateException("Not in multipart mode - " +_			    "create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_			    "if you need to set alternative texts or add inline elements or attachments.")__		}_	};throw,an,illegal,state,exception,if,this,helper,is,not,in,multipart,mode;private,void,check,multipart,throws,illegal,state,exception,if,is,multipart,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments
MimeMessageHelper -> private void checkMultipart() throws IllegalStateException;1356735495;Throw an IllegalStateException if this helper is not in multipart mode.;private void checkMultipart() throws IllegalStateException {_		if (!isMultipart()) {_			throw new IllegalStateException("Not in multipart mode - " +_				"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_				"if you need to set alternative texts or add inline elements or attachments.")__		}_	};throw,an,illegal,state,exception,if,this,helper,is,not,in,multipart,mode;private,void,check,multipart,throws,illegal,state,exception,if,is,multipart,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments
MimeMessageHelper -> private void checkMultipart() throws IllegalStateException;1357119239;Throw an IllegalStateException if this helper is not in multipart mode.;private void checkMultipart() throws IllegalStateException {_		if (!isMultipart()) {_			throw new IllegalStateException("Not in multipart mode - " +_				"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_				"if you need to set alternative texts or add inline elements or attachments.")__		}_	};throw,an,illegal,state,exception,if,this,helper,is,not,in,multipart,mode;private,void,check,multipart,throws,illegal,state,exception,if,is,multipart,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments
MimeMessageHelper -> private void checkMultipart() throws IllegalStateException;1362408075;Throw an IllegalStateException if this helper is not in multipart mode.;private void checkMultipart() throws IllegalStateException {_		if (!isMultipart()) {_			throw new IllegalStateException("Not in multipart mode - " +_				"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_				"if you need to set alternative texts or add inline elements or attachments.")__		}_	};throw,an,illegal,state,exception,if,this,helper,is,not,in,multipart,mode;private,void,check,multipart,throws,illegal,state,exception,if,is,multipart,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments
MimeMessageHelper -> private void checkMultipart() throws IllegalStateException;1368482696;Throw an IllegalStateException if this helper is not in multipart mode.;private void checkMultipart() throws IllegalStateException {_		if (!isMultipart()) {_			throw new IllegalStateException("Not in multipart mode - " +_				"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_				"if you need to set alternative texts or add inline elements or attachments.")__		}_	};throw,an,illegal,state,exception,if,this,helper,is,not,in,multipart,mode;private,void,check,multipart,throws,illegal,state,exception,if,is,multipart,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments
MimeMessageHelper -> private void checkMultipart() throws IllegalStateException;1495868221;Throw an IllegalStateException if this helper is not in multipart mode.;private void checkMultipart() throws IllegalStateException {_		if (!isMultipart()) {_			throw new IllegalStateException("Not in multipart mode - " +_				"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_				"if you need to set alternative texts or add inline elements or attachments.")__		}_	};throw,an,illegal,state,exception,if,this,helper,is,not,in,multipart,mode;private,void,check,multipart,throws,illegal,state,exception,if,is,multipart,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments
MimeMessageHelper -> private void checkMultipart() throws IllegalStateException;1496259743;Throw an IllegalStateException if this helper is not in multipart mode.;private void checkMultipart() throws IllegalStateException {_		if (!isMultipart()) {_			throw new IllegalStateException("Not in multipart mode - " +_				"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_				"if you need to set alternative texts or add inline elements or attachments.")__		}_	};throw,an,illegal,state,exception,if,this,helper,is,not,in,multipart,mode;private,void,check,multipart,throws,illegal,state,exception,if,is,multipart,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments
MimeMessageHelper -> private void checkMultipart() throws IllegalStateException;1496837955;Throw an IllegalStateException if this helper is not in multipart mode.;private void checkMultipart() throws IllegalStateException {_		if (!isMultipart()) {_			throw new IllegalStateException("Not in multipart mode - " +_				"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_				"if you need to set alternative texts or add inline elements or attachments.")__		}_	};throw,an,illegal,state,exception,if,this,helper,is,not,in,multipart,mode;private,void,check,multipart,throws,illegal,state,exception,if,is,multipart,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments
MimeMessageHelper -> public void setText(String text) throws MessagingException;1328020251;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> <code>setText</code>__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,code,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1356735495;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1357119239;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1362408075;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1368482696;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1495868221;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1496259743;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1496837955;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1498780456;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public void setText(String text) throws MessagingException;1530174524;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._Always applies the default content type "text/plain"._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@throws MessagingException in case of errors;public void setText(String text) throws MessagingException {_		setText(text, false)__	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,always,applies,the,default,content,type,text,plain,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,throws,messaging,exception,set,text,text,false
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, String encoding);1328020251;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, String encoding);1356735495;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, String encoding);1357119239;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, String encoding);1362408075;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, String encoding);1368482696;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, String encoding);1495868221;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, String encoding);1496259743;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding) 			throws MessagingException;1356735495;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding) 			throws MessagingException;1357119239;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding) 			throws MessagingException;1362408075;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding) 			throws MessagingException;1368482696;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding) 			throws MessagingException;1495868221;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding) 			throws MessagingException;1496259743;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1328020251;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1356735495;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1357119239;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1362408075;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1368482696;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1495868221;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1496259743;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1496837955;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1498780456;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage);1530174524;Determine the default Java Activation FileTypeMap for the given MimeMessage._@param mimeMessage the passed-in MimeMessage_@return the default FileTypeMap associated with the MimeMessage,_or a default ConfigurableMimeFileTypeMap if none found for the message_@see ConfigurableMimeFileTypeMap;protected FileTypeMap getDefaultFileTypeMap(MimeMessage mimeMessage) {_		if (mimeMessage instanceof SmartMimeMessage) {_			FileTypeMap fileTypeMap = ((SmartMimeMessage) mimeMessage).getDefaultFileTypeMap()__			if (fileTypeMap != null) {_				return fileTypeMap__			}_		}_		ConfigurableMimeFileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap()__		fileTypeMap.afterPropertiesSet()__		return fileTypeMap__	};determine,the,default,java,activation,file,type,map,for,the,given,mime,message,param,mime,message,the,passed,in,mime,message,return,the,default,file,type,map,associated,with,the,mime,message,or,a,default,configurable,mime,file,type,map,if,none,found,for,the,message,see,configurable,mime,file,type,map;protected,file,type,map,get,default,file,type,map,mime,message,mime,message,if,mime,message,instanceof,smart,mime,message,file,type,map,file,type,map,smart,mime,message,mime,message,get,default,file,type,map,if,file,type,map,null,return,file,type,map,configurable,mime,file,type,map,file,type,map,new,configurable,mime,file,type,map,file,type,map,after,properties,set,return,file,type,map
MimeMessageHelper -> public final MimeMessage getMimeMessage();1328020251;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1356735495;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1357119239;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1362408075;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1368482696;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1495868221;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1496259743;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1496837955;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1498780456;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public final MimeMessage getMimeMessage();1530174524;Return the underlying MimeMessage object.;public final MimeMessage getMimeMessage() {_		return this.mimeMessage__	};return,the,underlying,mime,message,object;public,final,mime,message,get,mime,message,return,this,mime,message
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1328020251;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> <code>setText</code>__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,code,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1356735495;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1357119239;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1362408075;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1368482696;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1495868221;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1496259743;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1496837955;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1498780456;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> public void setText(String text, boolean html) throws MessagingException;1530174524;Set the given text directly as content in non-multipart mode_or as default body part in multipart mode._The "html" flag determines the content type to apply._<p><b>NOTE:</b> Invoke {@link #addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param text the text for the message_@param html whether to apply content type "text/html" for an_HTML mail, using default content type ("text/plain") else_@throws MessagingException in case of errors;public void setText(String text, boolean html) throws MessagingException {_		Assert.notNull(text, "Text must not be null")__		MimePart partToUse__		if (isMultipart()) {_			partToUse = getMainPart()__		}_		else {_			partToUse = this.mimeMessage__		}_		if (html) {_			setHtmlTextToMimePart(partToUse, text)__		}_		else {_			setPlainTextToMimePart(partToUse, text)__		}_	};set,the,given,text,directly,as,content,in,non,multipart,mode,or,as,default,body,part,in,multipart,mode,the,html,flag,determines,the,content,type,to,apply,p,b,note,b,invoke,link,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,text,the,text,for,the,message,param,html,whether,to,apply,content,type,text,html,for,an,html,mail,using,default,content,type,text,plain,else,throws,messaging,exception,in,case,of,errors;public,void,set,text,string,text,boolean,html,throws,messaging,exception,assert,not,null,text,text,must,not,be,null,mime,part,part,to,use,if,is,multipart,part,to,use,get,main,part,else,part,to,use,this,mime,message,if,html,set,html,text,to,mime,part,part,to,use,text,else,set,plain,text,to,mime,part,part,to,use,text
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1328020251;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1356735495;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1357119239;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1362408075;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1368482696;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1495868221;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1496259743;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1496837955;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1498780456;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1530174524;Determine the MimeMultipart objects to use, which will be used_to store attachments on the one hand and text(s) and inline elements_on the other hand._<p>Texts and inline elements can either be stored in the root element_itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED) or in a nested element_rather than the root element directly (MULTIPART_MODE_MIXED_RELATED)._<p>By default, the root MimeMultipart element will be of type "mixed"_(MULTIPART_MODE_MIXED) or "related" (MULTIPART_MODE_RELATED)._The main multipart element will either be added as nested element of_type "related" (MULTIPART_MODE_MIXED_RELATED) or be identical to the root_element itself (MULTIPART_MODE_MIXED, MULTIPART_MODE_RELATED)._@param mimeMessage the MimeMessage object to add the root MimeMultipart_object to_@param multipartMode the multipart mode, as passed into the constructor_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #setMimeMultiparts_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;protected void createMimeMultiparts(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		switch (multipartMode) {_			case MULTIPART_MODE_NO:_				setMimeMultiparts(null, null)__				break__			case MULTIPART_MODE_MIXED:_				MimeMultipart mixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(mixedMultipart)__				setMimeMultiparts(mixedMultipart, mixedMultipart)__				break__			case MULTIPART_MODE_RELATED:_				MimeMultipart relatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				mimeMessage.setContent(relatedMultipart)__				setMimeMultiparts(relatedMultipart, relatedMultipart)__				break__			case MULTIPART_MODE_MIXED_RELATED:_				MimeMultipart rootMixedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_MIXED)__				mimeMessage.setContent(rootMixedMultipart)__				MimeMultipart nestedRelatedMultipart = new MimeMultipart(MULTIPART_SUBTYPE_RELATED)__				MimeBodyPart relatedBodyPart = new MimeBodyPart()__				relatedBodyPart.setContent(nestedRelatedMultipart)__				rootMixedMultipart.addBodyPart(relatedBodyPart)__				setMimeMultiparts(rootMixedMultipart, nestedRelatedMultipart)__				break__			default:_				throw new IllegalArgumentException("Only multipart modes MIXED_RELATED, RELATED and NO supported")__		}_	};determine,the,mime,multipart,objects,to,use,which,will,be,used,to,store,attachments,on,the,one,hand,and,text,s,and,inline,elements,on,the,other,hand,p,texts,and,inline,elements,can,either,be,stored,in,the,root,element,itself,or,in,a,nested,element,rather,than,the,root,element,directly,p,by,default,the,root,mime,multipart,element,will,be,of,type,mixed,or,related,the,main,multipart,element,will,either,be,added,as,nested,element,of,type,related,or,be,identical,to,the,root,element,itself,param,mime,message,the,mime,message,object,to,add,the,root,mime,multipart,object,to,param,multipart,mode,the,multipart,mode,as,passed,into,the,constructor,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,set,mime,multiparts,see,see,see,see;protected,void,create,mime,multiparts,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,switch,multipart,mode,case,set,mime,multiparts,null,null,break,case,mime,multipart,mixed,multipart,new,mime,multipart,mime,message,set,content,mixed,multipart,set,mime,multiparts,mixed,multipart,mixed,multipart,break,case,mime,multipart,related,multipart,new,mime,multipart,mime,message,set,content,related,multipart,set,mime,multiparts,related,multipart,related,multipart,break,case,mime,multipart,root,mixed,multipart,new,mime,multipart,mime,message,set,content,root,mixed,multipart,mime,multipart,nested,related,multipart,new,mime,multipart,mime,body,part,related,body,part,new,mime,body,part,related,body,part,set,content,nested,related,multipart,root,mixed,multipart,add,body,part,related,body,part,set,mime,multiparts,root,mixed,multipart,nested,related,multipart,break,default,throw,new,illegal,argument,exception,only,multipart,modes,related,and,no,supported
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding) 			throws MessagingException;1356735495;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding) 			throws MessagingException;1357119239;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding) 			throws MessagingException;1362408075;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding) 			throws MessagingException;1368482696;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding) 			throws MessagingException;1495868221;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding) 			throws MessagingException;1496259743;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, @Nullable String encoding) 			throws MessagingException;1496837955;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, @Nullable String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,nullable,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, @Nullable String encoding) 			throws MessagingException;1498780456;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, @Nullable String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,nullable,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, @Nullable String encoding) 			throws MessagingException;1530174524;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._@param mimeMessage the mime message to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int, String);public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart, @Nullable String encoding)_			throws MessagingException {__		this(mimeMessage, (multipart ? MULTIPART_MODE_MIXED_RELATED : MULTIPART_MODE_NO), encoding)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,param,mime,message,the,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,string;public,mime,message,helper,mime,message,mime,message,boolean,multipart,nullable,string,encoding,throws,messaging,exception,this,mime,message,multipart,encoding
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1328020251;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1356735495;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1357119239;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1362408075;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1368482696;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1495868221;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1496259743;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1496837955;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1498780456;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException;1530174524;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>Consider using the MimeMessageHelper constructor that_takes a multipartMode argument to choose a specific multipart_mode other than MULTIPART_MODE_MIXED_RELATED._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage the mime message to work on_@param multipart whether to create a multipart message that_supports alternative texts, inline elements and attachments_(corresponds to MULTIPART_MODE_MIXED_RELATED)_@throws MessagingException if multipart creation failed_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, int)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, boolean multipart) throws MessagingException {_		this(mimeMessage, multipart, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,consider,using,the,mime,message,helper,constructor,that,takes,a,multipart,mode,argument,to,choose,a,specific,multipart,mode,other,than,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,the,mime,message,to,work,on,param,multipart,whether,to,create,a,multipart,message,that,supports,alternative,texts,inline,elements,and,attachments,corresponds,to,throws,messaging,exception,if,multipart,creation,failed,see,mime,message,helper,javax,mail,internet,mime,message,int,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,boolean,multipart,throws,messaging,exception,this,mime,message,multipart,null
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1362408075;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1368482696;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1495868221;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1496259743;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1496837955;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1498780456;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1530174524;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1328020251;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1356735495;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1357119239;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1362408075;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1368482696;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1495868221;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1496259743;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1496837955;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1498780456;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		if (this.rootMimeMultipart == null) {_			throw new IllegalStateException("Not in multipart mode - " +_					"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_					"if you need to set alternative texts or add inline elements or attachments.")__		}_		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,if,this,root,mime,multipart,null,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments,return,this,root,mime,multipart
MimeMessageHelper -> public final MimeMultipart getRootMimeMultipart() throws IllegalStateException;1530174524;Return the root MIME "multipart/mixed" object, if any._Can be used to manually add attachments._<p>This will be the direct content of the MimeMessage,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getMimeMessage_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getRootMimeMultipart() throws IllegalStateException {_		if (this.rootMimeMultipart == null) {_			throw new IllegalStateException("Not in multipart mode - " +_					"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_					"if you need to set alternative texts or add inline elements or attachments.")__		}_		return this.rootMimeMultipart__	};return,the,root,mime,multipart,mixed,object,if,any,can,be,used,to,manually,add,attachments,p,this,will,be,the,direct,content,of,the,mime,message,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,mime,message,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,root,mime,multipart,throws,illegal,state,exception,if,this,root,mime,multipart,null,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments,return,this,root,mime,multipart
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1328020251;Set the sent-date of the message._@param sentDate the date to set (never <code>null</code>)_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,code,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1356735495;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1357119239;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1362408075;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1368482696;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1495868221;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1496259743;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1496837955;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1498780456;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void setSentDate(Date sentDate) throws MessagingException;1530174524;Set the sent-date of the message._@param sentDate the date to set (never {@code null})_@throws MessagingException in case of errors;public void setSentDate(Date sentDate) throws MessagingException {_		Assert.notNull(sentDate, "Sent date must not be null")__		this.mimeMessage.setSentDate(sentDate)__	};set,the,sent,date,of,the,message,param,sent,date,the,date,to,set,never,code,null,throws,messaging,exception,in,case,of,errors;public,void,set,sent,date,date,sent,date,throws,messaging,exception,assert,not,null,sent,date,sent,date,must,not,be,null,this,mime,message,set,sent,date,sent,date
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 			throws MessagingException;1362408075;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_			throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 			throws MessagingException;1368482696;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_			throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 			throws MessagingException;1495868221;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_			throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 			throws MessagingException;1496259743;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_			throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 			throws MessagingException;1496837955;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_			throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 			throws MessagingException;1498780456;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_			throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 			throws MessagingException;1530174524;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_			throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1328020251;Add an attachment to the MimeMessage, taking the content from a_<code>javax.activation.DataSource</code>._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_<code>getInputStream()</code> multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the <code>javax.activation.DataSource</code> to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__		mimeBodyPart.setFileName(attachmentFilename)__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getRootMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,code,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,code,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,code,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1356735495;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__		mimeBodyPart.setFileName(attachmentFilename)__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getRootMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1357119239;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__		mimeBodyPart.setFileName(attachmentFilename)__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getRootMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1362408075;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		try {_			MimeBodyPart mimeBodyPart = new MimeBodyPart()__			mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__			mimeBodyPart.setFileName(MimeUtility.encodeText(attachmentFilename))__			mimeBodyPart.setDataHandler(new DataHandler(dataSource))__			getRootMimeMultipart().addBodyPart(mimeBodyPart)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessagingException("Failed to encode attachment filename", ex)__		}_	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,try,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,mime,utility,encode,text,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part,catch,unsupported,encoding,exception,ex,throw,new,messaging,exception,failed,to,encode,attachment,filename,ex
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1368482696;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		try {_			MimeBodyPart mimeBodyPart = new MimeBodyPart()__			mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__			mimeBodyPart.setFileName(MimeUtility.encodeText(attachmentFilename))__			mimeBodyPart.setDataHandler(new DataHandler(dataSource))__			getRootMimeMultipart().addBodyPart(mimeBodyPart)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessagingException("Failed to encode attachment filename", ex)__		}_	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,try,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,mime,utility,encode,text,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part,catch,unsupported,encoding,exception,ex,throw,new,messaging,exception,failed,to,encode,attachment,filename,ex
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1495868221;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		try {_			MimeBodyPart mimeBodyPart = new MimeBodyPart()__			mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__			mimeBodyPart.setFileName(MimeUtility.encodeText(attachmentFilename))__			mimeBodyPart.setDataHandler(new DataHandler(dataSource))__			getRootMimeMultipart().addBodyPart(mimeBodyPart)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessagingException("Failed to encode attachment filename", ex)__		}_	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,try,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,mime,utility,encode,text,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part,catch,unsupported,encoding,exception,ex,throw,new,messaging,exception,failed,to,encode,attachment,filename,ex
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1496259743;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		try {_			MimeBodyPart mimeBodyPart = new MimeBodyPart()__			mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__			mimeBodyPart.setFileName(MimeUtility.encodeText(attachmentFilename))__			mimeBodyPart.setDataHandler(new DataHandler(dataSource))__			getRootMimeMultipart().addBodyPart(mimeBodyPart)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessagingException("Failed to encode attachment filename", ex)__		}_	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,try,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,mime,utility,encode,text,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part,catch,unsupported,encoding,exception,ex,throw,new,messaging,exception,failed,to,encode,attachment,filename,ex
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1496837955;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		try {_			MimeBodyPart mimeBodyPart = new MimeBodyPart()__			mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__			mimeBodyPart.setFileName(MimeUtility.encodeText(attachmentFilename))__			mimeBodyPart.setDataHandler(new DataHandler(dataSource))__			getRootMimeMultipart().addBodyPart(mimeBodyPart)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessagingException("Failed to encode attachment filename", ex)__		}_	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,try,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,mime,utility,encode,text,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part,catch,unsupported,encoding,exception,ex,throw,new,messaging,exception,failed,to,encode,attachment,filename,ex
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1498780456;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		try {_			MimeBodyPart mimeBodyPart = new MimeBodyPart()__			mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__			mimeBodyPart.setFileName(MimeUtility.encodeText(attachmentFilename))__			mimeBodyPart.setDataHandler(new DataHandler(dataSource))__			getRootMimeMultipart().addBodyPart(mimeBodyPart)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessagingException("Failed to encode attachment filename", ex)__		}_	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,try,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,mime,utility,encode,text,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part,catch,unsupported,encoding,exception,ex,throw,new,messaging,exception,failed,to,encode,attachment,filename,ex
MimeMessageHelper -> public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException;1530174524;Add an attachment to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail (the content type will be determined by this)_@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, java.io.File);public void addAttachment(String attachmentFilename, DataSource dataSource) throws MessagingException {_		Assert.notNull(attachmentFilename, "Attachment filename must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		try {_			MimeBodyPart mimeBodyPart = new MimeBodyPart()__			mimeBodyPart.setDisposition(MimeBodyPart.ATTACHMENT)__			mimeBodyPart.setFileName(MimeUtility.encodeText(attachmentFilename))__			mimeBodyPart.setDataHandler(new DataHandler(dataSource))__			getRootMimeMultipart().addBodyPart(mimeBodyPart)__		}_		catch (UnsupportedEncodingException ex) {_			throw new MessagingException("Failed to encode attachment filename", ex)__		}_	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,the,content,type,will,be,determined,by,this,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,java,io,file;public,void,add,attachment,string,attachment,filename,data,source,data,source,throws,messaging,exception,assert,not,null,attachment,filename,attachment,filename,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,try,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,attachment,mime,body,part,set,file,name,mime,utility,encode,text,attachment,filename,mime,body,part,set,data,handler,new,data,handler,data,source,get,root,mime,multipart,add,body,part,mime,body,part,catch,unsupported,encoding,exception,ex,throw,new,messaging,exception,failed,to,encode,attachment,filename,ex
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1328020251;Add an inline element to the MimeMessage, taking the content from a_<code>java.io.File</code>._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke <code>addInline</code> <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,code,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,code,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1356735495;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1357119239;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1362408075;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1368482696;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1495868221;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1496259743;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1496837955;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1498780456;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, File file) throws MessagingException;1530174524;Add an inline element to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #setText_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,set,text,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,inline,content,id,data,source
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, @Nullable String encoding);1496837955;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, @Nullable String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,nullable,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, @Nullable String encoding);1498780456;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage MimeMessage to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, @Nullable String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,nullable,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, @Nullable String encoding);1530174524;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._@param mimeMessage the mime message to work on_@param encoding the character encoding to use for the message_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean);public MimeMessageHelper(MimeMessage mimeMessage, @Nullable String encoding) {_		this.mimeMessage = mimeMessage__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,param,mime,message,the,mime,message,to,work,on,param,encoding,the,character,encoding,to,use,for,the,message,see,mime,message,helper,javax,mail,internet,mime,message,boolean;public,mime,message,helper,mime,message,mime,message,nullable,string,encoding,this,mime,message,mime,message,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main);1328020251;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or <code>null</code> to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,code,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,mime,multipart,root,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main);1356735495;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or {@code null} to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,mime,multipart,root,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main);1357119239;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or {@code null} to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,mime,multipart,root,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main);1362408075;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or {@code null} to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,mime,multipart,root,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main);1368482696;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or {@code null} to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(MimeMultipart root, MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,mime,multipart,root,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 		throws MessagingException;1356735495;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_		throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource) 		throws MessagingException;1357119239;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>The content type will be determined by the given filename for_the attachment. Thus, any content source will be fine, including_temporary files with arbitrary filenames._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(String attachmentFilename, InputStreamSource inputStreamSource)_		throws MessagingException {__		String contentType = getFileTypeMap().getContentType(attachmentFilename)__		addAttachment(attachmentFilename, inputStreamSource, contentType)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,the,content,type,will,be,determined,by,the,given,filename,for,the,attachment,thus,any,content,source,will,be,fine,including,temporary,files,with,arbitrary,filenames,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,throws,messaging,exception,string,content,type,get,file,type,map,get,content,type,attachment,filename,add,attachment,attachment,filename,input,stream,source,content,type
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1328020251;Add an attachment to the MimeMessage, taking the content from a_<code>java.io.File</code>._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,code,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1356735495;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1357119239;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1362408075;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1368482696;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1495868221;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1496259743;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1496837955;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1498780456;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment(String attachmentFilename, File file) throws MessagingException;1530174524;Add an attachment to the MimeMessage, taking the content from a_{@code java.io.File}._<p>The content type will be determined by the name of the given_content file. Do not use this for temporary files with arbitrary_filenames (possibly ending in ".tmp" or the like)!_@param attachmentFilename the name of the attachment as it will_appear in the mail_@param file the File resource to take the content from_@throws MessagingException in case of errors_@see #addAttachment(String, org.springframework.core.io.InputStreamSource)_@see #addAttachment(String, javax.activation.DataSource);public void addAttachment(String attachmentFilename, File file) throws MessagingException {_		Assert.notNull(file, "File must not be null")__		FileDataSource dataSource = new FileDataSource(file)__		dataSource.setFileTypeMap(getFileTypeMap())__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,a,code,java,io,file,p,the,content,type,will,be,determined,by,the,name,of,the,given,content,file,do,not,use,this,for,temporary,files,with,arbitrary,filenames,possibly,ending,in,tmp,or,the,like,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,file,the,file,resource,to,take,the,content,from,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,org,springframework,core,io,input,stream,source,see,add,attachment,string,javax,activation,data,source;public,void,add,attachment,string,attachment,filename,file,file,throws,messaging,exception,assert,not,null,file,file,must,not,be,null,file,data,source,data,source,new,file,data,source,file,data,source,set,file,type,map,get,file,type,map,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, @Nullable String encoding) 			throws MessagingException;1496837955;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, @Nullable String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,nullable,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, @Nullable String encoding) 			throws MessagingException;1498780456;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, @Nullable String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,nullable,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, @Nullable String encoding) 			throws MessagingException;1530174524;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._@param mimeMessage the mime message to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@param encoding the character encoding to use for the message_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode, @Nullable String encoding)_			throws MessagingException {__		this.mimeMessage = mimeMessage__		createMimeMultiparts(mimeMessage, multipartMode)__		this.encoding = (encoding != null ? encoding : getDefaultEncoding(mimeMessage))__		this.fileTypeMap = getDefaultFileTypeMap(mimeMessage)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,param,mime,message,the,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,param,encoding,the,character,encoding,to,use,for,the,message,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,nullable,string,encoding,throws,messaging,exception,this,mime,message,mime,message,create,mime,multiparts,mime,message,multipart,mode,this,encoding,encoding,null,encoding,get,default,encoding,mime,message,this,file,type,map,get,default,file,type,map,mime,message
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1328020251;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default <code>validateAddress method</code> for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,code,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1356735495;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1357119239;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1362408075;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1368482696;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1495868221;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1496259743;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1496837955;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1498780456;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void setValidateAddresses(boolean validateAddresses);1530174524;Set whether to validate all addresses which get passed to this helper._Default is "false"._<p>Note that this is by default just available for JavaMail >= 1.3._You can override the default {@code validateAddress method} for_validation on older JavaMail versions (or for custom validation)._@see #validateAddress;public void setValidateAddresses(boolean validateAddresses) {_		this.validateAddresses = validateAddresses__	};set,whether,to,validate,all,addresses,which,get,passed,to,this,helper,default,is,false,p,note,that,this,is,by,default,just,available,for,java,mail,1,3,you,can,override,the,default,code,validate,address,method,for,validation,on,older,java,mail,versions,or,for,custom,validation,see,validate,address;public,void,set,validate,addresses,boolean,validate,addresses,this,validate,addresses,validate,addresses
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1362408075;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1368482696;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1495868221;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1496259743;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1496837955;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1498780456;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType) 			throws MessagingException;1530174524;Add an inline element to the MimeMessage, taking the content from an_{@code org.springframework.core.InputStreamResource}, and_specifying the content type explicitly._<p>You can determine the content type for any given filename via a Java_Activation Framework's FileTypeMap, for example the one held by this helper._<p>Note that the InputStream returned by the InputStreamSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@code setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param inputStreamSource the resource to take the content from_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #setText_@see #getFileTypeMap_@see #addInline(String, org.springframework.core.io.Resource)_@see #addInline(String, javax.activation.DataSource);public void addInline(String contentId, InputStreamSource inputStreamSource, String contentType)_			throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, "inline")__		addInline(contentId, dataSource)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,input,stream,resource,and,specifying,the,content,type,explicitly,p,you,can,determine,the,content,type,for,any,given,filename,via,a,java,activation,framework,s,file,type,map,for,example,the,one,held,by,this,helper,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,code,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,input,stream,source,the,resource,to,take,the,content,from,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,set,text,see,get,file,type,map,see,add,inline,string,org,springframework,core,io,resource,see,add,inline,string,javax,activation,data,source;public,void,add,inline,string,content,id,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,inline,add,inline,content,id,data,source
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1328020251;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1356735495;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1357119239;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1362408075;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1368482696;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1495868221;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1496259743;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1496837955;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		checkMultipart()__		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,check,multipart,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1498780456;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		if (this.mimeMultipart == null) {_			throw new IllegalStateException("Not in multipart mode - " +_					"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_					"if you need to set alternative texts or add inline elements or attachments.")__		}_		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,if,this,mime,multipart,null,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments,return,this,mime,multipart
MimeMessageHelper -> public final MimeMultipart getMimeMultipart() throws IllegalStateException;1530174524;Return the underlying MIME "multipart/related" object, if any._Can be used to manually add body parts, inline elements, etc._<p>This will be nested within the root MimeMultipart,_in case of a multipart mail._@throws IllegalStateException if this helper is not in multipart mode_@see #isMultipart_@see #getRootMimeMultipart_@see javax.mail.internet.MimeMultipart#addBodyPart;public final MimeMultipart getMimeMultipart() throws IllegalStateException {_		if (this.mimeMultipart == null) {_			throw new IllegalStateException("Not in multipart mode - " +_					"create an appropriate MimeMessageHelper via a constructor that takes a 'multipart' flag " +_					"if you need to set alternative texts or add inline elements or attachments.")__		}_		return this.mimeMultipart__	};return,the,underlying,mime,multipart,related,object,if,any,can,be,used,to,manually,add,body,parts,inline,elements,etc,p,this,will,be,nested,within,the,root,mime,multipart,in,case,of,a,multipart,mail,throws,illegal,state,exception,if,this,helper,is,not,in,multipart,mode,see,is,multipart,see,get,root,mime,multipart,see,javax,mail,internet,mime,multipart,add,body,part;public,final,mime,multipart,get,mime,multipart,throws,illegal,state,exception,if,this,mime,multipart,null,throw,new,illegal,state,exception,not,in,multipart,mode,create,an,appropriate,mime,message,helper,via,a,constructor,that,takes,a,multipart,flag,if,you,need,to,set,alternative,texts,or,add,inline,elements,or,attachments,return,this,mime,multipart
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1328020251;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1356735495;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1357119239;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1362408075;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1368482696;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1495868221;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1496259743;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1496837955;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1498780456;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> protected void validateAddresses(InternetAddress[] addresses) throws AddressException;1530174524;Validate all given mail addresses._Default implementation simply delegates to validateAddress for each address._@param addresses the addresses to validate_@throws AddressException if validation failed_@see #validateAddress(InternetAddress);protected void validateAddresses(InternetAddress[] addresses) throws AddressException {_		for (InternetAddress address : addresses) {_			validateAddress(address)__		}_	};validate,all,given,mail,addresses,default,implementation,simply,delegates,to,validate,address,for,each,address,param,addresses,the,addresses,to,validate,throws,address,exception,if,validation,failed,see,validate,address,internet,address;protected,void,validate,addresses,internet,address,addresses,throws,address,exception,for,internet,address,address,addresses,validate,address,address
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1328020251;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1356735495;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1357119239;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1362408075;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1368482696;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1495868221;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1496259743;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1496837955;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1498780456;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException;1530174524;Create a new MimeMessageHelper for the given MimeMessage,_in multipart mode (supporting alternative texts, inline_elements and attachments) if requested._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage the mime message to work on_@param multipartMode which kind of multipart message to create_(MIXED, RELATED, MIXED_RELATED, or NO)_@throws MessagingException if multipart creation failed_@see #MULTIPART_MODE_NO_@see #MULTIPART_MODE_MIXED_@see #MULTIPART_MODE_RELATED_@see #MULTIPART_MODE_MIXED_RELATED_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage, int multipartMode) throws MessagingException {_		this(mimeMessage, multipartMode, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,in,multipart,mode,supporting,alternative,texts,inline,elements,and,attachments,if,requested,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,the,mime,message,to,work,on,param,multipart,mode,which,kind,of,multipart,message,to,create,mixed,related,or,no,throws,messaging,exception,if,multipart,creation,failed,see,see,see,see,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,int,multipart,mode,throws,messaging,exception,this,mime,message,multipart,mode,null
MimeMessageHelper -> public String getEncoding();1328020251;Return the specific character encoding used for this message, if any.;public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;public,string,get,encoding,return,this,encoding
MimeMessageHelper -> public String getEncoding();1356735495;Return the specific character encoding used for this message, if any.;public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;public,string,get,encoding,return,this,encoding
MimeMessageHelper -> public String getEncoding();1357119239;Return the specific character encoding used for this message, if any.;public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;public,string,get,encoding,return,this,encoding
MimeMessageHelper -> public String getEncoding();1362408075;Return the specific character encoding used for this message, if any.;public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;public,string,get,encoding,return,this,encoding
MimeMessageHelper -> public String getEncoding();1368482696;Return the specific character encoding used for this message, if any.;public String getEncoding() {_		return this.encoding__	};return,the,specific,character,encoding,used,for,this,message,if,any;public,string,get,encoding,return,this,encoding
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 		throws MessagingException;1356735495;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_		throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void addAttachment( 			String attachmentFilename, InputStreamSource inputStreamSource, String contentType) 		throws MessagingException;1357119239;Add an attachment to the MimeMessage, taking the content from an_{@code org.springframework.core.io.InputStreamResource}._<p>Note that the InputStream returned by the InputStreamSource_implementation needs to be a <i>fresh one on each call</i>, as_JavaMail will invoke {@code getInputStream()} multiple times._@param attachmentFilename the name of the attachment as it will_appear in the mail_@param inputStreamSource the resource to take the content from_(all of Spring's Resource implementations can be passed in here)_@param contentType the content type to use for the element_@throws MessagingException in case of errors_@see #addAttachment(String, java.io.File)_@see #addAttachment(String, javax.activation.DataSource)_@see org.springframework.core.io.Resource;public void addAttachment(_			String attachmentFilename, InputStreamSource inputStreamSource, String contentType)_		throws MessagingException {__		Assert.notNull(inputStreamSource, "InputStreamSource must not be null")__		if (inputStreamSource instanceof Resource && ((Resource) inputStreamSource).isOpen()) {_			throw new IllegalArgumentException(_					"Passed-in Resource contains an open stream: invalid argument. " +_					"JavaMail requires an InputStreamSource that creates a fresh stream for every call.")__		}_		DataSource dataSource = createDataSource(inputStreamSource, contentType, attachmentFilename)__		addAttachment(attachmentFilename, dataSource)__	};add,an,attachment,to,the,mime,message,taking,the,content,from,an,code,org,springframework,core,io,input,stream,resource,p,note,that,the,input,stream,returned,by,the,input,stream,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,param,attachment,filename,the,name,of,the,attachment,as,it,will,appear,in,the,mail,param,input,stream,source,the,resource,to,take,the,content,from,all,of,spring,s,resource,implementations,can,be,passed,in,here,param,content,type,the,content,type,to,use,for,the,element,throws,messaging,exception,in,case,of,errors,see,add,attachment,string,java,io,file,see,add,attachment,string,javax,activation,data,source,see,org,springframework,core,io,resource;public,void,add,attachment,string,attachment,filename,input,stream,source,input,stream,source,string,content,type,throws,messaging,exception,assert,not,null,input,stream,source,input,stream,source,must,not,be,null,if,input,stream,source,instanceof,resource,resource,input,stream,source,is,open,throw,new,illegal,argument,exception,passed,in,resource,contains,an,open,stream,invalid,argument,java,mail,requires,an,input,stream,source,that,creates,a,fresh,stream,for,every,call,data,source,data,source,create,data,source,input,stream,source,content,type,attachment,filename,add,attachment,attachment,filename,data,source
MimeMessageHelper -> public void setFileTypeMap(@Nullable FileTypeMap fileTypeMap);1496837955;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(@Nullable FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,nullable,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> public void setFileTypeMap(@Nullable FileTypeMap fileTypeMap);1498780456;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(@Nullable FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,nullable,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> public void setFileTypeMap(@Nullable FileTypeMap fileTypeMap);1530174524;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(@Nullable FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,nullable,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> protected final void setMimeMultiparts(@Nullable MimeMultipart root, @Nullable MimeMultipart main);1496259743;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or {@code null} to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(@Nullable MimeMultipart root, @Nullable MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,nullable,mime,multipart,root,nullable,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> protected final void setMimeMultiparts(@Nullable MimeMultipart root, @Nullable MimeMultipart main);1496837955;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or {@code null} to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(@Nullable MimeMultipart root, @Nullable MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,nullable,mime,multipart,root,nullable,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> protected final void setMimeMultiparts(@Nullable MimeMultipart root, @Nullable MimeMultipart main);1498780456;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or {@code null} to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(@Nullable MimeMultipart root, @Nullable MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,nullable,mime,multipart,root,nullable,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> protected final void setMimeMultiparts(@Nullable MimeMultipart root, @Nullable MimeMultipart main);1530174524;Set the given MimeMultipart objects for use by this MimeMessageHelper._@param root the root MimeMultipart object, which attachments will be added to__or {@code null} to indicate no multipart at all_@param main the main MimeMultipart object, which text(s) and inline elements_will be added to (can be the same as the root multipart object, or an element_nested underneath the root multipart element);protected final void setMimeMultiparts(@Nullable MimeMultipart root, @Nullable MimeMultipart main) {_		this.rootMimeMultipart = root__		this.mimeMultipart = main__	};set,the,given,mime,multipart,objects,for,use,by,this,mime,message,helper,param,root,the,root,mime,multipart,object,which,attachments,will,be,added,to,or,code,null,to,indicate,no,multipart,at,all,param,main,the,main,mime,multipart,object,which,text,s,and,inline,elements,will,be,added,to,can,be,the,same,as,the,root,multipart,object,or,an,element,nested,underneath,the,root,multipart,element;protected,final,void,set,mime,multiparts,nullable,mime,multipart,root,nullable,mime,multipart,main,this,root,mime,multipart,root,this,mime,multipart,main
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1328020251;Add an inline element to the MimeMessage, taking the content from a_<code>javax.activation.DataSource</code>._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_<code>getInputStream()</code> multiple times._<p><b>NOTE:</b> Invoke <code>addInline</code> <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the <code>javax.activation.DataSource</code> to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,code,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,code,multiple,times,p,b,note,b,invoke,code,add,inline,code,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,code,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1356735495;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1357119239;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1362408075;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1368482696;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1495868221;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1496259743;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1496837955;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1498780456;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public void addInline(String contentId, DataSource dataSource) throws MessagingException;1530174524;Add an inline element to the MimeMessage, taking the content from a_{@code javax.activation.DataSource}._<p>Note that the InputStream returned by the DataSource implementation_needs to be a <i>fresh one on each call</i>, as JavaMail will invoke_{@code getInputStream()} multiple times._<p><b>NOTE:</b> Invoke {@code addInline} <i>after</i> {@link #setText}__else, mail readers might not be able to resolve inline references correctly._@param contentId the content ID to use. Will end up as "Content-ID" header_in the body part, surrounded by angle brackets: e.g. "myId" -> "&lt_myId&gt_"._Can be referenced in HTML source via src="cid:myId" expressions._@param dataSource the {@code javax.activation.DataSource} to take_the content from, determining the InputStream and the content type_@throws MessagingException in case of errors_@see #addInline(String, java.io.File)_@see #addInline(String, org.springframework.core.io.Resource);public void addInline(String contentId, DataSource dataSource) throws MessagingException {_		Assert.notNull(contentId, "Content ID must not be null")__		Assert.notNull(dataSource, "DataSource must not be null")__		MimeBodyPart mimeBodyPart = new MimeBodyPart()__		mimeBodyPart.setDisposition(MimeBodyPart.INLINE)__		_		_		mimeBodyPart.setHeader(HEADER_CONTENT_ID, "<" + contentId + ">")__		mimeBodyPart.setDataHandler(new DataHandler(dataSource))__		getMimeMultipart().addBodyPart(mimeBodyPart)__	};add,an,inline,element,to,the,mime,message,taking,the,content,from,a,code,javax,activation,data,source,p,note,that,the,input,stream,returned,by,the,data,source,implementation,needs,to,be,a,i,fresh,one,on,each,call,i,as,java,mail,will,invoke,code,get,input,stream,multiple,times,p,b,note,b,invoke,code,add,inline,i,after,i,link,set,text,else,mail,readers,might,not,be,able,to,resolve,inline,references,correctly,param,content,id,the,content,id,to,use,will,end,up,as,content,id,header,in,the,body,part,surrounded,by,angle,brackets,e,g,my,id,lt,my,id,gt,can,be,referenced,in,html,source,via,src,cid,my,id,expressions,param,data,source,the,code,javax,activation,data,source,to,take,the,content,from,determining,the,input,stream,and,the,content,type,throws,messaging,exception,in,case,of,errors,see,add,inline,string,java,io,file,see,add,inline,string,org,springframework,core,io,resource;public,void,add,inline,string,content,id,data,source,data,source,throws,messaging,exception,assert,not,null,content,id,content,id,must,not,be,null,assert,not,null,data,source,data,source,must,not,be,null,mime,body,part,mime,body,part,new,mime,body,part,mime,body,part,set,disposition,mime,body,part,inline,mime,body,part,set,header,content,id,mime,body,part,set,data,handler,new,data,handler,data,source,get,mime,multipart,add,body,part,mime,body,part
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1328020251;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1356735495;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1357119239;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1362408075;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1368482696;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1495868221;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1496259743;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1496837955;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1498780456;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage MimeMessage to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public MimeMessageHelper(MimeMessage mimeMessage);1530174524;Create a new MimeMessageHelper for the given MimeMessage,_assuming a simple text message (no multipart content,_i.e. no alternative texts and no inline elements or attachments)._<p>The character encoding for the message will be taken from_the passed-in MimeMessage object, if carried there. Else,_JavaMail's default encoding will be used._@param mimeMessage the mime message to work on_@see #MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)_@see #getDefaultEncoding(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultEncoding;public MimeMessageHelper(MimeMessage mimeMessage) {_		this(mimeMessage, null)__	};create,a,new,mime,message,helper,for,the,given,mime,message,assuming,a,simple,text,message,no,multipart,content,i,e,no,alternative,texts,and,no,inline,elements,or,attachments,p,the,character,encoding,for,the,message,will,be,taken,from,the,passed,in,mime,message,object,if,carried,there,else,java,mail,s,default,encoding,will,be,used,param,mime,message,the,mime,message,to,work,on,see,mime,message,helper,javax,mail,internet,mime,message,boolean,see,get,default,encoding,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,encoding;public,mime,message,helper,mime,message,mime,message,this,mime,message,null
MimeMessageHelper -> public void setFileTypeMap(FileTypeMap fileTypeMap);1328020251;Set the Java Activation Framework <code>FileTypeMap</code> to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the <code>FileTypeMap</code> that the underlying_MimeMessage carries, if any, or the Activation Framework's default_<code>FileTypeMap</code> instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,code,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,code,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,code,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> public void setFileTypeMap(FileTypeMap fileTypeMap);1356735495;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> public void setFileTypeMap(FileTypeMap fileTypeMap);1357119239;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> public void setFileTypeMap(FileTypeMap fileTypeMap);1362408075;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> public void setFileTypeMap(FileTypeMap fileTypeMap);1368482696;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> public void setFileTypeMap(FileTypeMap fileTypeMap);1495868221;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
MimeMessageHelper -> public void setFileTypeMap(FileTypeMap fileTypeMap);1496259743;Set the Java Activation Framework {@code FileTypeMap} to use_for determining the content type of inline content and attachments_that get added to the message._<p>Default is the {@code FileTypeMap} that the underlying_MimeMessage carries, if any, or the Activation Framework's default_{@code FileTypeMap} instance else._@see #addInline_@see #addAttachment_@see #getDefaultFileTypeMap(javax.mail.internet.MimeMessage)_@see JavaMailSenderImpl#setDefaultFileTypeMap_@see javax.activation.FileTypeMap#getDefaultFileTypeMap_@see ConfigurableMimeFileTypeMap;public void setFileTypeMap(FileTypeMap fileTypeMap) {_		this.fileTypeMap = (fileTypeMap != null ? fileTypeMap : getDefaultFileTypeMap(getMimeMessage()))__	};set,the,java,activation,framework,code,file,type,map,to,use,for,determining,the,content,type,of,inline,content,and,attachments,that,get,added,to,the,message,p,default,is,the,code,file,type,map,that,the,underlying,mime,message,carries,if,any,or,the,activation,framework,s,default,code,file,type,map,instance,else,see,add,inline,see,add,attachment,see,get,default,file,type,map,javax,mail,internet,mime,message,see,java,mail,sender,impl,set,default,file,type,map,see,javax,activation,file,type,map,get,default,file,type,map,see,configurable,mime,file,type,map;public,void,set,file,type,map,file,type,map,file,type,map,this,file,type,map,file,type,map,null,file,type,map,get,default,file,type,map,get,mime,message
