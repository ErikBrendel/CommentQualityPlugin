# id;timestamp;commentText;codeText;commentWords;codeWords
CacheResultInterceptor -> protected void checkForCachedException(Cache exceptionCache, Object cacheKey);1396865240;Check for a cached exception. If the exception is found, throw it directly.;protected void checkForCachedException(Cache exceptionCache, Object cacheKey) {_		if (exceptionCache == null) {_			return__		}_		Cache.ValueWrapper result = exceptionCache.get(cacheKey)__		if (result != null) {_			throw rewriteCallStack((Throwable) result.get(), getClass().getName(), "invoke")__		}_	};check,for,a,cached,exception,if,the,exception,is,found,throw,it,directly;protected,void,check,for,cached,exception,cache,exception,cache,object,cache,key,if,exception,cache,null,return,cache,value,wrapper,result,exception,cache,get,cache,key,if,result,null,throw,rewrite,call,stack,throwable,result,get,get,class,get,name,invoke
CacheResultInterceptor -> protected void checkForCachedException(Cache exceptionCache, Object cacheKey);1400596774;Check for a cached exception. If the exception is found, throw it directly.;protected void checkForCachedException(Cache exceptionCache, Object cacheKey) {_		if (exceptionCache == null) {_			return__		}_		Cache.ValueWrapper result = doGet(exceptionCache, cacheKey)__		if (result != null) {_			throw rewriteCallStack((Throwable) result.get(), getClass().getName(), "invoke")__		}_	};check,for,a,cached,exception,if,the,exception,is,found,throw,it,directly;protected,void,check,for,cached,exception,cache,exception,cache,object,cache,key,if,exception,cache,null,return,cache,value,wrapper,result,do,get,exception,cache,cache,key,if,result,null,throw,rewrite,call,stack,throwable,result,get,get,class,get,name,invoke
CacheResultInterceptor -> protected void checkForCachedException(Cache exceptionCache, Object cacheKey);1404934999;Check for a cached exception. If the exception is found, throw it directly.;protected void checkForCachedException(Cache exceptionCache, Object cacheKey) {_		if (exceptionCache == null) {_			return__		}_		Cache.ValueWrapper result = doGet(exceptionCache, cacheKey)__		if (result != null) {_			throw rewriteCallStack((Throwable) result.get(), getClass().getName(), "invoke")__		}_	};check,for,a,cached,exception,if,the,exception,is,found,throw,it,directly;protected,void,check,for,cached,exception,cache,exception,cache,object,cache,key,if,exception,cache,null,return,cache,value,wrapper,result,do,get,exception,cache,cache,key,if,result,null,throw,rewrite,call,stack,throwable,result,get,get,class,get,name,invoke
CacheResultInterceptor -> protected void checkForCachedException(Cache exceptionCache, Object cacheKey);1406128099;Check for a cached exception. If the exception is found, throw it directly.;protected void checkForCachedException(Cache exceptionCache, Object cacheKey) {_		if (exceptionCache == null) {_			return__		}_		Cache.ValueWrapper result = doGet(exceptionCache, cacheKey)__		if (result != null) {_			throw rewriteCallStack((Throwable) result.get(), getClass().getName(), "invoke")__		}_	};check,for,a,cached,exception,if,the,exception,is,found,throw,it,directly;protected,void,check,for,cached,exception,cache,exception,cache,object,cache,key,if,exception,cache,null,return,cache,value,wrapper,result,do,get,exception,cache,cache,key,if,result,null,throw,rewrite,call,stack,throwable,result,get,get,class,get,name,invoke
CacheResultInterceptor -> protected void checkForCachedException(Cache exceptionCache, Object cacheKey);1447070680;Check for a cached exception. If the exception is found, throw it directly.;protected void checkForCachedException(Cache exceptionCache, Object cacheKey) {_		if (exceptionCache == null) {_			return__		}_		Cache.ValueWrapper result = doGet(exceptionCache, cacheKey)__		if (result != null) {_			throw rewriteCallStack((Throwable) result.get(), getClass().getName(), "invoke")__		}_	};check,for,a,cached,exception,if,the,exception,is,found,throw,it,directly;protected,void,check,for,cached,exception,cache,exception,cache,object,cache,key,if,exception,cache,null,return,cache,value,wrapper,result,do,get,exception,cache,cache,key,if,result,null,throw,rewrite,call,stack,throwable,result,get,get,class,get,name,invoke
CacheResultInterceptor -> protected void checkForCachedException(Cache exceptionCache, Object cacheKey);1486391271;Check for a cached exception. If the exception is found, throw it directly.;protected void checkForCachedException(Cache exceptionCache, Object cacheKey) {_		if (exceptionCache == null) {_			return__		}_		Cache.ValueWrapper result = doGet(exceptionCache, cacheKey)__		if (result != null) {_			throw rewriteCallStack((Throwable) result.get(), getClass().getName(), "invoke")__		}_	};check,for,a,cached,exception,if,the,exception,is,found,throw,it,directly;protected,void,check,for,cached,exception,cache,exception,cache,object,cache,key,if,exception,cache,null,return,cache,value,wrapper,result,do,get,exception,cache,cache,key,if,result,null,throw,rewrite,call,stack,throwable,result,get,get,class,get,name,invoke
CacheResultInterceptor -> protected void checkForCachedException(Cache exceptionCache, Object cacheKey);1487376095;Check for a cached exception. If the exception is found, throw it directly.;protected void checkForCachedException(Cache exceptionCache, Object cacheKey) {_		if (exceptionCache == null) {_			return__		}_		Cache.ValueWrapper result = doGet(exceptionCache, cacheKey)__		if (result != null) {_			throw rewriteCallStack((Throwable) result.get(), getClass().getName(), "invoke")__		}_	};check,for,a,cached,exception,if,the,exception,is,found,throw,it,directly;protected,void,check,for,cached,exception,cache,exception,cache,object,cache,key,if,exception,cache,null,return,cache,value,wrapper,result,do,get,exception,cache,cache,key,if,result,null,throw,rewrite,call,stack,throwable,result,get,get,class,get,name,invoke
CacheResultInterceptor -> protected void checkForCachedException(Cache exceptionCache, Object cacheKey);1495868221;Check for a cached exception. If the exception is found, throw it directly.;protected void checkForCachedException(Cache exceptionCache, Object cacheKey) {_		if (exceptionCache == null) {_			return__		}_		Cache.ValueWrapper result = doGet(exceptionCache, cacheKey)__		if (result != null) {_			throw rewriteCallStack((Throwable) result.get(), getClass().getName(), "invoke")__		}_	};check,for,a,cached,exception,if,the,exception,is,found,throw,it,directly;protected,void,check,for,cached,exception,cache,exception,cache,object,cache,key,if,exception,cache,null,return,cache,value,wrapper,result,do,get,exception,cache,cache,key,if,result,null,throw,rewrite,call,stack,throwable,result,get,get,class,get,name,invoke
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(Throwable exception, 			String className, String methodName);1396865240;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up-to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@param <T> the type of the exception_@return a clone exception with a rewritten call stack composed of the current_call stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(Throwable exception,_			String className, String methodName) {_		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,param,t,the,type,of,the,exception,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(Throwable exception, 			String className, String methodName);1400596774;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up-to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@return a clone exception with a rewritten call stack composed of the current_call stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(Throwable exception,_			String className, String methodName) {_		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack( 			Throwable exception, String className, String methodName);1404934999;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up-to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@return a clone exception with a rewritten call stack composed of the current_call stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(_			Throwable exception, String className, String methodName) {__		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack( 			Throwable exception, String className, String methodName);1406128099;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up-to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@return a clone exception with a rewritten call stack composed of the current_call stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(_			Throwable exception, String className, String methodName) {__		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack( 			Throwable exception, String className, String methodName);1447070680;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up-to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@return a clone exception with a rewritten call stack composed of the current_call stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(_			Throwable exception, String className, String methodName) {__		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack( 			Throwable exception, String className, String methodName);1486391271;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up-to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@return a clone exception with a rewritten call stack composed of the current_call stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(_			Throwable exception, String className, String methodName) {__		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack( 			Throwable exception, String className, String methodName);1487376095;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@return a clone exception with a rewritten call stack composed of the current call_stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(_			Throwable exception, String className, String methodName) {__		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack( 			Throwable exception, String className, String methodName);1495868221;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@return a clone exception with a rewritten call stack composed of the current call_stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(_			Throwable exception, String className, String methodName) {__		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
CacheResultInterceptor -> private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack( 			Throwable exception, String className, String methodName);1531589372;Rewrite the call stack of the specified {@code exception} so that it matches_the current call stack up to (included) the specified method invocation._<p>Clone the specified exception. If the exception is not {@code serializable},_the original exception is returned. If no common ancestor can be found, returns_the original exception._<p>Used to make sure that a cached exception has a valid invocation context._@param exception the exception to merge with the current call stack_@param className the class name of the common ancestor_@param methodName the method name of the common ancestor_@return a clone exception with a rewritten call stack composed of the current call_stack up to (included) the common ancestor specified by the {@code className} and_{@code methodName} arguments, followed by stack trace elements of the specified_{@code exception} after the common ancestor.;private static CacheOperationInvoker.ThrowableWrapper rewriteCallStack(_			Throwable exception, String className, String methodName) {__		Throwable clone = cloneException(exception)__		if (clone == null) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)__		}__		StackTraceElement[] callStack = new Exception().getStackTrace()__		StackTraceElement[] cachedCallStack = exception.getStackTrace()___		int index = findCommonAncestorIndex(callStack, className, methodName)__		int cachedIndex = findCommonAncestorIndex(cachedCallStack, className, methodName)__		if (index == -1 || cachedIndex == -1) {_			return new CacheOperationInvoker.ThrowableWrapper(exception)_ _		}_		StackTraceElement[] result = new StackTraceElement[cachedIndex + callStack.length - index]__		System.arraycopy(cachedCallStack, 0, result, 0, cachedIndex)__		System.arraycopy(callStack, index, result, cachedIndex, callStack.length - index)___		clone.setStackTrace(result)__		return new CacheOperationInvoker.ThrowableWrapper(clone)__	};rewrite,the,call,stack,of,the,specified,code,exception,so,that,it,matches,the,current,call,stack,up,to,included,the,specified,method,invocation,p,clone,the,specified,exception,if,the,exception,is,not,code,serializable,the,original,exception,is,returned,if,no,common,ancestor,can,be,found,returns,the,original,exception,p,used,to,make,sure,that,a,cached,exception,has,a,valid,invocation,context,param,exception,the,exception,to,merge,with,the,current,call,stack,param,class,name,the,class,name,of,the,common,ancestor,param,method,name,the,method,name,of,the,common,ancestor,return,a,clone,exception,with,a,rewritten,call,stack,composed,of,the,current,call,stack,up,to,included,the,common,ancestor,specified,by,the,code,class,name,and,code,method,name,arguments,followed,by,stack,trace,elements,of,the,specified,code,exception,after,the,common,ancestor;private,static,cache,operation,invoker,throwable,wrapper,rewrite,call,stack,throwable,exception,string,class,name,string,method,name,throwable,clone,clone,exception,exception,if,clone,null,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,call,stack,new,exception,get,stack,trace,stack,trace,element,cached,call,stack,exception,get,stack,trace,int,index,find,common,ancestor,index,call,stack,class,name,method,name,int,cached,index,find,common,ancestor,index,cached,call,stack,class,name,method,name,if,index,1,cached,index,1,return,new,cache,operation,invoker,throwable,wrapper,exception,stack,trace,element,result,new,stack,trace,element,cached,index,call,stack,length,index,system,arraycopy,cached,call,stack,0,result,0,cached,index,system,arraycopy,call,stack,index,result,cached,index,call,stack,length,index,clone,set,stack,trace,result,return,new,cache,operation,invoker,throwable,wrapper,clone
