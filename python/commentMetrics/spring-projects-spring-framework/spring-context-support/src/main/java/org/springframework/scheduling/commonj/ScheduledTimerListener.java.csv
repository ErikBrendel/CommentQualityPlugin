# id;timestamp;commentText;codeText;commentWords;codeWords
ScheduledTimerListener -> public void setRunnable(Runnable timerTask);1328020251;Set the Runnable to schedule as TimerListener._@see DelegatingTimerListener;public void setRunnable(Runnable timerTask) {_		this.timerListener = new DelegatingTimerListener(timerTask)__	};set,the,runnable,to,schedule,as,timer,listener,see,delegating,timer,listener;public,void,set,runnable,runnable,timer,task,this,timer,listener,new,delegating,timer,listener,timer,task
ScheduledTimerListener -> public void setRunnable(Runnable timerTask);1356735495;Set the Runnable to schedule as TimerListener._@see DelegatingTimerListener;public void setRunnable(Runnable timerTask) {_		this.timerListener = new DelegatingTimerListener(timerTask)__	};set,the,runnable,to,schedule,as,timer,listener,see,delegating,timer,listener;public,void,set,runnable,runnable,timer,task,this,timer,listener,new,delegating,timer,listener,timer,task
ScheduledTimerListener -> public void setRunnable(Runnable timerTask);1500495740;Set the Runnable to schedule as TimerListener._@see DelegatingTimerListener;public void setRunnable(Runnable timerTask) {_		this.timerListener = new DelegatingTimerListener(timerTask)__	};set,the,runnable,to,schedule,as,timer,listener,see,delegating,timer,listener;public,void,set,runnable,runnable,timer,task,this,timer,listener,new,delegating,timer,listener,timer,task
ScheduledTimerListener -> public void setRunnable(Runnable timerTask);1533213510;Set the Runnable to schedule as TimerListener._@see DelegatingTimerListener;public void setRunnable(Runnable timerTask) {_		this.timerListener = new DelegatingTimerListener(timerTask)__	};set,the,runnable,to,schedule,as,timer,listener,see,delegating,timer,listener;public,void,set,runnable,runnable,timer,task,this,timer,listener,new,delegating,timer,listener,timer,task
ScheduledTimerListener -> public void setRunnable(Runnable timerTask);1533725446;Set the Runnable to schedule as TimerListener._@see DelegatingTimerListener;public void setRunnable(Runnable timerTask) {_		this.timerListener = new DelegatingTimerListener(timerTask)__	};set,the,runnable,to,schedule,as,timer,listener,see,delegating,timer,listener;public,void,set,runnable,runnable,timer,task,this,timer,listener,new,delegating,timer,listener,timer,task
ScheduledTimerListener -> public void setTimerListener(TimerListener timerListener);1328020251;Set the TimerListener to schedule.;public void setTimerListener(TimerListener timerListener) {_		this.timerListener = timerListener__	};set,the,timer,listener,to,schedule;public,void,set,timer,listener,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public void setTimerListener(TimerListener timerListener);1356735495;Set the TimerListener to schedule.;public void setTimerListener(TimerListener timerListener) {_		this.timerListener = timerListener__	};set,the,timer,listener,to,schedule;public,void,set,timer,listener,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public void setPeriod(long period);1328020251;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of zero or a_positive value, the task will be executed repeatedly, with the given_interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate_and fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) <i>is</i>_supported, because the CommonJ specification defines this as a legal value._Hence a value of 0 will result in immediate re-execution after a job has_finished (not in one-time execution like with <code>java.util.Timer</code>)._@see #setFixedRate_@see #isOneTimeTask()_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,zero,or,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,i,is,i,supported,because,the,common,j,specification,defines,this,as,a,legal,value,hence,a,value,of,0,will,result,in,immediate,re,execution,after,a,job,has,finished,not,in,one,time,execution,like,with,code,java,util,timer,code,see,set,fixed,rate,see,is,one,time,task,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long;public,void,set,period,long,period,this,period,period
ScheduledTimerListener -> public void setPeriod(long period);1356735495;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of zero or a_positive value, the task will be executed repeatedly, with the given_interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate_and fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) <i>is</i>_supported, because the CommonJ specification defines this as a legal value._Hence a value of 0 will result in immediate re-execution after a job has_finished (not in one-time execution like with {@code java.util.Timer})._@see #setFixedRate_@see #isOneTimeTask()_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,zero,or,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,i,is,i,supported,because,the,common,j,specification,defines,this,as,a,legal,value,hence,a,value,of,0,will,result,in,immediate,re,execution,after,a,job,has,finished,not,in,one,time,execution,like,with,code,java,util,timer,see,set,fixed,rate,see,is,one,time,task,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long;public,void,set,period,long,period,this,period,period
ScheduledTimerListener -> public void setPeriod(long period);1500495740;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of zero or a_positive value, the task will be executed repeatedly, with the given_interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate_and fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) <i>is</i>_supported, because the CommonJ specification defines this as a legal value._Hence a value of 0 will result in immediate re-execution after a job has_finished (not in one-time execution like with {@code java.util.Timer})._@see #setFixedRate_@see #isOneTimeTask()_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,zero,or,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,i,is,i,supported,because,the,common,j,specification,defines,this,as,a,legal,value,hence,a,value,of,0,will,result,in,immediate,re,execution,after,a,job,has,finished,not,in,one,time,execution,like,with,code,java,util,timer,see,set,fixed,rate,see,is,one,time,task,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long;public,void,set,period,long,period,this,period,period
ScheduledTimerListener -> public void setPeriod(long period);1533213510;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of zero or a_positive value, the task will be executed repeatedly, with the given_interval inbetween executions._<p>Note that the semantics of the period value vary between fixed-rate_and fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) <i>is</i>_supported, because the CommonJ specification defines this as a legal value._Hence a value of 0 will result in immediate re-execution after a job has_finished (not in one-time execution like with {@code java.util.Timer})._@see #setFixedRate_@see #isOneTimeTask()_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,zero,or,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,inbetween,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,i,is,i,supported,because,the,common,j,specification,defines,this,as,a,legal,value,hence,a,value,of,0,will,result,in,immediate,re,execution,after,a,job,has,finished,not,in,one,time,execution,like,with,code,java,util,timer,see,set,fixed,rate,see,is,one,time,task,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long;public,void,set,period,long,period,this,period,period
ScheduledTimerListener -> public void setPeriod(long period);1533725446;Set the period between repeated task executions, in milliseconds._<p>Default is -1, leading to one-time execution. In case of zero or a_positive value, the task will be executed repeatedly, with the given_interval in-between executions._<p>Note that the semantics of the period value vary between fixed-rate_and fixed-delay execution._<p><b>Note:</b> A period of 0 (for example as fixed delay) <i>is</i>_supported, because the CommonJ specification defines this as a legal value._Hence a value of 0 will result in immediate re-execution after a job has_finished (not in one-time execution like with {@code java.util.Timer})._@see #setFixedRate_@see #isOneTimeTask()_@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long);public void setPeriod(long period) {_		this.period = period__	};set,the,period,between,repeated,task,executions,in,milliseconds,p,default,is,1,leading,to,one,time,execution,in,case,of,zero,or,a,positive,value,the,task,will,be,executed,repeatedly,with,the,given,interval,in,between,executions,p,note,that,the,semantics,of,the,period,value,vary,between,fixed,rate,and,fixed,delay,execution,p,b,note,b,a,period,of,0,for,example,as,fixed,delay,i,is,i,supported,because,the,common,j,specification,defines,this,as,a,legal,value,hence,a,value,of,0,will,result,in,immediate,re,execution,after,a,job,has,finished,not,in,one,time,execution,like,with,code,java,util,timer,see,set,fixed,rate,see,is,one,time,task,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long;public,void,set,period,long,period,this,period,period
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener);1328020251;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerListener the TimerListener to schedule;public ScheduledTimerListener(TimerListener timerListener) {_		this.timerListener = timerListener__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,listener,the,timer,listener,to,schedule;public,scheduled,timer,listener,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener);1356735495;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerListener the TimerListener to schedule;public ScheduledTimerListener(TimerListener timerListener) {_		this.timerListener = timerListener__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,listener,the,timer,listener,to,schedule;public,scheduled,timer,listener,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener);1500495740;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerListener the TimerListener to schedule;public ScheduledTimerListener(TimerListener timerListener) {_		this.timerListener = timerListener__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,listener,the,timer,listener,to,schedule;public,scheduled,timer,listener,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener);1533213510;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerListener the TimerListener to schedule;public ScheduledTimerListener(TimerListener timerListener) {_		this.timerListener = timerListener__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,listener,the,timer,listener,to,schedule;public,scheduled,timer,listener,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener);1533725446;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerListener the TimerListener to schedule;public ScheduledTimerListener(TimerListener timerListener) {_		this.timerListener = timerListener__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,listener,the,timer,listener,to,schedule;public,scheduled,timer,listener,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> @Nullable 	public TimerListener getTimerListener();1500495740;Return the TimerListener to schedule.;@Nullable_	public TimerListener getTimerListener() {_		return this.timerListener__	};return,the,timer,listener,to,schedule;nullable,public,timer,listener,get,timer,listener,return,this,timer,listener
ScheduledTimerListener -> @Nullable 	public TimerListener getTimerListener();1533213510;Return the TimerListener to schedule.;@Nullable_	public TimerListener getTimerListener() {_		return this.timerListener__	};return,the,timer,listener,to,schedule;nullable,public,timer,listener,get,timer,listener,return,this,timer,listener
ScheduledTimerListener -> @Nullable 	public TimerListener getTimerListener();1533725446;Return the TimerListener to schedule.;@Nullable_	public TimerListener getTimerListener() {_		return this.timerListener__	};return,the,timer,listener,to,schedule;nullable,public,timer,listener,get,timer,listener,return,this,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate);1328020251;Create a new ScheduledTimerListener._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate) {_		this.timerListener = timerListener__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,long,period,boolean,fixed,rate,this,timer,listener,timer,listener,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate);1356735495;Create a new ScheduledTimerListener._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate) {_		this.timerListener = timerListener__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,long,period,boolean,fixed,rate,this,timer,listener,timer,listener,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate);1500495740;Create a new ScheduledTimerListener._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate) {_		this.timerListener = timerListener__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,long,period,boolean,fixed,rate,this,timer,listener,timer,listener,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate);1533213510;Create a new ScheduledTimerListener._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate) {_		this.timerListener = timerListener__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,long,period,boolean,fixed,rate,this,timer,listener,timer,listener,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate);1533725446;Create a new ScheduledTimerListener._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(TimerListener timerListener, long delay, long period, boolean fixedRate) {_		this.timerListener = timerListener__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,long,period,boolean,fixed,rate,this,timer,listener,timer,listener,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener();1328020251;Create a new ScheduledTimerListener,_to be populated via bean properties._@see #setTimerListener_@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledTimerListener() {_	};create,a,new,scheduled,timer,listener,to,be,populated,via,bean,properties,see,set,timer,listener,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener();1356735495;Create a new ScheduledTimerListener,_to be populated via bean properties._@see #setTimerListener_@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledTimerListener() {_	};create,a,new,scheduled,timer,listener,to,be,populated,via,bean,properties,see,set,timer,listener,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener();1500495740;Create a new ScheduledTimerListener,_to be populated via bean properties._@see #setTimerListener_@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledTimerListener() {_	};create,a,new,scheduled,timer,listener,to,be,populated,via,bean,properties,see,set,timer,listener,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener();1533213510;Create a new ScheduledTimerListener,_to be populated via bean properties._@see #setTimerListener_@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledTimerListener() {_	};create,a,new,scheduled,timer,listener,to,be,populated,via,bean,properties,see,set,timer,listener,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener();1533725446;Create a new ScheduledTimerListener,_to be populated via bean properties._@see #setTimerListener_@see #setDelay_@see #setPeriod_@see #setFixedRate;public ScheduledTimerListener() {_	};create,a,new,scheduled,timer,listener,to,be,populated,via,bean,properties,see,set,timer,listener,see,set,delay,see,set,period,see,set,fixed,rate;public,scheduled,timer,listener
ScheduledTimerListener -> public long getDelay();1328020251;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledTimerListener -> public long getDelay();1356735495;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledTimerListener -> public long getDelay();1500495740;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledTimerListener -> public long getDelay();1533213510;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledTimerListener -> public long getDelay();1533725446;Return the delay before starting the job for the first time.;public long getDelay() {_		return this.delay__	};return,the,delay,before,starting,the,job,for,the,first,time;public,long,get,delay,return,this,delay
ScheduledTimerListener -> public boolean isOneTimeTask();1328020251;Is this task only ever going to execute once?_@return <code>true</code> if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period < 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,code,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledTimerListener -> public boolean isOneTimeTask();1356735495;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period < 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledTimerListener -> public boolean isOneTimeTask();1500495740;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period < 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledTimerListener -> public boolean isOneTimeTask();1533213510;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period < 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledTimerListener -> public boolean isOneTimeTask();1533725446;Is this task only ever going to execute once?_@return {@code true} if this task is only ever going to execute once_@see #getPeriod();public boolean isOneTimeTask() {_		return (this.period < 0)__	};is,this,task,only,ever,going,to,execute,once,return,code,true,if,this,task,is,only,ever,going,to,execute,once,see,get,period;public,boolean,is,one,time,task,return,this,period,0
ScheduledTimerListener -> public void setTimerListener(@Nullable TimerListener timerListener);1500495740;Set the TimerListener to schedule.;public void setTimerListener(@Nullable TimerListener timerListener) {_		this.timerListener = timerListener__	};set,the,timer,listener,to,schedule;public,void,set,timer,listener,nullable,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public void setTimerListener(@Nullable TimerListener timerListener);1533213510;Set the TimerListener to schedule.;public void setTimerListener(@Nullable TimerListener timerListener) {_		this.timerListener = timerListener__	};set,the,timer,listener,to,schedule;public,void,set,timer,listener,nullable,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public void setTimerListener(@Nullable TimerListener timerListener);1533725446;Set the TimerListener to schedule.;public void setTimerListener(@Nullable TimerListener timerListener) {_		this.timerListener = timerListener__	};set,the,timer,listener,to,schedule;public,void,set,timer,listener,nullable,timer,listener,timer,listener,this,timer,listener,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate);1328020251;Create a new ScheduledTimerListener._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate) {_		setRunnable(timerTask)__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,runnable,timer,task,long,delay,long,period,boolean,fixed,rate,set,runnable,timer,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate);1356735495;Create a new ScheduledTimerListener._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate) {_		setRunnable(timerTask)__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,runnable,timer,task,long,delay,long,period,boolean,fixed,rate,set,runnable,timer,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate);1500495740;Create a new ScheduledTimerListener._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate) {_		setRunnable(timerTask)__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,runnable,timer,task,long,delay,long,period,boolean,fixed,rate,set,runnable,timer,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate);1533213510;Create a new ScheduledTimerListener._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate) {_		setRunnable(timerTask)__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,runnable,timer,task,long,delay,long,period,boolean,fixed,rate,set,runnable,timer,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate);1533725446;Create a new ScheduledTimerListener._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms)_@param period the period between repeated task executions (ms)_@param fixedRate whether to schedule as fixed-rate execution;public ScheduledTimerListener(Runnable timerTask, long delay, long period, boolean fixedRate) {_		setRunnable(timerTask)__		this.delay = delay__		this.period = period__		this.fixedRate = fixedRate__	};create,a,new,scheduled,timer,listener,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms,param,period,the,period,between,repeated,task,executions,ms,param,fixed,rate,whether,to,schedule,as,fixed,rate,execution;public,scheduled,timer,listener,runnable,timer,task,long,delay,long,period,boolean,fixed,rate,set,runnable,timer,task,this,delay,delay,this,period,period,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay);1328020251;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(Runnable timerTask, long delay) {_		setRunnable(timerTask)__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,runnable,timer,task,long,delay,set,runnable,timer,task,this,delay,delay
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay);1356735495;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(Runnable timerTask, long delay) {_		setRunnable(timerTask)__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,runnable,timer,task,long,delay,set,runnable,timer,task,this,delay,delay
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay);1500495740;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(Runnable timerTask, long delay) {_		setRunnable(timerTask)__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,runnable,timer,task,long,delay,set,runnable,timer,task,this,delay,delay
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay);1533213510;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(Runnable timerTask, long delay) {_		setRunnable(timerTask)__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,runnable,timer,task,long,delay,set,runnable,timer,task,this,delay,delay
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask, long delay);1533725446;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerTask the Runnable to schedule as TimerListener_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(Runnable timerTask, long delay) {_		setRunnable(timerTask)__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,runnable,timer,task,long,delay,set,runnable,timer,task,this,delay,delay
ScheduledTimerListener -> public long getPeriod();1328020251;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledTimerListener -> public long getPeriod();1356735495;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledTimerListener -> public long getPeriod();1500495740;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledTimerListener -> public long getPeriod();1533213510;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledTimerListener -> public long getPeriod();1533725446;Return the period between repeated task executions.;public long getPeriod() {_		return this.period__	};return,the,period,between,repeated,task,executions;public,long,get,period,return,this,period
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay);1328020251;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(TimerListener timerListener, long delay) {_		this.timerListener = timerListener__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,this,timer,listener,timer,listener,this,delay,delay
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay);1356735495;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(TimerListener timerListener, long delay) {_		this.timerListener = timerListener__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,this,timer,listener,timer,listener,this,delay,delay
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay);1500495740;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(TimerListener timerListener, long delay) {_		this.timerListener = timerListener__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,this,timer,listener,timer,listener,this,delay,delay
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay);1533213510;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(TimerListener timerListener, long delay) {_		this.timerListener = timerListener__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,this,timer,listener,timer,listener,this,delay,delay
ScheduledTimerListener -> public ScheduledTimerListener(TimerListener timerListener, long delay);1533725446;Create a new ScheduledTimerListener, with default_one-time execution with the given delay._@param timerListener the TimerListener to schedule_@param delay the delay before starting the task for the first time (ms);public ScheduledTimerListener(TimerListener timerListener, long delay) {_		this.timerListener = timerListener__		this.delay = delay__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,with,the,given,delay,param,timer,listener,the,timer,listener,to,schedule,param,delay,the,delay,before,starting,the,task,for,the,first,time,ms;public,scheduled,timer,listener,timer,listener,timer,listener,long,delay,this,timer,listener,timer,listener,this,delay,delay
ScheduledTimerListener -> public TimerListener getTimerListener();1328020251;Return the TimerListener to schedule.;public TimerListener getTimerListener() {_		return this.timerListener__	};return,the,timer,listener,to,schedule;public,timer,listener,get,timer,listener,return,this,timer,listener
ScheduledTimerListener -> public TimerListener getTimerListener();1356735495;Return the TimerListener to schedule.;public TimerListener getTimerListener() {_		return this.timerListener__	};return,the,timer,listener,to,schedule;public,timer,listener,get,timer,listener,return,this,timer,listener
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask);1328020251;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerTask the Runnable to schedule as TimerListener;public ScheduledTimerListener(Runnable timerTask) {_		setRunnable(timerTask)__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener;public,scheduled,timer,listener,runnable,timer,task,set,runnable,timer,task
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask);1356735495;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerTask the Runnable to schedule as TimerListener;public ScheduledTimerListener(Runnable timerTask) {_		setRunnable(timerTask)__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener;public,scheduled,timer,listener,runnable,timer,task,set,runnable,timer,task
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask);1500495740;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerTask the Runnable to schedule as TimerListener;public ScheduledTimerListener(Runnable timerTask) {_		setRunnable(timerTask)__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener;public,scheduled,timer,listener,runnable,timer,task,set,runnable,timer,task
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask);1533213510;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerTask the Runnable to schedule as TimerListener;public ScheduledTimerListener(Runnable timerTask) {_		setRunnable(timerTask)__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener;public,scheduled,timer,listener,runnable,timer,task,set,runnable,timer,task
ScheduledTimerListener -> public ScheduledTimerListener(Runnable timerTask);1533725446;Create a new ScheduledTimerListener, with default_one-time execution without delay._@param timerTask the Runnable to schedule as TimerListener;public ScheduledTimerListener(Runnable timerTask) {_		setRunnable(timerTask)__	};create,a,new,scheduled,timer,listener,with,default,one,time,execution,without,delay,param,timer,task,the,runnable,to,schedule,as,timer,listener;public,scheduled,timer,listener,runnable,timer,task,set,runnable,timer,task
ScheduledTimerListener -> public boolean isFixedRate();1328020251;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledTimerListener -> public boolean isFixedRate();1356735495;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledTimerListener -> public boolean isFixedRate();1500495740;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledTimerListener -> public boolean isFixedRate();1533213510;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledTimerListener -> public boolean isFixedRate();1533725446;Return whether to schedule as fixed-rate execution.;public boolean isFixedRate() {_		return this.fixedRate__	};return,whether,to,schedule,as,fixed,rate,execution;public,boolean,is,fixed,rate,return,this,fixed,rate
ScheduledTimerListener -> public void setFixedRate(boolean fixedRate);1328020251;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", i.e. fixed delay._<p>See TimerManager javadoc for details on those execution modes._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,i,e,fixed,delay,p,see,timer,manager,javadoc,for,details,on,those,execution,modes,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public void setFixedRate(boolean fixedRate);1356735495;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", i.e. fixed delay._<p>See TimerManager javadoc for details on those execution modes._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,i,e,fixed,delay,p,see,timer,manager,javadoc,for,details,on,those,execution,modes,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public void setFixedRate(boolean fixedRate);1500495740;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", i.e. fixed delay._<p>See TimerManager javadoc for details on those execution modes._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,i,e,fixed,delay,p,see,timer,manager,javadoc,for,details,on,those,execution,modes,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public void setFixedRate(boolean fixedRate);1533213510;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", i.e. fixed delay._<p>See TimerManager javadoc for details on those execution modes._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,i,e,fixed,delay,p,see,timer,manager,javadoc,for,details,on,those,execution,modes,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public void setFixedRate(boolean fixedRate);1533725446;Set whether to schedule as fixed-rate execution, rather than_fixed-delay execution. Default is "false", i.e. fixed delay._<p>See TimerManager javadoc for details on those execution modes._@see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)_@see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long);public void setFixedRate(boolean fixedRate) {_		this.fixedRate = fixedRate__	};set,whether,to,schedule,as,fixed,rate,execution,rather,than,fixed,delay,execution,default,is,false,i,e,fixed,delay,p,see,timer,manager,javadoc,for,details,on,those,execution,modes,see,commonj,timers,timer,manager,schedule,commonj,timers,timer,listener,long,long,see,commonj,timers,timer,manager,schedule,at,fixed,rate,commonj,timers,timer,listener,long,long;public,void,set,fixed,rate,boolean,fixed,rate,this,fixed,rate,fixed,rate
ScheduledTimerListener -> public void setDelay(long delay);1328020251;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling._<p>If the "firstTime" property is specified, this property will be ignored._Specify one or the other, not both.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling,p,if,the,first,time,property,is,specified,this,property,will,be,ignored,specify,one,or,the,other,not,both;public,void,set,delay,long,delay,this,delay,delay
ScheduledTimerListener -> public void setDelay(long delay);1356735495;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling._<p>If the "firstTime" property is specified, this property will be ignored._Specify one or the other, not both.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling,p,if,the,first,time,property,is,specified,this,property,will,be,ignored,specify,one,or,the,other,not,both;public,void,set,delay,long,delay,this,delay,delay
ScheduledTimerListener -> public void setDelay(long delay);1500495740;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling._<p>If the "firstTime" property is specified, this property will be ignored._Specify one or the other, not both.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling,p,if,the,first,time,property,is,specified,this,property,will,be,ignored,specify,one,or,the,other,not,both;public,void,set,delay,long,delay,this,delay,delay
ScheduledTimerListener -> public void setDelay(long delay);1533213510;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling._<p>If the "firstTime" property is specified, this property will be ignored._Specify one or the other, not both.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling,p,if,the,first,time,property,is,specified,this,property,will,be,ignored,specify,one,or,the,other,not,both;public,void,set,delay,long,delay,this,delay,delay
ScheduledTimerListener -> public void setDelay(long delay);1533725446;Set the delay before starting the task for the first time,_in milliseconds. Default is 0, immediately starting the_task after successful scheduling._<p>If the "firstTime" property is specified, this property will be ignored._Specify one or the other, not both.;public void setDelay(long delay) {_		this.delay = delay__	};set,the,delay,before,starting,the,task,for,the,first,time,in,milliseconds,default,is,0,immediately,starting,the,task,after,successful,scheduling,p,if,the,first,time,property,is,specified,this,property,will,be,ignored,specify,one,or,the,other,not,both;public,void,set,delay,long,delay,this,delay,delay
