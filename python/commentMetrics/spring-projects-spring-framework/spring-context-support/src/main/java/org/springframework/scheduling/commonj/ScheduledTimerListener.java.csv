commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the Runnable to schedule as TimerListener.  * @see DelegatingTimerListener  */ ;/**  * Set the Runnable to schedule as TimerListener.  * @see DelegatingTimerListener  */ public void setRunnable(Runnable timerTask) {     this.timerListener = new DelegatingTimerListener(timerTask). }
true;public;1;3;/**  * Set the TimerListener to schedule.  */ ;/**  * Set the TimerListener to schedule.  */ public void setTimerListener(@Nullable TimerListener timerListener) {     this.timerListener = timerListener. }
true;public;0;4;/**  * Return the TimerListener to schedule.  */ ;/**  * Return the TimerListener to schedule.  */ @Nullable public TimerListener getTimerListener() {     return this.timerListener. }
true;public;1;3;/**  * Set the delay before starting the task for the first time,  * in milliseconds. Default is 0, immediately starting the  * task after successful scheduling.  * <p>If the "firstTime" property is specified, this property will be ignored.  * Specify one or the other, not both.  */ ;/**  * Set the delay before starting the task for the first time,  * in milliseconds. Default is 0, immediately starting the  * task after successful scheduling.  * <p>If the "firstTime" property is specified, this property will be ignored.  * Specify one or the other, not both.  */ public void setDelay(long delay) {     this.delay = delay. }
true;public;0;3;/**  * Return the delay before starting the job for the first time.  */ ;/**  * Return the delay before starting the job for the first time.  */ public long getDelay() {     return this.delay. }
true;public;1;3;/**  * Set the period between repeated task executions, in milliseconds.  * <p>Default is -1, leading to one-time execution. In case of zero or a  * positive value, the task will be executed repeatedly, with the given  * interval in-between executions.  * <p>Note that the semantics of the period value vary between fixed-rate  * and fixed-delay execution.  * <p><b>Note:</b> A period of 0 (for example as fixed delay) <i>is</i>  * supported, because the CommonJ specification defines this as a legal value.  * Hence a value of 0 will result in immediate re-execution after a job has  * finished (not in one-time execution like with {@code java.util.Timer}).  * @see #setFixedRate  * @see #isOneTimeTask()  * @see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)  */ ;/**  * Set the period between repeated task executions, in milliseconds.  * <p>Default is -1, leading to one-time execution. In case of zero or a  * positive value, the task will be executed repeatedly, with the given  * interval in-between executions.  * <p>Note that the semantics of the period value vary between fixed-rate  * and fixed-delay execution.  * <p><b>Note:</b> A period of 0 (for example as fixed delay) <i>is</i>  * supported, because the CommonJ specification defines this as a legal value.  * Hence a value of 0 will result in immediate re-execution after a job has  * finished (not in one-time execution like with {@code java.util.Timer}).  * @see #setFixedRate  * @see #isOneTimeTask()  * @see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)  */ public void setPeriod(long period) {     this.period = period. }
true;public;0;3;/**  * Return the period between repeated task executions.  */ ;/**  * Return the period between repeated task executions.  */ public long getPeriod() {     return this.period. }
true;public;0;3;/**  * Is this task only ever going to execute once?  * @return {@code true} if this task is only ever going to execute once  * @see #getPeriod()  */ ;/**  * Is this task only ever going to execute once?  * @return {@code true} if this task is only ever going to execute once  * @see #getPeriod()  */ public boolean isOneTimeTask() {     return (this.period < 0). }
true;public;1;3;/**  * Set whether to schedule as fixed-rate execution, rather than  * fixed-delay execution. Default is "false", i.e. fixed delay.  * <p>See TimerManager javadoc for details on those execution modes.  * @see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)  * @see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long)  */ ;/**  * Set whether to schedule as fixed-rate execution, rather than  * fixed-delay execution. Default is "false", i.e. fixed delay.  * <p>See TimerManager javadoc for details on those execution modes.  * @see commonj.timers.TimerManager#schedule(commonj.timers.TimerListener, long, long)  * @see commonj.timers.TimerManager#scheduleAtFixedRate(commonj.timers.TimerListener, long, long)  */ public void setFixedRate(boolean fixedRate) {     this.fixedRate = fixedRate. }
true;public;0;3;/**  * Return whether to schedule as fixed-rate execution.  */ ;/**  * Return whether to schedule as fixed-rate execution.  */ public boolean isFixedRate() {     return this.fixedRate. }
