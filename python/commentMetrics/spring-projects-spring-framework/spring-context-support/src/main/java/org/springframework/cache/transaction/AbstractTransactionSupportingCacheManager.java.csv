commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether this CacheManager should expose transaction-aware Cache objects.  * <p>Default is "false". Set this to "true" to synchronize cache put/evict  * operations with ongoing Spring-managed transactions, performing the actual cache  * put/evict operation only in the after-commit phase of a successful transaction.  */ ;/**  * Set whether this CacheManager should expose transaction-aware Cache objects.  * <p>Default is "false". Set this to "true" to synchronize cache put/evict  * operations with ongoing Spring-managed transactions, performing the actual cache  * put/evict operation only in the after-commit phase of a successful transaction.  */ public void setTransactionAware(boolean transactionAware) {     this.transactionAware = transactionAware. }
true;public;0;3;/**  * Return whether this CacheManager has been configured to be transaction-aware.  */ ;/**  * Return whether this CacheManager has been configured to be transaction-aware.  */ public boolean isTransactionAware() {     return this.transactionAware. }
false;protected;1;4;;@Override protected Cache decorateCache(Cache cache) {     return (isTransactionAware() ? new TransactionAwareCacheDecorator(cache) : cache). }
