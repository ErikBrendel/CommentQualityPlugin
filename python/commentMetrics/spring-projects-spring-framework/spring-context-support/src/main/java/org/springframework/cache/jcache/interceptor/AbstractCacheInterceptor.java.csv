commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;2;3;;@Nullable protected abstract Object invoke(CacheOperationInvocationContext<O> context, CacheOperationInvoker invoker) throws Throwable.
true;protected;1;8;/**  * Resolve the cache to use.  * @param context the invocation context  * @return the cache to use (never null)  */ ;/**  * Resolve the cache to use.  * @param context the invocation context  * @return the cache to use (never null)  */ protected Cache resolveCache(CacheOperationInvocationContext<O> context) {     Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context).     Cache cache = extractFrom(caches).     if (cache == null) {         throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation()).     }     return cache. }
true;static;1;13;/**  * Convert the collection of caches in a single expected element.  * <p>Throw an {@link IllegalStateException} if the collection holds more than one element  * @return the single element or {@code null} if the collection is empty  */ ;/**  * Convert the collection of caches in a single expected element.  * <p>Throw an {@link IllegalStateException} if the collection holds more than one element  * @return the single element or {@code null} if the collection is empty  */ @Nullable static Cache extractFrom(Collection<? extends Cache> caches) {     if (CollectionUtils.isEmpty(caches)) {         return null.     } else if (caches.size() == 1) {         return caches.iterator().next().     } else {         throw new IllegalStateException("Unsupported cache resolution result " + caches + ": JSR-107 only supports a single cache.").     } }
