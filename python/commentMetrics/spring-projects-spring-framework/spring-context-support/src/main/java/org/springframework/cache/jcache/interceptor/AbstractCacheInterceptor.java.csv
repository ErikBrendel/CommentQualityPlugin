# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractCacheInterceptor -> @Nullable 	static Cache extractFrom(Collection<? extends Cache> caches);1495868221;Convert the collection of caches in a single expected element._<p>Throw an {@link IllegalStateException} if the collection holds more than one element_@return the single element or {@code null} if the collection is empty;@Nullable_	static Cache extractFrom(Collection<? extends Cache> caches) {_		if (CollectionUtils.isEmpty(caches)) {_			return null__		}_		else if (caches.size() == 1) {_			return caches.iterator().next()__		}_		else {_			throw new IllegalStateException("Unsupported cache resolution result " + caches +_					": JSR-107 only supports a single cache.")__		}_	};convert,the,collection,of,caches,in,a,single,expected,element,p,throw,an,link,illegal,state,exception,if,the,collection,holds,more,than,one,element,return,the,single,element,or,code,null,if,the,collection,is,empty;nullable,static,cache,extract,from,collection,extends,cache,caches,if,collection,utils,is,empty,caches,return,null,else,if,caches,size,1,return,caches,iterator,next,else,throw,new,illegal,state,exception,unsupported,cache,resolution,result,caches,jsr,107,only,supports,a,single,cache
AbstractCacheInterceptor -> @Nullable 	static Cache extractFrom(Collection<? extends Cache> caches);1530174524;Convert the collection of caches in a single expected element._<p>Throw an {@link IllegalStateException} if the collection holds more than one element_@return the single element or {@code null} if the collection is empty;@Nullable_	static Cache extractFrom(Collection<? extends Cache> caches) {_		if (CollectionUtils.isEmpty(caches)) {_			return null__		}_		else if (caches.size() == 1) {_			return caches.iterator().next()__		}_		else {_			throw new IllegalStateException("Unsupported cache resolution result " + caches +_					": JSR-107 only supports a single cache.")__		}_	};convert,the,collection,of,caches,in,a,single,expected,element,p,throw,an,link,illegal,state,exception,if,the,collection,holds,more,than,one,element,return,the,single,element,or,code,null,if,the,collection,is,empty;nullable,static,cache,extract,from,collection,extends,cache,caches,if,collection,utils,is,empty,caches,return,null,else,if,caches,size,1,return,caches,iterator,next,else,throw,new,illegal,state,exception,unsupported,cache,resolution,result,caches,jsr,107,only,supports,a,single,cache
AbstractCacheInterceptor -> @Nullable 	static Cache extractFrom(Collection<? extends Cache> caches);1531589372;Convert the collection of caches in a single expected element._<p>Throw an {@link IllegalStateException} if the collection holds more than one element_@return the single element or {@code null} if the collection is empty;@Nullable_	static Cache extractFrom(Collection<? extends Cache> caches) {_		if (CollectionUtils.isEmpty(caches)) {_			return null__		}_		else if (caches.size() == 1) {_			return caches.iterator().next()__		}_		else {_			throw new IllegalStateException("Unsupported cache resolution result " + caches +_					": JSR-107 only supports a single cache.")__		}_	};convert,the,collection,of,caches,in,a,single,expected,element,p,throw,an,link,illegal,state,exception,if,the,collection,holds,more,than,one,element,return,the,single,element,or,code,null,if,the,collection,is,empty;nullable,static,cache,extract,from,collection,extends,cache,caches,if,collection,utils,is,empty,caches,return,null,else,if,caches,size,1,return,caches,iterator,next,else,throw,new,illegal,state,exception,unsupported,cache,resolution,result,caches,jsr,107,only,supports,a,single,cache
AbstractCacheInterceptor -> protected Cache resolveCache(CacheOperationInvocationContext<O> context);1396865240;Resolve the cache to use._@param context the invocation context_@return the cache to use (never null);protected Cache resolveCache(CacheOperationInvocationContext<O> context) {_		Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context)__		Cache cache = extractFrom(caches)__		if (cache == null) {_			throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation())__		}_		return cache__	};resolve,the,cache,to,use,param,context,the,invocation,context,return,the,cache,to,use,never,null;protected,cache,resolve,cache,cache,operation,invocation,context,o,context,collection,extends,cache,caches,context,get,operation,get,cache,resolver,resolve,caches,context,cache,cache,extract,from,caches,if,cache,null,throw,new,illegal,state,exception,cache,could,not,have,been,resolved,for,context,get,operation,return,cache
AbstractCacheInterceptor -> protected Cache resolveCache(CacheOperationInvocationContext<O> context);1400596774;Resolve the cache to use._@param context the invocation context_@return the cache to use (never null);protected Cache resolveCache(CacheOperationInvocationContext<O> context) {_		Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context)__		Cache cache = extractFrom(caches)__		if (cache == null) {_			throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation())__		}_		return cache__	};resolve,the,cache,to,use,param,context,the,invocation,context,return,the,cache,to,use,never,null;protected,cache,resolve,cache,cache,operation,invocation,context,o,context,collection,extends,cache,caches,context,get,operation,get,cache,resolver,resolve,caches,context,cache,cache,extract,from,caches,if,cache,null,throw,new,illegal,state,exception,cache,could,not,have,been,resolved,for,context,get,operation,return,cache
AbstractCacheInterceptor -> protected Cache resolveCache(CacheOperationInvocationContext<O> context);1406128099;Resolve the cache to use._@param context the invocation context_@return the cache to use (never null);protected Cache resolveCache(CacheOperationInvocationContext<O> context) {_		Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context)__		Cache cache = extractFrom(caches)__		if (cache == null) {_			throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation())__		}_		return cache__	};resolve,the,cache,to,use,param,context,the,invocation,context,return,the,cache,to,use,never,null;protected,cache,resolve,cache,cache,operation,invocation,context,o,context,collection,extends,cache,caches,context,get,operation,get,cache,resolver,resolve,caches,context,cache,cache,extract,from,caches,if,cache,null,throw,new,illegal,state,exception,cache,could,not,have,been,resolved,for,context,get,operation,return,cache
AbstractCacheInterceptor -> protected Cache resolveCache(CacheOperationInvocationContext<O> context);1414826808;Resolve the cache to use._@param context the invocation context_@return the cache to use (never null);protected Cache resolveCache(CacheOperationInvocationContext<O> context) {_		Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context)__		Cache cache = extractFrom(caches)__		if (cache == null) {_			throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation())__		}_		return cache__	};resolve,the,cache,to,use,param,context,the,invocation,context,return,the,cache,to,use,never,null;protected,cache,resolve,cache,cache,operation,invocation,context,o,context,collection,extends,cache,caches,context,get,operation,get,cache,resolver,resolve,caches,context,cache,cache,extract,from,caches,if,cache,null,throw,new,illegal,state,exception,cache,could,not,have,been,resolved,for,context,get,operation,return,cache
AbstractCacheInterceptor -> protected Cache resolveCache(CacheOperationInvocationContext<O> context);1470818688;Resolve the cache to use._@param context the invocation context_@return the cache to use (never null);protected Cache resolveCache(CacheOperationInvocationContext<O> context) {_		Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context)__		Cache cache = extractFrom(caches)__		if (cache == null) {_			throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation())__		}_		return cache__	};resolve,the,cache,to,use,param,context,the,invocation,context,return,the,cache,to,use,never,null;protected,cache,resolve,cache,cache,operation,invocation,context,o,context,collection,extends,cache,caches,context,get,operation,get,cache,resolver,resolve,caches,context,cache,cache,extract,from,caches,if,cache,null,throw,new,illegal,state,exception,cache,could,not,have,been,resolved,for,context,get,operation,return,cache
AbstractCacheInterceptor -> protected Cache resolveCache(CacheOperationInvocationContext<O> context);1495868221;Resolve the cache to use._@param context the invocation context_@return the cache to use (never null);protected Cache resolveCache(CacheOperationInvocationContext<O> context) {_		Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context)__		Cache cache = extractFrom(caches)__		if (cache == null) {_			throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation())__		}_		return cache__	};resolve,the,cache,to,use,param,context,the,invocation,context,return,the,cache,to,use,never,null;protected,cache,resolve,cache,cache,operation,invocation,context,o,context,collection,extends,cache,caches,context,get,operation,get,cache,resolver,resolve,caches,context,cache,cache,extract,from,caches,if,cache,null,throw,new,illegal,state,exception,cache,could,not,have,been,resolved,for,context,get,operation,return,cache
AbstractCacheInterceptor -> protected Cache resolveCache(CacheOperationInvocationContext<O> context);1530174524;Resolve the cache to use._@param context the invocation context_@return the cache to use (never null);protected Cache resolveCache(CacheOperationInvocationContext<O> context) {_		Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context)__		Cache cache = extractFrom(caches)__		if (cache == null) {_			throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation())__		}_		return cache__	};resolve,the,cache,to,use,param,context,the,invocation,context,return,the,cache,to,use,never,null;protected,cache,resolve,cache,cache,operation,invocation,context,o,context,collection,extends,cache,caches,context,get,operation,get,cache,resolver,resolve,caches,context,cache,cache,extract,from,caches,if,cache,null,throw,new,illegal,state,exception,cache,could,not,have,been,resolved,for,context,get,operation,return,cache
AbstractCacheInterceptor -> protected Cache resolveCache(CacheOperationInvocationContext<O> context);1531589372;Resolve the cache to use._@param context the invocation context_@return the cache to use (never null);protected Cache resolveCache(CacheOperationInvocationContext<O> context) {_		Collection<? extends Cache> caches = context.getOperation().getCacheResolver().resolveCaches(context)__		Cache cache = extractFrom(caches)__		if (cache == null) {_			throw new IllegalStateException("Cache could not have been resolved for " + context.getOperation())__		}_		return cache__	};resolve,the,cache,to,use,param,context,the,invocation,context,return,the,cache,to,use,never,null;protected,cache,resolve,cache,cache,operation,invocation,context,o,context,collection,extends,cache,caches,context,get,operation,get,cache,resolver,resolve,caches,context,cache,cache,extract,from,caches,if,cache,null,throw,new,illegal,state,exception,cache,could,not,have,been,resolved,for,context,get,operation,return,cache
AbstractCacheInterceptor -> static Cache extractFrom(Collection<? extends Cache> caches);1396865240;Convert the collection of caches in a single expected element._<p>Throw an {@link IllegalStateException} if the collection holds more than one element_@return the singe element or {@code null} if the collection is empty;static Cache extractFrom(Collection<? extends Cache> caches) {_		if (caches == null || caches.size() == 0) {_			return null__		}_		else if (caches.size() == 1) {_			return caches.iterator().next()__		}_		else {_			throw new IllegalStateException("Unsupported cache resolution result "_					+ caches + " JSR-107 only supports a single cache.")__		}_	};convert,the,collection,of,caches,in,a,single,expected,element,p,throw,an,link,illegal,state,exception,if,the,collection,holds,more,than,one,element,return,the,singe,element,or,code,null,if,the,collection,is,empty;static,cache,extract,from,collection,extends,cache,caches,if,caches,null,caches,size,0,return,null,else,if,caches,size,1,return,caches,iterator,next,else,throw,new,illegal,state,exception,unsupported,cache,resolution,result,caches,jsr,107,only,supports,a,single,cache
AbstractCacheInterceptor -> static Cache extractFrom(Collection<? extends Cache> caches);1400596774;Convert the collection of caches in a single expected element._<p>Throw an {@link IllegalStateException} if the collection holds more than one element_@return the singe element or {@code null} if the collection is empty;static Cache extractFrom(Collection<? extends Cache> caches) {_		if (caches == null || caches.size() == 0) {_			return null__		}_		else if (caches.size() == 1) {_			return caches.iterator().next()__		}_		else {_			throw new IllegalStateException("Unsupported cache resolution result "_					+ caches + " JSR-107 only supports a single cache.")__		}_	};convert,the,collection,of,caches,in,a,single,expected,element,p,throw,an,link,illegal,state,exception,if,the,collection,holds,more,than,one,element,return,the,singe,element,or,code,null,if,the,collection,is,empty;static,cache,extract,from,collection,extends,cache,caches,if,caches,null,caches,size,0,return,null,else,if,caches,size,1,return,caches,iterator,next,else,throw,new,illegal,state,exception,unsupported,cache,resolution,result,caches,jsr,107,only,supports,a,single,cache
AbstractCacheInterceptor -> static Cache extractFrom(Collection<? extends Cache> caches);1406128099;Convert the collection of caches in a single expected element._<p>Throw an {@link IllegalStateException} if the collection holds more than one element_@return the singe element or {@code null} if the collection is empty;static Cache extractFrom(Collection<? extends Cache> caches) {_		if (caches == null || caches.size() == 0) {_			return null__		}_		else if (caches.size() == 1) {_			return caches.iterator().next()__		}_		else {_			throw new IllegalStateException("Unsupported cache resolution result "_					+ caches + " JSR-107 only supports a single cache.")__		}_	};convert,the,collection,of,caches,in,a,single,expected,element,p,throw,an,link,illegal,state,exception,if,the,collection,holds,more,than,one,element,return,the,singe,element,or,code,null,if,the,collection,is,empty;static,cache,extract,from,collection,extends,cache,caches,if,caches,null,caches,size,0,return,null,else,if,caches,size,1,return,caches,iterator,next,else,throw,new,illegal,state,exception,unsupported,cache,resolution,result,caches,jsr,107,only,supports,a,single,cache
AbstractCacheInterceptor -> static Cache extractFrom(Collection<? extends Cache> caches);1414826808;Convert the collection of caches in a single expected element._<p>Throw an {@link IllegalStateException} if the collection holds more than one element_@return the singe element or {@code null} if the collection is empty;static Cache extractFrom(Collection<? extends Cache> caches) {_		if (CollectionUtils.isEmpty(caches)) {_			return null__		}_		else if (caches.size() == 1) {_			return caches.iterator().next()__		}_		else {_			throw new IllegalStateException("Unsupported cache resolution result " + caches +_					": JSR-107 only supports a single cache.")__		}_	};convert,the,collection,of,caches,in,a,single,expected,element,p,throw,an,link,illegal,state,exception,if,the,collection,holds,more,than,one,element,return,the,singe,element,or,code,null,if,the,collection,is,empty;static,cache,extract,from,collection,extends,cache,caches,if,collection,utils,is,empty,caches,return,null,else,if,caches,size,1,return,caches,iterator,next,else,throw,new,illegal,state,exception,unsupported,cache,resolution,result,caches,jsr,107,only,supports,a,single,cache
AbstractCacheInterceptor -> static Cache extractFrom(Collection<? extends Cache> caches);1470818688;Convert the collection of caches in a single expected element._<p>Throw an {@link IllegalStateException} if the collection holds more than one element_@return the single element or {@code null} if the collection is empty;static Cache extractFrom(Collection<? extends Cache> caches) {_		if (CollectionUtils.isEmpty(caches)) {_			return null__		}_		else if (caches.size() == 1) {_			return caches.iterator().next()__		}_		else {_			throw new IllegalStateException("Unsupported cache resolution result " + caches +_					": JSR-107 only supports a single cache.")__		}_	};convert,the,collection,of,caches,in,a,single,expected,element,p,throw,an,link,illegal,state,exception,if,the,collection,holds,more,than,one,element,return,the,single,element,or,code,null,if,the,collection,is,empty;static,cache,extract,from,collection,extends,cache,caches,if,collection,utils,is,empty,caches,return,null,else,if,caches,size,1,return,caches,iterator,next,else,throw,new,illegal,state,exception,unsupported,cache,resolution,result,caches,jsr,107,only,supports,a,single,cache
