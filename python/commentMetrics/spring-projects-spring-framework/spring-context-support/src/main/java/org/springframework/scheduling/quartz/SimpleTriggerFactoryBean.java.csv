commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the trigger's name.  */ ;/**  * Specify the trigger's name.  */ public void setName(String name) {     this.name = name. }
true;public;1;3;/**  * Specify the trigger's group.  */ ;/**  * Specify the trigger's group.  */ public void setGroup(String group) {     this.group = group. }
true;public;1;3;/**  * Set the JobDetail that this trigger should be associated with.  */ ;/**  * Set the JobDetail that this trigger should be associated with.  */ public void setJobDetail(JobDetail jobDetail) {     this.jobDetail = jobDetail. }
true;public;1;3;/**  * Set the trigger's JobDataMap.  * @see #setJobDataAsMap  */ ;/**  * Set the trigger's JobDataMap.  * @see #setJobDataAsMap  */ public void setJobDataMap(JobDataMap jobDataMap) {     this.jobDataMap = jobDataMap. }
true;public;0;3;/**  * Return the trigger's JobDataMap.  */ ;/**  * Return the trigger's JobDataMap.  */ public JobDataMap getJobDataMap() {     return this.jobDataMap. }
true;public;1;3;/**  * Register objects in the JobDataMap via a given Map.  * <p>These objects will be available to this Trigger only,  * in contrast to objects in the JobDetail's data map.  * @param jobDataAsMap a Map with String keys and any objects as values  * (for example Spring-managed beans)  */ ;/**  * Register objects in the JobDataMap via a given Map.  * <p>These objects will be available to this Trigger only,  * in contrast to objects in the JobDetail's data map.  * @param jobDataAsMap a Map with String keys and any objects as values  * (for example Spring-managed beans)  */ public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {     this.jobDataMap.putAll(jobDataAsMap). }
true;public;1;3;/**  * Set a specific start time for the trigger.  * <p>Note that a dynamically computed {@link #setStartDelay} specification  * overrides a static timestamp set here.  */ ;/**  * Set a specific start time for the trigger.  * <p>Note that a dynamically computed {@link #setStartDelay} specification  * overrides a static timestamp set here.  */ public void setStartTime(Date startTime) {     this.startTime = startTime. }
true;public;1;4;/**  * Set the start delay in milliseconds.  * <p>The start delay is added to the current system time (when the bean starts)  * to control the start time of the trigger.  * @see #setStartTime  */ ;/**  * Set the start delay in milliseconds.  * <p>The start delay is added to the current system time (when the bean starts)  * to control the start time of the trigger.  * @see #setStartTime  */ public void setStartDelay(long startDelay) {     Assert.isTrue(startDelay >= 0, "Start delay cannot be negative").     this.startDelay = startDelay. }
true;public;1;3;/**  * Specify the interval between execution times of this trigger.  */ ;/**  * Specify the interval between execution times of this trigger.  */ public void setRepeatInterval(long repeatInterval) {     this.repeatInterval = repeatInterval. }
true;public;1;3;/**  * Specify the number of times this trigger is supposed to fire.  * <p>Default is to repeat indefinitely.  */ ;/**  * Specify the number of times this trigger is supposed to fire.  * <p>Default is to repeat indefinitely.  */ public void setRepeatCount(int repeatCount) {     this.repeatCount = repeatCount. }
true;public;1;3;/**  * Specify the priority of this trigger.  */ ;/**  * Specify the priority of this trigger.  */ public void setPriority(int priority) {     this.priority = priority. }
true;public;1;3;/**  * Specify a misfire instruction for this trigger.  */ ;/**  * Specify a misfire instruction for this trigger.  */ public void setMisfireInstruction(int misfireInstruction) {     this.misfireInstruction = misfireInstruction. }
true;public;1;3;/**  * Set the misfire instruction via the name of the corresponding  * constant in the {@link org.quartz.SimpleTrigger} class.  * Default is {@code MISFIRE_INSTRUCTION_SMART_POLICY}.  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_FIRE_NOW  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT  * @see org.quartz.Trigger#MISFIRE_INSTRUCTION_SMART_POLICY  */ ;/**  * Set the misfire instruction via the name of the corresponding  * constant in the {@link org.quartz.SimpleTrigger} class.  * Default is {@code MISFIRE_INSTRUCTION_SMART_POLICY}.  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_FIRE_NOW  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT  * @see org.quartz.SimpleTrigger#MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT  * @see org.quartz.Trigger#MISFIRE_INSTRUCTION_SMART_POLICY  */ public void setMisfireInstructionName(String constantName) {     this.misfireInstruction = constants.asNumber(constantName).intValue(). }
true;public;1;3;/**  * Associate a textual description with this trigger.  */ ;/**  * Associate a textual description with this trigger.  */ public void setDescription(String description) {     this.description = description. }
false;public;1;4;;@Override public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;30;;@Override public void afterPropertiesSet() {     if (this.name == null) {         this.name = this.beanName.     }     if (this.group == null) {         this.group = Scheduler.DEFAULT_GROUP.     }     if (this.jobDetail != null) {         this.jobDataMap.put("jobDetail", this.jobDetail).     }     if (this.startDelay > 0 || this.startTime == null) {         this.startTime = new Date(System.currentTimeMillis() + this.startDelay).     }     SimpleTriggerImpl sti = new SimpleTriggerImpl().     sti.setName(this.name != null ? this.name : toString()).     sti.setGroup(this.group).     if (this.jobDetail != null) {         sti.setJobKey(this.jobDetail.getKey()).     }     sti.setJobDataMap(this.jobDataMap).     sti.setStartTime(this.startTime).     sti.setRepeatInterval(this.repeatInterval).     sti.setRepeatCount(this.repeatCount).     sti.setPriority(this.priority).     sti.setMisfireInstruction(this.misfireInstruction).     sti.setDescription(this.description).     this.simpleTrigger = sti. }
false;public;0;5;;@Override @Nullable public SimpleTrigger getObject() {     return this.simpleTrigger. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return SimpleTrigger.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
