commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;8;/**  * Generate a key for the specified invocation.  * @param context the context of the invocation  * @return the key to use  */ ;/**  * Generate a key for the specified invocation.  * @param context the context of the invocation  * @return the key to use  */ protected Object generateKey(CacheOperationInvocationContext<O> context) {     KeyGenerator keyGenerator = context.getOperation().getKeyGenerator().     Object key = keyGenerator.generate(context.getTarget(), context.getMethod(), context.getArgs()).     if (logger.isTraceEnabled()) {         logger.trace("Computed cache key " + key + " for operation " + context.getOperation()).     }     return key. }
true;protected;1;3;/**  * Create a {@link CacheKeyInvocationContext} based on the specified invocation.  * @param context the context of the invocation.  * @return the related {@code CacheKeyInvocationContext}  */ ;/**  * Create a {@link CacheKeyInvocationContext} based on the specified invocation.  * @param context the context of the invocation.  * @return the related {@code CacheKeyInvocationContext}  */ protected CacheKeyInvocationContext<A> createCacheKeyInvocationContext(CacheOperationInvocationContext<O> context) {     return new DefaultCacheKeyInvocationContext<>(context.getOperation(), context.getTarget(), context.getArgs()). }
