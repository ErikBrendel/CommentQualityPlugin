# id;timestamp;commentText;codeText;commentWords;codeWords
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1353877115;Set a CacheManager from which to retrieve a named Cache instance._By default, <code>CacheManager.getInstance()</code> will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EHCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,code,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,ehcache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1356735495;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EHCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,ehcache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1357119239;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EHCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,ehcache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1362408075;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1363730885;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1368482696;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1379136828;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1385412762;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1385978527;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1386031044;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1386779102;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1388404355;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1395953963;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1405519323;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1405524934;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1408382740;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1467667352;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1467988104;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1484252281;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1498780456;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1502974979;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1506097334;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setCacheManager(CacheManager cacheManager);1530174524;Set a CacheManager from which to retrieve a named Cache instance._By default, {@code CacheManager.getInstance()} will be called._<p>Note that in particular for persistent caches, it is advisable to_properly handle the shutdown of the CacheManager: Set up a separate_EhCacheManagerFactoryBean and pass a reference to this bean property._<p>A separate EhCacheManagerFactoryBean is also necessary for loading_EhCache configuration from a non-default config location._@see EhCacheManagerFactoryBean_@see net.sf.ehcache.CacheManager#getInstance;public void setCacheManager(CacheManager cacheManager) {_		this.cacheManager = cacheManager__	};set,a,cache,manager,from,which,to,retrieve,a,named,cache,instance,by,default,code,cache,manager,get,instance,will,be,called,p,note,that,in,particular,for,persistent,caches,it,is,advisable,to,properly,handle,the,shutdown,of,the,cache,manager,set,up,a,separate,eh,cache,manager,factory,bean,and,pass,a,reference,to,this,bean,property,p,a,separate,eh,cache,manager,factory,bean,is,also,necessary,for,loading,eh,cache,configuration,from,a,non,default,config,location,see,eh,cache,manager,factory,bean,see,net,sf,ehcache,cache,manager,get,instance;public,void,set,cache,manager,cache,manager,cache,manager,this,cache,manager,cache,manager
EhCacheFactoryBean -> public void setOverflowToDisk(boolean overflowToDisk);1353877115;Set whether elements can overflow to disk when the in-memory cache_has reached the maximum size limit. Default is "true".;public void setOverflowToDisk(boolean overflowToDisk) {_		this.overflowToDisk = overflowToDisk__	};set,whether,elements,can,overflow,to,disk,when,the,in,memory,cache,has,reached,the,maximum,size,limit,default,is,true;public,void,set,overflow,to,disk,boolean,overflow,to,disk,this,overflow,to,disk,overflow,to,disk
EhCacheFactoryBean -> public void setOverflowToDisk(boolean overflowToDisk);1356735495;Set whether elements can overflow to disk when the in-memory cache_has reached the maximum size limit. Default is "true".;public void setOverflowToDisk(boolean overflowToDisk) {_		this.overflowToDisk = overflowToDisk__	};set,whether,elements,can,overflow,to,disk,when,the,in,memory,cache,has,reached,the,maximum,size,limit,default,is,true;public,void,set,overflow,to,disk,boolean,overflow,to,disk,this,overflow,to,disk,overflow,to,disk
EhCacheFactoryBean -> public void setOverflowToDisk(boolean overflowToDisk);1357119239;Set whether elements can overflow to disk when the in-memory cache_has reached the maximum size limit. Default is "true".;public void setOverflowToDisk(boolean overflowToDisk) {_		this.overflowToDisk = overflowToDisk__	};set,whether,elements,can,overflow,to,disk,when,the,in,memory,cache,has,reached,the,maximum,size,limit,default,is,true;public,void,set,overflow,to,disk,boolean,overflow,to,disk,this,overflow,to,disk,overflow,to,disk
EhCacheFactoryBean -> public void setOverflowToDisk(boolean overflowToDisk);1362408075;Set whether elements can overflow to disk when the in-memory cache_has reached the maximum size limit. Default is "true".;public void setOverflowToDisk(boolean overflowToDisk) {_		this.overflowToDisk = overflowToDisk__	};set,whether,elements,can,overflow,to,disk,when,the,in,memory,cache,has,reached,the,maximum,size,limit,default,is,true;public,void,set,overflow,to,disk,boolean,overflow,to,disk,this,overflow,to,disk,overflow,to,disk
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1353877115;Set an EHCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,ehcache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1356735495;Set an EHCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,ehcache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1357119239;Set an EHCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,ehcache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1362408075;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1363730885;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1368482696;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1379136828;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1385412762;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1385978527;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1386031044;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1386779102;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1388404355;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1395953963;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1405519323;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1405524934;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1408382740;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1467667352;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1467988104;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1484252281;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1498780456;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1502974979;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1506097334;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader);1530174524;Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}_for this cache, if any.;public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {_		this.bootstrapCacheLoader = bootstrapCacheLoader__	};set,an,eh,cache,link,net,sf,ehcache,bootstrap,bootstrap,cache,loader,for,this,cache,if,any;public,void,set,bootstrap,cache,loader,bootstrap,cache,loader,bootstrap,cache,loader,this,bootstrap,cache,loader,bootstrap,cache,loader
EhCacheFactoryBean -> public void setCacheName(String cacheName);1353877115;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		this.cacheName = cacheName__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1356735495;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		this.cacheName = cacheName__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1357119239;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		this.cacheName = cacheName__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1362408075;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		this.cacheName = cacheName__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,this,cache,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1363730885;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1368482696;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1379136828;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1385412762;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1385978527;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1386031044;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1386779102;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1388404355;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1395953963;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1405519323;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1405524934;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1408382740;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1467667352;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1467988104;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1484252281;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1498780456;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1502974979;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1506097334;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheName(String cacheName);1530174524;Set a name for which to retrieve or create a cache instance._Default is the bean name of this EhCacheFactoryBean.;public void setCacheName(String cacheName) {_		setName(cacheName)__	};set,a,name,for,which,to,retrieve,or,create,a,cache,instance,default,is,the,bean,name,of,this,eh,cache,factory,bean;public,void,set,cache,name,string,cache,name,set,name,cache,name
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1353877115;Set an EHCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EHCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,ehcache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,ehcache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1356735495;Set an EHCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EHCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,ehcache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,ehcache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1357119239;Set an EHCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EHCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,ehcache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,ehcache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1362408075;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1363730885;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1368482696;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1379136828;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1385412762;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1385978527;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1386031044;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1386779102;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1388404355;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1395953963;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1405519323;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1405524934;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1408382740;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1467667352;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1467988104;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1484252281;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1498780456;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1502974979;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1506097334;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory);1530174524;Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}_to use for a self-populating cache. If such a factory is specified,_the cache will be decorated with EhCache's_{@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}._<p>The specified factory can be of type_{@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},_which will lead to the use of an_{@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}._<p>Note: Any such self-populating cache is automatically a blocking cache._@see net.sf.ehcache.constructs.blocking.SelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache_@see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory;public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {_		this.cacheEntryFactory = cacheEntryFactory__	};set,an,eh,cache,link,net,sf,ehcache,constructs,blocking,cache,entry,factory,to,use,for,a,self,populating,cache,if,such,a,factory,is,specified,the,cache,will,be,decorated,with,eh,cache,s,link,net,sf,ehcache,constructs,blocking,self,populating,cache,p,the,specified,factory,can,be,of,type,link,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory,which,will,lead,to,the,use,of,an,link,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,p,note,any,such,self,populating,cache,is,automatically,a,blocking,cache,see,net,sf,ehcache,constructs,blocking,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,self,populating,cache,see,net,sf,ehcache,constructs,blocking,updating,cache,entry,factory;public,void,set,cache,entry,factory,cache,entry,factory,cache,entry,factory,this,cache,entry,factory,cache,entry,factory
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1353877115;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1356735495;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1357119239;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1362408075;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1363730885;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1368482696;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1379136828;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1385412762;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1385978527;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1386031044;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1386779102;Set whether to enable EhCache's sampled statistics on this cache._@see net.sf.ehcache.Cache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,see,net,sf,ehcache,cache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1388404355;Set whether to enable EhCache's sampled statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1395953963;Set whether to enable EhCache's sampled statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1405519323;Set whether to enable EhCache's sampled statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1405524934;Set whether to enable EhCache's sampled statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled);1408382740;Set whether to enable EhCache's sampled statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setSampledStatisticsEnabled;public void setSampledStatisticsEnabled(boolean sampledStatisticsEnabled) {_		this.sampledStatisticsEnabled = sampledStatisticsEnabled__	};set,whether,to,enable,eh,cache,s,sampled,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,sampled,statistics,enabled;public,void,set,sampled,statistics,enabled,boolean,sampled,statistics,enabled,this,sampled,statistics,enabled,sampled,statistics,enabled
EhCacheFactoryBean -> protected Cache createCache();1353877115;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		_		return (!this.clearOnFlush) ?_				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,_						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,_						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,_						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize,_						this.clearOnFlush) :_				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,_						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,_						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,_						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,this,clear,on,flush,new,cache,this,cache,name,this,max,elements,in,memory,this,memory,store,eviction,policy,this,overflow,to,disk,null,this,eternal,this,time,to,live,this,time,to,idle,this,disk,persistent,this,disk,expiry,thread,interval,seconds,null,this,bootstrap,cache,loader,this,max,elements,on,disk,this,disk,spool,buffer,size,this,clear,on,flush,new,cache,this,cache,name,this,max,elements,in,memory,this,memory,store,eviction,policy,this,overflow,to,disk,null,this,eternal,this,time,to,live,this,time,to,idle,this,disk,persistent,this,disk,expiry,thread,interval,seconds,null,this,bootstrap,cache,loader,this,max,elements,on,disk,this,disk,spool,buffer,size
EhCacheFactoryBean -> protected Cache createCache();1356735495;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		_		return (!this.clearOnFlush) ?_				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,_						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,_						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,_						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize,_						this.clearOnFlush) :_				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,_						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,_						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,_						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,this,clear,on,flush,new,cache,this,cache,name,this,max,elements,in,memory,this,memory,store,eviction,policy,this,overflow,to,disk,null,this,eternal,this,time,to,live,this,time,to,idle,this,disk,persistent,this,disk,expiry,thread,interval,seconds,null,this,bootstrap,cache,loader,this,max,elements,on,disk,this,disk,spool,buffer,size,this,clear,on,flush,new,cache,this,cache,name,this,max,elements,in,memory,this,memory,store,eviction,policy,this,overflow,to,disk,null,this,eternal,this,time,to,live,this,time,to,idle,this,disk,persistent,this,disk,expiry,thread,interval,seconds,null,this,bootstrap,cache,loader,this,max,elements,on,disk,this,disk,spool,buffer,size
EhCacheFactoryBean -> protected Cache createCache();1357119239;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		_		return (!this.clearOnFlush) ?_				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,_						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,_						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,_						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize,_						this.clearOnFlush) :_				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,_						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,_						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,_						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,this,clear,on,flush,new,cache,this,cache,name,this,max,elements,in,memory,this,memory,store,eviction,policy,this,overflow,to,disk,null,this,eternal,this,time,to,live,this,time,to,idle,this,disk,persistent,this,disk,expiry,thread,interval,seconds,null,this,bootstrap,cache,loader,this,max,elements,on,disk,this,disk,spool,buffer,size,this,clear,on,flush,new,cache,this,cache,name,this,max,elements,in,memory,this,memory,store,eviction,policy,this,overflow,to,disk,null,this,eternal,this,time,to,live,this,time,to,idle,this,disk,persistent,this,disk,expiry,thread,interval,seconds,null,this,bootstrap,cache,loader,this,max,elements,on,disk,this,disk,spool,buffer,size
EhCacheFactoryBean -> protected Cache createCache();1362408075;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		_		return (!this.clearOnFlush) ?_				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,_						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,_						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,_						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize,_						this.clearOnFlush) :_				new Cache(this.cacheName, this.maxElementsInMemory, this.memoryStoreEvictionPolicy,_						this.overflowToDisk, null, this.eternal, this.timeToLive, this.timeToIdle,_						this.diskPersistent, this.diskExpiryThreadIntervalSeconds, null,_						this.bootstrapCacheLoader, this.maxElementsOnDisk, this.diskSpoolBufferSize)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,this,clear,on,flush,new,cache,this,cache,name,this,max,elements,in,memory,this,memory,store,eviction,policy,this,overflow,to,disk,null,this,eternal,this,time,to,live,this,time,to,idle,this,disk,persistent,this,disk,expiry,thread,interval,seconds,null,this,bootstrap,cache,loader,this,max,elements,on,disk,this,disk,spool,buffer,size,this,clear,on,flush,new,cache,this,cache,name,this,max,elements,in,memory,this,memory,store,eviction,policy,this,overflow,to,disk,null,this,eternal,this,time,to,live,this,time,to,idle,this,disk,persistent,this,disk,expiry,thread,interval,seconds,null,this,bootstrap,cache,loader,this,max,elements,on,disk,this,disk,spool,buffer,size
EhCacheFactoryBean -> protected Cache createCache();1363730885;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1368482696;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1379136828;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1385412762;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1385978527;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1386031044;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1386779102;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1388404355;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1395953963;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1405519323;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1405524934;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1408382740;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1467667352;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1467988104;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1484252281;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1498780456;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1502974979;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1506097334;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> protected Cache createCache();1530174524;Create a raw Cache object based on the configuration of this FactoryBean.;protected Cache createCache() {_		return new Cache(this)__	};create,a,raw,cache,object,based,on,the,configuration,of,this,factory,bean;protected,cache,create,cache,return,new,cache,this
EhCacheFactoryBean -> public void setMaxElementsOnDisk(int maxElementsOnDisk);1353877115;Specify the maximum number of cached objects on disk._Default is 10000000 elements.;public void setMaxElementsOnDisk(int maxElementsOnDisk) {_		this.maxElementsOnDisk = maxElementsOnDisk__	};specify,the,maximum,number,of,cached,objects,on,disk,default,is,10000000,elements;public,void,set,max,elements,on,disk,int,max,elements,on,disk,this,max,elements,on,disk,max,elements,on,disk
EhCacheFactoryBean -> public void setMaxElementsOnDisk(int maxElementsOnDisk);1356735495;Specify the maximum number of cached objects on disk._Default is 10000000 elements.;public void setMaxElementsOnDisk(int maxElementsOnDisk) {_		this.maxElementsOnDisk = maxElementsOnDisk__	};specify,the,maximum,number,of,cached,objects,on,disk,default,is,10000000,elements;public,void,set,max,elements,on,disk,int,max,elements,on,disk,this,max,elements,on,disk,max,elements,on,disk
EhCacheFactoryBean -> public void setMaxElementsOnDisk(int maxElementsOnDisk);1357119239;Specify the maximum number of cached objects on disk._Default is 10000000 elements.;public void setMaxElementsOnDisk(int maxElementsOnDisk) {_		this.maxElementsOnDisk = maxElementsOnDisk__	};specify,the,maximum,number,of,cached,objects,on,disk,default,is,10000000,elements;public,void,set,max,elements,on,disk,int,max,elements,on,disk,this,max,elements,on,disk,max,elements,on,disk
EhCacheFactoryBean -> public void setMaxElementsOnDisk(int maxElementsOnDisk);1362408075;Specify the maximum number of cached objects on disk._Default is 10000000 elements.;public void setMaxElementsOnDisk(int maxElementsOnDisk) {_		this.maxElementsOnDisk = maxElementsOnDisk__	};specify,the,maximum,number,of,cached,objects,on,disk,default,is,10000000,elements;public,void,set,max,elements,on,disk,int,max,elements,on,disk,this,max,elements,on,disk,max,elements,on,disk
EhCacheFactoryBean -> public void setDiskPersistent(boolean diskPersistent);1353877115;Set whether the disk store persists between restarts of the Virtual Machine._Default is "false".;public void setDiskPersistent(boolean diskPersistent) {_		this.diskPersistent = diskPersistent__	};set,whether,the,disk,store,persists,between,restarts,of,the,virtual,machine,default,is,false;public,void,set,disk,persistent,boolean,disk,persistent,this,disk,persistent,disk,persistent
EhCacheFactoryBean -> public void setDiskPersistent(boolean diskPersistent);1356735495;Set whether the disk store persists between restarts of the Virtual Machine._Default is "false".;public void setDiskPersistent(boolean diskPersistent) {_		this.diskPersistent = diskPersistent__	};set,whether,the,disk,store,persists,between,restarts,of,the,virtual,machine,default,is,false;public,void,set,disk,persistent,boolean,disk,persistent,this,disk,persistent,disk,persistent
EhCacheFactoryBean -> public void setDiskPersistent(boolean diskPersistent);1357119239;Set whether the disk store persists between restarts of the Virtual Machine._Default is "false".;public void setDiskPersistent(boolean diskPersistent) {_		this.diskPersistent = diskPersistent__	};set,whether,the,disk,store,persists,between,restarts,of,the,virtual,machine,default,is,false;public,void,set,disk,persistent,boolean,disk,persistent,this,disk,persistent,disk,persistent
EhCacheFactoryBean -> public void setDiskPersistent(boolean diskPersistent);1362408075;Set whether the disk store persists between restarts of the Virtual Machine._Default is "false".;public void setDiskPersistent(boolean diskPersistent) {_		this.diskPersistent = diskPersistent__	};set,whether,the,disk,store,persists,between,restarts,of,the,virtual,machine,default,is,false;public,void,set,disk,persistent,boolean,disk,persistent,this,disk,persistent,disk,persistent
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1353877115;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1356735495;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1357119239;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1362408075;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1363730885;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1368482696;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1379136828;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1385412762;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1385978527;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1386031044;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1386779102;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1388404355;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1395953963;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1405519323;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1405524934;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1408382740;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1467667352;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1467988104;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1484252281;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1498780456;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1502974979;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1506097334;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setDisabled(boolean disabled);1530174524;Set whether this cache should be marked as disabled._@see net.sf.ehcache.Cache#setDisabled;public void setDisabled(boolean disabled) {_		this.disabled = disabled__	};set,whether,this,cache,should,be,marked,as,disabled,see,net,sf,ehcache,cache,set,disabled;public,void,set,disabled,boolean,disabled,this,disabled,disabled
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1353877115;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1356735495;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1357119239;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1362408075;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1363730885;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1368482696;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1379136828;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1385412762;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1385978527;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1386031044;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1386779102;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1388404355;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1395953963;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1405519323;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1405524934;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1408382740;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1467667352;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1467988104;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1484252281;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1498780456;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1502974979;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1506097334;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> public void setBlocking(boolean blocking);1530174524;Set whether to use a blocking cache that lets read attempts block_until the requested element is created._<p>If you intend to build a self-populating blocking cache,_consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}._@see net.sf.ehcache.constructs.blocking.BlockingCache_@see #setCacheEntryFactory;public void setBlocking(boolean blocking) {_		this.blocking = blocking__	};set,whether,to,use,a,blocking,cache,that,lets,read,attempts,block,until,the,requested,element,is,created,p,if,you,intend,to,build,a,self,populating,blocking,cache,consider,specifying,a,link,set,cache,entry,factory,cache,entry,factory,see,net,sf,ehcache,constructs,blocking,blocking,cache,see,set,cache,entry,factory;public,void,set,blocking,boolean,blocking,this,blocking,blocking
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1356735495;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1368482696;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1379136828;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1385412762;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1385978527;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1386031044;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1386779102;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1388404355;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1395953963;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1405519323;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1405524934;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1408382740;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1467667352;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1467988104;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1484252281;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1498780456;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1502974979;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1506097334;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> @Override 	public Class<? extends Ehcache> getObjectType();1530174524;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;@Override_	public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;override,public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> public Class<? extends Ehcache> getObjectType();1353877115;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> public Class<? extends Ehcache> getObjectType();1357119239;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> public Class<? extends Ehcache> getObjectType();1362408075;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> public Class<? extends Ehcache> getObjectType();1363730885;Predict the particular {@code Ehcache} implementation that will be returned from_{@link #getObject()} based on logic in {@link #createCache()} and_{@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.;public Class<? extends Ehcache> getObjectType() {_		if (this.cache != null) {_			return this.cache.getClass()__		}_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return UpdatingSelfPopulatingCache.class__			}_			else {_				return SelfPopulatingCache.class__			}_		}_		if (this.blocking) {_			return BlockingCache.class__		}_		return Cache.class__	};predict,the,particular,code,ehcache,implementation,that,will,be,returned,from,link,get,object,based,on,logic,in,link,create,cache,and,link,decorate,cache,ehcache,as,orchestrated,by,link,after,properties,set;public,class,extends,ehcache,get,object,type,if,this,cache,null,return,this,cache,get,class,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,updating,self,populating,cache,class,else,return,self,populating,cache,class,if,this,blocking,return,blocking,cache,class,return,cache,class
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1353877115;Set the time in seconds to live for an element before it expires,_i.e. the maximum time between creation time and when an element expires._<p>This is only used if the element is not eternal. Default is 120 seconds.;public void setTimeToLive(int timeToLive) {_		this.timeToLive = timeToLive__	};set,the,time,in,seconds,to,live,for,an,element,before,it,expires,i,e,the,maximum,time,between,creation,time,and,when,an,element,expires,p,this,is,only,used,if,the,element,is,not,eternal,default,is,120,seconds;public,void,set,time,to,live,int,time,to,live,this,time,to,live,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1356735495;Set the time in seconds to live for an element before it expires,_i.e. the maximum time between creation time and when an element expires._<p>This is only used if the element is not eternal. Default is 120 seconds.;public void setTimeToLive(int timeToLive) {_		this.timeToLive = timeToLive__	};set,the,time,in,seconds,to,live,for,an,element,before,it,expires,i,e,the,maximum,time,between,creation,time,and,when,an,element,expires,p,this,is,only,used,if,the,element,is,not,eternal,default,is,120,seconds;public,void,set,time,to,live,int,time,to,live,this,time,to,live,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1357119239;Set the time in seconds to live for an element before it expires,_i.e. the maximum time between creation time and when an element expires._<p>This is only used if the element is not eternal. Default is 120 seconds.;public void setTimeToLive(int timeToLive) {_		this.timeToLive = timeToLive__	};set,the,time,in,seconds,to,live,for,an,element,before,it,expires,i,e,the,maximum,time,between,creation,time,and,when,an,element,expires,p,this,is,only,used,if,the,element,is,not,eternal,default,is,120,seconds;public,void,set,time,to,live,int,time,to,live,this,time,to,live,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1362408075;Set the time in seconds to live for an element before it expires,_i.e. the maximum time between creation time and when an element expires._<p>This is only used if the element is not eternal. Default is 120 seconds.;public void setTimeToLive(int timeToLive) {_		this.timeToLive = timeToLive__	};set,the,time,in,seconds,to,live,for,an,element,before,it,expires,i,e,the,maximum,time,between,creation,time,and,when,an,element,expires,p,this,is,only,used,if,the,element,is,not,eternal,default,is,120,seconds;public,void,set,time,to,live,int,time,to,live,this,time,to,live,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1363730885;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1368482696;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1379136828;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1385412762;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1385978527;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1386031044;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1386779102;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1388404355;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1395953963;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1405519323;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1405524934;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1408382740;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1467667352;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1467988104;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1484252281;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1498780456;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1502974979;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1506097334;@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> public void setTimeToLive(int timeToLive);1530174524;Set the time to live._@see #setTimeToLiveSeconds(long);public void setTimeToLive(int timeToLive) {_		setTimeToLiveSeconds(timeToLive)__	};set,the,time,to,live,see,set,time,to,live,seconds,long;public,void,set,time,to,live,int,time,to,live,set,time,to,live,seconds,time,to,live
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1353877115;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1356735495;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1357119239;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1362408075;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1363730885;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1368482696;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1379136828;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1385412762;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1385978527;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1386031044;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1386779102;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1388404355;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1395953963;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1405519323;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1405524934;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1408382740;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1467667352;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1467988104;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1484252281;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1498780456;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1502974979;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1506097334;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> protected Ehcache decorateCache(Ehcache cache);1530174524;Decorate the given Cache, if necessary._@param cache the raw Cache object, based on the configuration of this FactoryBean_@return the (potentially decorated) cache object to be registered with the CacheManager;protected Ehcache decorateCache(Ehcache cache) {_		if (this.cacheEntryFactory != null) {_			if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {_				return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory)__			}_			else {_				return new SelfPopulatingCache(cache, this.cacheEntryFactory)__			}_		}_		if (this.blocking) {_			return new BlockingCache(cache)__		}_		return cache__	};decorate,the,given,cache,if,necessary,param,cache,the,raw,cache,object,based,on,the,configuration,of,this,factory,bean,return,the,potentially,decorated,cache,object,to,be,registered,with,the,cache,manager;protected,ehcache,decorate,cache,ehcache,cache,if,this,cache,entry,factory,null,if,this,cache,entry,factory,instanceof,updating,cache,entry,factory,return,new,updating,self,populating,cache,cache,updating,cache,entry,factory,this,cache,entry,factory,else,return,new,self,populating,cache,cache,this,cache,entry,factory,if,this,blocking,return,new,blocking,cache,cache,return,cache
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1353877115;Specify EHCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,ehcache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1356735495;Specify EHCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,ehcache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1357119239;Specify EHCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,ehcache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1362408075;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1363730885;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1368482696;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1379136828;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1385412762;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1385978527;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1386031044;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1386779102;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1388404355;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1395953963;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1405519323;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1405524934;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1408382740;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1467667352;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1467988104;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1484252281;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1498780456;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1502974979;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1506097334;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners);1530174524;Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}_to registered with this cache.;public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {_		this.cacheEventListeners = cacheEventListeners__	};specify,eh,cache,link,net,sf,ehcache,event,cache,event,listener,cache,event,listeners,to,registered,with,this,cache;public,void,set,cache,event,listeners,set,cache,event,listener,cache,event,listeners,this,cache,event,listeners,cache,event,listeners
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1353877115;Set the amount of memory to allocate the write buffer for puts to the disk store._Default is 0.;public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		this.diskSpoolBufferSize = diskSpoolBufferSize__	};set,the,amount,of,memory,to,allocate,the,write,buffer,for,puts,to,the,disk,store,default,is,0;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,this,disk,spool,buffer,size,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1356735495;Set the amount of memory to allocate the write buffer for puts to the disk store._Default is 0.;public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		this.diskSpoolBufferSize = diskSpoolBufferSize__	};set,the,amount,of,memory,to,allocate,the,write,buffer,for,puts,to,the,disk,store,default,is,0;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,this,disk,spool,buffer,size,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1357119239;Set the amount of memory to allocate the write buffer for puts to the disk store._Default is 0.;public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		this.diskSpoolBufferSize = diskSpoolBufferSize__	};set,the,amount,of,memory,to,allocate,the,write,buffer,for,puts,to,the,disk,store,default,is,0;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,this,disk,spool,buffer,size,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1362408075;Set the amount of memory to allocate the write buffer for puts to the disk store._Default is 0.;public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		this.diskSpoolBufferSize = diskSpoolBufferSize__	};set,the,amount,of,memory,to,allocate,the,write,buffer,for,puts,to,the,disk,store,default,is,0;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,this,disk,spool,buffer,size,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1363730885;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1368482696;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1379136828;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1385412762;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1385978527;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1386031044;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1386779102;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1388404355;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1395953963;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1405519323;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1405524934;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1408382740;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1467667352;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1467988104;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1484252281;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1498780456;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1502974979;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1506097334;@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setDiskSpoolBufferSize(int diskSpoolBufferSize);1530174524;Set the disk spool buffer size (in MB)._@see #setDiskSpoolBufferSizeMB(int);public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {_		setDiskSpoolBufferSizeMB(diskSpoolBufferSize)__	};set,the,disk,spool,buffer,size,in,mb,see,set,disk,spool,buffer,size,mb,int;public,void,set,disk,spool,buffer,size,int,disk,spool,buffer,size,set,disk,spool,buffer,size,mb,disk,spool,buffer,size
EhCacheFactoryBean -> public void setMemoryStoreEvictionPolicy(MemoryStoreEvictionPolicy memoryStoreEvictionPolicy);1353877115;Set the memory style eviction policy for this cache._<p>Supported values are "LRU", "LFU" and "FIFO", according to the_constants defined in EHCache's MemoryStoreEvictionPolicy class._Default is "LRU".;public void setMemoryStoreEvictionPolicy(MemoryStoreEvictionPolicy memoryStoreEvictionPolicy) {_		Assert.notNull(memoryStoreEvictionPolicy, "memoryStoreEvictionPolicy must not be null")__		this.memoryStoreEvictionPolicy = memoryStoreEvictionPolicy__	};set,the,memory,style,eviction,policy,for,this,cache,p,supported,values,are,lru,lfu,and,fifo,according,to,the,constants,defined,in,ehcache,s,memory,store,eviction,policy,class,default,is,lru;public,void,set,memory,store,eviction,policy,memory,store,eviction,policy,memory,store,eviction,policy,assert,not,null,memory,store,eviction,policy,memory,store,eviction,policy,must,not,be,null,this,memory,store,eviction,policy,memory,store,eviction,policy
EhCacheFactoryBean -> public void setMemoryStoreEvictionPolicy(MemoryStoreEvictionPolicy memoryStoreEvictionPolicy);1356735495;Set the memory style eviction policy for this cache._<p>Supported values are "LRU", "LFU" and "FIFO", according to the_constants defined in EHCache's MemoryStoreEvictionPolicy class._Default is "LRU".;public void setMemoryStoreEvictionPolicy(MemoryStoreEvictionPolicy memoryStoreEvictionPolicy) {_		Assert.notNull(memoryStoreEvictionPolicy, "memoryStoreEvictionPolicy must not be null")__		this.memoryStoreEvictionPolicy = memoryStoreEvictionPolicy__	};set,the,memory,style,eviction,policy,for,this,cache,p,supported,values,are,lru,lfu,and,fifo,according,to,the,constants,defined,in,ehcache,s,memory,store,eviction,policy,class,default,is,lru;public,void,set,memory,store,eviction,policy,memory,store,eviction,policy,memory,store,eviction,policy,assert,not,null,memory,store,eviction,policy,memory,store,eviction,policy,must,not,be,null,this,memory,store,eviction,policy,memory,store,eviction,policy
EhCacheFactoryBean -> public void setMemoryStoreEvictionPolicy(MemoryStoreEvictionPolicy memoryStoreEvictionPolicy);1357119239;Set the memory style eviction policy for this cache._<p>Supported values are "LRU", "LFU" and "FIFO", according to the_constants defined in EHCache's MemoryStoreEvictionPolicy class._Default is "LRU".;public void setMemoryStoreEvictionPolicy(MemoryStoreEvictionPolicy memoryStoreEvictionPolicy) {_		Assert.notNull(memoryStoreEvictionPolicy, "memoryStoreEvictionPolicy must not be null")__		this.memoryStoreEvictionPolicy = memoryStoreEvictionPolicy__	};set,the,memory,style,eviction,policy,for,this,cache,p,supported,values,are,lru,lfu,and,fifo,according,to,the,constants,defined,in,ehcache,s,memory,store,eviction,policy,class,default,is,lru;public,void,set,memory,store,eviction,policy,memory,store,eviction,policy,memory,store,eviction,policy,assert,not,null,memory,store,eviction,policy,memory,store,eviction,policy,must,not,be,null,this,memory,store,eviction,policy,memory,store,eviction,policy
EhCacheFactoryBean -> public void setMemoryStoreEvictionPolicy(MemoryStoreEvictionPolicy memoryStoreEvictionPolicy);1362408075;Set the memory style eviction policy for this cache._<p>Supported values are "LRU", "LFU" and "FIFO", according to the_constants defined in EhCache's MemoryStoreEvictionPolicy class._Default is "LRU".;public void setMemoryStoreEvictionPolicy(MemoryStoreEvictionPolicy memoryStoreEvictionPolicy) {_		Assert.notNull(memoryStoreEvictionPolicy, "memoryStoreEvictionPolicy must not be null")__		this.memoryStoreEvictionPolicy = memoryStoreEvictionPolicy__	};set,the,memory,style,eviction,policy,for,this,cache,p,supported,values,are,lru,lfu,and,fifo,according,to,the,constants,defined,in,eh,cache,s,memory,store,eviction,policy,class,default,is,lru;public,void,set,memory,store,eviction,policy,memory,store,eviction,policy,memory,store,eviction,policy,assert,not,null,memory,store,eviction,policy,memory,store,eviction,policy,must,not,be,null,this,memory,store,eviction,policy,memory,store,eviction,policy
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1353877115;Set the time in seconds to idle for an element before it expires, that is,_the maximum amount of time between accesses before an element expires._<p>This is only used if the element is not eternal. Default is 120 seconds.;public void setTimeToIdle(int timeToIdle) {_		this.timeToIdle = timeToIdle__	};set,the,time,in,seconds,to,idle,for,an,element,before,it,expires,that,is,the,maximum,amount,of,time,between,accesses,before,an,element,expires,p,this,is,only,used,if,the,element,is,not,eternal,default,is,120,seconds;public,void,set,time,to,idle,int,time,to,idle,this,time,to,idle,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1356735495;Set the time in seconds to idle for an element before it expires, that is,_the maximum amount of time between accesses before an element expires._<p>This is only used if the element is not eternal. Default is 120 seconds.;public void setTimeToIdle(int timeToIdle) {_		this.timeToIdle = timeToIdle__	};set,the,time,in,seconds,to,idle,for,an,element,before,it,expires,that,is,the,maximum,amount,of,time,between,accesses,before,an,element,expires,p,this,is,only,used,if,the,element,is,not,eternal,default,is,120,seconds;public,void,set,time,to,idle,int,time,to,idle,this,time,to,idle,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1357119239;Set the time in seconds to idle for an element before it expires, that is,_the maximum amount of time between accesses before an element expires._<p>This is only used if the element is not eternal. Default is 120 seconds.;public void setTimeToIdle(int timeToIdle) {_		this.timeToIdle = timeToIdle__	};set,the,time,in,seconds,to,idle,for,an,element,before,it,expires,that,is,the,maximum,amount,of,time,between,accesses,before,an,element,expires,p,this,is,only,used,if,the,element,is,not,eternal,default,is,120,seconds;public,void,set,time,to,idle,int,time,to,idle,this,time,to,idle,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1362408075;Set the time in seconds to idle for an element before it expires, that is,_the maximum amount of time between accesses before an element expires._<p>This is only used if the element is not eternal. Default is 120 seconds.;public void setTimeToIdle(int timeToIdle) {_		this.timeToIdle = timeToIdle__	};set,the,time,in,seconds,to,idle,for,an,element,before,it,expires,that,is,the,maximum,amount,of,time,between,accesses,before,an,element,expires,p,this,is,only,used,if,the,element,is,not,eternal,default,is,120,seconds;public,void,set,time,to,idle,int,time,to,idle,this,time,to,idle,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1363730885;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1368482696;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1379136828;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1385412762;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1385978527;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1386031044;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1386779102;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1388404355;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1395953963;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1405519323;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1405524934;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1408382740;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1467667352;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1467988104;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1484252281;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1498780456;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1502974979;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1506097334;@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setTimeToIdle(int timeToIdle);1530174524;Set the time to idle._@see #setTimeToIdleSeconds(long);public void setTimeToIdle(int timeToIdle) {_		setTimeToIdleSeconds(timeToIdle)__	};set,the,time,to,idle,see,set,time,to,idle,seconds,long;public,void,set,time,to,idle,int,time,to,idle,set,time,to,idle,seconds,time,to,idle
EhCacheFactoryBean -> public void setMaxElementsInMemory(int maxElementsInMemory);1353877115;Specify the maximum number of cached objects in memory._Default is 10000 elements.;public void setMaxElementsInMemory(int maxElementsInMemory) {_		this.maxElementsInMemory = maxElementsInMemory__	};specify,the,maximum,number,of,cached,objects,in,memory,default,is,10000,elements;public,void,set,max,elements,in,memory,int,max,elements,in,memory,this,max,elements,in,memory,max,elements,in,memory
EhCacheFactoryBean -> public void setMaxElementsInMemory(int maxElementsInMemory);1356735495;Specify the maximum number of cached objects in memory._Default is 10000 elements.;public void setMaxElementsInMemory(int maxElementsInMemory) {_		this.maxElementsInMemory = maxElementsInMemory__	};specify,the,maximum,number,of,cached,objects,in,memory,default,is,10000,elements;public,void,set,max,elements,in,memory,int,max,elements,in,memory,this,max,elements,in,memory,max,elements,in,memory
EhCacheFactoryBean -> public void setMaxElementsInMemory(int maxElementsInMemory);1357119239;Specify the maximum number of cached objects in memory._Default is 10000 elements.;public void setMaxElementsInMemory(int maxElementsInMemory) {_		this.maxElementsInMemory = maxElementsInMemory__	};specify,the,maximum,number,of,cached,objects,in,memory,default,is,10000,elements;public,void,set,max,elements,in,memory,int,max,elements,in,memory,this,max,elements,in,memory,max,elements,in,memory
EhCacheFactoryBean -> public void setMaxElementsInMemory(int maxElementsInMemory);1362408075;Specify the maximum number of cached objects in memory._Default is 10000 elements.;public void setMaxElementsInMemory(int maxElementsInMemory) {_		this.maxElementsInMemory = maxElementsInMemory__	};specify,the,maximum,number,of,cached,objects,in,memory,default,is,10000,elements;public,void,set,max,elements,in,memory,int,max,elements,in,memory,this,max,elements,in,memory,max,elements,in,memory
EhCacheFactoryBean -> public void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds);1353877115;Set the number of seconds between runs of the disk expiry thread._Default is 120 seconds.;public void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds) {_		this.diskExpiryThreadIntervalSeconds = diskExpiryThreadIntervalSeconds__	};set,the,number,of,seconds,between,runs,of,the,disk,expiry,thread,default,is,120,seconds;public,void,set,disk,expiry,thread,interval,seconds,int,disk,expiry,thread,interval,seconds,this,disk,expiry,thread,interval,seconds,disk,expiry,thread,interval,seconds
EhCacheFactoryBean -> public void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds);1356735495;Set the number of seconds between runs of the disk expiry thread._Default is 120 seconds.;public void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds) {_		this.diskExpiryThreadIntervalSeconds = diskExpiryThreadIntervalSeconds__	};set,the,number,of,seconds,between,runs,of,the,disk,expiry,thread,default,is,120,seconds;public,void,set,disk,expiry,thread,interval,seconds,int,disk,expiry,thread,interval,seconds,this,disk,expiry,thread,interval,seconds,disk,expiry,thread,interval,seconds
EhCacheFactoryBean -> public void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds);1357119239;Set the number of seconds between runs of the disk expiry thread._Default is 120 seconds.;public void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds) {_		this.diskExpiryThreadIntervalSeconds = diskExpiryThreadIntervalSeconds__	};set,the,number,of,seconds,between,runs,of,the,disk,expiry,thread,default,is,120,seconds;public,void,set,disk,expiry,thread,interval,seconds,int,disk,expiry,thread,interval,seconds,this,disk,expiry,thread,interval,seconds,disk,expiry,thread,interval,seconds
EhCacheFactoryBean -> public void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds);1362408075;Set the number of seconds between runs of the disk expiry thread._Default is 120 seconds.;public void setDiskExpiryThreadIntervalSeconds(int diskExpiryThreadIntervalSeconds) {_		this.diskExpiryThreadIntervalSeconds = diskExpiryThreadIntervalSeconds__	};set,the,number,of,seconds,between,runs,of,the,disk,expiry,thread,default,is,120,seconds;public,void,set,disk,expiry,thread,interval,seconds,int,disk,expiry,thread,interval,seconds,this,disk,expiry,thread,interval,seconds,disk,expiry,thread,interval,seconds
EhCacheFactoryBean -> public void setEternal(boolean eternal);1353877115;Set whether elements are considered as eternal. If "true", timeouts_are ignored and the element is never expired. Default is "false".;public void setEternal(boolean eternal) {_		this.eternal = eternal__	};set,whether,elements,are,considered,as,eternal,if,true,timeouts,are,ignored,and,the,element,is,never,expired,default,is,false;public,void,set,eternal,boolean,eternal,this,eternal,eternal
EhCacheFactoryBean -> public void setEternal(boolean eternal);1356735495;Set whether elements are considered as eternal. If "true", timeouts_are ignored and the element is never expired. Default is "false".;public void setEternal(boolean eternal) {_		this.eternal = eternal__	};set,whether,elements,are,considered,as,eternal,if,true,timeouts,are,ignored,and,the,element,is,never,expired,default,is,false;public,void,set,eternal,boolean,eternal,this,eternal,eternal
EhCacheFactoryBean -> public void setEternal(boolean eternal);1357119239;Set whether elements are considered as eternal. If "true", timeouts_are ignored and the element is never expired. Default is "false".;public void setEternal(boolean eternal) {_		this.eternal = eternal__	};set,whether,elements,are,considered,as,eternal,if,true,timeouts,are,ignored,and,the,element,is,never,expired,default,is,false;public,void,set,eternal,boolean,eternal,this,eternal,eternal
EhCacheFactoryBean -> public void setEternal(boolean eternal);1362408075;Set whether elements are considered as eternal. If "true", timeouts_are ignored and the element is never expired. Default is "false".;public void setEternal(boolean eternal) {_		this.eternal = eternal__	};set,whether,elements,are,considered,as,eternal,if,true,timeouts,are,ignored,and,the,element,is,never,expired,default,is,false;public,void,set,eternal,boolean,eternal,this,eternal,eternal
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1353877115;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1356735495;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1357119239;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1362408075;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1363730885;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1368482696;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1379136828;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1385412762;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1385978527;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1386031044;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1386779102;Set whether to enable EhCache statistics on this cache._@see net.sf.ehcache.Cache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,see,net,sf,ehcache,cache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1388404355;Set whether to enable EhCache statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1395953963;Set whether to enable EhCache statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1405519323;Set whether to enable EhCache statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1405524934;Set whether to enable EhCache statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setStatisticsEnabled(boolean statisticsEnabled);1408382740;Set whether to enable EhCache statistics on this cache._<p>Note: As of EhCache 2.7, statistics are enabled by default, and cannot be turned off._This setter therefore has no effect in such a scenario._@see net.sf.ehcache.Ehcache#setStatisticsEnabled;public void setStatisticsEnabled(boolean statisticsEnabled) {_		this.statisticsEnabled = statisticsEnabled__	};set,whether,to,enable,eh,cache,statistics,on,this,cache,p,note,as,of,eh,cache,2,7,statistics,are,enabled,by,default,and,cannot,be,turned,off,this,setter,therefore,has,no,effect,in,such,a,scenario,see,net,sf,ehcache,ehcache,set,statistics,enabled;public,void,set,statistics,enabled,boolean,statistics,enabled,this,statistics,enabled,statistics,enabled
EhCacheFactoryBean -> public void setClearOnFlush(boolean clearOnFlush);1353877115;Set whether the memory store should be cleared when flush is called on the cache._Default is "true".;public void setClearOnFlush(boolean clearOnFlush) {_		this.clearOnFlush = clearOnFlush__	};set,whether,the,memory,store,should,be,cleared,when,flush,is,called,on,the,cache,default,is,true;public,void,set,clear,on,flush,boolean,clear,on,flush,this,clear,on,flush,clear,on,flush
EhCacheFactoryBean -> public void setClearOnFlush(boolean clearOnFlush);1356735495;Set whether the memory store should be cleared when flush is called on the cache._Default is "true".;public void setClearOnFlush(boolean clearOnFlush) {_		this.clearOnFlush = clearOnFlush__	};set,whether,the,memory,store,should,be,cleared,when,flush,is,called,on,the,cache,default,is,true;public,void,set,clear,on,flush,boolean,clear,on,flush,this,clear,on,flush,clear,on,flush
EhCacheFactoryBean -> public void setClearOnFlush(boolean clearOnFlush);1357119239;Set whether the memory store should be cleared when flush is called on the cache._Default is "true".;public void setClearOnFlush(boolean clearOnFlush) {_		this.clearOnFlush = clearOnFlush__	};set,whether,the,memory,store,should,be,cleared,when,flush,is,called,on,the,cache,default,is,true;public,void,set,clear,on,flush,boolean,clear,on,flush,this,clear,on,flush,clear,on,flush
EhCacheFactoryBean -> public void setClearOnFlush(boolean clearOnFlush);1362408075;Set whether the memory store should be cleared when flush is called on the cache._Default is "true".;public void setClearOnFlush(boolean clearOnFlush) {_		this.clearOnFlush = clearOnFlush__	};set,whether,the,memory,store,should,be,cleared,when,flush,is,called,on,the,cache,default,is,true;public,void,set,clear,on,flush,boolean,clear,on,flush,this,clear,on,flush,clear,on,flush
