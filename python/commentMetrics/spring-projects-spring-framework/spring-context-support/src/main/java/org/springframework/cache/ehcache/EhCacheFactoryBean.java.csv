commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set a CacheManager from which to retrieve a named Cache instance.  * By default, {@code CacheManager.getInstance()} will be called.  * <p>Note that in particular for persistent caches, it is advisable to  * properly handle the shutdown of the CacheManager: Set up a separate  * EhCacheManagerFactoryBean and pass a reference to this bean property.  * <p>A separate EhCacheManagerFactoryBean is also necessary for loading  * EhCache configuration from a non-default config location.  * @see EhCacheManagerFactoryBean  * @see net.sf.ehcache.CacheManager#getInstance  */ ;/**  * Set a CacheManager from which to retrieve a named Cache instance.  * By default, {@code CacheManager.getInstance()} will be called.  * <p>Note that in particular for persistent caches, it is advisable to  * properly handle the shutdown of the CacheManager: Set up a separate  * EhCacheManagerFactoryBean and pass a reference to this bean property.  * <p>A separate EhCacheManagerFactoryBean is also necessary for loading  * EhCache configuration from a non-default config location.  * @see EhCacheManagerFactoryBean  * @see net.sf.ehcache.CacheManager#getInstance  */ public void setCacheManager(CacheManager cacheManager) {     this.cacheManager = cacheManager. }
true;public;1;3;/**  * Set a name for which to retrieve or create a cache instance.  * Default is the bean name of this EhCacheFactoryBean.  */ ;/**  * Set a name for which to retrieve or create a cache instance.  * Default is the bean name of this EhCacheFactoryBean.  */ public void setCacheName(String cacheName) {     setName(cacheName). }
true;public;1;3;/**  * Set the time to live.  * @see #setTimeToLiveSeconds(long)  */ ;/**  * Set the time to live.  * @see #setTimeToLiveSeconds(long)  */ public void setTimeToLive(int timeToLive) {     setTimeToLiveSeconds(timeToLive). }
true;public;1;3;/**  * Set the time to idle.  * @see #setTimeToIdleSeconds(long)  */ ;/**  * Set the time to idle.  * @see #setTimeToIdleSeconds(long)  */ public void setTimeToIdle(int timeToIdle) {     setTimeToIdleSeconds(timeToIdle). }
true;public;1;3;/**  * Set the disk spool buffer size (in MB).  * @see #setDiskSpoolBufferSizeMB(int)  */ ;/**  * Set the disk spool buffer size (in MB).  * @see #setDiskSpoolBufferSizeMB(int)  */ public void setDiskSpoolBufferSize(int diskSpoolBufferSize) {     setDiskSpoolBufferSizeMB(diskSpoolBufferSize). }
true;public;1;3;/**  * Set whether to use a blocking cache that lets read attempts block  * until the requested element is created.  * <p>If you intend to build a self-populating blocking cache,  * consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}.  * @see net.sf.ehcache.constructs.blocking.BlockingCache  * @see #setCacheEntryFactory  */ ;/**  * Set whether to use a blocking cache that lets read attempts block  * until the requested element is created.  * <p>If you intend to build a self-populating blocking cache,  * consider specifying a {@link #setCacheEntryFactory CacheEntryFactory}.  * @see net.sf.ehcache.constructs.blocking.BlockingCache  * @see #setCacheEntryFactory  */ public void setBlocking(boolean blocking) {     this.blocking = blocking. }
true;public;1;3;/**  * Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}  * to use for a self-populating cache. If such a factory is specified,  * the cache will be decorated with EhCache's  * {@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}.  * <p>The specified factory can be of type  * {@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},  * which will lead to the use of an  * {@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}.  * <p>Note: Any such self-populating cache is automatically a blocking cache.  * @see net.sf.ehcache.constructs.blocking.SelfPopulatingCache  * @see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache  * @see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory  */ ;/**  * Set an EhCache {@link net.sf.ehcache.constructs.blocking.CacheEntryFactory}  * to use for a self-populating cache. If such a factory is specified,  * the cache will be decorated with EhCache's  * {@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}.  * <p>The specified factory can be of type  * {@link net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory},  * which will lead to the use of an  * {@link net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache}.  * <p>Note: Any such self-populating cache is automatically a blocking cache.  * @see net.sf.ehcache.constructs.blocking.SelfPopulatingCache  * @see net.sf.ehcache.constructs.blocking.UpdatingSelfPopulatingCache  * @see net.sf.ehcache.constructs.blocking.UpdatingCacheEntryFactory  */ public void setCacheEntryFactory(CacheEntryFactory cacheEntryFactory) {     this.cacheEntryFactory = cacheEntryFactory. }
true;public;1;3;/**  * Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}  * for this cache, if any.  */ ;/**  * Set an EhCache {@link net.sf.ehcache.bootstrap.BootstrapCacheLoader}  * for this cache, if any.  */ public void setBootstrapCacheLoader(BootstrapCacheLoader bootstrapCacheLoader) {     this.bootstrapCacheLoader = bootstrapCacheLoader. }
true;public;1;3;/**  * Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}  * to registered with this cache.  */ ;/**  * Specify EhCache {@link net.sf.ehcache.event.CacheEventListener cache event listeners}  * to registered with this cache.  */ public void setCacheEventListeners(Set<CacheEventListener> cacheEventListeners) {     this.cacheEventListeners = cacheEventListeners. }
true;public;1;3;/**  * Set whether this cache should be marked as disabled.  * @see net.sf.ehcache.Cache#setDisabled  */ ;/**  * Set whether this cache should be marked as disabled.  * @see net.sf.ehcache.Cache#setDisabled  */ public void setDisabled(boolean disabled) {     this.disabled = disabled. }
false;public;1;4;;@Override public void setBeanName(String name) {     this.beanName = name. }
false;public;0;60;;@Override public void afterPropertiesSet() throws CacheException {     // If no cache name given, use bean name as cache name.     String cacheName = getName().     if (cacheName == null) {         cacheName = this.beanName.         if (cacheName != null) {             setName(cacheName).         }     }     // If no CacheManager given, fetch the default.     if (this.cacheManager == null) {         if (logger.isDebugEnabled()) {             logger.debug("Using default EhCache CacheManager for cache region '" + cacheName + "'").         }         this.cacheManager = CacheManager.getInstance().     }     synchronized (this.cacheManager) {         // Fetch cache region: If none with the given name exists, create one on the fly.         Ehcache rawCache.         boolean cacheExists = this.cacheManager.cacheExists(cacheName).         if (cacheExists) {             if (logger.isDebugEnabled()) {                 logger.debug("Using existing EhCache cache region '" + cacheName + "'").             }             rawCache = this.cacheManager.getEhcache(cacheName).         } else {             if (logger.isDebugEnabled()) {                 logger.debug("Creating new EhCache cache region '" + cacheName + "'").             }             rawCache = createCache().             rawCache.setBootstrapCacheLoader(this.bootstrapCacheLoader).         }         if (this.cacheEventListeners != null) {             for (CacheEventListener listener : this.cacheEventListeners) {                 rawCache.getCacheEventNotificationService().registerListener(listener).             }         }         // Needs to happen after listener registration but before setStatisticsEnabled         if (!cacheExists) {             this.cacheManager.addCache(rawCache).         }         if (this.disabled) {             rawCache.setDisabled(true).         }         Ehcache decoratedCache = decorateCache(rawCache).         if (decoratedCache != rawCache) {             this.cacheManager.replaceCacheWithDecoratedCache(rawCache, decoratedCache).         }         this.cache = decoratedCache.     } }
true;protected;0;3;/**  * Create a raw Cache object based on the configuration of this FactoryBean.  */ ;/**  * Create a raw Cache object based on the configuration of this FactoryBean.  */ protected Cache createCache() {     return new Cache(this). }
true;protected;1;14;/**  * Decorate the given Cache, if necessary.  * @param cache the raw Cache object, based on the configuration of this FactoryBean  * @return the (potentially decorated) cache object to be registered with the CacheManager  */ ;/**  * Decorate the given Cache, if necessary.  * @param cache the raw Cache object, based on the configuration of this FactoryBean  * @return the (potentially decorated) cache object to be registered with the CacheManager  */ protected Ehcache decorateCache(Ehcache cache) {     if (this.cacheEntryFactory != null) {         if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {             return new UpdatingSelfPopulatingCache(cache, (UpdatingCacheEntryFactory) this.cacheEntryFactory).         } else {             return new SelfPopulatingCache(cache, this.cacheEntryFactory).         }     }     if (this.blocking) {         return new BlockingCache(cache).     }     return cache. }
false;public;0;5;;@Override @Nullable public Ehcache getObject() {     return this.cache. }
true;public;0;18;/**  * Predict the particular {@code Ehcache} implementation that will be returned from  * {@link #getObject()} based on logic in {@link #createCache()} and  * {@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.  */ ;/**  * Predict the particular {@code Ehcache} implementation that will be returned from  * {@link #getObject()} based on logic in {@link #createCache()} and  * {@link #decorateCache(Ehcache)} as orchestrated by {@link #afterPropertiesSet()}.  */ @Override public Class<? extends Ehcache> getObjectType() {     if (this.cache != null) {         return this.cache.getClass().     }     if (this.cacheEntryFactory != null) {         if (this.cacheEntryFactory instanceof UpdatingCacheEntryFactory) {             return UpdatingSelfPopulatingCache.class.         } else {             return SelfPopulatingCache.class.         }     }     if (this.blocking) {         return BlockingCache.class.     }     return Cache.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
