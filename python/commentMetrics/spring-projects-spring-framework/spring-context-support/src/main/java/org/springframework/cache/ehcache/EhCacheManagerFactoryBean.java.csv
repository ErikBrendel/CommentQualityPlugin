# id;timestamp;commentText;codeText;commentWords;codeWords
EhCacheManagerFactoryBean -> public void setAcceptExisting(boolean acceptExisting);1386779102;Set whether an existing EhCache CacheManager of the same name will be accepted_for this EhCacheManagerFactoryBean setup. Default is "false"._<p>Typically used in combination with {@link #setCacheManagerName "cacheManagerName"}_but will simply work with the default CacheManager name if none specified._All references to the same CacheManager name (or the same default) in the_same ClassLoader space will share the specified CacheManager then._<p><b>NOTE:</b> This feature requires EhCache 2.5 or higher. In contrast to_the {@link #setShared "shared"} flag, it supports controlled shutdown of the_CacheManager by the EhCacheManagerFactoryBean that actually created it._@see #setCacheManagerName_#see #setShared_@see net.sf.ehcache.CacheManager#getCacheManager(String)_@see net.sf.ehcache.CacheManager#CacheManager();public void setAcceptExisting(boolean acceptExisting) {_		this.acceptExisting = acceptExisting__	};set,whether,an,existing,eh,cache,cache,manager,of,the,same,name,will,be,accepted,for,this,eh,cache,manager,factory,bean,setup,default,is,false,p,typically,used,in,combination,with,link,set,cache,manager,name,cache,manager,name,but,will,simply,work,with,the,default,cache,manager,name,if,none,specified,all,references,to,the,same,cache,manager,name,or,the,same,default,in,the,same,class,loader,space,will,share,the,specified,cache,manager,then,p,b,note,b,this,feature,requires,eh,cache,2,5,or,higher,in,contrast,to,the,link,set,shared,shared,flag,it,supports,controlled,shutdown,of,the,cache,manager,by,the,eh,cache,manager,factory,bean,that,actually,created,it,see,set,cache,manager,name,see,set,shared,see,net,sf,ehcache,cache,manager,get,cache,manager,string,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,accept,existing,boolean,accept,existing,this,accept,existing,accept,existing
EhCacheManagerFactoryBean -> public void setAcceptExisting(boolean acceptExisting);1395953963;Set whether an existing EhCache CacheManager of the same name will be accepted_for this EhCacheManagerFactoryBean setup. Default is "false"._<p>Typically used in combination with {@link #setCacheManagerName "cacheManagerName"}_but will simply work with the default CacheManager name if none specified._All references to the same CacheManager name (or the same default) in the_same ClassLoader space will share the specified CacheManager then._<p><b>NOTE:</b> This feature requires EhCache 2.5 or higher. In contrast to_the {@link #setShared "shared"} flag, it supports controlled shutdown of the_CacheManager by the EhCacheManagerFactoryBean that actually created it._@see #setCacheManagerName_#see #setShared_@see net.sf.ehcache.CacheManager#getCacheManager(String)_@see net.sf.ehcache.CacheManager#CacheManager();public void setAcceptExisting(boolean acceptExisting) {_		this.acceptExisting = acceptExisting__	};set,whether,an,existing,eh,cache,cache,manager,of,the,same,name,will,be,accepted,for,this,eh,cache,manager,factory,bean,setup,default,is,false,p,typically,used,in,combination,with,link,set,cache,manager,name,cache,manager,name,but,will,simply,work,with,the,default,cache,manager,name,if,none,specified,all,references,to,the,same,cache,manager,name,or,the,same,default,in,the,same,class,loader,space,will,share,the,specified,cache,manager,then,p,b,note,b,this,feature,requires,eh,cache,2,5,or,higher,in,contrast,to,the,link,set,shared,shared,flag,it,supports,controlled,shutdown,of,the,cache,manager,by,the,eh,cache,manager,factory,bean,that,actually,created,it,see,set,cache,manager,name,see,set,shared,see,net,sf,ehcache,cache,manager,get,cache,manager,string,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,accept,existing,boolean,accept,existing,this,accept,existing,accept,existing
EhCacheManagerFactoryBean -> public void setAcceptExisting(boolean acceptExisting);1408382740;Set whether an existing EhCache CacheManager of the same name will be accepted_for this EhCacheManagerFactoryBean setup. Default is "false"._<p>Typically used in combination with {@link #setCacheManagerName "cacheManagerName"}_but will simply work with the default CacheManager name if none specified._All references to the same CacheManager name (or the same default) in the_same ClassLoader space will share the specified CacheManager then._@see #setCacheManagerName_#see #setShared_@see net.sf.ehcache.CacheManager#getCacheManager(String)_@see net.sf.ehcache.CacheManager#CacheManager();public void setAcceptExisting(boolean acceptExisting) {_		this.acceptExisting = acceptExisting__	};set,whether,an,existing,eh,cache,cache,manager,of,the,same,name,will,be,accepted,for,this,eh,cache,manager,factory,bean,setup,default,is,false,p,typically,used,in,combination,with,link,set,cache,manager,name,cache,manager,name,but,will,simply,work,with,the,default,cache,manager,name,if,none,specified,all,references,to,the,same,cache,manager,name,or,the,same,default,in,the,same,class,loader,space,will,share,the,specified,cache,manager,then,see,set,cache,manager,name,see,set,shared,see,net,sf,ehcache,cache,manager,get,cache,manager,string,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,accept,existing,boolean,accept,existing,this,accept,existing,accept,existing
EhCacheManagerFactoryBean -> public void setAcceptExisting(boolean acceptExisting);1459774568;Set whether an existing EhCache CacheManager of the same name will be accepted_for this EhCacheManagerFactoryBean setup. Default is "false"._<p>Typically used in combination with {@link #setCacheManagerName "cacheManagerName"}_but will simply work with the default CacheManager name if none specified._All references to the same CacheManager name (or the same default) in the_same ClassLoader space will share the specified CacheManager then._@see #setCacheManagerName_#see #setShared_@see net.sf.ehcache.CacheManager#getCacheManager(String)_@see net.sf.ehcache.CacheManager#CacheManager();public void setAcceptExisting(boolean acceptExisting) {_		this.acceptExisting = acceptExisting__	};set,whether,an,existing,eh,cache,cache,manager,of,the,same,name,will,be,accepted,for,this,eh,cache,manager,factory,bean,setup,default,is,false,p,typically,used,in,combination,with,link,set,cache,manager,name,cache,manager,name,but,will,simply,work,with,the,default,cache,manager,name,if,none,specified,all,references,to,the,same,cache,manager,name,or,the,same,default,in,the,same,class,loader,space,will,share,the,specified,cache,manager,then,see,set,cache,manager,name,see,set,shared,see,net,sf,ehcache,cache,manager,get,cache,manager,string,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,accept,existing,boolean,accept,existing,this,accept,existing,accept,existing
EhCacheManagerFactoryBean -> public void setAcceptExisting(boolean acceptExisting);1467667352;Set whether an existing EhCache CacheManager of the same name will be accepted_for this EhCacheManagerFactoryBean setup. Default is "false"._<p>Typically used in combination with {@link #setCacheManagerName "cacheManagerName"}_but will simply work with the default CacheManager name if none specified._All references to the same CacheManager name (or the same default) in the_same ClassLoader space will share the specified CacheManager then._@see #setCacheManagerName_#see #setShared_@see net.sf.ehcache.CacheManager#getCacheManager(String)_@see net.sf.ehcache.CacheManager#CacheManager();public void setAcceptExisting(boolean acceptExisting) {_		this.acceptExisting = acceptExisting__	};set,whether,an,existing,eh,cache,cache,manager,of,the,same,name,will,be,accepted,for,this,eh,cache,manager,factory,bean,setup,default,is,false,p,typically,used,in,combination,with,link,set,cache,manager,name,cache,manager,name,but,will,simply,work,with,the,default,cache,manager,name,if,none,specified,all,references,to,the,same,cache,manager,name,or,the,same,default,in,the,same,class,loader,space,will,share,the,specified,cache,manager,then,see,set,cache,manager,name,see,set,shared,see,net,sf,ehcache,cache,manager,get,cache,manager,string,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,accept,existing,boolean,accept,existing,this,accept,existing,accept,existing
EhCacheManagerFactoryBean -> public void setAcceptExisting(boolean acceptExisting);1498780456;Set whether an existing EhCache CacheManager of the same name will be accepted_for this EhCacheManagerFactoryBean setup. Default is "false"._<p>Typically used in combination with {@link #setCacheManagerName "cacheManagerName"}_but will simply work with the default CacheManager name if none specified._All references to the same CacheManager name (or the same default) in the_same ClassLoader space will share the specified CacheManager then._@see #setCacheManagerName_#see #setShared_@see net.sf.ehcache.CacheManager#getCacheManager(String)_@see net.sf.ehcache.CacheManager#CacheManager();public void setAcceptExisting(boolean acceptExisting) {_		this.acceptExisting = acceptExisting__	};set,whether,an,existing,eh,cache,cache,manager,of,the,same,name,will,be,accepted,for,this,eh,cache,manager,factory,bean,setup,default,is,false,p,typically,used,in,combination,with,link,set,cache,manager,name,cache,manager,name,but,will,simply,work,with,the,default,cache,manager,name,if,none,specified,all,references,to,the,same,cache,manager,name,or,the,same,default,in,the,same,class,loader,space,will,share,the,specified,cache,manager,then,see,set,cache,manager,name,see,set,shared,see,net,sf,ehcache,cache,manager,get,cache,manager,string,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,accept,existing,boolean,accept,existing,this,accept,existing,accept,existing
EhCacheManagerFactoryBean -> public void setAcceptExisting(boolean acceptExisting);1502974979;Set whether an existing EhCache CacheManager of the same name will be accepted_for this EhCacheManagerFactoryBean setup. Default is "false"._<p>Typically used in combination with {@link #setCacheManagerName "cacheManagerName"}_but will simply work with the default CacheManager name if none specified._All references to the same CacheManager name (or the same default) in the_same ClassLoader space will share the specified CacheManager then._@see #setCacheManagerName_#see #setShared_@see net.sf.ehcache.CacheManager#getCacheManager(String)_@see net.sf.ehcache.CacheManager#CacheManager();public void setAcceptExisting(boolean acceptExisting) {_		this.acceptExisting = acceptExisting__	};set,whether,an,existing,eh,cache,cache,manager,of,the,same,name,will,be,accepted,for,this,eh,cache,manager,factory,bean,setup,default,is,false,p,typically,used,in,combination,with,link,set,cache,manager,name,cache,manager,name,but,will,simply,work,with,the,default,cache,manager,name,if,none,specified,all,references,to,the,same,cache,manager,name,or,the,same,default,in,the,same,class,loader,space,will,share,the,specified,cache,manager,then,see,set,cache,manager,name,see,set,shared,see,net,sf,ehcache,cache,manager,get,cache,manager,string,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,accept,existing,boolean,accept,existing,this,accept,existing,accept,existing
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1353877115;Set whether the EHCache CacheManager should be shared (as a singleton at the VM level)_or independent (typically local within the application). Default is "false", creating_an independent instance._@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,ehcache,cache,manager,should,be,shared,as,a,singleton,at,the,vm,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,instance,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1356735495;Set whether the EHCache CacheManager should be shared (as a singleton at the VM level)_or independent (typically local within the application). Default is "false", creating_an independent instance._@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,ehcache,cache,manager,should,be,shared,as,a,singleton,at,the,vm,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,instance,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1357119239;Set whether the EHCache CacheManager should be shared (as a singleton at the VM level)_or independent (typically local within the application). Default is "false", creating_an independent instance._@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,ehcache,cache,manager,should,be,shared,as,a,singleton,at,the,vm,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,instance,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1362408075;Set whether the EhCache CacheManager should be shared (as a singleton at the VM level)_or independent (typically local within the application). Default is "false", creating_an independent instance._@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,vm,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,instance,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1363730885;Set whether the EhCache CacheManager should be shared (as a singleton at the VM level)_or independent (typically local within the application). Default is "false", creating_an independent instance._@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,vm,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,instance,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1368482696;Set whether the EhCache CacheManager should be shared (as a singleton at the VM level)_or independent (typically local within the application). Default is "false", creating_an independent instance._@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,vm,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,instance,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1386779102;Set whether the EhCache CacheManager should be shared (as a singleton at the_ClassLoader level) or independent (typically local within the application)._Default is "false", creating an independent local instance._<p><b>NOTE:</b> This feature allows for sharing this EhCacheManagerFactoryBean's_CacheManager with any code calling <code>CacheManager.create()</code> in the same_ClassLoader space, with no need to agree on a specific CacheManager name._However, it only supports a single EhCacheManagerFactoryBean involved which will_control the lifecycle of the underlying CacheManager (in particular, its shutdown)._<p>This flag overrides {@link #setAcceptExisting "acceptExisting"} if both are set,_since it indicates the 'stronger' mode of sharing._@see #setCacheManagerName_@see #setAcceptExisting_@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,class,loader,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,local,instance,p,b,note,b,this,feature,allows,for,sharing,this,eh,cache,manager,factory,bean,s,cache,manager,with,any,code,calling,code,cache,manager,create,code,in,the,same,class,loader,space,with,no,need,to,agree,on,a,specific,cache,manager,name,however,it,only,supports,a,single,eh,cache,manager,factory,bean,involved,which,will,control,the,lifecycle,of,the,underlying,cache,manager,in,particular,its,shutdown,p,this,flag,overrides,link,set,accept,existing,accept,existing,if,both,are,set,since,it,indicates,the,stronger,mode,of,sharing,see,set,cache,manager,name,see,set,accept,existing,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1395953963;Set whether the EhCache CacheManager should be shared (as a singleton at the_ClassLoader level) or independent (typically local within the application)._Default is "false", creating an independent local instance._<p><b>NOTE:</b> This feature allows for sharing this EhCacheManagerFactoryBean's_CacheManager with any code calling <code>CacheManager.create()</code> in the same_ClassLoader space, with no need to agree on a specific CacheManager name._However, it only supports a single EhCacheManagerFactoryBean involved which will_control the lifecycle of the underlying CacheManager (in particular, its shutdown)._<p>This flag overrides {@link #setAcceptExisting "acceptExisting"} if both are set,_since it indicates the 'stronger' mode of sharing._@see #setCacheManagerName_@see #setAcceptExisting_@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,class,loader,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,local,instance,p,b,note,b,this,feature,allows,for,sharing,this,eh,cache,manager,factory,bean,s,cache,manager,with,any,code,calling,code,cache,manager,create,code,in,the,same,class,loader,space,with,no,need,to,agree,on,a,specific,cache,manager,name,however,it,only,supports,a,single,eh,cache,manager,factory,bean,involved,which,will,control,the,lifecycle,of,the,underlying,cache,manager,in,particular,its,shutdown,p,this,flag,overrides,link,set,accept,existing,accept,existing,if,both,are,set,since,it,indicates,the,stronger,mode,of,sharing,see,set,cache,manager,name,see,set,accept,existing,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1408382740;Set whether the EhCache CacheManager should be shared (as a singleton at the_ClassLoader level) or independent (typically local within the application)._Default is "false", creating an independent local instance._<p><b>NOTE:</b> This feature allows for sharing this EhCacheManagerFactoryBean's_CacheManager with any code calling <code>CacheManager.create()</code> in the same_ClassLoader space, with no need to agree on a specific CacheManager name._However, it only supports a single EhCacheManagerFactoryBean involved which will_control the lifecycle of the underlying CacheManager (in particular, its shutdown)._<p>This flag overrides {@link #setAcceptExisting "acceptExisting"} if both are set,_since it indicates the 'stronger' mode of sharing._@see #setCacheManagerName_@see #setAcceptExisting_@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,class,loader,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,local,instance,p,b,note,b,this,feature,allows,for,sharing,this,eh,cache,manager,factory,bean,s,cache,manager,with,any,code,calling,code,cache,manager,create,code,in,the,same,class,loader,space,with,no,need,to,agree,on,a,specific,cache,manager,name,however,it,only,supports,a,single,eh,cache,manager,factory,bean,involved,which,will,control,the,lifecycle,of,the,underlying,cache,manager,in,particular,its,shutdown,p,this,flag,overrides,link,set,accept,existing,accept,existing,if,both,are,set,since,it,indicates,the,stronger,mode,of,sharing,see,set,cache,manager,name,see,set,accept,existing,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1459774568;Set whether the EhCache CacheManager should be shared (as a singleton at the_ClassLoader level) or independent (typically local within the application)._Default is "false", creating an independent local instance._<p><b>NOTE:</b> This feature allows for sharing this EhCacheManagerFactoryBean's_CacheManager with any code calling <code>CacheManager.create()</code> in the same_ClassLoader space, with no need to agree on a specific CacheManager name._However, it only supports a single EhCacheManagerFactoryBean involved which will_control the lifecycle of the underlying CacheManager (in particular, its shutdown)._<p>This flag overrides {@link #setAcceptExisting "acceptExisting"} if both are set,_since it indicates the 'stronger' mode of sharing._@see #setCacheManagerName_@see #setAcceptExisting_@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,class,loader,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,local,instance,p,b,note,b,this,feature,allows,for,sharing,this,eh,cache,manager,factory,bean,s,cache,manager,with,any,code,calling,code,cache,manager,create,code,in,the,same,class,loader,space,with,no,need,to,agree,on,a,specific,cache,manager,name,however,it,only,supports,a,single,eh,cache,manager,factory,bean,involved,which,will,control,the,lifecycle,of,the,underlying,cache,manager,in,particular,its,shutdown,p,this,flag,overrides,link,set,accept,existing,accept,existing,if,both,are,set,since,it,indicates,the,stronger,mode,of,sharing,see,set,cache,manager,name,see,set,accept,existing,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1467667352;Set whether the EhCache CacheManager should be shared (as a singleton at the_ClassLoader level) or independent (typically local within the application)._Default is "false", creating an independent local instance._<p><b>NOTE:</b> This feature allows for sharing this EhCacheManagerFactoryBean's_CacheManager with any code calling <code>CacheManager.create()</code> in the same_ClassLoader space, with no need to agree on a specific CacheManager name._However, it only supports a single EhCacheManagerFactoryBean involved which will_control the lifecycle of the underlying CacheManager (in particular, its shutdown)._<p>This flag overrides {@link #setAcceptExisting "acceptExisting"} if both are set,_since it indicates the 'stronger' mode of sharing._@see #setCacheManagerName_@see #setAcceptExisting_@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,class,loader,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,local,instance,p,b,note,b,this,feature,allows,for,sharing,this,eh,cache,manager,factory,bean,s,cache,manager,with,any,code,calling,code,cache,manager,create,code,in,the,same,class,loader,space,with,no,need,to,agree,on,a,specific,cache,manager,name,however,it,only,supports,a,single,eh,cache,manager,factory,bean,involved,which,will,control,the,lifecycle,of,the,underlying,cache,manager,in,particular,its,shutdown,p,this,flag,overrides,link,set,accept,existing,accept,existing,if,both,are,set,since,it,indicates,the,stronger,mode,of,sharing,see,set,cache,manager,name,see,set,accept,existing,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1498780456;Set whether the EhCache CacheManager should be shared (as a singleton at the_ClassLoader level) or independent (typically local within the application)._Default is "false", creating an independent local instance._<p><b>NOTE:</b> This feature allows for sharing this EhCacheManagerFactoryBean's_CacheManager with any code calling <code>CacheManager.create()</code> in the same_ClassLoader space, with no need to agree on a specific CacheManager name._However, it only supports a single EhCacheManagerFactoryBean involved which will_control the lifecycle of the underlying CacheManager (in particular, its shutdown)._<p>This flag overrides {@link #setAcceptExisting "acceptExisting"} if both are set,_since it indicates the 'stronger' mode of sharing._@see #setCacheManagerName_@see #setAcceptExisting_@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,class,loader,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,local,instance,p,b,note,b,this,feature,allows,for,sharing,this,eh,cache,manager,factory,bean,s,cache,manager,with,any,code,calling,code,cache,manager,create,code,in,the,same,class,loader,space,with,no,need,to,agree,on,a,specific,cache,manager,name,however,it,only,supports,a,single,eh,cache,manager,factory,bean,involved,which,will,control,the,lifecycle,of,the,underlying,cache,manager,in,particular,its,shutdown,p,this,flag,overrides,link,set,accept,existing,accept,existing,if,both,are,set,since,it,indicates,the,stronger,mode,of,sharing,see,set,cache,manager,name,see,set,accept,existing,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setShared(boolean shared);1502974979;Set whether the EhCache CacheManager should be shared (as a singleton at the_ClassLoader level) or independent (typically local within the application)._Default is "false", creating an independent local instance._<p><b>NOTE:</b> This feature allows for sharing this EhCacheManagerFactoryBean's_CacheManager with any code calling <code>CacheManager.create()</code> in the same_ClassLoader space, with no need to agree on a specific CacheManager name._However, it only supports a single EhCacheManagerFactoryBean involved which will_control the lifecycle of the underlying CacheManager (in particular, its shutdown)._<p>This flag overrides {@link #setAcceptExisting "acceptExisting"} if both are set,_since it indicates the 'stronger' mode of sharing._@see #setCacheManagerName_@see #setAcceptExisting_@see net.sf.ehcache.CacheManager#create()_@see net.sf.ehcache.CacheManager#CacheManager();public void setShared(boolean shared) {_		this.shared = shared__	};set,whether,the,eh,cache,cache,manager,should,be,shared,as,a,singleton,at,the,class,loader,level,or,independent,typically,local,within,the,application,default,is,false,creating,an,independent,local,instance,p,b,note,b,this,feature,allows,for,sharing,this,eh,cache,manager,factory,bean,s,cache,manager,with,any,code,calling,code,cache,manager,create,code,in,the,same,class,loader,space,with,no,need,to,agree,on,a,specific,cache,manager,name,however,it,only,supports,a,single,eh,cache,manager,factory,bean,involved,which,will,control,the,lifecycle,of,the,underlying,cache,manager,in,particular,its,shutdown,p,this,flag,overrides,link,set,accept,existing,accept,existing,if,both,are,set,since,it,indicates,the,stronger,mode,of,sharing,see,set,cache,manager,name,see,set,accept,existing,see,net,sf,ehcache,cache,manager,create,see,net,sf,ehcache,cache,manager,cache,manager;public,void,set,shared,boolean,shared,this,shared,shared
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1353877115;Set the location of the EHCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EHCache jar (default EHCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,ehcache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,ehcache,jar,default,ehcache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1356735495;Set the location of the EHCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EHCache jar (default EHCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,ehcache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,ehcache,jar,default,ehcache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1357119239;Set the location of the EHCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EHCache jar (default EHCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,ehcache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,ehcache,jar,default,ehcache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1362408075;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1363730885;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1368482696;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1386779102;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1395953963;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1408382740;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1459774568;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1467667352;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1498780456;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setConfigLocation(Resource configLocation);1502974979;Set the location of the EhCache config file. A typical value is "/WEB-INF/ehcache.xml"._<p>Default is "ehcache.xml" in the root of the class path, or if not found,_"ehcache-failsafe.xml" in the EhCache jar (default EhCache initialization)._@see net.sf.ehcache.CacheManager#create(java.io.InputStream)_@see net.sf.ehcache.CacheManager#CacheManager(java.io.InputStream);public void setConfigLocation(Resource configLocation) {_		this.configLocation = configLocation__	};set,the,location,of,the,eh,cache,config,file,a,typical,value,is,web,inf,ehcache,xml,p,default,is,ehcache,xml,in,the,root,of,the,class,path,or,if,not,found,ehcache,failsafe,xml,in,the,eh,cache,jar,default,eh,cache,initialization,see,net,sf,ehcache,cache,manager,create,java,io,input,stream,see,net,sf,ehcache,cache,manager,cache,manager,java,io,input,stream;public,void,set,config,location,resource,config,location,this,config,location,config,location
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1353877115;Set the name of the EHCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,ehcache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1356735495;Set the name of the EHCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,ehcache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1357119239;Set the name of the EHCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,ehcache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1362408075;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1363730885;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1368482696;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1386779102;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1395953963;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1408382740;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.CacheManager#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,cache,manager,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1459774568;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.config.Configuration#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,config,configuration,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1467667352;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.config.Configuration#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,config,configuration,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1498780456;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.config.Configuration#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,config,configuration,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
EhCacheManagerFactoryBean -> public void setCacheManagerName(String cacheManagerName);1502974979;Set the name of the EhCache CacheManager (if a specific name is desired)._@see net.sf.ehcache.config.Configuration#setName(String);public void setCacheManagerName(String cacheManagerName) {_		this.cacheManagerName = cacheManagerName__	};set,the,name,of,the,eh,cache,cache,manager,if,a,specific,name,is,desired,see,net,sf,ehcache,config,configuration,set,name,string;public,void,set,cache,manager,name,string,cache,manager,name,this,cache,manager,name,cache,manager,name
