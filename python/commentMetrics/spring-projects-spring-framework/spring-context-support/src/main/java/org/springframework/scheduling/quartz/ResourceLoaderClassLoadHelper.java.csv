commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void initialize() {     if (this.resourceLoader == null) {         this.resourceLoader = SchedulerFactoryBean.getConfigTimeResourceLoader().         if (this.resourceLoader == null) {             this.resourceLoader = new DefaultResourceLoader().         }     } }
false;public;1;5;;@Override public Class<?> loadClass(String name) throws ClassNotFoundException {     Assert.state(this.resourceLoader != null, "ResourceLoaderClassLoadHelper not initialized").     return ClassUtils.forName(name, this.resourceLoader.getClassLoader()). }
false;public;2;4;;@SuppressWarnings("unchecked") public <T> Class<? extends T> loadClass(String name, Class<T> clazz) throws ClassNotFoundException {     return (Class<? extends T>) loadClass(name). }
false;public;1;20;;@Override @Nullable public URL getResource(String name) {     Assert.state(this.resourceLoader != null, "ResourceLoaderClassLoadHelper not initialized").     Resource resource = this.resourceLoader.getResource(name).     if (resource.exists()) {         try {             return resource.getURL().         } catch (IOException ex) {             if (logger.isWarnEnabled()) {                 logger.warn("Could not load " + resource).             }             return null.         }     } else {         return getClassLoader().getResource(name).     } }
false;public;1;20;;@Override @Nullable public InputStream getResourceAsStream(String name) {     Assert.state(this.resourceLoader != null, "ResourceLoaderClassLoadHelper not initialized").     Resource resource = this.resourceLoader.getResource(name).     if (resource.exists()) {         try {             return resource.getInputStream().         } catch (IOException ex) {             if (logger.isWarnEnabled()) {                 logger.warn("Could not load " + resource).             }             return null.         }     } else {         return getClassLoader().getResourceAsStream(name).     } }
false;public;0;7;;@Override public ClassLoader getClassLoader() {     Assert.state(this.resourceLoader != null, "ResourceLoaderClassLoadHelper not initialized").     ClassLoader classLoader = this.resourceLoader.getClassLoader().     Assert.state(classLoader != null, "No ClassLoader").     return classLoader. }
