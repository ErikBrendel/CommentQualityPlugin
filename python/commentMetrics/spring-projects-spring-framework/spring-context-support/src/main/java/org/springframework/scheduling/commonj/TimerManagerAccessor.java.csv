# id;timestamp;commentText;codeText;commentWords;codeWords
TimerManagerAccessor -> public void setTimerManager(TimerManager timerManager);1328020251;Specify the CommonJ TimerManager to delegate to._<p>Note that the given TimerManager's lifecycle will be managed_by this FactoryBean._<p>Alternatively (and typically), you can specify the JNDI name_of the target TimerManager._@see #setTimerManagerName;public void setTimerManager(TimerManager timerManager) {_		this.timerManager = timerManager__	};specify,the,common,j,timer,manager,to,delegate,to,p,note,that,the,given,timer,manager,s,lifecycle,will,be,managed,by,this,factory,bean,p,alternatively,and,typically,you,can,specify,the,jndi,name,of,the,target,timer,manager,see,set,timer,manager,name;public,void,set,timer,manager,timer,manager,timer,manager,this,timer,manager,timer,manager
TimerManagerAccessor -> public void setTimerManager(TimerManager timerManager);1356735495;Specify the CommonJ TimerManager to delegate to._<p>Note that the given TimerManager's lifecycle will be managed_by this FactoryBean._<p>Alternatively (and typically), you can specify the JNDI name_of the target TimerManager._@see #setTimerManagerName;public void setTimerManager(TimerManager timerManager) {_		this.timerManager = timerManager__	};specify,the,common,j,timer,manager,to,delegate,to,p,note,that,the,given,timer,manager,s,lifecycle,will,be,managed,by,this,factory,bean,p,alternatively,and,typically,you,can,specify,the,jndi,name,of,the,target,timer,manager,see,set,timer,manager,name;public,void,set,timer,manager,timer,manager,timer,manager,this,timer,manager,timer,manager
TimerManagerAccessor -> public void setTimerManager(TimerManager timerManager);1357119239;Specify the CommonJ TimerManager to delegate to._<p>Note that the given TimerManager's lifecycle will be managed_by this FactoryBean._<p>Alternatively (and typically), you can specify the JNDI name_of the target TimerManager._@see #setTimerManagerName;public void setTimerManager(TimerManager timerManager) {_		this.timerManager = timerManager__	};specify,the,common,j,timer,manager,to,delegate,to,p,note,that,the,given,timer,manager,s,lifecycle,will,be,managed,by,this,factory,bean,p,alternatively,and,typically,you,can,specify,the,jndi,name,of,the,target,timer,manager,see,set,timer,manager,name;public,void,set,timer,manager,timer,manager,timer,manager,this,timer,manager,timer,manager
TimerManagerAccessor -> public void setTimerManager(TimerManager timerManager);1368482696;Specify the CommonJ TimerManager to delegate to._<p>Note that the given TimerManager's lifecycle will be managed_by this FactoryBean._<p>Alternatively (and typically), you can specify the JNDI name_of the target TimerManager._@see #setTimerManagerName;public void setTimerManager(TimerManager timerManager) {_		this.timerManager = timerManager__	};specify,the,common,j,timer,manager,to,delegate,to,p,note,that,the,given,timer,manager,s,lifecycle,will,be,managed,by,this,factory,bean,p,alternatively,and,typically,you,can,specify,the,jndi,name,of,the,target,timer,manager,see,set,timer,manager,name;public,void,set,timer,manager,timer,manager,timer,manager,this,timer,manager,timer,manager
TimerManagerAccessor -> public void setTimerManager(TimerManager timerManager);1496837955;Specify the CommonJ TimerManager to delegate to._<p>Note that the given TimerManager's lifecycle will be managed_by this FactoryBean._<p>Alternatively (and typically), you can specify the JNDI name_of the target TimerManager._@see #setTimerManagerName;public void setTimerManager(TimerManager timerManager) {_		this.timerManager = timerManager__	};specify,the,common,j,timer,manager,to,delegate,to,p,note,that,the,given,timer,manager,s,lifecycle,will,be,managed,by,this,factory,bean,p,alternatively,and,typically,you,can,specify,the,jndi,name,of,the,target,timer,manager,see,set,timer,manager,name;public,void,set,timer,manager,timer,manager,timer,manager,this,timer,manager,timer,manager
TimerManagerAccessor -> public void setTimerManager(TimerManager timerManager);1498780456;Specify the CommonJ TimerManager to delegate to._<p>Note that the given TimerManager's lifecycle will be managed_by this FactoryBean._<p>Alternatively (and typically), you can specify the JNDI name_of the target TimerManager._@see #setTimerManagerName;public void setTimerManager(TimerManager timerManager) {_		this.timerManager = timerManager__	};specify,the,common,j,timer,manager,to,delegate,to,p,note,that,the,given,timer,manager,s,lifecycle,will,be,managed,by,this,factory,bean,p,alternatively,and,typically,you,can,specify,the,jndi,name,of,the,target,timer,manager,see,set,timer,manager,name;public,void,set,timer,manager,timer,manager,timer,manager,this,timer,manager,timer,manager
TimerManagerAccessor -> public void setTimerManager(TimerManager timerManager);1533213510;Specify the CommonJ TimerManager to delegate to._<p>Note that the given TimerManager's lifecycle will be managed_by this FactoryBean._<p>Alternatively (and typically), you can specify the JNDI name_of the target TimerManager._@see #setTimerManagerName;public void setTimerManager(TimerManager timerManager) {_		this.timerManager = timerManager__	};specify,the,common,j,timer,manager,to,delegate,to,p,note,that,the,given,timer,manager,s,lifecycle,will,be,managed,by,this,factory,bean,p,alternatively,and,typically,you,can,specify,the,jndi,name,of,the,target,timer,manager,see,set,timer,manager,name;public,void,set,timer,manager,timer,manager,timer,manager,this,timer,manager,timer,manager
TimerManagerAccessor -> protected TimerManager obtainTimerManager();1496837955;Obtain the TimerManager for actual use._@return the TimerManager (never {@code null})_@throws IllegalStateException in case of no TimerManager set_@since 5.0;protected TimerManager obtainTimerManager() {_		Assert.notNull(this.timerManager, "No TimerManager set")__		return this.timerManager__	};obtain,the,timer,manager,for,actual,use,return,the,timer,manager,never,code,null,throws,illegal,state,exception,in,case,of,no,timer,manager,set,since,5,0;protected,timer,manager,obtain,timer,manager,assert,not,null,this,timer,manager,no,timer,manager,set,return,this,timer,manager
TimerManagerAccessor -> protected TimerManager obtainTimerManager();1498780456;Obtain the TimerManager for actual use._@return the TimerManager (never {@code null})_@throws IllegalStateException in case of no TimerManager set_@since 5.0;protected TimerManager obtainTimerManager() {_		Assert.notNull(this.timerManager, "No TimerManager set")__		return this.timerManager__	};obtain,the,timer,manager,for,actual,use,return,the,timer,manager,never,code,null,throws,illegal,state,exception,in,case,of,no,timer,manager,set,since,5,0;protected,timer,manager,obtain,timer,manager,assert,not,null,this,timer,manager,no,timer,manager,set,return,this,timer,manager
TimerManagerAccessor -> protected TimerManager obtainTimerManager();1533213510;Obtain the TimerManager for actual use._@return the TimerManager (never {@code null})_@throws IllegalStateException in case of no TimerManager set_@since 5.0;protected TimerManager obtainTimerManager() {_		Assert.notNull(this.timerManager, "No TimerManager set")__		return this.timerManager__	};obtain,the,timer,manager,for,actual,use,return,the,timer,manager,never,code,null,throws,illegal,state,exception,in,case,of,no,timer,manager,set,since,5,0;protected,timer,manager,obtain,timer,manager,assert,not,null,this,timer,manager,no,timer,manager,set,return,this,timer,manager
TimerManagerAccessor -> public void setShared(boolean shared);1328020251;Specify whether the TimerManager obtained by this FactoryBean_is a shared instance ("true") or an independent instance ("false")._The lifecycle of the former is supposed to be managed by the application_server, while the lifecycle of the latter is up to the application._<p>Default is "false", i.e. managing an independent TimerManager instance._This is what the CommonJ specification suggests that application servers_are supposed to offer via JNDI lookups, typically declared as a_<code>resource-ref</code> of type <code>commonj.timers.TimerManager</code>_in <code>web.xml<code>, with <code>res-sharing-scope</code> set to 'Unshareable'._<p>Switch this flag to "true" if you are obtaining a shared TimerManager,_typically through specifying the JNDI location of a TimerManager that_has been explicitly declared as 'Shareable'. Note that WebLogic's_cluster-aware Job Scheduler is a shared TimerManager too._<p>The sole difference between this FactoryBean being in shared or_non-shared mode is that it will only attempt to suspend / resume / stop_the underlying TimerManager in case of an independent (non-shared) instance._This only affects the {@link org.springframework.context.Lifecycle} support_as well as application context shutdown._@see #stop()_@see #start()_@see #destroy()_@see commonj.timers.TimerManager;public void setShared(boolean shared) {_		this.shared = shared__	};specify,whether,the,timer,manager,obtained,by,this,factory,bean,is,a,shared,instance,true,or,an,independent,instance,false,the,lifecycle,of,the,former,is,supposed,to,be,managed,by,the,application,server,while,the,lifecycle,of,the,latter,is,up,to,the,application,p,default,is,false,i,e,managing,an,independent,timer,manager,instance,this,is,what,the,common,j,specification,suggests,that,application,servers,are,supposed,to,offer,via,jndi,lookups,typically,declared,as,a,code,resource,ref,code,of,type,code,commonj,timers,timer,manager,code,in,code,web,xml,code,with,code,res,sharing,scope,code,set,to,unshareable,p,switch,this,flag,to,true,if,you,are,obtaining,a,shared,timer,manager,typically,through,specifying,the,jndi,location,of,a,timer,manager,that,has,been,explicitly,declared,as,shareable,note,that,web,logic,s,cluster,aware,job,scheduler,is,a,shared,timer,manager,too,p,the,sole,difference,between,this,factory,bean,being,in,shared,or,non,shared,mode,is,that,it,will,only,attempt,to,suspend,resume,stop,the,underlying,timer,manager,in,case,of,an,independent,non,shared,instance,this,only,affects,the,link,org,springframework,context,lifecycle,support,as,well,as,application,context,shutdown,see,stop,see,start,see,destroy,see,commonj,timers,timer,manager;public,void,set,shared,boolean,shared,this,shared,shared
TimerManagerAccessor -> public void setShared(boolean shared);1356735495;Specify whether the TimerManager obtained by this FactoryBean_is a shared instance ("true") or an independent instance ("false")._The lifecycle of the former is supposed to be managed by the application_server, while the lifecycle of the latter is up to the application._<p>Default is "false", i.e. managing an independent TimerManager instance._This is what the CommonJ specification suggests that application servers_are supposed to offer via JNDI lookups, typically declared as a_{@code resource-ref} of type {@code commonj.timers.TimerManager}_in {@code web.xml}, with {@code res-sharing-scope} set to 'Unshareable'._<p>Switch this flag to "true" if you are obtaining a shared TimerManager,_typically through specifying the JNDI location of a TimerManager that_has been explicitly declared as 'Shareable'. Note that WebLogic's_cluster-aware Job Scheduler is a shared TimerManager too._<p>The sole difference between this FactoryBean being in shared or_non-shared mode is that it will only attempt to suspend / resume / stop_the underlying TimerManager in case of an independent (non-shared) instance._This only affects the {@link org.springframework.context.Lifecycle} support_as well as application context shutdown._@see #stop()_@see #start()_@see #destroy()_@see commonj.timers.TimerManager;public void setShared(boolean shared) {_		this.shared = shared__	};specify,whether,the,timer,manager,obtained,by,this,factory,bean,is,a,shared,instance,true,or,an,independent,instance,false,the,lifecycle,of,the,former,is,supposed,to,be,managed,by,the,application,server,while,the,lifecycle,of,the,latter,is,up,to,the,application,p,default,is,false,i,e,managing,an,independent,timer,manager,instance,this,is,what,the,common,j,specification,suggests,that,application,servers,are,supposed,to,offer,via,jndi,lookups,typically,declared,as,a,code,resource,ref,of,type,code,commonj,timers,timer,manager,in,code,web,xml,with,code,res,sharing,scope,set,to,unshareable,p,switch,this,flag,to,true,if,you,are,obtaining,a,shared,timer,manager,typically,through,specifying,the,jndi,location,of,a,timer,manager,that,has,been,explicitly,declared,as,shareable,note,that,web,logic,s,cluster,aware,job,scheduler,is,a,shared,timer,manager,too,p,the,sole,difference,between,this,factory,bean,being,in,shared,or,non,shared,mode,is,that,it,will,only,attempt,to,suspend,resume,stop,the,underlying,timer,manager,in,case,of,an,independent,non,shared,instance,this,only,affects,the,link,org,springframework,context,lifecycle,support,as,well,as,application,context,shutdown,see,stop,see,start,see,destroy,see,commonj,timers,timer,manager;public,void,set,shared,boolean,shared,this,shared,shared
TimerManagerAccessor -> public void setShared(boolean shared);1357119239;Specify whether the TimerManager obtained by this FactoryBean_is a shared instance ("true") or an independent instance ("false")._The lifecycle of the former is supposed to be managed by the application_server, while the lifecycle of the latter is up to the application._<p>Default is "false", i.e. managing an independent TimerManager instance._This is what the CommonJ specification suggests that application servers_are supposed to offer via JNDI lookups, typically declared as a_{@code resource-ref} of type {@code commonj.timers.TimerManager}_in {@code web.xml}, with {@code res-sharing-scope} set to 'Unshareable'._<p>Switch this flag to "true" if you are obtaining a shared TimerManager,_typically through specifying the JNDI location of a TimerManager that_has been explicitly declared as 'Shareable'. Note that WebLogic's_cluster-aware Job Scheduler is a shared TimerManager too._<p>The sole difference between this FactoryBean being in shared or_non-shared mode is that it will only attempt to suspend / resume / stop_the underlying TimerManager in case of an independent (non-shared) instance._This only affects the {@link org.springframework.context.Lifecycle} support_as well as application context shutdown._@see #stop()_@see #start()_@see #destroy()_@see commonj.timers.TimerManager;public void setShared(boolean shared) {_		this.shared = shared__	};specify,whether,the,timer,manager,obtained,by,this,factory,bean,is,a,shared,instance,true,or,an,independent,instance,false,the,lifecycle,of,the,former,is,supposed,to,be,managed,by,the,application,server,while,the,lifecycle,of,the,latter,is,up,to,the,application,p,default,is,false,i,e,managing,an,independent,timer,manager,instance,this,is,what,the,common,j,specification,suggests,that,application,servers,are,supposed,to,offer,via,jndi,lookups,typically,declared,as,a,code,resource,ref,of,type,code,commonj,timers,timer,manager,in,code,web,xml,with,code,res,sharing,scope,set,to,unshareable,p,switch,this,flag,to,true,if,you,are,obtaining,a,shared,timer,manager,typically,through,specifying,the,jndi,location,of,a,timer,manager,that,has,been,explicitly,declared,as,shareable,note,that,web,logic,s,cluster,aware,job,scheduler,is,a,shared,timer,manager,too,p,the,sole,difference,between,this,factory,bean,being,in,shared,or,non,shared,mode,is,that,it,will,only,attempt,to,suspend,resume,stop,the,underlying,timer,manager,in,case,of,an,independent,non,shared,instance,this,only,affects,the,link,org,springframework,context,lifecycle,support,as,well,as,application,context,shutdown,see,stop,see,start,see,destroy,see,commonj,timers,timer,manager;public,void,set,shared,boolean,shared,this,shared,shared
TimerManagerAccessor -> public void setShared(boolean shared);1368482696;Specify whether the TimerManager obtained by this FactoryBean_is a shared instance ("true") or an independent instance ("false")._The lifecycle of the former is supposed to be managed by the application_server, while the lifecycle of the latter is up to the application._<p>Default is "false", i.e. managing an independent TimerManager instance._This is what the CommonJ specification suggests that application servers_are supposed to offer via JNDI lookups, typically declared as a_{@code resource-ref} of type {@code commonj.timers.TimerManager}_in {@code web.xml}, with {@code res-sharing-scope} set to 'Unshareable'._<p>Switch this flag to "true" if you are obtaining a shared TimerManager,_typically through specifying the JNDI location of a TimerManager that_has been explicitly declared as 'Shareable'. Note that WebLogic's_cluster-aware Job Scheduler is a shared TimerManager too._<p>The sole difference between this FactoryBean being in shared or_non-shared mode is that it will only attempt to suspend / resume / stop_the underlying TimerManager in case of an independent (non-shared) instance._This only affects the {@link org.springframework.context.Lifecycle} support_as well as application context shutdown._@see #stop()_@see #start()_@see #destroy()_@see commonj.timers.TimerManager;public void setShared(boolean shared) {_		this.shared = shared__	};specify,whether,the,timer,manager,obtained,by,this,factory,bean,is,a,shared,instance,true,or,an,independent,instance,false,the,lifecycle,of,the,former,is,supposed,to,be,managed,by,the,application,server,while,the,lifecycle,of,the,latter,is,up,to,the,application,p,default,is,false,i,e,managing,an,independent,timer,manager,instance,this,is,what,the,common,j,specification,suggests,that,application,servers,are,supposed,to,offer,via,jndi,lookups,typically,declared,as,a,code,resource,ref,of,type,code,commonj,timers,timer,manager,in,code,web,xml,with,code,res,sharing,scope,set,to,unshareable,p,switch,this,flag,to,true,if,you,are,obtaining,a,shared,timer,manager,typically,through,specifying,the,jndi,location,of,a,timer,manager,that,has,been,explicitly,declared,as,shareable,note,that,web,logic,s,cluster,aware,job,scheduler,is,a,shared,timer,manager,too,p,the,sole,difference,between,this,factory,bean,being,in,shared,or,non,shared,mode,is,that,it,will,only,attempt,to,suspend,resume,stop,the,underlying,timer,manager,in,case,of,an,independent,non,shared,instance,this,only,affects,the,link,org,springframework,context,lifecycle,support,as,well,as,application,context,shutdown,see,stop,see,start,see,destroy,see,commonj,timers,timer,manager;public,void,set,shared,boolean,shared,this,shared,shared
TimerManagerAccessor -> public void setShared(boolean shared);1496837955;Specify whether the TimerManager obtained by this FactoryBean_is a shared instance ("true") or an independent instance ("false")._The lifecycle of the former is supposed to be managed by the application_server, while the lifecycle of the latter is up to the application._<p>Default is "false", i.e. managing an independent TimerManager instance._This is what the CommonJ specification suggests that application servers_are supposed to offer via JNDI lookups, typically declared as a_{@code resource-ref} of type {@code commonj.timers.TimerManager}_in {@code web.xml}, with {@code res-sharing-scope} set to 'Unshareable'._<p>Switch this flag to "true" if you are obtaining a shared TimerManager,_typically through specifying the JNDI location of a TimerManager that_has been explicitly declared as 'Shareable'. Note that WebLogic's_cluster-aware Job Scheduler is a shared TimerManager too._<p>The sole difference between this FactoryBean being in shared or_non-shared mode is that it will only attempt to suspend / resume / stop_the underlying TimerManager in case of an independent (non-shared) instance._This only affects the {@link org.springframework.context.Lifecycle} support_as well as application context shutdown._@see #stop()_@see #start()_@see #destroy()_@see commonj.timers.TimerManager;public void setShared(boolean shared) {_		this.shared = shared__	};specify,whether,the,timer,manager,obtained,by,this,factory,bean,is,a,shared,instance,true,or,an,independent,instance,false,the,lifecycle,of,the,former,is,supposed,to,be,managed,by,the,application,server,while,the,lifecycle,of,the,latter,is,up,to,the,application,p,default,is,false,i,e,managing,an,independent,timer,manager,instance,this,is,what,the,common,j,specification,suggests,that,application,servers,are,supposed,to,offer,via,jndi,lookups,typically,declared,as,a,code,resource,ref,of,type,code,commonj,timers,timer,manager,in,code,web,xml,with,code,res,sharing,scope,set,to,unshareable,p,switch,this,flag,to,true,if,you,are,obtaining,a,shared,timer,manager,typically,through,specifying,the,jndi,location,of,a,timer,manager,that,has,been,explicitly,declared,as,shareable,note,that,web,logic,s,cluster,aware,job,scheduler,is,a,shared,timer,manager,too,p,the,sole,difference,between,this,factory,bean,being,in,shared,or,non,shared,mode,is,that,it,will,only,attempt,to,suspend,resume,stop,the,underlying,timer,manager,in,case,of,an,independent,non,shared,instance,this,only,affects,the,link,org,springframework,context,lifecycle,support,as,well,as,application,context,shutdown,see,stop,see,start,see,destroy,see,commonj,timers,timer,manager;public,void,set,shared,boolean,shared,this,shared,shared
TimerManagerAccessor -> public void setShared(boolean shared);1498780456;Specify whether the TimerManager obtained by this FactoryBean_is a shared instance ("true") or an independent instance ("false")._The lifecycle of the former is supposed to be managed by the application_server, while the lifecycle of the latter is up to the application._<p>Default is "false", i.e. managing an independent TimerManager instance._This is what the CommonJ specification suggests that application servers_are supposed to offer via JNDI lookups, typically declared as a_{@code resource-ref} of type {@code commonj.timers.TimerManager}_in {@code web.xml}, with {@code res-sharing-scope} set to 'Unshareable'._<p>Switch this flag to "true" if you are obtaining a shared TimerManager,_typically through specifying the JNDI location of a TimerManager that_has been explicitly declared as 'Shareable'. Note that WebLogic's_cluster-aware Job Scheduler is a shared TimerManager too._<p>The sole difference between this FactoryBean being in shared or_non-shared mode is that it will only attempt to suspend / resume / stop_the underlying TimerManager in case of an independent (non-shared) instance._This only affects the {@link org.springframework.context.Lifecycle} support_as well as application context shutdown._@see #stop()_@see #start()_@see #destroy()_@see commonj.timers.TimerManager;public void setShared(boolean shared) {_		this.shared = shared__	};specify,whether,the,timer,manager,obtained,by,this,factory,bean,is,a,shared,instance,true,or,an,independent,instance,false,the,lifecycle,of,the,former,is,supposed,to,be,managed,by,the,application,server,while,the,lifecycle,of,the,latter,is,up,to,the,application,p,default,is,false,i,e,managing,an,independent,timer,manager,instance,this,is,what,the,common,j,specification,suggests,that,application,servers,are,supposed,to,offer,via,jndi,lookups,typically,declared,as,a,code,resource,ref,of,type,code,commonj,timers,timer,manager,in,code,web,xml,with,code,res,sharing,scope,set,to,unshareable,p,switch,this,flag,to,true,if,you,are,obtaining,a,shared,timer,manager,typically,through,specifying,the,jndi,location,of,a,timer,manager,that,has,been,explicitly,declared,as,shareable,note,that,web,logic,s,cluster,aware,job,scheduler,is,a,shared,timer,manager,too,p,the,sole,difference,between,this,factory,bean,being,in,shared,or,non,shared,mode,is,that,it,will,only,attempt,to,suspend,resume,stop,the,underlying,timer,manager,in,case,of,an,independent,non,shared,instance,this,only,affects,the,link,org,springframework,context,lifecycle,support,as,well,as,application,context,shutdown,see,stop,see,start,see,destroy,see,commonj,timers,timer,manager;public,void,set,shared,boolean,shared,this,shared,shared
TimerManagerAccessor -> public void setShared(boolean shared);1533213510;Specify whether the TimerManager obtained by this FactoryBean_is a shared instance ("true") or an independent instance ("false")._The lifecycle of the former is supposed to be managed by the application_server, while the lifecycle of the latter is up to the application._<p>Default is "false", i.e. managing an independent TimerManager instance._This is what the CommonJ specification suggests that application servers_are supposed to offer via JNDI lookups, typically declared as a_{@code resource-ref} of type {@code commonj.timers.TimerManager}_in {@code web.xml}, with {@code res-sharing-scope} set to 'Unshareable'._<p>Switch this flag to "true" if you are obtaining a shared TimerManager,_typically through specifying the JNDI location of a TimerManager that_has been explicitly declared as 'Shareable'. Note that WebLogic's_cluster-aware Job Scheduler is a shared TimerManager too._<p>The sole difference between this FactoryBean being in shared or_non-shared mode is that it will only attempt to suspend / resume / stop_the underlying TimerManager in case of an independent (non-shared) instance._This only affects the {@link org.springframework.context.Lifecycle} support_as well as application context shutdown._@see #stop()_@see #start()_@see #destroy()_@see commonj.timers.TimerManager;public void setShared(boolean shared) {_		this.shared = shared__	};specify,whether,the,timer,manager,obtained,by,this,factory,bean,is,a,shared,instance,true,or,an,independent,instance,false,the,lifecycle,of,the,former,is,supposed,to,be,managed,by,the,application,server,while,the,lifecycle,of,the,latter,is,up,to,the,application,p,default,is,false,i,e,managing,an,independent,timer,manager,instance,this,is,what,the,common,j,specification,suggests,that,application,servers,are,supposed,to,offer,via,jndi,lookups,typically,declared,as,a,code,resource,ref,of,type,code,commonj,timers,timer,manager,in,code,web,xml,with,code,res,sharing,scope,set,to,unshareable,p,switch,this,flag,to,true,if,you,are,obtaining,a,shared,timer,manager,typically,through,specifying,the,jndi,location,of,a,timer,manager,that,has,been,explicitly,declared,as,shareable,note,that,web,logic,s,cluster,aware,job,scheduler,is,a,shared,timer,manager,too,p,the,sole,difference,between,this,factory,bean,being,in,shared,or,non,shared,mode,is,that,it,will,only,attempt,to,suspend,resume,stop,the,underlying,timer,manager,in,case,of,an,independent,non,shared,instance,this,only,affects,the,link,org,springframework,context,lifecycle,support,as,well,as,application,context,shutdown,see,stop,see,start,see,destroy,see,commonj,timers,timer,manager;public,void,set,shared,boolean,shared,this,shared,shared
TimerManagerAccessor -> public void start();1328020251;Resumes the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#resume();public void start() {_		if (!this.shared) {_			this.timerManager.resume()__		}_	};resumes,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,resume;public,void,start,if,this,shared,this,timer,manager,resume
TimerManagerAccessor -> public void start();1357119239;Resumes the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#resume();public void start() {_		if (!this.shared) {_			this.timerManager.resume()__		}_	};resumes,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,resume;public,void,start,if,this,shared,this,timer,manager,resume
TimerManagerAccessor -> public boolean isRunning();1328020251;Considers the underlying TimerManager as running if it is_neither suspending nor stopping._@see commonj.timers.TimerManager#isSuspending()_@see commonj.timers.TimerManager#isStopping();public boolean isRunning() {_		return (!this.timerManager.isSuspending() && !this.timerManager.isStopping())__	};considers,the,underlying,timer,manager,as,running,if,it,is,neither,suspending,nor,stopping,see,commonj,timers,timer,manager,is,suspending,see,commonj,timers,timer,manager,is,stopping;public,boolean,is,running,return,this,timer,manager,is,suspending,this,timer,manager,is,stopping
TimerManagerAccessor -> public boolean isRunning();1357119239;Considers the underlying TimerManager as running if it is_neither suspending nor stopping._@see commonj.timers.TimerManager#isSuspending()_@see commonj.timers.TimerManager#isStopping();public boolean isRunning() {_		return (!this.timerManager.isSuspending() && !this.timerManager.isStopping())__	};considers,the,underlying,timer,manager,as,running,if,it,is,neither,suspending,nor,stopping,see,commonj,timers,timer,manager,is,suspending,see,commonj,timers,timer,manager,is,stopping;public,boolean,is,running,return,this,timer,manager,is,suspending,this,timer,manager,is,stopping
TimerManagerAccessor -> @Override 	public void destroy();1356735495;Stops the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		if (!this.shared) {_			_			this.timerManager.stop()__		}_	};stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,stop;override,public,void,destroy,if,this,shared,this,timer,manager,stop
TimerManagerAccessor -> @Override 	public void destroy();1368482696;Stops the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		if (!this.shared) {_			_			this.timerManager.stop()__		}_	};stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,stop;override,public,void,destroy,if,this,shared,this,timer,manager,stop
TimerManagerAccessor -> @Override 	public void destroy();1496837955;Stops the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		if (!this.shared) {_			_			this.timerManager.stop()__		}_	};stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,stop;override,public,void,destroy,if,this,shared,this,timer,manager,stop
TimerManagerAccessor -> @Override 	public void destroy();1498780456;Stops the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		if (this.timerManager != null && !this.shared) {_			_			this.timerManager.stop()__		}_	};stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,stop;override,public,void,destroy,if,this,timer,manager,null,this,shared,this,timer,manager,stop
TimerManagerAccessor -> @Override 	public void destroy();1533213510;Stops the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#stop();@Override_	public void destroy() {_		_		if (this.timerManager != null && !this.shared) {_			_			this.timerManager.stop()__		}_	};stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,stop;override,public,void,destroy,if,this,timer,manager,null,this,shared,this,timer,manager,stop
TimerManagerAccessor -> @Override 	public void stop();1356735495;Suspends the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#suspend();@Override_	public void stop() {_		if (!this.shared) {_			this.timerManager.suspend()__		}_	};suspends,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,suspend;override,public,void,stop,if,this,shared,this,timer,manager,suspend
TimerManagerAccessor -> @Override 	public void stop();1368482696;Suspends the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#suspend();@Override_	public void stop() {_		if (!this.shared) {_			this.timerManager.suspend()__		}_	};suspends,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,suspend;override,public,void,stop,if,this,shared,this,timer,manager,suspend
TimerManagerAccessor -> @Override 	public void stop();1496837955;Suspends the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#suspend();@Override_	public void stop() {_		if (!this.shared) {_			this.timerManager.suspend()__		}_	};suspends,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,suspend;override,public,void,stop,if,this,shared,this,timer,manager,suspend
TimerManagerAccessor -> @Override 	public void stop();1498780456;Suspends the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#suspend();@Override_	public void stop() {_		if (!this.shared) {_			obtainTimerManager().suspend()__		}_	};suspends,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,suspend;override,public,void,stop,if,this,shared,obtain,timer,manager,suspend
TimerManagerAccessor -> @Override 	public void stop();1533213510;Suspends the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#suspend();@Override_	public void stop() {_		if (!this.shared) {_			obtainTimerManager().suspend()__		}_	};suspends,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,suspend;override,public,void,stop,if,this,shared,obtain,timer,manager,suspend
TimerManagerAccessor -> public void destroy();1328020251;Stops the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#stop();public void destroy() {_		_		if (!this.shared) {_			_			this.timerManager.stop()__		}_	};stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,stop;public,void,destroy,if,this,shared,this,timer,manager,stop
TimerManagerAccessor -> public void destroy();1357119239;Stops the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#stop();public void destroy() {_		_		if (!this.shared) {_			_			this.timerManager.stop()__		}_	};stops,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,stop;public,void,destroy,if,this,shared,this,timer,manager,stop
TimerManagerAccessor -> public void stop();1328020251;Suspends the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#suspend();public void stop() {_		if (!this.shared) {_			this.timerManager.suspend()__		}_	};suspends,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,suspend;public,void,stop,if,this,shared,this,timer,manager,suspend
TimerManagerAccessor -> public void stop();1357119239;Suspends the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#suspend();public void stop() {_		if (!this.shared) {_			this.timerManager.suspend()__		}_	};suspends,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,suspend;public,void,stop,if,this,shared,this,timer,manager,suspend
TimerManagerAccessor -> @Override 	public boolean isRunning();1356735495;Considers the underlying TimerManager as running if it is_neither suspending nor stopping._@see commonj.timers.TimerManager#isSuspending()_@see commonj.timers.TimerManager#isStopping();@Override_	public boolean isRunning() {_		return (!this.timerManager.isSuspending() && !this.timerManager.isStopping())__	};considers,the,underlying,timer,manager,as,running,if,it,is,neither,suspending,nor,stopping,see,commonj,timers,timer,manager,is,suspending,see,commonj,timers,timer,manager,is,stopping;override,public,boolean,is,running,return,this,timer,manager,is,suspending,this,timer,manager,is,stopping
TimerManagerAccessor -> @Override 	public boolean isRunning();1368482696;Considers the underlying TimerManager as running if it is_neither suspending nor stopping._@see commonj.timers.TimerManager#isSuspending()_@see commonj.timers.TimerManager#isStopping();@Override_	public boolean isRunning() {_		return (!this.timerManager.isSuspending() && !this.timerManager.isStopping())__	};considers,the,underlying,timer,manager,as,running,if,it,is,neither,suspending,nor,stopping,see,commonj,timers,timer,manager,is,suspending,see,commonj,timers,timer,manager,is,stopping;override,public,boolean,is,running,return,this,timer,manager,is,suspending,this,timer,manager,is,stopping
TimerManagerAccessor -> @Override 	public boolean isRunning();1496837955;Considers the underlying TimerManager as running if it is_neither suspending nor stopping._@see commonj.timers.TimerManager#isSuspending()_@see commonj.timers.TimerManager#isStopping();@Override_	public boolean isRunning() {_		return (!this.timerManager.isSuspending() && !this.timerManager.isStopping())__	};considers,the,underlying,timer,manager,as,running,if,it,is,neither,suspending,nor,stopping,see,commonj,timers,timer,manager,is,suspending,see,commonj,timers,timer,manager,is,stopping;override,public,boolean,is,running,return,this,timer,manager,is,suspending,this,timer,manager,is,stopping
TimerManagerAccessor -> @Override 	public boolean isRunning();1498780456;Considers the underlying TimerManager as running if it is_neither suspending nor stopping._@see commonj.timers.TimerManager#isSuspending()_@see commonj.timers.TimerManager#isStopping();@Override_	public boolean isRunning() {_		TimerManager tm = obtainTimerManager()__		return (!tm.isSuspending() && !tm.isStopping())__	};considers,the,underlying,timer,manager,as,running,if,it,is,neither,suspending,nor,stopping,see,commonj,timers,timer,manager,is,suspending,see,commonj,timers,timer,manager,is,stopping;override,public,boolean,is,running,timer,manager,tm,obtain,timer,manager,return,tm,is,suspending,tm,is,stopping
TimerManagerAccessor -> @Override 	public boolean isRunning();1533213510;Considers the underlying TimerManager as running if it is_neither suspending nor stopping._@see commonj.timers.TimerManager#isSuspending()_@see commonj.timers.TimerManager#isStopping();@Override_	public boolean isRunning() {_		TimerManager tm = obtainTimerManager()__		return (!tm.isSuspending() && !tm.isStopping())__	};considers,the,underlying,timer,manager,as,running,if,it,is,neither,suspending,nor,stopping,see,commonj,timers,timer,manager,is,suspending,see,commonj,timers,timer,manager,is,stopping;override,public,boolean,is,running,timer,manager,tm,obtain,timer,manager,return,tm,is,suspending,tm,is,stopping
TimerManagerAccessor -> @Nullable 	protected final TimerManager getTimerManager();1496837955;Return the configured TimerManager, if any._@return the TimerManager, or {@code null} if not available;@Nullable_	protected final TimerManager getTimerManager() {_		return this.timerManager__	};return,the,configured,timer,manager,if,any,return,the,timer,manager,or,code,null,if,not,available;nullable,protected,final,timer,manager,get,timer,manager,return,this,timer,manager
TimerManagerAccessor -> @Nullable 	protected final TimerManager getTimerManager();1498780456;Return the configured TimerManager, if any._@return the TimerManager, or {@code null} if not available;@Nullable_	protected final TimerManager getTimerManager() {_		return this.timerManager__	};return,the,configured,timer,manager,if,any,return,the,timer,manager,or,code,null,if,not,available;nullable,protected,final,timer,manager,get,timer,manager,return,this,timer,manager
TimerManagerAccessor -> @Nullable 	protected final TimerManager getTimerManager();1533213510;Return the configured TimerManager, if any._@return the TimerManager, or {@code null} if not available;@Nullable_	protected final TimerManager getTimerManager() {_		return this.timerManager__	};return,the,configured,timer,manager,if,any,return,the,timer,manager,or,code,null,if,not,available;nullable,protected,final,timer,manager,get,timer,manager,return,this,timer,manager
TimerManagerAccessor -> public void setTimerManagerName(String timerManagerName);1328020251;Set the JNDI name of the CommonJ TimerManager._<p>This can either be a fully qualified JNDI name, or the JNDI name relative_to the current environment naming context if "resourceRef" is set to "true"._@see #setTimerManager_@see #setResourceRef;public void setTimerManagerName(String timerManagerName) {_		this.timerManagerName = timerManagerName__	};set,the,jndi,name,of,the,common,j,timer,manager,p,this,can,either,be,a,fully,qualified,jndi,name,or,the,jndi,name,relative,to,the,current,environment,naming,context,if,resource,ref,is,set,to,true,see,set,timer,manager,see,set,resource,ref;public,void,set,timer,manager,name,string,timer,manager,name,this,timer,manager,name,timer,manager,name
TimerManagerAccessor -> public void setTimerManagerName(String timerManagerName);1356735495;Set the JNDI name of the CommonJ TimerManager._<p>This can either be a fully qualified JNDI name, or the JNDI name relative_to the current environment naming context if "resourceRef" is set to "true"._@see #setTimerManager_@see #setResourceRef;public void setTimerManagerName(String timerManagerName) {_		this.timerManagerName = timerManagerName__	};set,the,jndi,name,of,the,common,j,timer,manager,p,this,can,either,be,a,fully,qualified,jndi,name,or,the,jndi,name,relative,to,the,current,environment,naming,context,if,resource,ref,is,set,to,true,see,set,timer,manager,see,set,resource,ref;public,void,set,timer,manager,name,string,timer,manager,name,this,timer,manager,name,timer,manager,name
TimerManagerAccessor -> public void setTimerManagerName(String timerManagerName);1357119239;Set the JNDI name of the CommonJ TimerManager._<p>This can either be a fully qualified JNDI name, or the JNDI name relative_to the current environment naming context if "resourceRef" is set to "true"._@see #setTimerManager_@see #setResourceRef;public void setTimerManagerName(String timerManagerName) {_		this.timerManagerName = timerManagerName__	};set,the,jndi,name,of,the,common,j,timer,manager,p,this,can,either,be,a,fully,qualified,jndi,name,or,the,jndi,name,relative,to,the,current,environment,naming,context,if,resource,ref,is,set,to,true,see,set,timer,manager,see,set,resource,ref;public,void,set,timer,manager,name,string,timer,manager,name,this,timer,manager,name,timer,manager,name
TimerManagerAccessor -> public void setTimerManagerName(String timerManagerName);1368482696;Set the JNDI name of the CommonJ TimerManager._<p>This can either be a fully qualified JNDI name, or the JNDI name relative_to the current environment naming context if "resourceRef" is set to "true"._@see #setTimerManager_@see #setResourceRef;public void setTimerManagerName(String timerManagerName) {_		this.timerManagerName = timerManagerName__	};set,the,jndi,name,of,the,common,j,timer,manager,p,this,can,either,be,a,fully,qualified,jndi,name,or,the,jndi,name,relative,to,the,current,environment,naming,context,if,resource,ref,is,set,to,true,see,set,timer,manager,see,set,resource,ref;public,void,set,timer,manager,name,string,timer,manager,name,this,timer,manager,name,timer,manager,name
TimerManagerAccessor -> public void setTimerManagerName(String timerManagerName);1496837955;Set the JNDI name of the CommonJ TimerManager._<p>This can either be a fully qualified JNDI name, or the JNDI name relative_to the current environment naming context if "resourceRef" is set to "true"._@see #setTimerManager_@see #setResourceRef;public void setTimerManagerName(String timerManagerName) {_		this.timerManagerName = timerManagerName__	};set,the,jndi,name,of,the,common,j,timer,manager,p,this,can,either,be,a,fully,qualified,jndi,name,or,the,jndi,name,relative,to,the,current,environment,naming,context,if,resource,ref,is,set,to,true,see,set,timer,manager,see,set,resource,ref;public,void,set,timer,manager,name,string,timer,manager,name,this,timer,manager,name,timer,manager,name
TimerManagerAccessor -> public void setTimerManagerName(String timerManagerName);1498780456;Set the JNDI name of the CommonJ TimerManager._<p>This can either be a fully qualified JNDI name, or the JNDI name relative_to the current environment naming context if "resourceRef" is set to "true"._@see #setTimerManager_@see #setResourceRef;public void setTimerManagerName(String timerManagerName) {_		this.timerManagerName = timerManagerName__	};set,the,jndi,name,of,the,common,j,timer,manager,p,this,can,either,be,a,fully,qualified,jndi,name,or,the,jndi,name,relative,to,the,current,environment,naming,context,if,resource,ref,is,set,to,true,see,set,timer,manager,see,set,resource,ref;public,void,set,timer,manager,name,string,timer,manager,name,this,timer,manager,name,timer,manager,name
TimerManagerAccessor -> public void setTimerManagerName(String timerManagerName);1533213510;Set the JNDI name of the CommonJ TimerManager._<p>This can either be a fully qualified JNDI name, or the JNDI name relative_to the current environment naming context if "resourceRef" is set to "true"._@see #setTimerManager_@see #setResourceRef;public void setTimerManagerName(String timerManagerName) {_		this.timerManagerName = timerManagerName__	};set,the,jndi,name,of,the,common,j,timer,manager,p,this,can,either,be,a,fully,qualified,jndi,name,or,the,jndi,name,relative,to,the,current,environment,naming,context,if,resource,ref,is,set,to,true,see,set,timer,manager,see,set,resource,ref;public,void,set,timer,manager,name,string,timer,manager,name,this,timer,manager,name,timer,manager,name
TimerManagerAccessor -> @Override 	public void start();1356735495;Resumes the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#resume();@Override_	public void start() {_		if (!this.shared) {_			this.timerManager.resume()__		}_	};resumes,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,resume;override,public,void,start,if,this,shared,this,timer,manager,resume
TimerManagerAccessor -> @Override 	public void start();1368482696;Resumes the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#resume();@Override_	public void start() {_		if (!this.shared) {_			this.timerManager.resume()__		}_	};resumes,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,resume;override,public,void,start,if,this,shared,this,timer,manager,resume
TimerManagerAccessor -> @Override 	public void start();1496837955;Resumes the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#resume();@Override_	public void start() {_		if (!this.shared) {_			this.timerManager.resume()__		}_	};resumes,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,resume;override,public,void,start,if,this,shared,this,timer,manager,resume
TimerManagerAccessor -> @Override 	public void start();1498780456;Resumes the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#resume();@Override_	public void start() {_		if (!this.shared) {_			obtainTimerManager().resume()__		}_	};resumes,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,resume;override,public,void,start,if,this,shared,obtain,timer,manager,resume
TimerManagerAccessor -> @Override 	public void start();1533213510;Resumes the underlying TimerManager (if not shared)._@see commonj.timers.TimerManager#resume();@Override_	public void start() {_		if (!this.shared) {_			obtainTimerManager().resume()__		}_	};resumes,the,underlying,timer,manager,if,not,shared,see,commonj,timers,timer,manager,resume;override,public,void,start,if,this,shared,obtain,timer,manager,resume
