# id;timestamp;commentText;codeText;commentWords;codeWords
AdaptableJobFactory -> @Override 	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException;1356735495;Quartz 1.x version of newJob: contains actual implementation code.;@Override_	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException {_		try {_			Object jobObject = createJobInstance(bundle)__			return adaptJob(jobObject)__		}_		catch (Exception ex) {_			throw new SchedulerException("Job instantiation failed", ex)__		}_	};quartz,1,x,version,of,new,job,contains,actual,implementation,code;override,public,job,new,job,trigger,fired,bundle,bundle,throws,scheduler,exception,try,object,job,object,create,job,instance,bundle,return,adapt,job,job,object,catch,exception,ex,throw,new,scheduler,exception,job,instantiation,failed,ex
AdaptableJobFactory -> @Override 	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException;1368482696;Quartz 1.x version of newJob: contains actual implementation code.;@Override_	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException {_		try {_			Object jobObject = createJobInstance(bundle)__			return adaptJob(jobObject)__		}_		catch (Exception ex) {_			throw new SchedulerException("Job instantiation failed", ex)__		}_	};quartz,1,x,version,of,new,job,contains,actual,implementation,code;override,public,job,new,job,trigger,fired,bundle,bundle,throws,scheduler,exception,try,object,job,object,create,job,instance,bundle,return,adapt,job,job,object,catch,exception,ex,throw,new,scheduler,exception,job,instantiation,failed,ex
AdaptableJobFactory -> @Override 	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException;1375198429;Quartz 1.x version of newJob: contains actual implementation code.;@Override_	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException {_		try {_			Object jobObject = createJobInstance(bundle)__			return adaptJob(jobObject)__		}_		catch (Exception ex) {_			throw new SchedulerException("Job instantiation failed", ex)__		}_	};quartz,1,x,version,of,new,job,contains,actual,implementation,code;override,public,job,new,job,trigger,fired,bundle,bundle,throws,scheduler,exception,try,object,job,object,create,job,instance,bundle,return,adapt,job,job,object,catch,exception,ex,throw,new,scheduler,exception,job,instantiation,failed,ex
AdaptableJobFactory -> @Override 	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException;1385412762;Quartz 1.x version of newJob: contains actual implementation code.;@Override_	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException {_		try {_			Object jobObject = createJobInstance(bundle)__			return adaptJob(jobObject)__		}_		catch (Exception ex) {_			throw new SchedulerException("Job instantiation failed", ex)__		}_	};quartz,1,x,version,of,new,job,contains,actual,implementation,code;override,public,job,new,job,trigger,fired,bundle,bundle,throws,scheduler,exception,try,object,job,object,create,job,instance,bundle,return,adapt,job,job,object,catch,exception,ex,throw,new,scheduler,exception,job,instantiation,failed,ex
AdaptableJobFactory -> @Override 	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException;1388954345;Quartz 1.x version of newJob: contains actual implementation code.;@Override_	public Job newJob(TriggerFiredBundle bundle) throws SchedulerException {_		try {_			Object jobObject = createJobInstance(bundle)__			return adaptJob(jobObject)__		}_		catch (Exception ex) {_			throw new SchedulerException("Job instantiation failed", ex)__		}_	};quartz,1,x,version,of,new,job,contains,actual,implementation,code;override,public,job,new,job,trigger,fired,bundle,bundle,throws,scheduler,exception,try,object,job,object,create,job,instance,bundle,return,adapt,job,job,object,catch,exception,ex,throw,new,scheduler,exception,job,instantiation,failed,ex
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1328020251;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1356735495;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1357119239;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1363730577;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1368482696;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1375198429;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1385412762;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1388954345;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1395953963;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1468948866;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException("Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Job adaptJob(Object jobObject) throws Exception;1517348142;Adapt the given job object to the Quartz Job interface._<p>The default implementation supports straight Quartz Jobs_as well as Runnables, which get wrapped in a DelegatingJob._@param jobObject the original instance of the specified job class_@return the adapted Quartz Job instance_@throws Exception if the given job could not be adapted_@see DelegatingJob;protected Job adaptJob(Object jobObject) throws Exception {_		if (jobObject instanceof Job) {_			return (Job) jobObject__		}_		else if (jobObject instanceof Runnable) {_			return new DelegatingJob((Runnable) jobObject)__		}_		else {_			throw new IllegalArgumentException(_					"Unable to execute job class [" + jobObject.getClass().getName() +_					"]: only [org.quartz.Job] and [java.lang.Runnable] supported.")__		}_	};adapt,the,given,job,object,to,the,quartz,job,interface,p,the,default,implementation,supports,straight,quartz,jobs,as,well,as,runnables,which,get,wrapped,in,a,delegating,job,param,job,object,the,original,instance,of,the,specified,job,class,return,the,adapted,quartz,job,instance,throws,exception,if,the,given,job,could,not,be,adapted,see,delegating,job;protected,job,adapt,job,object,job,object,throws,exception,if,job,object,instanceof,job,return,job,job,object,else,if,job,object,instanceof,runnable,return,new,delegating,job,runnable,job,object,else,throw,new,illegal,argument,exception,unable,to,execute,job,class,job,object,get,class,get,name,only,org,quartz,job,and,java,lang,runnable,supported
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1328020251;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		_		Method getJobDetail = bundle.getClass().getMethod("getJobDetail")__		Object jobDetail = ReflectionUtils.invokeMethod(getJobDetail, bundle)__		Method getJobClass = jobDetail.getClass().getMethod("getJobClass")__		Class jobClass = (Class) ReflectionUtils.invokeMethod(getJobClass, jobDetail)__		return jobClass.newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,method,get,job,detail,bundle,get,class,get,method,get,job,detail,object,job,detail,reflection,utils,invoke,method,get,job,detail,bundle,method,get,job,class,job,detail,get,class,get,method,get,job,class,class,job,class,class,reflection,utils,invoke,method,get,job,class,job,detail,return,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1356735495;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		_		Method getJobDetail = bundle.getClass().getMethod("getJobDetail")__		Object jobDetail = ReflectionUtils.invokeMethod(getJobDetail, bundle)__		Method getJobClass = jobDetail.getClass().getMethod("getJobClass")__		Class jobClass = (Class) ReflectionUtils.invokeMethod(getJobClass, jobDetail)__		return jobClass.newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,method,get,job,detail,bundle,get,class,get,method,get,job,detail,object,job,detail,reflection,utils,invoke,method,get,job,detail,bundle,method,get,job,class,job,detail,get,class,get,method,get,job,class,class,job,class,class,reflection,utils,invoke,method,get,job,class,job,detail,return,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1357119239;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		_		Method getJobDetail = bundle.getClass().getMethod("getJobDetail")__		Object jobDetail = ReflectionUtils.invokeMethod(getJobDetail, bundle)__		Method getJobClass = jobDetail.getClass().getMethod("getJobClass")__		Class jobClass = (Class) ReflectionUtils.invokeMethod(getJobClass, jobDetail)__		return jobClass.newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,method,get,job,detail,bundle,get,class,get,method,get,job,detail,object,job,detail,reflection,utils,invoke,method,get,job,detail,bundle,method,get,job,class,job,detail,get,class,get,method,get,job,class,class,job,class,class,reflection,utils,invoke,method,get,job,class,job,detail,return,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1363730577;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		_		Method getJobDetail = bundle.getClass().getMethod("getJobDetail")__		Object jobDetail = ReflectionUtils.invokeMethod(getJobDetail, bundle)__		Method getJobClass = jobDetail.getClass().getMethod("getJobClass")__		Class jobClass = (Class) ReflectionUtils.invokeMethod(getJobClass, jobDetail)__		return jobClass.newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,method,get,job,detail,bundle,get,class,get,method,get,job,detail,object,job,detail,reflection,utils,invoke,method,get,job,detail,bundle,method,get,job,class,job,detail,get,class,get,method,get,job,class,class,job,class,class,reflection,utils,invoke,method,get,job,class,job,detail,return,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1368482696;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		_		Method getJobDetail = bundle.getClass().getMethod("getJobDetail")__		Object jobDetail = ReflectionUtils.invokeMethod(getJobDetail, bundle)__		Method getJobClass = jobDetail.getClass().getMethod("getJobClass")__		Class jobClass = (Class) ReflectionUtils.invokeMethod(getJobClass, jobDetail)__		return jobClass.newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,method,get,job,detail,bundle,get,class,get,method,get,job,detail,object,job,detail,reflection,utils,invoke,method,get,job,detail,bundle,method,get,job,class,job,detail,get,class,get,method,get,job,class,class,job,class,class,reflection,utils,invoke,method,get,job,class,job,detail,return,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1375198429;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		_		Method getJobDetail = bundle.getClass().getMethod("getJobDetail")__		Object jobDetail = ReflectionUtils.invokeMethod(getJobDetail, bundle)__		Method getJobClass = jobDetail.getClass().getMethod("getJobClass")__		Class jobClass = (Class) ReflectionUtils.invokeMethod(getJobClass, jobDetail)__		return jobClass.newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,method,get,job,detail,bundle,get,class,get,method,get,job,detail,object,job,detail,reflection,utils,invoke,method,get,job,detail,bundle,method,get,job,class,job,detail,get,class,get,method,get,job,class,class,job,class,class,reflection,utils,invoke,method,get,job,class,job,detail,return,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1385412762;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		_		Method getJobDetail = bundle.getClass().getMethod("getJobDetail")__		Object jobDetail = ReflectionUtils.invokeMethod(getJobDetail, bundle)__		Method getJobClass = jobDetail.getClass().getMethod("getJobClass")__		Class<?> jobClass = (Class<?>) ReflectionUtils.invokeMethod(getJobClass, jobDetail)__		return jobClass.newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,method,get,job,detail,bundle,get,class,get,method,get,job,detail,object,job,detail,reflection,utils,invoke,method,get,job,detail,bundle,method,get,job,class,job,detail,get,class,get,method,get,job,class,class,job,class,class,reflection,utils,invoke,method,get,job,class,job,detail,return,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1388954345;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		_		Method getJobDetail = bundle.getClass().getMethod("getJobDetail")__		Object jobDetail = ReflectionUtils.invokeMethod(getJobDetail, bundle)__		Method getJobClass = jobDetail.getClass().getMethod("getJobClass")__		Class<?> jobClass = (Class<?>) ReflectionUtils.invokeMethod(getJobClass, jobDetail)__		return jobClass.newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,method,get,job,detail,bundle,get,class,get,method,get,job,detail,object,job,detail,reflection,utils,invoke,method,get,job,detail,bundle,method,get,job,class,job,detail,get,class,get,method,get,job,class,class,job,class,class,reflection,utils,invoke,method,get,job,class,job,detail,return,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1395953963;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		return bundle.getJobDetail().getJobClass().newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,return,bundle,get,job,detail,get,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1468948866;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		Class<?> jobClass = bundle.getJobDetail().getJobClass()__		return ReflectionUtils.accessibleConstructor(jobClass).newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,class,job,class,bundle,get,job,detail,get,job,class,return,reflection,utils,accessible,constructor,job,class,new,instance
AdaptableJobFactory -> protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception;1517348142;Create an instance of the specified job class._<p>Can be overridden to post-process the job instance._@param bundle the TriggerFiredBundle from which the JobDetail_and other info relating to the trigger firing can be obtained_@return the job instance_@throws Exception if job instantiation failed;protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {_		Class<?> jobClass = bundle.getJobDetail().getJobClass()__		return ReflectionUtils.accessibleConstructor(jobClass).newInstance()__	};create,an,instance,of,the,specified,job,class,p,can,be,overridden,to,post,process,the,job,instance,param,bundle,the,trigger,fired,bundle,from,which,the,job,detail,and,other,info,relating,to,the,trigger,firing,can,be,obtained,return,the,job,instance,throws,exception,if,job,instantiation,failed;protected,object,create,job,instance,trigger,fired,bundle,bundle,throws,exception,class,job,class,bundle,get,job,detail,get,job,class,return,reflection,utils,accessible,constructor,job,class,new,instance
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle) throws SchedulerException;1328020251;Quartz 1.x version of newJob: contains actual implementation code.;public Job newJob(TriggerFiredBundle bundle) throws SchedulerException {_		try {_			Object jobObject = createJobInstance(bundle)__			return adaptJob(jobObject)__		}_		catch (Exception ex) {_			throw new SchedulerException("Job instantiation failed", ex)__		}_	};quartz,1,x,version,of,new,job,contains,actual,implementation,code;public,job,new,job,trigger,fired,bundle,bundle,throws,scheduler,exception,try,object,job,object,create,job,instance,bundle,return,adapt,job,job,object,catch,exception,ex,throw,new,scheduler,exception,job,instantiation,failed,ex
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle) throws SchedulerException;1357119239;Quartz 1.x version of newJob: contains actual implementation code.;public Job newJob(TriggerFiredBundle bundle) throws SchedulerException {_		try {_			Object jobObject = createJobInstance(bundle)__			return adaptJob(jobObject)__		}_		catch (Exception ex) {_			throw new SchedulerException("Job instantiation failed", ex)__		}_	};quartz,1,x,version,of,new,job,contains,actual,implementation,code;public,job,new,job,trigger,fired,bundle,bundle,throws,scheduler,exception,try,object,job,object,create,job,instance,bundle,return,adapt,job,job,object,catch,exception,ex,throw,new,scheduler,exception,job,instantiation,failed,ex
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle) throws SchedulerException;1363730577;Quartz 1.x version of newJob: contains actual implementation code.;public Job newJob(TriggerFiredBundle bundle) throws SchedulerException {_		try {_			Object jobObject = createJobInstance(bundle)__			return adaptJob(jobObject)__		}_		catch (Exception ex) {_			throw new SchedulerException("Job instantiation failed", ex)__		}_	};quartz,1,x,version,of,new,job,contains,actual,implementation,code;public,job,new,job,trigger,fired,bundle,bundle,throws,scheduler,exception,try,object,job,object,create,job,instance,bundle,return,adapt,job,job,object,catch,exception,ex,throw,new,scheduler,exception,job,instantiation,failed,ex
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException;1328020251;Quartz 2.0 version of newJob: simply delegates to old newJob variant._@see #newJob(org.quartz.spi.TriggerFiredBundle);public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {_		return newJob(bundle)__	};quartz,2,0,version,of,new,job,simply,delegates,to,old,new,job,variant,see,new,job,org,quartz,spi,trigger,fired,bundle;public,job,new,job,trigger,fired,bundle,bundle,scheduler,scheduler,throws,scheduler,exception,return,new,job,bundle
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException;1356735495;Quartz 2.0 version of newJob: simply delegates to old newJob variant._@see #newJob(org.quartz.spi.TriggerFiredBundle);public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {_		return newJob(bundle)__	};quartz,2,0,version,of,new,job,simply,delegates,to,old,new,job,variant,see,new,job,org,quartz,spi,trigger,fired,bundle;public,job,new,job,trigger,fired,bundle,bundle,scheduler,scheduler,throws,scheduler,exception,return,new,job,bundle
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException;1357119239;Quartz 2.0 version of newJob: simply delegates to old newJob variant._@see #newJob(org.quartz.spi.TriggerFiredBundle);public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {_		return newJob(bundle)__	};quartz,2,0,version,of,new,job,simply,delegates,to,old,new,job,variant,see,new,job,org,quartz,spi,trigger,fired,bundle;public,job,new,job,trigger,fired,bundle,bundle,scheduler,scheduler,throws,scheduler,exception,return,new,job,bundle
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException;1363730577;Quartz 2.0 version of newJob: simply delegates to old newJob variant._@see #newJob(org.quartz.spi.TriggerFiredBundle);public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {_		return newJob(bundle)__	};quartz,2,0,version,of,new,job,simply,delegates,to,old,new,job,variant,see,new,job,org,quartz,spi,trigger,fired,bundle;public,job,new,job,trigger,fired,bundle,bundle,scheduler,scheduler,throws,scheduler,exception,return,new,job,bundle
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException;1368482696;Quartz 2.0 version of newJob: simply delegates to old newJob variant._@see #newJob(org.quartz.spi.TriggerFiredBundle);public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {_		return newJob(bundle)__	};quartz,2,0,version,of,new,job,simply,delegates,to,old,new,job,variant,see,new,job,org,quartz,spi,trigger,fired,bundle;public,job,new,job,trigger,fired,bundle,bundle,scheduler,scheduler,throws,scheduler,exception,return,new,job,bundle
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException;1375198429;Quartz 2.0 version of newJob: simply delegates to old newJob variant._@see #newJob(org.quartz.spi.TriggerFiredBundle);public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {_		return newJob(bundle)__	};quartz,2,0,version,of,new,job,simply,delegates,to,old,new,job,variant,see,new,job,org,quartz,spi,trigger,fired,bundle;public,job,new,job,trigger,fired,bundle,bundle,scheduler,scheduler,throws,scheduler,exception,return,new,job,bundle
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException;1385412762;Quartz 2.0 version of newJob: simply delegates to old newJob variant._@see #newJob(org.quartz.spi.TriggerFiredBundle);public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {_		return newJob(bundle)__	};quartz,2,0,version,of,new,job,simply,delegates,to,old,new,job,variant,see,new,job,org,quartz,spi,trigger,fired,bundle;public,job,new,job,trigger,fired,bundle,bundle,scheduler,scheduler,throws,scheduler,exception,return,new,job,bundle
AdaptableJobFactory -> public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException;1388954345;Quartz 2.0 version of newJob: simply delegates to old newJob variant._@see #newJob(org.quartz.spi.TriggerFiredBundle);public Job newJob(TriggerFiredBundle bundle, Scheduler scheduler) throws SchedulerException {_		return newJob(bundle)__	};quartz,2,0,version,of,new,job,simply,delegates,to,old,new,job,variant,see,new,job,org,quartz,spi,trigger,fired,bundle;public,job,new,job,trigger,fired,bundle,bundle,scheduler,scheduler,throws,scheduler,exception,return,new,job,bundle
