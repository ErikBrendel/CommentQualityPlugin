commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override @Nullable public Object findTemplateSource(String name) throws IOException {     if (logger.isDebugEnabled()) {         logger.debug("Looking for FreeMarker template with name [" + name + "]").     }     Resource resource = this.resourceLoader.getResource(this.templateLoaderPath + name).     return (resource.exists() ? resource : null). }
false;public;2;13;;@Override public Reader getReader(Object templateSource, String encoding) throws IOException {     Resource resource = (Resource) templateSource.     try {         return new InputStreamReader(resource.getInputStream(), encoding).     } catch (IOException ex) {         if (logger.isDebugEnabled()) {             logger.debug("Could not find FreeMarker template: " + resource).         }         throw ex.     } }
false;public;1;14;;@Override public long getLastModified(Object templateSource) {     Resource resource = (Resource) templateSource.     try {         return resource.lastModified().     } catch (IOException ex) {         if (logger.isDebugEnabled()) {             logger.debug("Could not obtain last-modified timestamp for FreeMarker template in " + resource + ": " + ex).         }         return -1.     } }
false;public;1;3;;@Override public void closeTemplateSource(Object templateSource) throws IOException { }
