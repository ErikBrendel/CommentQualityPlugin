commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the Quartz {@link Scheduler} to operate on via its scheduler name in the Spring  * application context or also in the Quartz {@link org.quartz.impl.SchedulerRepository}.  * <p>Schedulers can be registered in the repository through custom bootstrapping,  * e.g. via the {@link org.quartz.impl.StdSchedulerFactory} or  * {@link org.quartz.impl.DirectSchedulerFactory} factory classes.  * However, in general, it's preferable to use Spring's {@link SchedulerFactoryBean}  * which includes the job/trigger/listener capabilities of this accessor as well.  * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}  * bean from the containing application context.  */ ;/**  * Specify the Quartz {@link Scheduler} to operate on via its scheduler name in the Spring  * application context or also in the Quartz {@link org.quartz.impl.SchedulerRepository}.  * <p>Schedulers can be registered in the repository through custom bootstrapping,  * e.g. via the {@link org.quartz.impl.StdSchedulerFactory} or  * {@link org.quartz.impl.DirectSchedulerFactory} factory classes.  * However, in general, it's preferable to use Spring's {@link SchedulerFactoryBean}  * which includes the job/trigger/listener capabilities of this accessor as well.  * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}  * bean from the containing application context.  */ public void setSchedulerName(String schedulerName) {     this.schedulerName = schedulerName. }
true;public;1;3;/**  * Specify the Quartz {@link Scheduler} instance to operate on.  * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}  * bean from the containing application context.  */ ;/**  * Specify the Quartz {@link Scheduler} instance to operate on.  * <p>If not specified, this accessor will try to retrieve a default {@link Scheduler}  * bean from the containing application context.  */ public void setScheduler(Scheduler scheduler) {     this.scheduler = scheduler. }
true;public;0;5;/**  * Return the Quartz Scheduler instance that this accessor operates on.  */ ;/**  * Return the Quartz Scheduler instance that this accessor operates on.  */ @Override public Scheduler getScheduler() {     Assert.state(this.scheduler != null, "No Scheduler set").     return this.scheduler. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;0;8;;@Override public void afterPropertiesSet() throws SchedulerException {     if (this.scheduler == null) {         this.scheduler = (this.schedulerName != null ? findScheduler(this.schedulerName) : findDefaultScheduler()).     }     registerListeners().     registerJobsAndTriggers(). }
false;protected;1;17;;protected Scheduler findScheduler(String schedulerName) throws SchedulerException {     if (this.beanFactory instanceof ListableBeanFactory) {         ListableBeanFactory lbf = (ListableBeanFactory) this.beanFactory.         String[] beanNames = lbf.getBeanNamesForType(Scheduler.class).         for (String beanName : beanNames) {             Scheduler schedulerBean = (Scheduler) lbf.getBean(beanName).             if (schedulerName.equals(schedulerBean.getSchedulerName())) {                 return schedulerBean.             }         }     }     Scheduler schedulerInRepo = SchedulerRepository.getInstance().lookup(schedulerName).     if (schedulerInRepo == null) {         throw new IllegalStateException("No Scheduler named '" + schedulerName + "' found").     }     return schedulerInRepo. }
false;protected;0;9;;protected Scheduler findDefaultScheduler() {     if (this.beanFactory != null) {         return this.beanFactory.getBean(Scheduler.class).     } else {         throw new IllegalStateException("No Scheduler specified, and cannot find a default Scheduler without a BeanFactory").     } }
