commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return a Map with the failed messages as keys, and the thrown exceptions  * as values.  * <p>Note that a general mail server connection failure will not result  * in failed messages being returned here: A message will only be  * contained here if actually sending it was attempted but failed.  * <p>The messages will be the same that were originally passed to the  * invoked send method, that is, SimpleMailMessages in case of using  * the generic MailSender interface.  * <p>In case of sending MimeMessage instances via JavaMailSender,  * the messages will be of type MimeMessage.  * <p><b>NOTE:</b> This Map will not be available after serialization.  * Use {@link #getMessageExceptions()} in such a scenario, which will  * be available after serialization as well.  * @return the Map of failed messages as keys and thrown exceptions as values  * @see SimpleMailMessage  * @see javax.mail.internet.MimeMessage  */ ;/**  * Return a Map with the failed messages as keys, and the thrown exceptions  * as values.  * <p>Note that a general mail server connection failure will not result  * in failed messages being returned here: A message will only be  * contained here if actually sending it was attempted but failed.  * <p>The messages will be the same that were originally passed to the  * invoked send method, that is, SimpleMailMessages in case of using  * the generic MailSender interface.  * <p>In case of sending MimeMessage instances via JavaMailSender,  * the messages will be of type MimeMessage.  * <p><b>NOTE:</b> This Map will not be available after serialization.  * Use {@link #getMessageExceptions()} in such a scenario, which will  * be available after serialization as well.  * @return the Map of failed messages as keys and thrown exceptions as values  * @see SimpleMailMessage  * @see javax.mail.internet.MimeMessage  */ public final Map<Object, Exception> getFailedMessages() {     return this.failedMessages. }
true;public,final;0;3;/**  * Return an array with thrown message exceptions.  * <p>Note that a general mail server connection failure will not result  * in failed messages being returned here: A message will only be  * contained here if actually sending it was attempted but failed.  * @return the array of thrown message exceptions,  * or an empty array if no failed messages  */ ;/**  * Return an array with thrown message exceptions.  * <p>Note that a general mail server connection failure will not result  * in failed messages being returned here: A message will only be  * contained here if actually sending it was attempted but failed.  * @return the array of thrown message exceptions,  * or an empty array if no failed messages  */ public final Exception[] getMessageExceptions() {     return (this.messageExceptions != null ? this.messageExceptions : new Exception[0]). }
false;public;0;23;;@Override @Nullable public String getMessage() {     if (ObjectUtils.isEmpty(this.messageExceptions)) {         return super.getMessage().     } else {         StringBuilder sb = new StringBuilder().         String baseMessage = super.getMessage().         if (baseMessage != null) {             sb.append(baseMessage).append(". ").         }         sb.append("Failed messages: ").         for (int i = 0. i < this.messageExceptions.length. i++) {             Exception subEx = this.messageExceptions[i].             sb.append(subEx.toString()).             if (i < this.messageExceptions.length - 1) {                 sb.append(". ").             }         }         return sb.toString().     } }
false;public;0;16;;@Override public String toString() {     if (ObjectUtils.isEmpty(this.messageExceptions)) {         return super.toString().     } else {         StringBuilder sb = new StringBuilder(super.toString()).         sb.append(". message exceptions (").append(this.messageExceptions.length).append(") are:").         for (int i = 0. i < this.messageExceptions.length. i++) {             Exception subEx = this.messageExceptions[i].             sb.append('\n').append("Failed message ").append(i + 1).append(": ").             sb.append(subEx).         }         return sb.toString().     } }
false;public;1;15;;@Override public void printStackTrace(PrintStream ps) {     if (ObjectUtils.isEmpty(this.messageExceptions)) {         super.printStackTrace(ps).     } else {         ps.println(super.toString() + ". message exception details (" + this.messageExceptions.length + ") are:").         for (int i = 0. i < this.messageExceptions.length. i++) {             Exception subEx = this.messageExceptions[i].             ps.println("Failed message " + (i + 1) + ":").             subEx.printStackTrace(ps).         }     } }
false;public;1;15;;@Override public void printStackTrace(PrintWriter pw) {     if (ObjectUtils.isEmpty(this.messageExceptions)) {         super.printStackTrace(pw).     } else {         pw.println(super.toString() + ". message exception details (" + this.messageExceptions.length + ") are:").         for (int i = 0. i < this.messageExceptions.length. i++) {             Exception subEx = this.messageExceptions[i].             pw.println("Failed message " + (i + 1) + ":").             subEx.printStackTrace(pw).         }     } }
