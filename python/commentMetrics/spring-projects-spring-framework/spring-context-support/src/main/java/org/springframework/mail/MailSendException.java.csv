# id;timestamp;commentText;codeText;commentWords;codeWords
MailSendException -> public final Exception[] getMessageExceptions();1328020251;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1356735495;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1467730834;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1496837955;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1498780456;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1502974979;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1519295386;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1520528267;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1530174524;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public final Exception[] getMessageExceptions();1530174524;Return an array with thrown message exceptions._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._@return the array of thrown message exceptions,_or an empty array if no failed messages;public final Exception[] getMessageExceptions() {_		return (this.messageExceptions != null ? this.messageExceptions : new Exception[0])__	};return,an,array,with,thrown,message,exceptions,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,return,the,array,of,thrown,message,exceptions,or,an,empty,array,if,no,failed,messages;public,final,exception,get,message,exceptions,return,this,message,exceptions,null,this,message,exceptions,new,exception,0
MailSendException -> public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages);1496837955;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,nullable,string,msg,nullable,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,failed,messages,size
MailSendException -> public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages);1498780456;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,nullable,string,msg,nullable,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,failed,messages,size
MailSendException -> public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages);1502974979;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,nullable,string,msg,nullable,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,failed,messages,size
MailSendException -> public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages);1519295386;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[0])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,nullable,string,msg,nullable,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,0
MailSendException -> public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages);1520528267;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[0])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,nullable,string,msg,nullable,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,0
MailSendException -> public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages);1530174524;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages a Map of failed messages as keys and thrown_exceptions as values;public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[0])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,a,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,nullable,string,msg,nullable,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,0
MailSendException -> public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages);1530174524;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages a Map of failed messages as keys and thrown_exceptions as values;public MailSendException(@Nullable String msg, @Nullable Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[0])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,a,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,nullable,string,msg,nullable,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,0
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1328020251;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1356735495;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1467730834;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1496837955;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1498780456;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1502974979;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1519295386;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1520528267;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1530174524;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages a Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,a,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public MailSendException(Map<Object, Exception> failedMessages);1530174524;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param failedMessages a Map of failed messages as keys and thrown_exceptions as values;public MailSendException(Map<Object, Exception> failedMessages) {_		this(null, null, failedMessages)__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,failed,messages,a,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,map,object,exception,failed,messages,this,null,null,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1328020251;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1356735495;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1467730834;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1496837955;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1498780456;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1502974979;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1519295386;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1520528267;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1530174524;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public final Map<Object, Exception> getFailedMessages();1530174524;Return a Map with the failed messages as keys, and the thrown exceptions_as values._<p>Note that a general mail server connection failure will not result_in failed messages being returned here: A message will only be_contained here if actually sending it was attempted but failed._<p>The messages will be the same that were originally passed to the_invoked send method, that is, SimpleMailMessages in case of using_the generic MailSender interface._<p>In case of sending MimeMessage instances via JavaMailSender,_the messages will be of type MimeMessage._<p><b>NOTE:</b> This Map will not be available after serialization._Use {@link #getMessageExceptions()} in such a scenario, which will_be available after serialization as well._@return the Map of failed messages as keys and thrown exceptions as values_@see SimpleMailMessage_@see javax.mail.internet.MimeMessage;public final Map<Object, Exception> getFailedMessages() {_		return this.failedMessages__	};return,a,map,with,the,failed,messages,as,keys,and,the,thrown,exceptions,as,values,p,note,that,a,general,mail,server,connection,failure,will,not,result,in,failed,messages,being,returned,here,a,message,will,only,be,contained,here,if,actually,sending,it,was,attempted,but,failed,p,the,messages,will,be,the,same,that,were,originally,passed,to,the,invoked,send,method,that,is,simple,mail,messages,in,case,of,using,the,generic,mail,sender,interface,p,in,case,of,sending,mime,message,instances,via,java,mail,sender,the,messages,will,be,of,type,mime,message,p,b,note,b,this,map,will,not,be,available,after,serialization,use,link,get,message,exceptions,in,such,a,scenario,which,will,be,available,after,serialization,as,well,return,the,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values,see,simple,mail,message,see,javax,mail,internet,mime,message;public,final,map,object,exception,get,failed,messages,return,this,failed,messages
MailSendException -> public MailSendException(String msg, @Nullable Throwable cause);1496837955;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, @Nullable Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,nullable,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map
MailSendException -> public MailSendException(String msg, @Nullable Throwable cause);1498780456;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, @Nullable Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,nullable,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map
MailSendException -> public MailSendException(String msg, @Nullable Throwable cause);1502974979;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, @Nullable Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,nullable,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map
MailSendException -> public MailSendException(String msg, @Nullable Throwable cause);1519295386;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, @Nullable Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,nullable,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map
MailSendException -> public MailSendException(String msg, @Nullable Throwable cause);1520528267;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, @Nullable Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,nullable,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map
MailSendException -> public MailSendException(String msg, @Nullable Throwable cause);1530174524;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, @Nullable Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,nullable,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map
MailSendException -> public MailSendException(String msg, @Nullable Throwable cause);1530174524;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, @Nullable Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>()__		this.messageExceptions = null__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,nullable,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map,this,message,exceptions,null
MailSendException -> public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages);1328020251;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<Object, Exception>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,string,msg,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,object,exception,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,failed,messages,size
MailSendException -> public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages);1356735495;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<Object, Exception>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,string,msg,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,object,exception,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,failed,messages,size
MailSendException -> public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages);1467730834;Constructor for registration of failed messages, with the_messages that failed as keys, and the thrown exceptions as values._<p>The messages should be the same that were originally passed_to the invoked send method._@param msg the detail message_@param cause the root cause from the mail API in use_@param failedMessages Map of failed messages as keys and thrown_exceptions as values;public MailSendException(String msg, Throwable cause, Map<Object, Exception> failedMessages) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>(failedMessages)__		this.messageExceptions = failedMessages.values().toArray(new Exception[failedMessages.size()])__	};constructor,for,registration,of,failed,messages,with,the,messages,that,failed,as,keys,and,the,thrown,exceptions,as,values,p,the,messages,should,be,the,same,that,were,originally,passed,to,the,invoked,send,method,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use,param,failed,messages,map,of,failed,messages,as,keys,and,thrown,exceptions,as,values;public,mail,send,exception,string,msg,throwable,cause,map,object,exception,failed,messages,super,msg,cause,this,failed,messages,new,linked,hash,map,failed,messages,this,message,exceptions,failed,messages,values,to,array,new,exception,failed,messages,size
MailSendException -> public MailSendException(String msg);1328020251;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1356735495;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1467730834;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1496837955;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1498780456;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1502974979;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1519295386;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1520528267;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1530174524;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg);1530174524;Constructor for MailSendException._@param msg the detail message;public MailSendException(String msg) {_		this(msg, null)__	};constructor,for,mail,send,exception,param,msg,the,detail,message;public,mail,send,exception,string,msg,this,msg,null
MailSendException -> public MailSendException(String msg, Throwable cause);1328020251;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<Object, Exception>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map,object,exception
MailSendException -> public MailSendException(String msg, Throwable cause);1356735495;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<Object, Exception>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map,object,exception
MailSendException -> public MailSendException(String msg, Throwable cause);1467730834;Constructor for MailSendException._@param msg the detail message_@param cause the root cause from the mail API in use;public MailSendException(String msg, Throwable cause) {_		super(msg, cause)__		this.failedMessages = new LinkedHashMap<>()__	};constructor,for,mail,send,exception,param,msg,the,detail,message,param,cause,the,root,cause,from,the,mail,api,in,use;public,mail,send,exception,string,msg,throwable,cause,super,msg,cause,this,failed,messages,new,linked,hash,map
