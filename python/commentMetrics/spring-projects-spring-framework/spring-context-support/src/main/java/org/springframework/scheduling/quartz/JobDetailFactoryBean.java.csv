# id;timestamp;commentText;codeText;commentWords;codeWords
JobDetailFactoryBean -> public void setRequestsRecovery(boolean requestsRecovery);1375197678;Set the recovery flag for this job, i.e. whether or not the job should_get re-executed if a 'recovery' or 'fail-over' situation is encountered.;public void setRequestsRecovery(boolean requestsRecovery) {_		this.requestsRecovery = requestsRecovery__	};set,the,recovery,flag,for,this,job,i,e,whether,or,not,the,job,should,get,re,executed,if,a,recovery,or,fail,over,situation,is,encountered;public,void,set,requests,recovery,boolean,requests,recovery,this,requests,recovery,requests,recovery
JobDetailFactoryBean -> public void setRequestsRecovery(boolean requestsRecovery);1385412762;Set the recovery flag for this job, i.e. whether or not the job should_get re-executed if a 'recovery' or 'fail-over' situation is encountered.;public void setRequestsRecovery(boolean requestsRecovery) {_		this.requestsRecovery = requestsRecovery__	};set,the,recovery,flag,for,this,job,i,e,whether,or,not,the,job,should,get,re,executed,if,a,recovery,or,fail,over,situation,is,encountered;public,void,set,requests,recovery,boolean,requests,recovery,this,requests,recovery,requests,recovery
JobDetailFactoryBean -> public void setRequestsRecovery(boolean requestsRecovery);1395953963;Set the recovery flag for this job, i.e. whether or not the job should_get re-executed if a 'recovery' or 'fail-over' situation is encountered.;public void setRequestsRecovery(boolean requestsRecovery) {_		this.requestsRecovery = requestsRecovery__	};set,the,recovery,flag,for,this,job,i,e,whether,or,not,the,job,should,get,re,executed,if,a,recovery,or,fail,over,situation,is,encountered;public,void,set,requests,recovery,boolean,requests,recovery,this,requests,recovery,requests,recovery
JobDetailFactoryBean -> public void setRequestsRecovery(boolean requestsRecovery);1498780456;Set the recovery flag for this job, i.e. whether or not the job should_get re-executed if a 'recovery' or 'fail-over' situation is encountered.;public void setRequestsRecovery(boolean requestsRecovery) {_		this.requestsRecovery = requestsRecovery__	};set,the,recovery,flag,for,this,job,i,e,whether,or,not,the,job,should,get,re,executed,if,a,recovery,or,fail,over,situation,is,encountered;public,void,set,requests,recovery,boolean,requests,recovery,this,requests,recovery,requests,recovery
JobDetailFactoryBean -> public void setRequestsRecovery(boolean requestsRecovery);1502974979;Set the recovery flag for this job, i.e. whether or not the job should_get re-executed if a 'recovery' or 'fail-over' situation is encountered.;public void setRequestsRecovery(boolean requestsRecovery) {_		this.requestsRecovery = requestsRecovery__	};set,the,recovery,flag,for,this,job,i,e,whether,or,not,the,job,should,get,re,executed,if,a,recovery,or,fail,over,situation,is,encountered;public,void,set,requests,recovery,boolean,requests,recovery,this,requests,recovery,requests,recovery
JobDetailFactoryBean -> public void setRequestsRecovery(boolean requestsRecovery);1530174524;Set the recovery flag for this job, i.e. whether or not the job should_get re-executed if a 'recovery' or 'fail-over' situation is encountered.;public void setRequestsRecovery(boolean requestsRecovery) {_		this.requestsRecovery = requestsRecovery__	};set,the,recovery,flag,for,this,job,i,e,whether,or,not,the,job,should,get,re,executed,if,a,recovery,or,fail,over,situation,is,encountered;public,void,set,requests,recovery,boolean,requests,recovery,this,requests,recovery,requests,recovery
JobDetailFactoryBean -> public void setRequestsRecovery(boolean requestsRecovery);1539119689;Set the recovery flag for this job, i.e. whether or not the job should_get re-executed if a 'recovery' or 'fail-over' situation is encountered.;public void setRequestsRecovery(boolean requestsRecovery) {_		this.requestsRecovery = requestsRecovery__	};set,the,recovery,flag,for,this,job,i,e,whether,or,not,the,job,should,get,re,executed,if,a,recovery,or,fail,over,situation,is,encountered;public,void,set,requests,recovery,boolean,requests,recovery,this,requests,recovery,requests,recovery
JobDetailFactoryBean -> public void setDescription(String description);1329142650;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1337254729;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1356735495;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1357119239;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1368482696;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1375197678;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1385412762;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1395953963;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1498780456;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1502974979;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1530174524;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDescription(String description);1539119689;Set a textual description for this job.;public void setDescription(String description) {_		this.description = description__	};set,a,textual,description,for,this,job;public,void,set,description,string,description,this,description,description
JobDetailFactoryBean -> public void setDurability(boolean durability);1329142650;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1337254729;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1356735495;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1357119239;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1368482696;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1375197678;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1385412762;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1395953963;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1498780456;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1502974979;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1530174524;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setDurability(boolean durability);1539119689;Specify the job's durability, i.e. whether it should remain stored_in the job store even if no triggers point to it anymore.;public void setDurability(boolean durability) {_		this.durability = durability__	};specify,the,job,s,durability,i,e,whether,it,should,remain,stored,in,the,job,store,even,if,no,triggers,point,to,it,anymore;public,void,set,durability,boolean,durability,this,durability,durability
JobDetailFactoryBean -> public void setName(String name);1328020251;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1329142650;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1337254729;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1356735495;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1357119239;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1368482696;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1375197678;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1385412762;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1395953963;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1498780456;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1502974979;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1530174524;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setName(String name);1539119689;Specify the job's name.;public void setName(String name) {_		this.name = name__	};specify,the,job,s,name;public,void,set,name,string,name,this,name,name
JobDetailFactoryBean -> public void setJobClass(Class<?> jobClass);1385412762;Specify the job's implementation class.;public void setJobClass(Class<?> jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class<?> jobClass);1395953963;Specify the job's implementation class.;public void setJobClass(Class<?> jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class<? extends Job> jobClass);1498780456;Specify the job's implementation class.;public void setJobClass(Class<? extends Job> jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,extends,job,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class<? extends Job> jobClass);1502974979;Specify the job's implementation class.;public void setJobClass(Class<? extends Job> jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,extends,job,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class<? extends Job> jobClass);1530174524;Specify the job's implementation class.;public void setJobClass(Class<? extends Job> jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,extends,job,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class<? extends Job> jobClass);1539119689;Specify the job's implementation class.;public void setJobClass(Class<? extends Job> jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,extends,job,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1328020251;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1329142650;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1337254729;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1356735495;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1357119239;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1368482696;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1375197678;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1385412762;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1395953963;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1498780456;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1502974979;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1530174524;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setApplicationContextJobDataKey(String applicationContextJobDataKey);1539119689;Set the key of an ApplicationContext reference to expose in the JobDataMap,_for example "applicationContext". Default is none._Only applicable when running in a Spring ApplicationContext._<p>In case of a QuartzJobBean, the reference will be applied to the Job_instance as bean property. An "applicationContext" attribute will correspond_to a "setApplicationContext" method in that scenario._<p>Note that BeanFactory callback interfaces like ApplicationContextAware_are not automatically applied to Quartz Job instances, because Quartz_itself is responsible for the lifecycle of its Jobs._<p><b>Note: When using persistent job stores where JobDetail contents will_be kept in the database, do not put an ApplicationContext reference into_the JobDataMap but rather into the SchedulerContext.</b>_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setApplicationContextSchedulerContextKey_@see org.springframework.context.ApplicationContext;public void setApplicationContextJobDataKey(String applicationContextJobDataKey) {_		this.applicationContextJobDataKey = applicationContextJobDataKey__	};set,the,key,of,an,application,context,reference,to,expose,in,the,job,data,map,for,example,application,context,default,is,none,only,applicable,when,running,in,a,spring,application,context,p,in,case,of,a,quartz,job,bean,the,reference,will,be,applied,to,the,job,instance,as,bean,property,an,application,context,attribute,will,correspond,to,a,set,application,context,method,in,that,scenario,p,note,that,bean,factory,callback,interfaces,like,application,context,aware,are,not,automatically,applied,to,quartz,job,instances,because,quartz,itself,is,responsible,for,the,lifecycle,of,its,jobs,p,b,note,when,using,persistent,job,stores,where,job,detail,contents,will,be,kept,in,the,database,do,not,put,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,b,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,application,context,scheduler,context,key,see,org,springframework,context,application,context;public,void,set,application,context,job,data,key,string,application,context,job,data,key,this,application,context,job,data,key,application,context,job,data,key
JobDetailFactoryBean -> public void setGroup(String group);1328020251;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1329142650;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1337254729;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1356735495;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1357119239;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1368482696;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1375197678;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1385412762;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1395953963;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1498780456;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1502974979;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1530174524;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setGroup(String group);1539119689;Specify the job's group.;public void setGroup(String group) {_		this.group = group__	};specify,the,job,s,group;public,void,set,group,string,group,this,group,group
JobDetailFactoryBean -> public void setJobClass(Class jobClass);1328020251;Specify the job's implementation class.;public void setJobClass(Class jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class jobClass);1329142650;Specify the job's implementation class.;public void setJobClass(Class jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class jobClass);1337254729;Specify the job's implementation class.;public void setJobClass(Class jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class jobClass);1356735495;Specify the job's implementation class.;public void setJobClass(Class jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class jobClass);1357119239;Specify the job's implementation class.;public void setJobClass(Class jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class jobClass);1368482696;Specify the job's implementation class.;public void setJobClass(Class jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobClass(Class jobClass);1375197678;Specify the job's implementation class.;public void setJobClass(Class jobClass) {_		this.jobClass = jobClass__	};specify,the,job,s,implementation,class;public,void,set,job,class,class,job,class,this,job,class,job,class
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1328020251;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1329142650;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1337254729;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1356735495;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1357119239;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1368482696;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1375197678;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1385412762;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1395953963;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1498780456;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1502974979;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1530174524;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap a Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public void setJobDataAsMap(Map<String, ?> jobDataAsMap);1539119689;Register objects in the JobDataMap via a given Map._<p>These objects will be available to this Job only,_in contrast to objects in the SchedulerContext._<p>Note: When using persistent Jobs whose JobDetail will be kept in the_database, do not put Spring-managed beans or an ApplicationContext_reference into the JobDataMap but rather into the SchedulerContext._@param jobDataAsMap a Map with String keys and any objects as values_(for example Spring-managed beans)_@see org.springframework.scheduling.quartz.SchedulerFactoryBean#setSchedulerContextAsMap;public void setJobDataAsMap(Map<String, ?> jobDataAsMap) {_		getJobDataMap().putAll(jobDataAsMap)__	};register,objects,in,the,job,data,map,via,a,given,map,p,these,objects,will,be,available,to,this,job,only,in,contrast,to,objects,in,the,scheduler,context,p,note,when,using,persistent,jobs,whose,job,detail,will,be,kept,in,the,database,do,not,put,spring,managed,beans,or,an,application,context,reference,into,the,job,data,map,but,rather,into,the,scheduler,context,param,job,data,as,map,a,map,with,string,keys,and,any,objects,as,values,for,example,spring,managed,beans,see,org,springframework,scheduling,quartz,scheduler,factory,bean,set,scheduler,context,as,map;public,void,set,job,data,as,map,map,string,job,data,as,map,get,job,data,map,put,all,job,data,as,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1328020251;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1329142650;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1337254729;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1356735495;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1357119239;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1368482696;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1375197678;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1385412762;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1395953963;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1498780456;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1502974979;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1530174524;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public JobDataMap getJobDataMap();1539119689;Return the job's JobDataMap.;public JobDataMap getJobDataMap() {_		return this.jobDataMap__	};return,the,job,s,job,data,map;public,job,data,map,get,job,data,map,return,this,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1328020251;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1329142650;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1337254729;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1356735495;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1357119239;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1368482696;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1375197678;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1385412762;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1395953963;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1498780456;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1502974979;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1530174524;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
JobDetailFactoryBean -> public void setJobDataMap(JobDataMap jobDataMap);1539119689;Set the job's JobDataMap._@see #setJobDataAsMap;public void setJobDataMap(JobDataMap jobDataMap) {_		this.jobDataMap = jobDataMap__	};set,the,job,s,job,data,map,see,set,job,data,as,map;public,void,set,job,data,map,job,data,map,job,data,map,this,job,data,map,job,data,map
