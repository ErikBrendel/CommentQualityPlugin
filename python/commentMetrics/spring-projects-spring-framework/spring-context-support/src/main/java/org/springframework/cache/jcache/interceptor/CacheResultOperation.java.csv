# id;timestamp;commentText;codeText;commentWords;codeWords
CacheResultOperation -> public boolean isAlwaysInvoked();1406128099;Specify if the method should always be invoked regardless of a cache hit._By default, the method is only invoked in case of a cache miss._@see javax.cache.annotation.CacheResult#skipGet();public boolean isAlwaysInvoked() {_		return getCacheAnnotation().skipGet()__	};specify,if,the,method,should,always,be,invoked,regardless,of,a,cache,hit,by,default,the,method,is,only,invoked,in,case,of,a,cache,miss,see,javax,cache,annotation,cache,result,skip,get;public,boolean,is,always,invoked,return,get,cache,annotation,skip,get
CacheResultOperation -> public boolean isAlwaysInvoked();1495868221;Specify if the method should always be invoked regardless of a cache hit._By default, the method is only invoked in case of a cache miss._@see javax.cache.annotation.CacheResult#skipGet();public boolean isAlwaysInvoked() {_		return getCacheAnnotation().skipGet()__	};specify,if,the,method,should,always,be,invoked,regardless,of,a,cache,hit,by,default,the,method,is,only,invoked,in,case,of,a,cache,miss,see,javax,cache,annotation,cache,result,skip,get;public,boolean,is,always,invoked,return,get,cache,annotation,skip,get
CacheResultOperation -> public boolean isAlwaysInvoked();1531589372;Specify if the method should always be invoked regardless of a cache hit._By default, the method is only invoked in case of a cache miss._@see javax.cache.annotation.CacheResult#skipGet();public boolean isAlwaysInvoked() {_		return getCacheAnnotation().skipGet()__	};specify,if,the,method,should,always,be,invoked,regardless,of,a,cache,hit,by,default,the,method,is,only,invoked,in,case,of,a,cache,miss,see,javax,cache,annotation,cache,result,skip,get;public,boolean,is,always,invoked,return,get,cache,annotation,skip,get
CacheResultOperation -> public CacheResolver getExceptionCacheResolver();1406128099;Return the {@link CacheResolver} instance to use to resolve the cache to_use for matching exceptions thrown by this operation.;public CacheResolver getExceptionCacheResolver() {_		return this.exceptionCacheResolver__	};return,the,link,cache,resolver,instance,to,use,to,resolve,the,cache,to,use,for,matching,exceptions,thrown,by,this,operation;public,cache,resolver,get,exception,cache,resolver,return,this,exception,cache,resolver
CacheResultOperation -> public CacheResolver getExceptionCacheResolver();1495868221;Return the {@link CacheResolver} instance to use to resolve the cache to_use for matching exceptions thrown by this operation.;public CacheResolver getExceptionCacheResolver() {_		return this.exceptionCacheResolver__	};return,the,link,cache,resolver,instance,to,use,to,resolve,the,cache,to,use,for,matching,exceptions,thrown,by,this,operation;public,cache,resolver,get,exception,cache,resolver,return,this,exception,cache,resolver
CacheResultOperation -> @Nullable 	public String getExceptionCacheName();1495868221;Return the name of the cache to cache exceptions, or {@code null} if_caching exceptions should be disabled._@see javax.cache.annotation.CacheResult#exceptionCacheName();@Nullable_	public String getExceptionCacheName() {_		return this.exceptionCacheName__	};return,the,name,of,the,cache,to,cache,exceptions,or,code,null,if,caching,exceptions,should,be,disabled,see,javax,cache,annotation,cache,result,exception,cache,name;nullable,public,string,get,exception,cache,name,return,this,exception,cache,name
CacheResultOperation -> @Nullable 	public String getExceptionCacheName();1531589372;Return the name of the cache to cache exceptions, or {@code null} if_caching exceptions should be disabled._@see javax.cache.annotation.CacheResult#exceptionCacheName();@Nullable_	public String getExceptionCacheName() {_		return this.exceptionCacheName__	};return,the,name,of,the,cache,to,cache,exceptions,or,code,null,if,caching,exceptions,should,be,disabled,see,javax,cache,annotation,cache,result,exception,cache,name;nullable,public,string,get,exception,cache,name,return,this,exception,cache,name
