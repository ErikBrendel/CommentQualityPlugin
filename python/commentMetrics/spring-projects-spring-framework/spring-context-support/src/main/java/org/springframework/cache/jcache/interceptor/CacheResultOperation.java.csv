commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ExceptionTypeFilter getExceptionTypeFilter() {     return this.exceptionTypeFilter. }
true;public;0;3;/**  * Specify if the method should always be invoked regardless of a cache hit.  * By default, the method is only invoked in case of a cache miss.  * @see javax.cache.annotation.CacheResult#skipGet()  */ ;/**  * Specify if the method should always be invoked regardless of a cache hit.  * By default, the method is only invoked in case of a cache miss.  * @see javax.cache.annotation.CacheResult#skipGet()  */ public boolean isAlwaysInvoked() {     return getCacheAnnotation().skipGet(). }
true;public;0;4;/**  * Return the {@link CacheResolver} instance to use to resolve the cache to  * use for matching exceptions thrown by this operation.  */ ;/**  * Return the {@link CacheResolver} instance to use to resolve the cache to  * use for matching exceptions thrown by this operation.  */ @Nullable public CacheResolver getExceptionCacheResolver() {     return this.exceptionCacheResolver. }
true;public;0;4;/**  * Return the name of the cache to cache exceptions, or {@code null} if  * caching exceptions should be disabled.  * @see javax.cache.annotation.CacheResult#exceptionCacheName()  */ ;/**  * Return the name of the cache to cache exceptions, or {@code null} if  * caching exceptions should be disabled.  * @see javax.cache.annotation.CacheResult#exceptionCacheName()  */ @Nullable public String getExceptionCacheName() {     return this.exceptionCacheName. }
