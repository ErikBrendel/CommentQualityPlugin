commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test @SuppressWarnings("unchecked") public void testMethodValidationInterceptor() {     MyValidBean bean = new MyValidBean().     ProxyFactory proxyFactory = new ProxyFactory(bean).     proxyFactory.addAdvice(new MethodValidationInterceptor()).     proxyFactory.addAdvisor(new AsyncAnnotationAdvisor()).     doTestProxyValidation((MyValidInterface<String>) proxyFactory.getProxy()). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void testMethodValidationPostProcessor() {     StaticApplicationContext ac = new StaticApplicationContext().     ac.registerSingleton("mvpp", MethodValidationPostProcessor.class).     MutablePropertyValues pvs = new MutablePropertyValues().     pvs.add("beforeExistingAdvisors", false).     ac.registerSingleton("aapp", AsyncAnnotationBeanPostProcessor.class, pvs).     ac.registerSingleton("bean", MyValidBean.class).     ac.refresh().     doTestProxyValidation(ac.getBean("bean", MyValidInterface.class)).     ac.close(). }
false;private;1;49;;private void doTestProxyValidation(MyValidInterface<String> proxy) {     assertNotNull(proxy.myValidMethod("value", 5)).     try {         assertNotNull(proxy.myValidMethod("value", 15)).         fail("Should have thrown ValidationException").     } catch (javax.validation.ValidationException ex) {     // expected     }     try {         assertNotNull(proxy.myValidMethod(null, 5)).         fail("Should have thrown ValidationException").     } catch (javax.validation.ValidationException ex) {     // expected     }     try {         assertNotNull(proxy.myValidMethod("value", 0)).         fail("Should have thrown ValidationException").     } catch (javax.validation.ValidationException ex) {     // expected     }     proxy.myValidAsyncMethod("value", 5).     try {         proxy.myValidAsyncMethod("value", 15).         fail("Should have thrown ValidationException").     } catch (javax.validation.ValidationException ex) {     // expected     }     try {         proxy.myValidAsyncMethod(null, 5).         fail("Should have thrown ValidationException").     } catch (javax.validation.ValidationException ex) {     // expected     }     assertEquals("myValue", proxy.myGenericMethod("myValue")).     try {         proxy.myGenericMethod(null).         fail("Should have thrown ValidationException").     } catch (javax.validation.ValidationException ex) {     // expected     } }
false;public;0;8;;@Test public void testLazyValidatorForMethodValidation() {     @SuppressWarnings("resource")     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(LazyMethodValidationConfig.class, CustomValidatorBean.class, MyValidBean.class, MyValidFactoryBean.class).     ctx.getBeansOfType(MyValidInterface.class).values().forEach(bean -> bean.myValidMethod("value", 5)). }
false;public;0;8;;@Test public void testLazyValidatorForMethodValidationWithProxyTargetClass() {     @SuppressWarnings("resource")     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(LazyMethodValidationConfigWithProxyTargetClass.class, CustomValidatorBean.class, MyValidBean.class, MyValidFactoryBean.class).     ctx.getBeansOfType(MyValidInterface.class).values().forEach(bean -> bean.myValidMethod("value", 5)). }
false;public;2;4;;@Override public Object myValidMethod(String arg1, int arg2) {     return (arg2 == 0 ? null : "value"). }
false;public;2;3;;@Override public void myValidAsyncMethod(String arg1, int arg2) { }
false;public;1;4;;@Override public String myGenericMethod(String value) {     return value. }
false;public;0;4;;@Override public String getObject() {     return null. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return String.class. }
false;public;2;4;;@Override public Object myValidMethod(String arg1, int arg2) {     return (arg2 == 0 ? null : "value"). }
false;public;2;3;;@Override public void myValidAsyncMethod(String arg1, int arg2) { }
false;public;1;4;;@Override public String myGenericMethod(String value) {     return value. }
false;;2;1;;@NotNull Object myValidMethod(@NotNull(groups = MyGroup.class) String arg1, @Max(10) int arg2).
false;;2;2;;@MyValid @Async void myValidAsyncMethod(@NotNull(groups = OtherGroup.class) String arg1, @Max(10) int arg2).
false;;1;1;;T myGenericMethod(@NotNull T value).
false;public,static;1;6;;@Bean public static MethodValidationPostProcessor methodValidationPostProcessor(@Lazy Validator validator) {     MethodValidationPostProcessor postProcessor = new MethodValidationPostProcessor().     postProcessor.setValidator(validator).     return postProcessor. }
false;public,static;1;7;;@Bean public static MethodValidationPostProcessor methodValidationPostProcessor(@Lazy Validator validator) {     MethodValidationPostProcessor postProcessor = new MethodValidationPostProcessor().     postProcessor.setValidator(validator).     postProcessor.setProxyTargetClass(true).     return postProcessor. }
