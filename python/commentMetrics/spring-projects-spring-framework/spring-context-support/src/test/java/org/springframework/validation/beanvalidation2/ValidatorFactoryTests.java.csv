commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testSimpleValidation() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     ValidPerson person = new ValidPerson().     Set<ConstraintViolation<ValidPerson>> result = validator.validate(person).     assertEquals(2, result.size()).     for (ConstraintViolation<ValidPerson> cv : result) {         String path = cv.getPropertyPath().toString().         if ("name".equals(path) || "address.street".equals(path)) {             assertTrue(cv.getConstraintDescriptor().getAnnotation() instanceof NotNull).         } else {             fail("Invalid constraint violation with path '" + path + "'").         }     }     Validator nativeValidator = validator.unwrap(Validator.class).     assertTrue(nativeValidator.getClass().getName().startsWith("org.hibernate")).     assertTrue(validator.unwrap(ValidatorFactory.class) instanceof HibernateValidatorFactory).     assertTrue(validator.unwrap(HibernateValidatorFactory.class) instanceof HibernateValidatorFactory).     validator.destroy(). }
false;public;0;26;;@Test public void testSimpleValidationWithCustomProvider() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.setProviderClass(HibernateValidator.class).     validator.afterPropertiesSet().     ValidPerson person = new ValidPerson().     Set<ConstraintViolation<ValidPerson>> result = validator.validate(person).     assertEquals(2, result.size()).     for (ConstraintViolation<ValidPerson> cv : result) {         String path = cv.getPropertyPath().toString().         if ("name".equals(path) || "address.street".equals(path)) {             assertTrue(cv.getConstraintDescriptor().getAnnotation() instanceof NotNull).         } else {             fail("Invalid constraint violation with path '" + path + "'").         }     }     Validator nativeValidator = validator.unwrap(Validator.class).     assertTrue(nativeValidator.getClass().getName().startsWith("org.hibernate")).     assertTrue(validator.unwrap(ValidatorFactory.class) instanceof HibernateValidatorFactory).     assertTrue(validator.unwrap(HibernateValidatorFactory.class) instanceof HibernateValidatorFactory).     validator.destroy(). }
false;public;0;15;;@Test public void testSimpleValidationWithClassLevel() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     ValidPerson person = new ValidPerson().     person.setName("Juergen").     person.getAddress().setStreet("Juergen's Street").     Set<ConstraintViolation<ValidPerson>> result = validator.validate(person).     assertEquals(1, result.size()).     Iterator<ConstraintViolation<ValidPerson>> iterator = result.iterator().     ConstraintViolation<?> cv = iterator.next().     assertEquals("", cv.getPropertyPath().toString()).     assertTrue(cv.getConstraintDescriptor().getAnnotation() instanceof NameAddressValid). }
false;public;0;14;;@Test public void testSpringValidationFieldType() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     ValidPerson person = new ValidPerson().     person.setName("Phil").     person.getAddress().setStreet("Phil's Street").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(person, "person").     validator.validate(person, errors).     assertEquals(1, errors.getErrorCount()).     assertThat("Field/Value type mismatch", errors.getFieldError("address").getRejectedValue(), instanceOf(ValidAddress.class)). }
false;public;0;27;;@Test public void testSpringValidation() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     ValidPerson person = new ValidPerson().     BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person").     validator.validate(person, result).     assertEquals(2, result.getErrorCount()).     FieldError fieldError = result.getFieldError("name").     assertEquals("name", fieldError.getField()).     List<String> errorCodes = Arrays.asList(fieldError.getCodes()).     assertEquals(4, errorCodes.size()).     assertTrue(errorCodes.contains("NotNull.person.name")).     assertTrue(errorCodes.contains("NotNull.name")).     assertTrue(errorCodes.contains("NotNull.java.lang.String")).     assertTrue(errorCodes.contains("NotNull")).     fieldError = result.getFieldError("address.street").     assertEquals("address.street", fieldError.getField()).     errorCodes = Arrays.asList(fieldError.getCodes()).     assertEquals(5, errorCodes.size()).     assertTrue(errorCodes.contains("NotNull.person.address.street")).     assertTrue(errorCodes.contains("NotNull.address.street")).     assertTrue(errorCodes.contains("NotNull.street")).     assertTrue(errorCodes.contains("NotNull.java.lang.String")).     assertTrue(errorCodes.contains("NotNull")). }
false;public;0;17;;@Test public void testSpringValidationWithClassLevel() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     ValidPerson person = new ValidPerson().     person.setName("Juergen").     person.getAddress().setStreet("Juergen's Street").     BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person").     validator.validate(person, result).     assertEquals(1, result.getErrorCount()).     ObjectError globalError = result.getGlobalError().     List<String> errorCodes = Arrays.asList(globalError.getCodes()).     assertEquals(2, errorCodes.size()).     assertTrue(errorCodes.contains("NameAddressValid.person")).     assertTrue(errorCodes.contains("NameAddressValid")). }
false;public;0;20;;@Test public void testSpringValidationWithAutowiredValidator() {     ConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(LocalValidatorFactoryBean.class).     LocalValidatorFactoryBean validator = ctx.getBean(LocalValidatorFactoryBean.class).     ValidPerson person = new ValidPerson().     person.expectsAutowiredValidator = true.     person.setName("Juergen").     person.getAddress().setStreet("Juergen's Street").     BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person").     validator.validate(person, result).     assertEquals(1, result.getErrorCount()).     ObjectError globalError = result.getGlobalError().     List<String> errorCodes = Arrays.asList(globalError.getCodes()).     assertEquals(2, errorCodes.size()).     assertTrue(errorCodes.contains("NameAddressValid.person")).     assertTrue(errorCodes.contains("NameAddressValid")).     ctx.close(). }
false;public;0;17;;@Test public void testSpringValidationWithErrorInListElement() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     ValidPerson person = new ValidPerson().     person.getAddressList().add(new ValidAddress()).     BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person").     validator.validate(person, result).     assertEquals(3, result.getErrorCount()).     FieldError fieldError = result.getFieldError("name").     assertEquals("name", fieldError.getField()).     fieldError = result.getFieldError("address.street").     assertEquals("address.street", fieldError.getField()).     fieldError = result.getFieldError("addressList[0].street").     assertEquals("addressList[0].street", fieldError.getField()). }
false;public;0;17;;@Test public void testSpringValidationWithErrorInSetElement() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     ValidPerson person = new ValidPerson().     person.getAddressSet().add(new ValidAddress()).     BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person").     validator.validate(person, result).     assertEquals(3, result.getErrorCount()).     FieldError fieldError = result.getFieldError("name").     assertEquals("name", fieldError.getField()).     fieldError = result.getFieldError("address.street").     assertEquals("address.street", fieldError.getField()).     fieldError = result.getFieldError("addressSet[].street").     assertEquals("addressSet[].street", fieldError.getField()). }
false;public;0;11;;@Test public void testInnerBeanValidation() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     MainBean mainBean = new MainBean().     Errors errors = new BeanPropertyBindingResult(mainBean, "mainBean").     validator.validate(mainBean, errors).     Object rejected = errors.getFieldValue("inner.value").     assertNull(rejected). }
false;public;0;11;;@Test public void testValidationWithOptionalField() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     MainBeanWithOptional mainBean = new MainBeanWithOptional().     Errors errors = new BeanPropertyBindingResult(mainBean, "mainBean").     validator.validate(mainBean, errors).     Object rejected = errors.getFieldValue("inner.value").     assertNull(rejected). }
false;public;0;15;;@Test public void testListValidation() {     LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean().     validator.afterPropertiesSet().     ListContainer listContainer = new ListContainer().     listContainer.addString("A").     listContainer.addString("X").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(listContainer, "listContainer").     errors.initConversion(new DefaultConversionService()).     validator.validate(listContainer, errors).     assertEquals("X", errors.getFieldValue("list[1]")). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public ValidAddress getAddress() {     return address. }
false;public;1;3;;public void setAddress(ValidAddress address) {     this.address = address. }
false;public;0;3;;public List<ValidAddress> getAddressList() {     return addressList. }
false;public;1;3;;public void setAddressList(List<ValidAddress> addressList) {     this.addressList = addressList. }
false;public;0;3;;public Set<ValidAddress> getAddressSet() {     return addressSet. }
false;public;1;3;;public void setAddressSet(Set<ValidAddress> addressSet) {     this.addressSet = addressSet. }
false;public;0;3;;public String getStreet() {     return street. }
false;public;1;3;;public void setStreet(String street) {     this.street = street. }
false;public;1;3;;@Override public void initialize(NameAddressValid constraintAnnotation) { }
false;public;2;12;;@Override public boolean isValid(ValidPerson value, ConstraintValidatorContext context) {     if (value.expectsAutowiredValidator) {         assertNotNull(this.environment).     }     boolean valid = (value.name == null || !value.address.street.contains(value.name)).     if (!valid && "Phil".equals(value.name)) {         context.buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate()).addPropertyNode("address").addConstraintViolation().disableDefaultConstraintViolation().     }     return valid. }
false;public;0;3;;public InnerBean getInner() {     return inner. }
false;public;0;3;;public Optional<InnerBean> getInner() {     return Optional.ofNullable(inner). }
false;public;0;3;;public String getValue() {     return value. }
false;public;1;3;;public void setValue(String value) {     this.value = value. }
false;public;1;3;;@Override public void initialize(InnerValid constraintAnnotation) { }
false;public;2;9;;@Override public boolean isValid(InnerBean bean, ConstraintValidatorContext context) {     context.disableDefaultConstraintViolation().     if (bean.getValue() == null) {         context.buildConstraintViolationWithTemplate("NULL").addPropertyNode("value").addConstraintViolation().         return false.     }     return true. }
false;public;1;3;;public void addString(String value) {     list.add(value). }
false;public;0;3;;public List<String> getList() {     return list. }
false;public;1;3;;@Override public void initialize(NotXList constraintAnnotation) { }
false;public;2;12;;@Override public boolean isValid(List<String> list, ConstraintValidatorContext context) {     context.disableDefaultConstraintViolation().     boolean valid = true.     for (int i = 0. i < list.size(). i++) {         if ("X".equals(list.get(i))) {             context.buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate()).addBeanNode().inIterable().atIndex(i).addConstraintViolation().             valid = false.         }     }     return valid. }
