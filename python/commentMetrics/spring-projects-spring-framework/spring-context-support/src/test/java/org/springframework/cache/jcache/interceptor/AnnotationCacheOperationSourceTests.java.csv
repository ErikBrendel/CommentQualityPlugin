commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     source.setCacheResolver(defaultCacheResolver).     source.setExceptionCacheResolver(defaultExceptionCacheResolver).     source.setKeyGenerator(defaultKeyGenerator).     source.setBeanFactory(beanFactory). }
false;public;0;6;;@Test public void cache() {     CacheResultOperation op = getDefaultCacheOperation(CacheResultOperation.class, String.class).     assertDefaults(op).     assertNull("Exception caching not enabled so resolver should not be set", op.getExceptionCacheResolver()). }
false;public;0;7;;@Test public void cacheWithException() {     CacheResultOperation op = getDefaultCacheOperation(CacheResultOperation.class, String.class, boolean.class).     assertDefaults(op).     assertEquals(defaultExceptionCacheResolver, op.getExceptionCacheResolver()).     assertEquals("exception", op.getExceptionCacheName()). }
false;public;0;5;;@Test public void put() {     CachePutOperation op = getDefaultCacheOperation(CachePutOperation.class, String.class, Object.class).     assertDefaults(op). }
false;public;0;5;;@Test public void remove() {     CacheRemoveOperation op = getDefaultCacheOperation(CacheRemoveOperation.class, String.class).     assertDefaults(op). }
false;public;0;5;;@Test public void removeAll() {     CacheRemoveAllOperation op = getDefaultCacheOperation(CacheRemoveAllOperation.class).     assertEquals(defaultCacheResolver, op.getCacheResolver()). }
false;public;0;4;;@Test public void noAnnotation() {     assertNull(getCacheOperation(AnnotatedJCacheableService.class, name.getMethodName())). }
false;public;0;5;;@Test public void multiAnnotations() {     thrown.expect(IllegalStateException.class).     getCacheOperation(InvalidCases.class, name.getMethodName()). }
false;public;0;5;;@Test public void defaultCacheNameWithCandidate() {     Method method = ReflectionUtils.findMethod(Object.class, "toString").     assertEquals("foo", source.determineCacheName(method, null, "foo")). }
false;public;0;7;;@Test public void defaultCacheNameWithDefaults() {     Method method = ReflectionUtils.findMethod(Object.class, "toString").     CacheDefaults mock = mock(CacheDefaults.class).     given(mock.cacheName()).willReturn("").     assertEquals("java.lang.Object.toString()", source.determineCacheName(method, mock, "")). }
false;public;0;5;;@Test public void defaultCacheNameNoDefaults() {     Method method = ReflectionUtils.findMethod(Object.class, "toString").     assertEquals("java.lang.Object.toString()", source.determineCacheName(method, null, "")). }
false;public;0;6;;@Test public void defaultCacheNameWithParameters() {     Method method = ReflectionUtils.findMethod(Comparator.class, "compare", Object.class, Object.class).     assertEquals("java.util.Comparator.compare(java.lang.Object,java.lang.Object)", source.determineCacheName(method, null, "")). }
false;public;0;9;;@Test public void customCacheResolver() {     CacheResultOperation operation = getCacheOperation(CacheResultOperation.class, CustomService.class, name.getMethodName(), Long.class).     assertJCacheResolver(operation.getCacheResolver(), TestableCacheResolver.class).     assertJCacheResolver(operation.getExceptionCacheResolver(), null).     assertEquals(KeyGeneratorAdapter.class, operation.getKeyGenerator().getClass()).     assertEquals(defaultKeyGenerator, ((KeyGeneratorAdapter) operation.getKeyGenerator()).getTarget()). }
false;public;0;8;;@Test public void customKeyGenerator() {     CacheResultOperation operation = getCacheOperation(CacheResultOperation.class, CustomService.class, name.getMethodName(), Long.class).     assertEquals(defaultCacheResolver, operation.getCacheResolver()).     assertNull(operation.getExceptionCacheResolver()).     assertCacheKeyGenerator(operation.getKeyGenerator(), TestableCacheKeyGenerator.class). }
false;public;0;11;;@Test public void customKeyGeneratorSpringBean() {     TestableCacheKeyGenerator bean = new TestableCacheKeyGenerator().     beanFactory.registerSingleton("fooBar", bean).     CacheResultOperation operation = getCacheOperation(CacheResultOperation.class, CustomService.class, name.getMethodName(), Long.class).     assertEquals(defaultCacheResolver, operation.getCacheResolver()).     assertNull(operation.getExceptionCacheResolver()).     KeyGeneratorAdapter adapter = (KeyGeneratorAdapter) operation.getKeyGenerator().     // take bean from context     assertSame(bean, adapter.getTarget()). }
false;public;0;8;;@Test public void customKeyGeneratorAndCacheResolver() {     CacheResultOperation operation = getCacheOperation(CacheResultOperation.class, CustomServiceWithDefaults.class, name.getMethodName(), Long.class).     assertJCacheResolver(operation.getCacheResolver(), TestableCacheResolver.class).     assertJCacheResolver(operation.getExceptionCacheResolver(), null).     assertCacheKeyGenerator(operation.getKeyGenerator(), TestableCacheKeyGenerator.class). }
false;public;0;8;;@Test public void customKeyGeneratorAndCacheResolverWithExceptionName() {     CacheResultOperation operation = getCacheOperation(CacheResultOperation.class, CustomServiceWithDefaults.class, name.getMethodName(), Long.class).     assertJCacheResolver(operation.getCacheResolver(), TestableCacheResolver.class).     assertJCacheResolver(operation.getExceptionCacheResolver(), TestableCacheResolver.class).     assertCacheKeyGenerator(operation.getKeyGenerator(), TestableCacheKeyGenerator.class). }
false;private;1;5;;private void assertDefaults(AbstractJCacheKeyOperation<?> operation) {     assertEquals(defaultCacheResolver, operation.getCacheResolver()).     assertEquals(KeyGeneratorAdapter.class, operation.getKeyGenerator().getClass()).     assertEquals(defaultKeyGenerator, ((KeyGeneratorAdapter) operation.getKeyGenerator()).getTarget()). }
false;protected;2;3;;protected <T extends JCacheOperation<?>> T getDefaultCacheOperation(Class<T> operationType, Class<?>... parameterTypes) {     return getCacheOperation(operationType, AnnotatedJCacheableService.class, name.getMethodName(), parameterTypes). }
false;protected;4;8;;protected <T extends JCacheOperation<?>> T getCacheOperation(Class<T> operationType, Class<?> targetType, String methodName, Class<?>... parameterTypes) {     JCacheOperation<?> result = getCacheOperation(targetType, methodName, parameterTypes).     assertNotNull(result).     assertEquals(operationType, result.getClass()).     return operationType.cast(result). }
false;private;3;5;;private JCacheOperation<?> getCacheOperation(Class<?> targetType, String methodName, Class<?>... parameterTypes) {     Method method = ReflectionUtils.findMethod(targetType, methodName, parameterTypes).     Assert.notNull(method, "requested method '" + methodName + "'does not exist").     return source.getCacheOperation(method, targetType). }
false;private;2;12;;private void assertJCacheResolver(CacheResolver actual, Class<? extends javax.cache.annotation.CacheResolver> expectedTargetType) {     if (expectedTargetType == null) {         assertNull(actual).     } else {         assertEquals("Wrong cache resolver implementation", CacheResolverAdapter.class, actual.getClass()).         CacheResolverAdapter adapter = (CacheResolverAdapter) actual.         assertEquals("Wrong target JCache implementation", expectedTargetType, adapter.getTarget().getClass()).     } }
false;private;2;6;;private void assertCacheKeyGenerator(KeyGenerator actual, Class<? extends CacheKeyGenerator> expectedTargetType) {     assertEquals("Wrong cache resolver implementation", KeyGeneratorAdapter.class, actual.getClass()).     KeyGeneratorAdapter adapter = (KeyGeneratorAdapter) actual.     assertEquals("Wrong target CacheKeyGenerator implementation", expectedTargetType, adapter.getTarget().getClass()). }
false;public;1;4;;@CacheResult(cacheKeyGenerator = TestableCacheKeyGenerator.class) public Object customKeyGenerator(Long id) {     return null. }
false;public;1;4;;@CacheResult(cacheKeyGenerator = TestableCacheKeyGenerator.class) public Object customKeyGeneratorSpringBean(Long id) {     return null. }
false;public;1;4;;@CacheResult(cacheResolverFactory = TestableCacheResolverFactory.class) public Object customCacheResolver(Long id) {     return null. }
false;public;1;4;;@CacheResult public Object customKeyGeneratorAndCacheResolver(Long id) {     return null. }
false;public;1;4;;@CacheResult(exceptionCacheName = "exception") public Object customKeyGeneratorAndCacheResolverWithExceptionName(Long id) {     return null. }
false;public;0;4;;@CacheRemove @CacheRemoveAll public void multiAnnotations() { }
