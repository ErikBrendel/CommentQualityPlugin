commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract ApplicationContext getApplicationContext().
false;public;0;6;;@Before public void setUp() {     ctx = getApplicationContext().     service = ctx.getBean(JCacheableService.class).     cacheManager = ctx.getBean("cacheManager", CacheManager.class). }
false;public;0;8;;@Test public void cache() {     String keyItem = name.getMethodName().     Object first = service.cache(keyItem).     Object second = service.cache(keyItem).     assertSame(first, second). }
false;public;0;16;;@Test public void cacheNull() {     Cache cache = getCache(DEFAULT_CACHE).     String keyItem = name.getMethodName().     assertNull(cache.get(keyItem)).     Object first = service.cacheNull(keyItem).     Object second = service.cacheNull(keyItem).     assertSame(first, second).     Cache.ValueWrapper wrapper = cache.get(keyItem).     assertNotNull(wrapper).     assertSame(first, wrapper.get()).     assertNull("Cached value should be null", wrapper.get()). }
false;public;0;20;;@Test public void cacheException() {     String keyItem = name.getMethodName().     Cache cache = getCache(EXCEPTION_CACHE).     Object key = createKey(keyItem).     assertNull(cache.get(key)).     try {         service.cacheWithException(keyItem, true).         fail("Should have thrown an exception").     } catch (UnsupportedOperationException e) {     // This is what we expect     }     Cache.ValueWrapper result = cache.get(key).     assertNotNull(result).     assertEquals(UnsupportedOperationException.class, result.get().getClass()). }
false;public;0;17;;@Test public void cacheExceptionVetoed() {     String keyItem = name.getMethodName().     Cache cache = getCache(EXCEPTION_CACHE).     Object key = createKey(keyItem).     assertNull(cache.get(key)).     try {         service.cacheWithException(keyItem, false).         fail("Should have thrown an exception").     } catch (NullPointerException e) {     // This is what we expect     }     assertNull(cache.get(key)). }
false;public;0;20;;@Test public void cacheCheckedException() {     String keyItem = name.getMethodName().     Cache cache = getCache(EXCEPTION_CACHE).     Object key = createKey(keyItem).     assertNull(cache.get(key)).     try {         service.cacheWithCheckedException(keyItem, true).         fail("Should have thrown an exception").     } catch (IOException e) {     // This is what we expect     }     Cache.ValueWrapper result = cache.get(key).     assertNotNull(result).     assertEquals(IOException.class, result.get().getClass()). }
false;public;0;28;;@SuppressWarnings("ThrowableResultOfMethodCallIgnored") @Test public void cacheExceptionRewriteCallStack() {     final String keyItem = name.getMethodName().     UnsupportedOperationException first = null.     long ref = service.exceptionInvocations().     try {         service.cacheWithException(keyItem, true).         fail("Should have thrown an exception").     } catch (UnsupportedOperationException e) {         first = e.     }     // Sanity check, this particular call has called the service     assertEquals("First call should not have been cached", ref + 1, service.exceptionInvocations()).     UnsupportedOperationException second = methodInCallStack(keyItem).     // Sanity check, this particular call has *not* called the service     assertEquals("Second call should have been cached", ref + 1, service.exceptionInvocations()).     assertEquals(first.getCause(), second.getCause()).     assertEquals(first.getMessage(), second.getMessage()).     assertFalse("Original stack must not contain any reference to methodInCallStack", contain(first, AbstractJCacheAnnotationTests.class.getName(), "methodInCallStack")).     assertTrue("Cached stack should have been rewritten with a reference to  methodInCallStack", contain(second, AbstractJCacheAnnotationTests.class.getName(), "methodInCallStack")). }
false;public;0;8;;@Test public void cacheAlwaysInvoke() {     String keyItem = name.getMethodName().     Object first = service.cacheAlwaysInvoke(keyItem).     Object second = service.cacheAlwaysInvoke(keyItem).     assertNotSame(first, second). }
false;public;0;8;;@Test public void cacheWithPartialKey() {     String keyItem = name.getMethodName().     Object first = service.cacheWithPartialKey(keyItem, true).     Object second = service.cacheWithPartialKey(keyItem, false).     // second argument not used, see config     assertSame(first, second). }
false;public;0;10;;@Test public void cacheWithCustomCacheResolver() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     service.cacheWithCustomCacheResolver(keyItem).     // Cache in mock cache     assertNull(cache.get(key)). }
false;public;0;10;;@Test public void cacheWithCustomKeyGenerator() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     service.cacheWithCustomKeyGenerator(keyItem, "ignored").     assertNull(cache.get(key)). }
false;public;0;15;;@Test public void put() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     assertNull(cache.get(key)).     service.put(keyItem, value).     Cache.ValueWrapper result = cache.get(key).     assertNotNull(result).     assertEquals(value, result.get()). }
false;public;0;21;;@Test public void putWithException() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     assertNull(cache.get(key)).     try {         service.putWithException(keyItem, value, true).         fail("Should have thrown an exception").     } catch (UnsupportedOperationException e) {     // This is what we expect     }     Cache.ValueWrapper result = cache.get(key).     assertNotNull(result).     assertEquals(value, result.get()). }
false;public;0;18;;@Test public void putWithExceptionVetoPut() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     assertNull(cache.get(key)).     try {         service.putWithException(keyItem, value, false).         fail("Should have thrown an exception").     } catch (NullPointerException e) {     // This is what we expect     }     assertNull(cache.get(key)). }
false;public;0;15;;@Test public void earlyPut() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     assertNull(cache.get(key)).     service.earlyPut(keyItem, value).     Cache.ValueWrapper result = cache.get(key).     assertNotNull(result).     assertEquals(value, result.get()). }
false;public;0;21;;@Test public void earlyPutWithException() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     assertNull(cache.get(key)).     try {         service.earlyPutWithException(keyItem, value, true).         fail("Should have thrown an exception").     } catch (UnsupportedOperationException e) {     // This is what we expect     }     Cache.ValueWrapper result = cache.get(key).     assertNotNull(result).     assertEquals(value, result.get()). }
false;public;0;21;;@Test public void earlyPutWithExceptionVetoPut() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     assertNull(cache.get(key)).     try {         service.earlyPutWithException(keyItem, value, false).         fail("Should have thrown an exception").     } catch (NullPointerException e) {     // This is what we expect     }     // This will be cached anyway as the earlyPut has updated the cache before     Cache.ValueWrapper result = cache.get(key).     assertNotNull(result).     assertEquals(value, result.get()). }
false;public;0;13;;@Test public void remove() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     cache.put(key, value).     service.remove(keyItem).     assertNull(cache.get(key)). }
false;public;0;19;;@Test public void removeWithException() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     cache.put(key, value).     try {         service.removeWithException(keyItem, true).         fail("Should have thrown an exception").     } catch (UnsupportedOperationException e) {     // This is what we expect     }     assertNull(cache.get(key)). }
false;public;0;20;;@Test public void removeWithExceptionVetoRemove() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     cache.put(key, value).     try {         service.removeWithException(keyItem, false).         fail("Should have thrown an exception").     } catch (NullPointerException e) {     // This is what we expect     }     Cache.ValueWrapper wrapper = cache.get(key).     assertNotNull(wrapper).     assertEquals(value, wrapper.get()). }
false;public;0;13;;@Test public void earlyRemove() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     cache.put(key, value).     service.earlyRemove(keyItem).     assertNull(cache.get(key)). }
false;public;0;18;;@Test public void earlyRemoveWithException() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     cache.put(key, value).     try {         service.earlyRemoveWithException(keyItem, true).         fail("Should have thrown an exception").     } catch (UnsupportedOperationException e) {     // This is what we expect     }     assertNull(cache.get(key)). }
false;public;0;19;;@Test public void earlyRemoveWithExceptionVetoRemove() {     String keyItem = name.getMethodName().     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(keyItem).     Object value = new Object().     cache.put(key, value).     try {         service.earlyRemoveWithException(keyItem, false).         fail("Should have thrown an exception").     } catch (NullPointerException e) {     // This is what we expect     }     // This will be remove anyway as the earlyRemove has removed the cache before     assertNull(cache.get(key)). }
false;public;0;11;;@Test public void removeAll() {     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(name.getMethodName()).     cache.put(key, new Object()).     service.removeAll().     assertTrue(isEmpty(cache)). }
false;public;0;17;;@Test public void removeAllWithException() {     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(name.getMethodName()).     cache.put(key, new Object()).     try {         service.removeAllWithException(true).         fail("Should have thrown an exception").     } catch (UnsupportedOperationException e) {     // This is what we expect     }     assertTrue(isEmpty(cache)). }
false;public;0;16;;@Test public void removeAllWithExceptionVetoRemove() {     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(name.getMethodName()).     cache.put(key, new Object()).     try {         service.removeAllWithException(false).         fail("Should have thrown an exception").     } catch (NullPointerException e) {     // This is what we expect     }     assertNotNull(cache.get(key)). }
false;public;0;11;;@Test public void earlyRemoveAll() {     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(name.getMethodName()).     cache.put(key, new Object()).     service.earlyRemoveAll().     assertTrue(isEmpty(cache)). }
false;public;0;16;;@Test public void earlyRemoveAllWithException() {     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(name.getMethodName()).     cache.put(key, new Object()).     try {         service.earlyRemoveAllWithException(true).         fail("Should have thrown an exception").     } catch (UnsupportedOperationException e) {     // This is what we expect     }     assertTrue(isEmpty(cache)). }
false;public;0;17;;@Test public void earlyRemoveAllWithExceptionVetoRemove() {     Cache cache = getCache(DEFAULT_CACHE).     Object key = createKey(name.getMethodName()).     cache.put(key, new Object()).     try {         service.earlyRemoveAllWithException(false).         fail("Should have thrown an exception").     } catch (NullPointerException e) {     // This is what we expect     }     // This will be remove anyway as the earlyRemove has removed the cache before     assertTrue(isEmpty(cache)). }
false;protected;1;4;;protected boolean isEmpty(Cache cache) {     ConcurrentHashMap<?, ?> nativeCache = (ConcurrentHashMap<?, ?>) cache.getNativeCache().     return nativeCache.isEmpty(). }
false;private;1;3;;private Object createKey(Object... params) {     return SimpleKeyGenerator.generateKey(params). }
false;private;1;5;;private Cache getCache(String name) {     Cache cache = cacheManager.getCache(name).     assertNotNull("required cache " + name + " does not exist", cache).     return cache. }
true;private;1;9;/**  * The only purpose of this method is to invoke a particular method on the  * service so that the call stack is different.  */ ;/**  * The only purpose of this method is to invoke a particular method on the  * service so that the call stack is different.  */ private UnsupportedOperationException methodInCallStack(String keyItem) {     try {         service.cacheWithException(keyItem, true).         throw new IllegalStateException("Should have thrown an exception").     } catch (UnsupportedOperationException e) {         return e.     } }
false;private;3;8;;private boolean contain(Throwable t, String className, String methodName) {     for (StackTraceElement element : t.getStackTrace()) {         if (className.equals(element.getClassName()) && methodName.equals(element.getMethodName())) {             return true.         }     }     return false. }
