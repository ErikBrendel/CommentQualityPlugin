commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     ctx = new AnnotationConfigApplicationContext(EnableCachingConfig.class).     cs = ctx.getBean("service", JCacheableService.class).     exceptionCache = ctx.getBean("exceptionCache", Cache.class). }
false;public;0;6;;@After public void tearDown() {     if (ctx != null) {         ctx.close().     } }
false;public;0;7;;@Test public void onlyOneInterceptorIsAvailable() {     Map<String, JCacheInterceptor> interceptors = ctx.getBeansOfType(JCacheInterceptor.class).     assertEquals("Only one interceptor should be defined", 1, interceptors.size()).     JCacheInterceptor interceptor = interceptors.values().iterator().next().     assertEquals("Custom interceptor not defined", TestCacheInterceptor.class, interceptor.getClass()). }
false;public;0;5;;@Test public void customInterceptorAppliesWithRuntimeException() {     Object o = cs.cacheWithException("id", true).     // See TestCacheInterceptor     assertEquals(55L, o). }
false;public;0;14;;@Test public void customInterceptorAppliesWithCheckedException() {     try {         cs.cacheWithCheckedException("id", true).         fail("Should have failed").     } catch (RuntimeException e) {         assertNotNull("missing original exception", e.getCause()).         assertEquals(IOException.class, e.getCause().getClass()).     } catch (Exception e) {         fail("Wrong exception type " + e).     } }
false;public;0;8;;@Bean public CacheManager cacheManager() {     SimpleCacheManager cm = new SimpleCacheManager().     cm.setCaches(Arrays.asList(defaultCache(), exceptionCache())).     return cm. }
false;public;0;4;;@Bean public JCacheableService<?> service() {     return new AnnotatedJCacheableService(defaultCache()). }
false;public;0;4;;@Bean public Cache defaultCache() {     return new ConcurrentMapCache("default"). }
false;public;0;4;;@Bean public Cache exceptionCache() {     return new ConcurrentMapCache("exception"). }
false;public;1;6;;@Bean public JCacheInterceptor jCacheInterceptor(JCacheOperationSource cacheOperationSource) {     JCacheInterceptor cacheInterceptor = new TestCacheInterceptor().     cacheInterceptor.setCacheOperationSource(cacheOperationSource).     return cacheInterceptor. }
false;protected;1;16;;@Override protected Object invokeOperation(CacheOperationInvoker invoker) {     try {         return super.invokeOperation(invoker).     } catch (CacheOperationInvoker.ThrowableWrapper e) {         Throwable original = e.getOriginal().         if (original.getClass() == UnsupportedOperationException.class) {             return 55L.         } else {             throw new CacheOperationInvoker.ThrowableWrapper(new RuntimeException("wrapping original", original)).         }     } }
