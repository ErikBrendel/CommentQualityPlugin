# id;timestamp;commentText;codeText;commentWords;codeWords
QuartzSupportTests -> @Test 	public void schedulerWithHsqlDataSource() throws Exception;1396195538;SPR-6038: detect HSQL and stop illegal locks being taken.;@Test_	public void schedulerWithHsqlDataSource() throws Exception {_		Assume.group(TestGroup.PERFORMANCE)___		DummyJob.param = 0__		DummyJob.count = 0___		ClassPathXmlApplicationContext ctx = context("databasePersistence.xml")__		JdbcTemplate jdbcTemplate = new JdbcTemplate(ctx.getBean(DataSource.class))__		assertTrue("No triggers were persisted", jdbcTemplate.queryForList("SELECT * FROM qrtz_triggers").size()>0)__		Thread.sleep(3000)__		try {_			assertTrue(DummyJob.count > 0)__		}_		finally {_			ctx.close()__		}_	};spr,6038,detect,hsql,and,stop,illegal,locks,being,taken;test,public,void,scheduler,with,hsql,data,source,throws,exception,assume,group,test,group,performance,dummy,job,param,0,dummy,job,count,0,class,path,xml,application,context,ctx,context,database,persistence,xml,jdbc,template,jdbc,template,new,jdbc,template,ctx,get,bean,data,source,class,assert,true,no,triggers,were,persisted,jdbc,template,query,for,list,select,from,size,0,thread,sleep,3000,try,assert,true,dummy,job,count,0,finally,ctx,close
QuartzSupportTests -> @Test 	public void schedulerWithHsqlDataSource() throws Exception;1413848647;SPR-6038: detect HSQL and stop illegal locks being taken.;@Test_	public void schedulerWithHsqlDataSource() throws Exception {_		Assume.group(TestGroup.PERFORMANCE)___		DummyJob.param = 0__		DummyJob.count = 0___		ClassPathXmlApplicationContext ctx = context("databasePersistence.xml")__		JdbcTemplate jdbcTemplate = new JdbcTemplate(ctx.getBean(DataSource.class))__		assertTrue("No triggers were persisted", jdbcTemplate.queryForList("SELECT * FROM qrtz_triggers").size()>0)__		Thread.sleep(3000)__		try {_			assertTrue(DummyJob.count > 0)__		}_		finally {_			ctx.close()__		}_	};spr,6038,detect,hsql,and,stop,illegal,locks,being,taken;test,public,void,scheduler,with,hsql,data,source,throws,exception,assume,group,test,group,performance,dummy,job,param,0,dummy,job,count,0,class,path,xml,application,context,ctx,context,database,persistence,xml,jdbc,template,jdbc,template,new,jdbc,template,ctx,get,bean,data,source,class,assert,true,no,triggers,were,persisted,jdbc,template,query,for,list,select,from,size,0,thread,sleep,3000,try,assert,true,dummy,job,count,0,finally,ctx,close
QuartzSupportTests -> @Test 	public void schedulerWithHsqlDataSource() throws Exception;1420925280;SPR-6038: detect HSQL and stop illegal locks being taken.;@Test_	public void schedulerWithHsqlDataSource() throws Exception {_		Assume.group(TestGroup.PERFORMANCE)___		DummyJob.param = 0__		DummyJob.count = 0___		ClassPathXmlApplicationContext ctx = context("databasePersistence.xml")__		JdbcTemplate jdbcTemplate = new JdbcTemplate(ctx.getBean(DataSource.class))__		assertTrue("No triggers were persisted", jdbcTemplate.queryForList("SELECT * FROM qrtz_triggers").size()>0)__		Thread.sleep(3000)__		try {_			assertTrue("DummyJob should have been executed at least once.", DummyJob.count > 0)__		}_		finally {_			ctx.close()__		}_	};spr,6038,detect,hsql,and,stop,illegal,locks,being,taken;test,public,void,scheduler,with,hsql,data,source,throws,exception,assume,group,test,group,performance,dummy,job,param,0,dummy,job,count,0,class,path,xml,application,context,ctx,context,database,persistence,xml,jdbc,template,jdbc,template,new,jdbc,template,ctx,get,bean,data,source,class,assert,true,no,triggers,were,persisted,jdbc,template,query,for,list,select,from,size,0,thread,sleep,3000,try,assert,true,dummy,job,should,have,been,executed,at,least,once,dummy,job,count,0,finally,ctx,close
QuartzSupportTests -> @Test 	public void schedulerWithHsqlDataSource() throws Exception;1421835067;SPR-6038: detect HSQL and stop illegal locks being taken._TODO: Against Quartz 2.2, this test's job doesn't actually execute anymore...;@Test_	public void schedulerWithHsqlDataSource() throws Exception {_		__		DummyJob.param = 0__		DummyJob.count = 0___		ClassPathXmlApplicationContext ctx = context("databasePersistence.xml")__		JdbcTemplate jdbcTemplate = new JdbcTemplate(ctx.getBean(DataSource.class))__		assertFalse("No triggers were persisted", jdbcTemplate.queryForList("SELECT * FROM qrtz_triggers").isEmpty())___		_	};spr,6038,detect,hsql,and,stop,illegal,locks,being,taken,todo,against,quartz,2,2,this,test,s,job,doesn,t,actually,execute,anymore;test,public,void,scheduler,with,hsql,data,source,throws,exception,dummy,job,param,0,dummy,job,count,0,class,path,xml,application,context,ctx,context,database,persistence,xml,jdbc,template,jdbc,template,new,jdbc,template,ctx,get,bean,data,source,class,assert,false,no,triggers,were,persisted,jdbc,template,query,for,list,select,from,is,empty
QuartzSupportTests -> @Test 	public void schedulerWithHsqlDataSource() throws Exception;1467730834;SPR-6038: detect HSQL and stop illegal locks being taken._TODO: Against Quartz 2.2, this test's job doesn't actually execute anymore...;@Test_	public void schedulerWithHsqlDataSource() throws Exception {_		__		DummyJob.param = 0__		DummyJob.count = 0___		ClassPathXmlApplicationContext ctx = context("databasePersistence.xml")__		JdbcTemplate jdbcTemplate = new JdbcTemplate(ctx.getBean(DataSource.class))__		assertFalse("No triggers were persisted", jdbcTemplate.queryForList("SELECT * FROM qrtz_triggers").isEmpty())___		_	};spr,6038,detect,hsql,and,stop,illegal,locks,being,taken,todo,against,quartz,2,2,this,test,s,job,doesn,t,actually,execute,anymore;test,public,void,scheduler,with,hsql,data,source,throws,exception,dummy,job,param,0,dummy,job,count,0,class,path,xml,application,context,ctx,context,database,persistence,xml,jdbc,template,jdbc,template,new,jdbc,template,ctx,get,bean,data,source,class,assert,false,no,triggers,were,persisted,jdbc,template,query,for,list,select,from,is,empty
QuartzSupportTests -> @Test 	public void schedulerWithHsqlDataSource() throws Exception;1537388368;SPR-6038: detect HSQL and stop illegal locks being taken._TODO: Against Quartz 2.2, this test's job doesn't actually execute anymore...;@Test_	public void schedulerWithHsqlDataSource() throws Exception {_		__		DummyJob.param = 0__		DummyJob.count = 0___		ClassPathXmlApplicationContext ctx = context("databasePersistence.xml")__		JdbcTemplate jdbcTemplate = new JdbcTemplate(ctx.getBean(DataSource.class))__		assertFalse("No triggers were persisted", jdbcTemplate.queryForList("SELECT * FROM qrtz_triggers").isEmpty())___		_	};spr,6038,detect,hsql,and,stop,illegal,locks,being,taken,todo,against,quartz,2,2,this,test,s,job,doesn,t,actually,execute,anymore;test,public,void,scheduler,with,hsql,data,source,throws,exception,dummy,job,param,0,dummy,job,count,0,class,path,xml,application,context,ctx,context,database,persistence,xml,jdbc,template,jdbc,template,new,jdbc,template,ctx,get,bean,data,source,class,assert,false,no,triggers,were,persisted,jdbc,template,query,for,list,select,from,is,empty
QuartzSupportTests -> @Test 	public void multipleSchedulers() throws Exception;1396195538;Tests the creation of multiple schedulers (SPR-772);@Test_	public void multipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx = context("multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,context,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void multipleSchedulers() throws Exception;1413848647;Tests the creation of multiple schedulers (SPR-772);@Test_	public void multipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx = context("multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,context,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void multipleSchedulers() throws Exception;1420925280;Tests the creation of multiple schedulers (SPR-772);@Test_	public void multipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx = context("multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,context,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void multipleSchedulers() throws Exception;1421835067;Tests the creation of multiple schedulers (SPR-772);@Test_	public void multipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx = context("multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,context,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void multipleSchedulers() throws Exception;1467730834;Tests the creation of multiple schedulers (SPR-772);@Test_	public void multipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx = context("multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,context,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1328020251;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1356735495;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1356737216;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1357119417;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1357248712;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1362408075;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1363208506;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1363730577;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1363770440;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1394113846;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
QuartzSupportTests -> @Test 	public void testMultipleSchedulers() throws Exception;1395953963;Tests the creation of multiple schedulers (SPR-772);@Test_	public void testMultipleSchedulers() throws Exception {_		ClassPathXmlApplicationContext ctx =_				new ClassPathXmlApplicationContext("/org/springframework/scheduling/quartz/multipleSchedulers.xml")__		try {_			Scheduler scheduler1 = (Scheduler) ctx.getBean("scheduler1")__			Scheduler scheduler2 = (Scheduler) ctx.getBean("scheduler2")__			assertNotSame(scheduler1, scheduler2)__			assertEquals("quartz1", scheduler1.getSchedulerName())__			assertEquals("quartz2", scheduler2.getSchedulerName())__		}_		finally {_			ctx.close()__		}_	};tests,the,creation,of,multiple,schedulers,spr,772;test,public,void,test,multiple,schedulers,throws,exception,class,path,xml,application,context,ctx,new,class,path,xml,application,context,org,springframework,scheduling,quartz,multiple,schedulers,xml,try,scheduler,scheduler1,scheduler,ctx,get,bean,scheduler1,scheduler,scheduler2,scheduler,ctx,get,bean,scheduler2,assert,not,same,scheduler1,scheduler2,assert,equals,quartz1,scheduler1,get,scheduler,name,assert,equals,quartz2,scheduler2,get,scheduler,name,finally,ctx,close
