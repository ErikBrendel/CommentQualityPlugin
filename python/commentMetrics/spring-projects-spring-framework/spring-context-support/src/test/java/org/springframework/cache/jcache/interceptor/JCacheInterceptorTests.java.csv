commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void severalCachesNotSupported() {     JCacheInterceptor interceptor = createInterceptor(createOperationSource(cacheManager, new NamedCacheResolver(cacheManager, "default", "simpleCache"), defaultExceptionCacheResolver, defaultKeyGenerator)).     AnnotatedJCacheableService service = new AnnotatedJCacheableService(cacheManager.getCache("default")).     Method m = ReflectionUtils.findMethod(AnnotatedJCacheableService.class, "cache", String.class).     try {         interceptor.execute(dummyInvoker, service, m, new Object[] { "myId" }).     } catch (IllegalStateException ex) {         assertTrue(ex.getMessage().contains("JSR-107 only supports a single cache")).     } catch (Throwable ex) {         fail("Unexpected: " + ex).     } }
false;public;0;19;;@Test public void noCacheCouldBeResolved() {     JCacheInterceptor interceptor = createInterceptor(createOperationSource(// Returns empty list     cacheManager, // Returns empty list     new NamedCacheResolver(cacheManager), defaultExceptionCacheResolver, defaultKeyGenerator)).     AnnotatedJCacheableService service = new AnnotatedJCacheableService(cacheManager.getCache("default")).     Method m = ReflectionUtils.findMethod(AnnotatedJCacheableService.class, "cache", String.class).     try {         interceptor.execute(dummyInvoker, service, m, new Object[] { "myId" }).     } catch (IllegalStateException ex) {         assertTrue(ex.getMessage().contains("Cache could not have been resolved for")).     } catch (Throwable ex) {         fail("Unexpected: " + ex).     } }
false;public;0;5;;@Test public void cacheManagerMandatoryIfCacheResolverNotSet() {     thrown.expect(IllegalStateException.class).     createOperationSource(null, null, null, defaultKeyGenerator). }
false;public;0;4;;@Test public void cacheManagerOptionalIfCacheResolversSet() {     createOperationSource(null, defaultCacheResolver, defaultExceptionCacheResolver, defaultKeyGenerator). }
false;public;0;14;;@Test public void cacheResultReturnsProperType() throws Throwable {     JCacheInterceptor interceptor = createInterceptor(createOperationSource(cacheManager, defaultCacheResolver, defaultExceptionCacheResolver, defaultKeyGenerator)).     AnnotatedJCacheableService service = new AnnotatedJCacheableService(cacheManager.getCache("default")).     Method method = ReflectionUtils.findMethod(AnnotatedJCacheableService.class, "cache", String.class).     CacheOperationInvoker invoker = new DummyInvoker(0L).     Object execute = interceptor.execute(invoker, service, method, new Object[] { "myId" }).     assertNotNull("result cannot be null.", execute).     assertEquals("Wrong result type", Long.class, execute.getClass()).     assertEquals("Wrong result", 0L, execute). }
false;protected;4;12;;protected JCacheOperationSource createOperationSource(CacheManager cacheManager, CacheResolver cacheResolver, CacheResolver exceptionCacheResolver, KeyGenerator keyGenerator) {     DefaultJCacheOperationSource source = new DefaultJCacheOperationSource().     source.setCacheManager(cacheManager).     source.setCacheResolver(cacheResolver).     source.setExceptionCacheResolver(exceptionCacheResolver).     source.setKeyGenerator(keyGenerator).     source.setBeanFactory(new StaticListableBeanFactory()).     source.afterSingletonsInstantiated().     return source. }
false;protected;1;6;;protected JCacheInterceptor createInterceptor(JCacheOperationSource source) {     JCacheInterceptor interceptor = new JCacheInterceptor().     interceptor.setCacheOperationSource(source).     interceptor.afterPropertiesSet().     return interceptor. }
false;public;0;4;;@Override public Object invoke() throws ThrowableWrapper {     return result. }
