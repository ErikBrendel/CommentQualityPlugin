commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void createWithNullTarget() {     this.thrown.expect(IllegalArgumentException.class).     new TransactionAwareCacheDecorator(null). }
false;public;0;6;;@Test public void getTargetCache() {     Cache target = new ConcurrentMapCache("testCache").     TransactionAwareCacheDecorator cache = new TransactionAwareCacheDecorator(target).     assertSame(target, cache.getTargetCache()). }
false;public;0;15;;@Test public void regularOperationsOnTarget() {     Cache target = new ConcurrentMapCache("testCache").     Cache cache = new TransactionAwareCacheDecorator(target).     assertEquals(target.getName(), cache.getName()).     assertEquals(target.getNativeCache(), cache.getNativeCache()).     Object key = new Object().     target.put(key, "123").     assertEquals("123", cache.get(key).get()).     assertEquals("123", cache.get(key, String.class)).     cache.clear().     assertNull(target.get(key)). }
false;public;0;9;;@Test public void putNonTransactional() {     Cache target = new ConcurrentMapCache("testCache").     Cache cache = new TransactionAwareCacheDecorator(target).     Object key = new Object().     cache.put(key, "123").     assertEquals("123", target.get(key, String.class)). }
false;public;0;15;;@Test public void putTransactional() {     Cache target = new ConcurrentMapCache("testCache").     Cache cache = new TransactionAwareCacheDecorator(target).     TransactionStatus status = this.txManager.getTransaction(new DefaultTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED)).     Object key = new Object().     cache.put(key, "123").     assertNull(target.get(key)).     this.txManager.commit(status).     assertEquals("123", target.get(key, String.class)). }
false;public;0;11;;@Test public void putIfAbsent() {     // no transactional support for putIfAbsent     Cache target = new ConcurrentMapCache("testCache").     Cache cache = new TransactionAwareCacheDecorator(target).     Object key = new Object().     assertNull(cache.putIfAbsent(key, "123")).     assertEquals("123", target.get(key, String.class)).     assertEquals("123", cache.putIfAbsent(key, "456").get()).     // unchanged     assertEquals("123", target.get(key, String.class)). }
false;public;0;10;;@Test public void evictNonTransactional() {     Cache target = new ConcurrentMapCache("testCache").     Cache cache = new TransactionAwareCacheDecorator(target).     Object key = new Object().     cache.put(key, "123").     cache.evict(key).     assertNull(target.get(key)). }
false;public;0;16;;@Test public void evictTransactional() {     Cache target = new ConcurrentMapCache("testCache").     Cache cache = new TransactionAwareCacheDecorator(target).     Object key = new Object().     cache.put(key, "123").     TransactionStatus status = this.txManager.getTransaction(new DefaultTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED)).     cache.evict(key).     assertEquals("123", target.get(key, String.class)).     this.txManager.commit(status).     assertNull(target.get(key)). }
false;public;0;10;;@Test public void clearNonTransactional() {     Cache target = new ConcurrentMapCache("testCache").     Cache cache = new TransactionAwareCacheDecorator(target).     Object key = new Object().     cache.put(key, "123").     cache.clear().     assertNull(target.get(key)). }
false;public;0;16;;@Test public void clearTransactional() {     Cache target = new ConcurrentMapCache("testCache").     Cache cache = new TransactionAwareCacheDecorator(target).     Object key = new Object().     cache.put(key, "123").     TransactionStatus status = this.txManager.getTransaction(new DefaultTransactionAttribute(TransactionDefinition.PROPAGATION_REQUIRED)).     cache.clear().     assertEquals("123", target.get(key, String.class)).     this.txManager.commit(status).     assertNull(target.get(key)). }
