commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;1;1;/**  * Returns the {@link CacheManager} to use.  * @param transactionAware if the requested cache manager should be aware  * of the transaction  * @return the cache manager to use  * @see org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager#setTransactionAware  */ ;/**  * Returns the {@link CacheManager} to use.  * @param transactionAware if the requested cache manager should be aware  * of the transaction  * @return the cache manager to use  * @see org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager#setTransactionAware  */ protected abstract T getCacheManager(boolean transactionAware).
true;protected,abstract;0;1;/**  * Returns the expected concrete type of the cache.  */ ;/**  * Returns the expected concrete type of the cache.  */ protected abstract Class<? extends Cache> getCacheType().
true;protected,abstract;1;1;/**  * Adds a cache with the specified name to the native manager.  */ ;/**  * Adds a cache with the specified name to the native manager.  */ protected abstract void addNativeCache(String cacheName).
true;protected,abstract;1;1;/**  * Removes the cache with the specified name from the native manager.  */ ;/**  * Removes the cache with the specified name from the native manager.  */ protected abstract void removeNativeCache(String cacheName).
false;public;0;4;;@Test public void getOnExistingCache() {     assertThat(getCacheManager(false).getCache(CACHE_NAME), is(instanceOf(getCacheType()))). }
false;public;0;14;;@Test public void getOnNewCache() {     T cacheManager = getCacheManager(false).     String cacheName = name.getMethodName().     addNativeCache(cacheName).     assertFalse(cacheManager.getCacheNames().contains(cacheName)).     try {         assertThat(cacheManager.getCache(cacheName), is(instanceOf(getCacheType()))).         assertTrue(cacheManager.getCacheNames().contains(cacheName)).     } finally {         removeNativeCache(cacheName).     } }
false;public;0;7;;@Test public void getOnUnknownCache() {     T cacheManager = getCacheManager(false).     String cacheName = name.getMethodName().     assertFalse(cacheManager.getCacheNames().contains(cacheName)).     assertThat(cacheManager.getCache(cacheName), nullValue()). }
false;public;0;5;;@Test public void getTransactionalOnExistingCache() {     assertThat(getCacheManager(true).getCache(CACHE_NAME), is(instanceOf(TransactionAwareCacheDecorator.class))). }
false;public;0;15;;@Test public void getTransactionalOnNewCache() {     String cacheName = name.getMethodName().     T cacheManager = getCacheManager(true).     assertFalse(cacheManager.getCacheNames().contains(cacheName)).     addNativeCache(cacheName).     try {         assertThat(cacheManager.getCache(cacheName), is(instanceOf(TransactionAwareCacheDecorator.class))).         assertTrue(cacheManager.getCacheNames().contains(cacheName)).     } finally {         removeNativeCache(cacheName).     } }
