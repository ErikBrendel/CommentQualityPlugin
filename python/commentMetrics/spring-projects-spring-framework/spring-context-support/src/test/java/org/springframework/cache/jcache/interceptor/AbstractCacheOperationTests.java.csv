commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract O createSimpleOperation().
false;public;0;11;;@Test public void simple() {     O operation = createSimpleOperation().     assertEquals("Wrong cache name", "simpleCache", operation.getCacheName()).     assertEquals("Unexpected number of annotation on " + operation.getMethod(), 1, operation.getAnnotations().size()).     assertEquals("Wrong method annotation", operation.getCacheAnnotation(), operation.getAnnotations().iterator().next()).     assertNotNull("cache resolver should be set", operation.getCacheResolver()). }
false;protected;4;6;;protected void assertCacheInvocationParameter(CacheInvocationParameter actual, Class<?> targetType, Object value, int position) {     assertEquals("wrong parameter type for " + actual, targetType, actual.getRawType()).     assertEquals("wrong parameter value for " + actual, value, actual.getValue()).     assertEquals("wrong parameter position for " + actual, position, actual.getParameterPosition()). }
false;protected;4;8;;protected <A extends Annotation> CacheMethodDetails<A> create(Class<A> annotationType, Class<?> targetType, String methodName, Class<?>... parameterTypes) {     Method method = ReflectionUtils.findMethod(targetType, methodName, parameterTypes).     Assert.notNull(method, "requested method '" + methodName + "'does not exist").     A cacheAnnotation = method.getAnnotation(annotationType).     return new DefaultCacheMethodDetails<>(method, cacheAnnotation, getCacheName(cacheAnnotation)). }
false;private,static;1;4;;private static String getCacheName(Annotation annotation) {     Object cacheName = AnnotationUtils.getValue(annotation, "cacheName").     return cacheName != null ? cacheName.toString() : "test". }
