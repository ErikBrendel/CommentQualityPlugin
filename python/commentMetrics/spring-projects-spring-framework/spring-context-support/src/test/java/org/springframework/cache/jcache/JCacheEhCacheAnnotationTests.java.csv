commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected ConfigurableApplicationContext getApplicationContext() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.getBeanFactory().registerSingleton("cachingProvider", getCachingProvider()).     context.register(EnableCachingConfig.class).     context.refresh().     jCacheManager = context.getBean("jCacheManager", CacheManager.class).     return context. }
false;protected;0;3;;protected CachingProvider getCachingProvider() {     return Caching.getCachingProvider("org.ehcache.jcache.JCacheCachingProvider"). }
false;public;0;6;;@After public void shutdown() {     if (jCacheManager != null) {         jCacheManager.close().     } }
false;public;0;5;;@Override @Test @Ignore("Multi cache manager support to be added") public void testCustomCacheManager() { }
false;public;0;5;;@Override @Bean public org.springframework.cache.CacheManager cacheManager() {     return new JCacheCacheManager(jCacheManager()). }
false;public;0;10;;@Bean public CacheManager jCacheManager() {     CacheManager cacheManager = this.cachingProvider.getCacheManager().     MutableConfiguration<Object, Object> mutableConfiguration = new MutableConfiguration<>().     // otherwise value has to be Serializable     mutableConfiguration.setStoreByValue(false).     cacheManager.createCache("testCache", mutableConfiguration).     cacheManager.createCache("primary", mutableConfiguration).     cacheManager.createCache("secondary", mutableConfiguration).     return cacheManager. }
false;public;0;4;;@Bean public CacheableService<?> service() {     return new DefaultCacheableService(). }
false;public;0;4;;@Bean public CacheableService<?> classService() {     return new AnnotatedClassCacheableService(). }
false;public;0;5;;@Override @Bean public KeyGenerator keyGenerator() {     return new SimpleKeyGenerator(). }
false;public;0;4;;@Bean public KeyGenerator customKeyGenerator() {     return new SomeCustomKeyGenerator(). }
