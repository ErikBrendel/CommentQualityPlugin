commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setupSpringValidatorAdapter() {     messageSource.addMessage("Size", Locale.ENGLISH, "Size of {0} is must be between {2} and {1}").     messageSource.addMessage("Same", Locale.ENGLISH, "{2} must be same value with {1}").     messageSource.addMessage("password", Locale.ENGLISH, "Password").     messageSource.addMessage("confirmPassword", Locale.ENGLISH, "Password(Confirm)"). }
false;public;0;5;;@Test public void testUnwrap() {     Validator nativeValidator = validatorAdapter.unwrap(Validator.class).     assertSame(this.nativeValidator, nativeValidator). }
false;public;0;14;;// SPR-13406 @Test public void testNoStringArgumentValue() {     TestBean testBean = new TestBean().     testBean.setPassword("pass").     testBean.setConfirmPassword("pass").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(testBean, "testBean").     validatorAdapter.validate(testBean, errors).     assertThat(errors.getFieldErrorCount("password"), is(1)).     assertThat(errors.getFieldValue("password"), is("pass")).     assertThat(messageSource.getMessage(errors.getFieldError("password"), Locale.ENGLISH), is("Size of Password is must be between 8 and 128")). }
false;public;0;14;;// SPR-13406 @Test public void testApplyMessageSourceResolvableToStringArgumentValueWithResolvedLogicalFieldName() {     TestBean testBean = new TestBean().     testBean.setPassword("password").     testBean.setConfirmPassword("PASSWORD").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(testBean, "testBean").     validatorAdapter.validate(testBean, errors).     assertThat(errors.getFieldErrorCount("password"), is(1)).     assertThat(errors.getFieldValue("password"), is("password")).     assertThat(messageSource.getMessage(errors.getFieldError("password"), Locale.ENGLISH), is("Password must be same value with Password(Confirm)")). }
false;public;0;17;;// SPR-13406 @Test public void testApplyMessageSourceResolvableToStringArgumentValueWithUnresolvedLogicalFieldName() {     TestBean testBean = new TestBean().     testBean.setEmail("test@example.com").     testBean.setConfirmEmail("TEST@EXAMPLE.IO").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(testBean, "testBean").     validatorAdapter.validate(testBean, errors).     assertThat(errors.getFieldErrorCount("email"), is(1)).     assertThat(errors.getFieldValue("email"), is("test@example.com")).     assertThat(errors.getFieldErrorCount("confirmEmail"), is(1)).     assertThat(messageSource.getMessage(errors.getFieldError("email"), Locale.ENGLISH), is("email must be same value with confirmEmail")).     assertThat(messageSource.getMessage(errors.getFieldError("confirmEmail"), Locale.ENGLISH), is("Email required")). }
false;public;0;19;;// SPR-15123 @Test public void testApplyMessageSourceResolvableToStringArgumentValueWithAlwaysUseMessageFormat() {     messageSource.setAlwaysUseMessageFormat(true).     TestBean testBean = new TestBean().     testBean.setEmail("test@example.com").     testBean.setConfirmEmail("TEST@EXAMPLE.IO").     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(testBean, "testBean").     validatorAdapter.validate(testBean, errors).     assertThat(errors.getFieldErrorCount("email"), is(1)).     assertThat(errors.getFieldValue("email"), is("test@example.com")).     assertThat(errors.getFieldErrorCount("confirmEmail"), is(1)).     assertThat(messageSource.getMessage(errors.getFieldError("email"), Locale.ENGLISH), is("email must be same value with confirmEmail")).     assertThat(messageSource.getMessage(errors.getFieldError("confirmEmail"), Locale.ENGLISH), is("Email required")). }
false;public;0;11;;// SPR-16177 @Test public void testWithList() {     Parent parent = new Parent().     parent.setName("Parent whit list").     parent.getChildList().addAll(createChildren(parent)).     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(parent, "parent").     validatorAdapter.validate(parent, errors).     assertTrue(errors.getErrorCount() > 0). }
false;public;0;11;;// SPR-16177 @Test public void testWithSet() {     Parent parent = new Parent().     parent.setName("Parent with set").     parent.getChildSet().addAll(createChildren(parent)).     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(parent, "parent").     validatorAdapter.validate(parent, errors).     assertTrue(errors.getErrorCount() > 0). }
false;private;1;13;;private List<Child> createChildren(Parent parent) {     Child child1 = new Child().     child1.setName("Child1").     child1.setAge(null).     child1.setParent(parent).     Child child2 = new Child().     child2.setName(null).     child2.setAge(17).     child2.setParent(parent).     return Arrays.asList(child1, child2). }
false;public;0;11;;// SPR-15839 @Test public void testListElementConstraint() {     BeanWithListElementConstraint bean = new BeanWithListElementConstraint().     bean.setProperty(Arrays.asList("no", "element", "can", "be", null)).     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(bean, "bean").     validatorAdapter.validate(bean, errors).     assertThat(errors.getFieldErrorCount("property[4]"), is(1)).     assertNull(errors.getFieldValue("property[4]")). }
false;public;0;14;;// SPR-15839 @Test public void testMapValueConstraint() {     Map<String, String> property = new HashMap<>().     property.put("no value can be", null).     BeanWithMapEntryConstraint bean = new BeanWithMapEntryConstraint().     bean.setProperty(property).     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(bean, "bean").     validatorAdapter.validate(bean, errors).     assertThat(errors.getFieldErrorCount("property[no value can be]"), is(1)).     assertNull(errors.getFieldValue("property[no value can be]")). }
false;public;0;14;;// SPR-15839 @Test public void testMapEntryConstraint() {     Map<String, String> property = new HashMap<>().     property.put(null, null).     BeanWithMapEntryConstraint bean = new BeanWithMapEntryConstraint().     bean.setProperty(property).     BeanPropertyBindingResult errors = new BeanPropertyBindingResult(bean, "bean").     validatorAdapter.validate(bean, errors).     assertTrue(errors.hasFieldErrors("property[]")).     assertNull(errors.getFieldValue("property[]")). }
false;public;0;3;;public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public String getConfirmPassword() {     return confirmPassword. }
false;public;1;3;;public void setConfirmPassword(String confirmPassword) {     this.confirmPassword = confirmPassword. }
false;public;0;3;;public String getEmail() {     return email. }
false;public;1;3;;public void setEmail(String email) {     this.email = email. }
false;public;0;3;;public String getConfirmEmail() {     return confirmEmail. }
false;public;1;3;;public void setConfirmEmail(String confirmEmail) {     this.confirmEmail = confirmEmail. }
false;public;1;5;;public void initialize(Same constraintAnnotation) {     field = constraintAnnotation.field().     comparingField = constraintAnnotation.comparingField().     message = constraintAnnotation.message(). }
false;public;2;16;;public boolean isValid(Object value, ConstraintValidatorContext context) {     BeanWrapper beanWrapper = new BeanWrapperImpl(value).     Object fieldValue = beanWrapper.getPropertyValue(field).     Object comparingFieldValue = beanWrapper.getPropertyValue(comparingField).     boolean matched = ObjectUtils.nullSafeEquals(fieldValue, comparingFieldValue).     if (matched) {         return true.     } else {         context.disableDefaultConstraintViolation().         context.buildConstraintViolationWithTemplate(message).addPropertyNode(field).addConstraintViolation().         return false.     } }
false;public;0;3;;public Integer getId() {     return id. }
false;public;1;3;;public void setId(Integer id) {     this.id = id. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public Set<Child> getChildSet() {     return childSet. }
false;public;1;3;;public void setChildSet(Set<Child> childSet) {     this.childSet = childSet. }
false;public;0;3;;public List<Child> getChildList() {     return childList. }
false;public;1;3;;public void setChildList(List<Child> childList) {     this.childList = childList. }
false;public;0;3;;public Integer getId() {     return id. }
false;public;1;3;;public void setId(Integer id) {     this.id = id. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public Integer getAge() {     return age. }
false;public;1;3;;public void setAge(Integer age) {     this.age = age. }
false;public;0;3;;public Parent getParent() {     return parent. }
false;public;1;3;;public void setParent(Parent parent) {     this.parent = parent. }
false;public;1;3;;@Override public void initialize(AnythingValid constraintAnnotation) { }
false;public;2;19;;@Override public boolean isValid(Object value, ConstraintValidatorContext context) {     List<Field> fieldsErros = new ArrayList<>().     Arrays.asList(value.getClass().getDeclaredFields()).forEach(f -> {         f.setAccessible(true).         try {             if (!f.getName().equals(ID) && f.get(value) == null) {                 fieldsErros.add(f).                 context.buildConstraintViolationWithTemplate(context.getDefaultConstraintMessageTemplate()).addPropertyNode(f.getName()).addConstraintViolation().             }         } catch (IllegalAccessException ex) {             throw new IllegalStateException(ex).         }     }).     return fieldsErros.isEmpty(). }
false;public;0;3;;public List<String> getProperty() {     return property. }
false;public;1;3;;public void setProperty(List<String> property) {     this.property = property. }
false;public;0;3;;public Map<String, String> getProperty() {     return property. }
false;public;1;3;;public void setProperty(Map<String, String> property) {     this.property = property. }
