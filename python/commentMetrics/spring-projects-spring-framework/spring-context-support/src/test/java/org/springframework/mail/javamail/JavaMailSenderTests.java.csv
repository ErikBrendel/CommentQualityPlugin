commented;modifiers;parameterAmount;loc;comment;code
false;public;0;48;;@Test public void javaMailSenderWithSimpleMessage() throws MessagingException, IOException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setPort(30).     sender.setUsername("username").     sender.setPassword("password").     SimpleMailMessage simpleMessage = new SimpleMailMessage().     simpleMessage.setFrom("me@mail.org").     simpleMessage.setReplyTo("reply@mail.org").     simpleMessage.setTo("you@mail.org").     simpleMessage.setCc("he@mail.org", "she@mail.org").     simpleMessage.setBcc("us@mail.org", "them@mail.org").     Date sentDate = new GregorianCalendar(2004, 1, 1).getTime().     simpleMessage.setSentDate(sentDate).     simpleMessage.setSubject("my subject").     simpleMessage.setText("my text").     sender.send(simpleMessage).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals(30, sender.transport.getConnectedPort()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(1, sender.transport.getSentMessages().size()).     MimeMessage sentMessage = sender.transport.getSentMessage(0).     List<Address> froms = Arrays.asList(sentMessage.getFrom()).     assertEquals(1, froms.size()).     assertEquals("me@mail.org", ((InternetAddress) froms.get(0)).getAddress()).     List<Address> replyTos = Arrays.asList(sentMessage.getReplyTo()).     assertEquals("reply@mail.org", ((InternetAddress) replyTos.get(0)).getAddress()).     List<Address> tos = Arrays.asList(sentMessage.getRecipients(Message.RecipientType.TO)).     assertEquals(1, tos.size()).     assertEquals("you@mail.org", ((InternetAddress) tos.get(0)).getAddress()).     List<Address> ccs = Arrays.asList(sentMessage.getRecipients(Message.RecipientType.CC)).     assertEquals(2, ccs.size()).     assertEquals("he@mail.org", ((InternetAddress) ccs.get(0)).getAddress()).     assertEquals("she@mail.org", ((InternetAddress) ccs.get(1)).getAddress()).     List<Address> bccs = Arrays.asList(sentMessage.getRecipients(Message.RecipientType.BCC)).     assertEquals(2, bccs.size()).     assertEquals("us@mail.org", ((InternetAddress) bccs.get(0)).getAddress()).     assertEquals("them@mail.org", ((InternetAddress) bccs.get(1)).getAddress()).     assertEquals(sentDate.getTime(), sentMessage.getSentDate().getTime()).     assertEquals("my subject", sentMessage.getSubject()).     assertEquals("my text", sentMessage.getContent()). }
false;public;0;28;;@Test public void javaMailSenderWithSimpleMessages() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     SimpleMailMessage simpleMessage1 = new SimpleMailMessage().     simpleMessage1.setTo("he@mail.org").     SimpleMailMessage simpleMessage2 = new SimpleMailMessage().     simpleMessage2.setTo("she@mail.org").     sender.send(simpleMessage1, simpleMessage2).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(2, sender.transport.getSentMessages().size()).     MimeMessage sentMessage1 = sender.transport.getSentMessage(0).     List<Address> tos1 = Arrays.asList(sentMessage1.getRecipients(Message.RecipientType.TO)).     assertEquals(1, tos1.size()).     assertEquals("he@mail.org", ((InternetAddress) tos1.get(0)).getAddress()).     MimeMessage sentMessage2 = sender.transport.getSentMessage(1).     List<Address> tos2 = Arrays.asList(sentMessage2.getRecipients(Message.RecipientType.TO)).     assertEquals(1, tos2.size()).     assertEquals("she@mail.org", ((InternetAddress) tos2.get(0)).getAddress()). }
false;public;0;18;;@Test public void javaMailSenderWithMimeMessage() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     MimeMessage mimeMessage = sender.createMimeMessage().     mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("you@mail.org")).     sender.send(mimeMessage).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(1, sender.transport.getSentMessages().size()).     assertEquals(mimeMessage, sender.transport.getSentMessage(0)). }
false;public;0;21;;@Test public void javaMailSenderWithMimeMessages() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     MimeMessage mimeMessage1 = sender.createMimeMessage().     mimeMessage1.setRecipient(Message.RecipientType.TO, new InternetAddress("he@mail.org")).     MimeMessage mimeMessage2 = sender.createMimeMessage().     mimeMessage2.setRecipient(Message.RecipientType.TO, new InternetAddress("she@mail.org")).     sender.send(mimeMessage1, mimeMessage2).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(2, sender.transport.getSentMessages().size()).     assertEquals(mimeMessage1, sender.transport.getSentMessage(0)).     assertEquals(mimeMessage2, sender.transport.getSentMessage(1)). }
false;public;1;5;;@Override public void prepare(MimeMessage mimeMessage) throws MessagingException {     mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("you@mail.org")).     messages.add(mimeMessage). }
false;public;0;25;;@Test public void javaMailSenderWithMimeMessagePreparator() {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     final List<Message> messages = new ArrayList<>().     MimeMessagePreparator preparator = new MimeMessagePreparator() {          @Override         public void prepare(MimeMessage mimeMessage) throws MessagingException {             mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("you@mail.org")).             messages.add(mimeMessage).         }     }.     sender.send(preparator).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(1, sender.transport.getSentMessages().size()).     assertEquals(messages.get(0), sender.transport.getSentMessage(0)). }
false;public;1;5;;@Override public void prepare(MimeMessage mimeMessage) throws MessagingException {     mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("he@mail.org")).     messages.add(mimeMessage). }
false;public;1;5;;@Override public void prepare(MimeMessage mimeMessage) throws MessagingException {     mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("she@mail.org")).     messages.add(mimeMessage). }
false;public;0;33;;@Test public void javaMailSenderWithMimeMessagePreparators() {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     final List<Message> messages = new ArrayList<>().     MimeMessagePreparator preparator1 = new MimeMessagePreparator() {          @Override         public void prepare(MimeMessage mimeMessage) throws MessagingException {             mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("he@mail.org")).             messages.add(mimeMessage).         }     }.     MimeMessagePreparator preparator2 = new MimeMessagePreparator() {          @Override         public void prepare(MimeMessage mimeMessage) throws MessagingException {             mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("she@mail.org")).             messages.add(mimeMessage).         }     }.     sender.send(preparator1, preparator2).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(2, sender.transport.getSentMessages().size()).     assertEquals(messages.get(0), sender.transport.getSentMessage(0)).     assertEquals(messages.get(1), sender.transport.getSentMessage(1)). }
false;public;0;21;;@Test public void javaMailSenderWithMimeMessageHelper() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     MimeMessageHelper message = new MimeMessageHelper(sender.createMimeMessage()).     assertNull(message.getEncoding()).     assertTrue(message.getFileTypeMap() instanceof ConfigurableMimeFileTypeMap).     message.setTo("you@mail.org").     sender.send(message.getMimeMessage()).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(1, sender.transport.getSentMessages().size()).     assertEquals(message.getMimeMessage(), sender.transport.getSentMessage(0)). }
false;public;0;23;;@Test public void javaMailSenderWithMimeMessageHelperAndSpecificEncoding() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     MimeMessageHelper message = new MimeMessageHelper(sender.createMimeMessage(), "UTF-8").     assertEquals("UTF-8", message.getEncoding()).     FileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap().     message.setFileTypeMap(fileTypeMap).     assertEquals(fileTypeMap, message.getFileTypeMap()).     message.setTo("you@mail.org").     sender.send(message.getMimeMessage()).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(1, sender.transport.getSentMessages().size()).     assertEquals(message.getMimeMessage(), sender.transport.getSentMessage(0)). }
false;public;0;24;;@Test public void javaMailSenderWithMimeMessageHelperAndDefaultEncoding() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     sender.setDefaultEncoding("UTF-8").     FileTypeMap fileTypeMap = new ConfigurableMimeFileTypeMap().     sender.setDefaultFileTypeMap(fileTypeMap).     MimeMessageHelper message = new MimeMessageHelper(sender.createMimeMessage()).     assertEquals("UTF-8", message.getEncoding()).     assertEquals(fileTypeMap, message.getFileTypeMap()).     message.setTo("you@mail.org").     sender.send(message.getMimeMessage()).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(1, sender.transport.getSentMessages().size()).     assertEquals(message.getMimeMessage(), sender.transport.getSentMessage(0)). }
false;public;0;13;;@Test public void javaMailSenderWithParseExceptionOnSimpleMessage() {     MockJavaMailSender sender = new MockJavaMailSender().     SimpleMailMessage simpleMessage = new SimpleMailMessage().     simpleMessage.setFrom("").     try {         sender.send(simpleMessage).     } catch (MailParseException ex) {         // expected         assertTrue(ex.getCause() instanceof AddressException).     } }
false;public;1;4;;@Override public void prepare(MimeMessage mimeMessage) throws MessagingException {     mimeMessage.setFrom(new InternetAddress("")). }
false;public;0;17;;@Test public void javaMailSenderWithParseExceptionOnMimeMessagePreparator() {     MockJavaMailSender sender = new MockJavaMailSender().     MimeMessagePreparator preparator = new MimeMessagePreparator() {          @Override         public void prepare(MimeMessage mimeMessage) throws MessagingException {             mimeMessage.setFrom(new InternetAddress("")).         }     }.     try {         sender.send(preparator).     } catch (MailParseException ex) {         // expected         assertTrue(ex.getCause() instanceof AddressException).     } }
false;protected;1;5;;@Override protected Transport getTransport(Session sess) throws NoSuchProviderException {     assertEquals(session, sess).     return super.getTransport(sess). }
false;public;0;28;;@Test public void javaMailSenderWithCustomSession() throws MessagingException {     final Session session = Session.getInstance(new Properties()).     MockJavaMailSender sender = new MockJavaMailSender() {          @Override         protected Transport getTransport(Session sess) throws NoSuchProviderException {             assertEquals(session, sess).             return super.getTransport(sess).         }     }.     sender.setSession(session).     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     MimeMessage mimeMessage = sender.createMimeMessage().     mimeMessage.setSubject("custom").     mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("you@mail.org")).     mimeMessage.setSentDate(new GregorianCalendar(2005, 3, 1).getTime()).     sender.send(mimeMessage).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(1, sender.transport.getSentMessages().size()).     assertEquals(mimeMessage, sender.transport.getSentMessage(0)). }
false;protected;1;5;;@Override protected Transport getTransport(Session sess) throws NoSuchProviderException {     assertEquals("bogusValue", sess.getProperty("bogusKey")).     return super.getTransport(sess). }
false;public;0;27;;@Test public void javaMailProperties() throws MessagingException {     Properties props = new Properties().     props.setProperty("bogusKey", "bogusValue").     MockJavaMailSender sender = new MockJavaMailSender() {          @Override         protected Transport getTransport(Session sess) throws NoSuchProviderException {             assertEquals("bogusValue", sess.getProperty("bogusKey")).             return super.getTransport(sess).         }     }.     sender.setJavaMailProperties(props).     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     MimeMessage mimeMessage = sender.createMimeMessage().     mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress("you@mail.org")).     sender.send(mimeMessage).     assertEquals("host", sender.transport.getConnectedHost()).     assertEquals("username", sender.transport.getConnectedUsername()).     assertEquals("password", sender.transport.getConnectedPassword()).     assertTrue(sender.transport.isCloseCalled()).     assertEquals(1, sender.transport.getSentMessages().size()).     assertEquals(mimeMessage, sender.transport.getSentMessage(0)). }
false;public;0;20;;@Test public void failedMailServerConnect() {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost(null).     sender.setUsername("username").     sender.setPassword("password").     SimpleMailMessage simpleMessage1 = new SimpleMailMessage().     try {         sender.send(simpleMessage1).         fail("Should have thrown MailSendException").     } catch (MailSendException ex) {         // expected         ex.printStackTrace().         assertTrue(ex.getFailedMessages() != null).         assertEquals(1, ex.getFailedMessages().size()).         assertSame(simpleMessage1, ex.getFailedMessages().keySet().iterator().next()).         assertSame(ex.getCause(), ex.getFailedMessages().values().iterator().next()).     } }
false;public;0;18;;@Test public void failedMailServerClose() {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("").     sender.setUsername("username").     sender.setPassword("password").     SimpleMailMessage simpleMessage1 = new SimpleMailMessage().     try {         sender.send(simpleMessage1).         fail("Should have thrown MailSendException").     } catch (MailSendException ex) {         // expected         ex.printStackTrace().         assertTrue(ex.getFailedMessages() != null).         assertEquals(0, ex.getFailedMessages().size()).     } }
false;public;0;31;;@Test public void failedSimpleMessage() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     SimpleMailMessage simpleMessage1 = new SimpleMailMessage().     simpleMessage1.setTo("he@mail.org").     simpleMessage1.setSubject("fail").     SimpleMailMessage simpleMessage2 = new SimpleMailMessage().     simpleMessage2.setTo("she@mail.org").     try {         sender.send(simpleMessage1, simpleMessage2).     } catch (MailSendException ex) {         ex.printStackTrace().         assertEquals("host", sender.transport.getConnectedHost()).         assertEquals("username", sender.transport.getConnectedUsername()).         assertEquals("password", sender.transport.getConnectedPassword()).         assertTrue(sender.transport.isCloseCalled()).         assertEquals(1, sender.transport.getSentMessages().size()).         assertEquals(new InternetAddress("she@mail.org"), sender.transport.getSentMessage(0).getAllRecipients()[0]).         assertEquals(1, ex.getFailedMessages().size()).         assertEquals(simpleMessage1, ex.getFailedMessages().keySet().iterator().next()).         Object subEx = ex.getFailedMessages().values().iterator().next().         assertTrue(subEx instanceof MessagingException).         assertEquals("failed", ((MessagingException) subEx).getMessage()).     } }
false;public;0;31;;@Test public void failedMimeMessage() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.setUsername("username").     sender.setPassword("password").     MimeMessage mimeMessage1 = sender.createMimeMessage().     mimeMessage1.setRecipient(Message.RecipientType.TO, new InternetAddress("he@mail.org")).     mimeMessage1.setSubject("fail").     MimeMessage mimeMessage2 = sender.createMimeMessage().     mimeMessage2.setRecipient(Message.RecipientType.TO, new InternetAddress("she@mail.org")).     try {         sender.send(mimeMessage1, mimeMessage2).     } catch (MailSendException ex) {         ex.printStackTrace().         assertEquals("host", sender.transport.getConnectedHost()).         assertEquals("username", sender.transport.getConnectedUsername()).         assertEquals("password", sender.transport.getConnectedPassword()).         assertTrue(sender.transport.isCloseCalled()).         assertEquals(1, sender.transport.getSentMessages().size()).         assertEquals(mimeMessage2, sender.transport.getSentMessage(0)).         assertEquals(1, ex.getFailedMessages().size()).         assertEquals(mimeMessage1, ex.getFailedMessages().keySet().iterator().next()).         Object subEx = ex.getFailedMessages().values().iterator().next().         assertTrue(subEx instanceof MessagingException).         assertEquals("failed", ((MessagingException) subEx).getMessage()).     } }
false;public;0;6;;@Test public void testConnection() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost("host").     sender.testConnection(). }
false;public;0;8;;@Test public void testConnectionWithFailure() throws MessagingException {     MockJavaMailSender sender = new MockJavaMailSender().     sender.setHost(null).     thrown.expect(MessagingException.class).     sender.testConnection(). }
false;protected;1;5;;@Override protected Transport getTransport(Session session) throws NoSuchProviderException {     this.transport = new MockTransport(session, null).     return transport. }
false;public;0;3;;public String getConnectedHost() {     return connectedHost. }
false;public;0;3;;public int getConnectedPort() {     return connectedPort. }
false;public;0;3;;public String getConnectedUsername() {     return connectedUsername. }
false;public;0;3;;public String getConnectedPassword() {     return connectedPassword. }
false;public;0;3;;public boolean isCloseCalled() {     return closeCalled. }
false;public;0;3;;public List<Message> getSentMessages() {     return sentMessages. }
false;public;1;3;;public MimeMessage getSentMessage(int index) {     return (MimeMessage) this.sentMessages.get(index). }
false;public;4;11;;@Override public void connect(String host, int port, String username, String password) throws MessagingException {     if (host == null) {         throw new MessagingException("no host").     }     this.connectedHost = host.     this.connectedPort = port.     this.connectedUsername = username.     this.connectedPassword = password.     setConnected(true). }
false;public,synchronized;0;7;;@Override public synchronized void close() throws MessagingException {     if ("".equals(connectedHost)) {         throw new MessagingException("close failure").     }     this.closeCalled = true. }
false;public;2;17;;@Override public void sendMessage(Message message, Address[] addresses) throws MessagingException {     if ("fail".equals(message.getSubject())) {         throw new MessagingException("failed").     }     if (addresses == null || (message.getAllRecipients() == null ? addresses.length > 0 : !ObjectUtils.nullSafeEquals(addresses, message.getAllRecipients()))) {         throw new MessagingException("addresses not correct").     }     if (message.getSentDate() == null) {         throw new MessagingException("No sentDate specified").     }     if (message.getSubject() != null && message.getSubject().contains("custom")) {         assertEquals(new GregorianCalendar(2005, 3, 1).getTime(), message.getSentDate()).     }     this.sentMessages.add(message). }
