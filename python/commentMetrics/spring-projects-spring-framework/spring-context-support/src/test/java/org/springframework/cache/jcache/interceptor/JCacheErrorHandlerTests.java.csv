commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class).     this.cache = context.getBean("mockCache", Cache.class).     this.errorCache = context.getBean("mockErrorCache", Cache.class).     this.errorHandler = context.getBean(CacheErrorHandler.class).     this.simpleService = context.getBean(SimpleService.class). }
false;public;0;9;;@Test public void getFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on get").     Object key = SimpleKeyGenerator.generateKey(0L).     willThrow(exception).given(this.cache).get(key).     this.simpleService.get(0L).     verify(this.errorHandler).handleCacheGetError(exception, this.cache, key). }
false;public;0;10;;@Test public void getPutNewElementFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put").     Object key = SimpleKeyGenerator.generateKey(0L).     given(this.cache.get(key)).willReturn(null).     willThrow(exception).given(this.cache).put(key, 0L).     this.simpleService.get(0L).     verify(this.errorHandler).handleCachePutError(exception, this.cache, key, 0L). }
false;public;0;16;;@Test public void getFailPutExceptionFail() {     UnsupportedOperationException exceptionOnPut = new UnsupportedOperationException("Test exception on put").     Object key = SimpleKeyGenerator.generateKey(0L).     given(this.cache.get(key)).willReturn(null).     willThrow(exceptionOnPut).given(this.errorCache).put(key, SimpleService.TEST_EXCEPTION).     try {         this.simpleService.getFail(0L).     } catch (IllegalStateException ex) {         assertEquals("Test exception", ex.getMessage()).     }     verify(this.errorHandler).handleCachePutError(exceptionOnPut, this.errorCache, key, SimpleService.TEST_EXCEPTION). }
false;public;0;9;;@Test public void putFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on put").     Object key = SimpleKeyGenerator.generateKey(0L).     willThrow(exception).given(this.cache).put(key, 234L).     this.simpleService.put(0L, 234L).     verify(this.errorHandler).handleCachePutError(exception, this.cache, key, 234L). }
false;public;0;9;;@Test public void evictFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict").     Object key = SimpleKeyGenerator.generateKey(0L).     willThrow(exception).given(this.cache).evict(key).     this.simpleService.evict(0L).     verify(this.errorHandler).handleCacheEvictError(exception, this.cache, key). }
false;public;0;8;;@Test public void clearFail() {     UnsupportedOperationException exception = new UnsupportedOperationException("Test exception on evict").     willThrow(exception).given(this.cache).clear().     this.simpleService.clear().     verify(this.errorHandler).handleCacheClearError(exception, this.cache). }
false;public;0;7;;@Bean @Override public CacheManager cacheManager() {     SimpleCacheManager cacheManager = new SimpleCacheManager().     cacheManager.setCaches(Arrays.asList(mockCache(), mockErrorCache())).     return cacheManager. }
false;public;0;5;;@Bean @Override public CacheErrorHandler errorHandler() {     return mock(CacheErrorHandler.class). }
false;public;0;4;;@Bean public SimpleService simpleService() {     return new SimpleService(). }
false;public;0;6;;@Bean public Cache mockCache() {     Cache cache = mock(Cache.class).     given(cache.getName()).willReturn("test").     return cache. }
false;public;0;6;;@Bean public Cache mockErrorCache() {     Cache cache = mock(Cache.class).     given(cache.getName()).willReturn("error").     return cache. }
false;public;1;4;;@CacheResult public Object get(long id) {     return this.counter.getAndIncrement(). }
false;public;1;4;;@CacheResult(exceptionCacheName = "error") public Object getFail(long id) {     throw TEST_EXCEPTION. }
false;public;2;3;;@CachePut public void put(long id, @CacheValue Object object) { }
false;public;1;3;;@CacheRemove public void evict(long id) { }
false;public;0;3;;@CacheRemoveAll public void clear() { }
