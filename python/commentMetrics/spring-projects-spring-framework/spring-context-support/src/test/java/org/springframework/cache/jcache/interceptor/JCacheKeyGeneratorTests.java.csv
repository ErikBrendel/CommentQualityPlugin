commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class).     this.keyGenerator = context.getBean(TestKeyGenerator.class).     this.simpleService = context.getBean(SimpleService.class).     this.cache = context.getBean(CacheManager.class).getCache("test"). }
false;public;0;10;;@Test public void getSimple() {     this.keyGenerator.expect(1L).     Object first = this.simpleService.get(1L).     Object second = this.simpleService.get(1L).     assertSame(first, second).     Object key = new SimpleKey(1L).     assertEquals(first, cache.get(key).get()). }
false;public;0;10;;@Test public void getFlattenVararg() {     this.keyGenerator.expect(1L, "foo", "bar").     Object first = this.simpleService.get(1L, "foo", "bar").     Object second = this.simpleService.get(1L, "foo", "bar").     assertSame(first, second).     Object key = new SimpleKey(1L, "foo", "bar").     assertEquals(first, cache.get(key).get()). }
false;public;0;10;;@Test public void getFiltered() {     this.keyGenerator.expect(1L).     Object first = this.simpleService.getFiltered(1L, "foo", "bar").     Object second = this.simpleService.getFiltered(1L, "foo", "bar").     assertSame(first, second).     Object key = new SimpleKey(1L).     assertEquals(first, cache.get(key).get()). }
false;public;0;5;;@Bean @Override public CacheManager cacheManager() {     return new ConcurrentMapCacheManager(). }
false;public;0;5;;@Bean @Override public KeyGenerator keyGenerator() {     return new TestKeyGenerator(). }
false;public;0;4;;@Bean public SimpleService simpleService() {     return new SimpleService(). }
false;public;1;4;;@CacheResult public Object get(long id) {     return counter.getAndIncrement(). }
false;public;2;4;;@CacheResult public Object get(long id, String... items) {     return counter.getAndIncrement(). }
false;public;2;4;;@CacheResult public Object getFiltered(@CacheKey long id, String... items) {     return counter.getAndIncrement(). }
false;private;1;3;;private void expect(Object... params) {     this.expectedParams = params. }
false;public;3;7;;@Override public Object generate(Object target, Method method, Object... params) {     assertTrue("Unexpected parameters: expected: " + Arrays.toString(this.expectedParams) + " but got: " + Arrays.toString(params), Arrays.equals(expectedParams, params)).     return new SimpleKey(params). }
