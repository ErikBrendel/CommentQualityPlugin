commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected ApplicationContext getApplicationContext() {     return new AnnotationConfigApplicationContext(EnableCachingConfig.class). }
false;public;0;14;;@Test public void fullCachingConfig() throws Exception {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(FullCachingConfig.class).     DefaultJCacheOperationSource cos = context.getBean(DefaultJCacheOperationSource.class).     assertSame(context.getBean(KeyGenerator.class), cos.getKeyGenerator()).     assertSame(context.getBean("cacheResolver", CacheResolver.class), cos.getCacheResolver()).     assertSame(context.getBean("exceptionCacheResolver", CacheResolver.class), cos.getExceptionCacheResolver()).     JCacheInterceptor interceptor = context.getBean(JCacheInterceptor.class).     assertSame(context.getBean("errorHandler", CacheErrorHandler.class), interceptor.getErrorHandler()). }
false;public;0;13;;@Test public void emptyConfigSupport() {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(EmptyConfigSupportConfig.class).     DefaultJCacheOperationSource cos = context.getBean(DefaultJCacheOperationSource.class).     assertNotNull(cos.getCacheResolver()).     assertEquals(SimpleCacheResolver.class, cos.getCacheResolver().getClass()).     assertSame(context.getBean(CacheManager.class), ((SimpleCacheResolver) cos.getCacheResolver()).getCacheManager()).     assertNull(cos.getExceptionCacheResolver()).     context.close(). }
false;public;0;11;;@Test public void bothSetOnlyResolverIsUsed() {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(FullCachingConfigSupport.class).     DefaultJCacheOperationSource cos = context.getBean(DefaultJCacheOperationSource.class).     assertSame(context.getBean("cacheResolver"), cos.getCacheResolver()).     assertSame(context.getBean("keyGenerator"), cos.getKeyGenerator()).     assertSame(context.getBean("exceptionCacheResolver"), cos.getExceptionCacheResolver()).     context.close(). }
false;public;0;20;;@Test public void exceptionCacheResolverLazilyRequired() {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(NoExceptionCacheResolverConfig.class).     try {         DefaultJCacheOperationSource cos = context.getBean(DefaultJCacheOperationSource.class).         assertSame(context.getBean("cacheResolver"), cos.getCacheResolver()).         JCacheableService<?> service = context.getBean(JCacheableService.class).         service.cache("id").         // This call requires the cache manager to be set         thrown.expect(IllegalStateException.class).         service.cacheWithException("test", false).     } finally {         context.close().     } }
false;public;0;10;;@Bean public CacheManager cacheManager() {     SimpleCacheManager cm = new SimpleCacheManager().     cm.setCaches(Arrays.asList(defaultCache(), new ConcurrentMapCache("primary"), new ConcurrentMapCache("secondary"), new ConcurrentMapCache("exception"))).     return cm. }
false;public;0;4;;@Bean public JCacheableService<?> cacheableService() {     return new AnnotatedJCacheableService(defaultCache()). }
false;public;0;4;;@Bean public Cache defaultCache() {     return new ConcurrentMapCache("default"). }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return new NoOpCacheManager(). }
false;public;0;5;;@Override @Bean public KeyGenerator keyGenerator() {     return new SimpleKeyGenerator(). }
false;public;0;5;;@Override @Bean public CacheErrorHandler errorHandler() {     return new SimpleCacheErrorHandler(). }
false;public;0;5;;@Override @Bean public CacheResolver cacheResolver() {     return new SimpleCacheResolver(cacheManager()). }
false;public;0;5;;@Override @Bean public CacheResolver exceptionCacheResolver() {     return new SimpleCacheResolver(cacheManager()). }
false;public;0;4;;@Bean public CacheManager cm() {     return new NoOpCacheManager(). }
false;public;0;5;;@Override @Bean public CacheManager cacheManager() {     return new NoOpCacheManager(). }
false;public;0;5;;@Override @Bean public KeyGenerator keyGenerator() {     return new SomeKeyGenerator(). }
false;public;0;5;;@Override @Bean public CacheResolver cacheResolver() {     return new NamedCacheResolver(cacheManager(), "foo"). }
false;public;0;5;;@Override @Bean public CacheResolver exceptionCacheResolver() {     return new NamedCacheResolver(cacheManager(), "exception"). }
false;public;0;5;;@Override @Bean public CacheResolver cacheResolver() {     return new NamedCacheResolver(new ConcurrentMapCacheManager(), "default"). }
false;public;0;4;;@Bean public JCacheableService<?> cacheableService() {     return new AnnotatedJCacheableService(new ConcurrentMapCache("default")). }
