# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleApplicationEventMulticaster -> protected void invokeListener(ApplicationListener<?> listener, ApplicationEvent event);1501582001;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;protected void invokeListener(ApplicationListener<?> listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				doInvokeListener(listener, event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			doInvokeListener(listener, event)__		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,do,invoke,listener,listener,event,catch,throwable,err,error,handler,handle,error,err,else,do,invoke,listener,listener,event
SimpleApplicationEventMulticaster -> protected void invokeListener(ApplicationListener<?> listener, ApplicationEvent event);1517324038;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;protected void invokeListener(ApplicationListener<?> listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				doInvokeListener(listener, event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			doInvokeListener(listener, event)__		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,do,invoke,listener,listener,event,catch,throwable,err,error,handler,handle,error,err,else,do,invoke,listener,listener,event
SimpleApplicationEventMulticaster -> protected void invokeListener(ApplicationListener<?> listener, ApplicationEvent event);1532608913;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;protected void invokeListener(ApplicationListener<?> listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				doInvokeListener(listener, event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			doInvokeListener(listener, event)__		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,do,invoke,listener,listener,event,catch,throwable,err,error,handler,handle,error,err,else,do,invoke,listener,listener,event
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1328020251;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1356735495;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1357119239;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1362408075;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1368482696;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1385412762;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1397163985;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1397224641;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1409784938;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1423555692;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1433840251;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1459774478;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1477661122;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1484577318;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1484681840;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1496242568;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1496837955;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1498780456;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1501582001;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1517324038;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster(BeanFactory beanFactory);1532608913;Create a new SimpleApplicationEventMulticaster for the given BeanFactory.;public SimpleApplicationEventMulticaster(BeanFactory beanFactory) {_		setBeanFactory(beanFactory)__	};create,a,new,simple,application,event,multicaster,for,the,given,bean,factory;public,simple,application,event,multicaster,bean,factory,bean,factory,set,bean,factory,bean,factory
SimpleApplicationEventMulticaster -> @Nullable 	protected Executor getTaskExecutor();1496837955;Return the current task executor for this multicaster.;@Nullable_	protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;nullable,protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> @Nullable 	protected Executor getTaskExecutor();1498780456;Return the current task executor for this multicaster.;@Nullable_	protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;nullable,protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> @Nullable 	protected Executor getTaskExecutor();1501582001;Return the current task executor for this multicaster.;@Nullable_	protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;nullable,protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> @Nullable 	protected Executor getTaskExecutor();1517324038;Return the current task executor for this multicaster.;@Nullable_	protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;nullable,protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> @Nullable 	protected Executor getTaskExecutor();1532608913;Return the current task executor for this multicaster.;@Nullable_	protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;nullable,protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(@Nullable Executor taskExecutor);1496837955;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(@Nullable Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,nullable,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(@Nullable Executor taskExecutor);1498780456;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(@Nullable Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,nullable,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(@Nullable Executor taskExecutor);1501582001;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(@Nullable Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,nullable,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(@Nullable Executor taskExecutor);1517324038;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(@Nullable Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,nullable,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(@Nullable Executor taskExecutor);1532608913;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(@Nullable Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,nullable,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1397163985;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1397224641;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1409784938;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1423555692;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1433840251;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1459774478;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1477661122;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1484577318;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1484681840;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> protected ErrorHandler getErrorHandler();1496242568;Return the current error handler for this multicaster._@since 4.1;protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1397163985;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			listener.onApplicationEvent(event)__		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,listener,on,application,event,event
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1397224641;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			listener.onApplicationEvent(event)__		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,listener,on,application,event,event
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1409784938;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			listener.onApplicationEvent(event)__		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,listener,on,application,event,event
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1423555692;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			listener.onApplicationEvent(event)__		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,listener,on,application,event,event
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1433840251;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			listener.onApplicationEvent(event)__		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,listener,on,application,event,event
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1459774478;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			try {_				listener.onApplicationEvent(event)__			}_			catch (ClassCastException ex) {_				_				LogFactory.getLog(getClass()).debug("Non-matching event type for listener: " + listener, ex)__			}_		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,try,listener,on,application,event,event,catch,class,cast,exception,ex,log,factory,get,log,get,class,debug,non,matching,event,type,for,listener,listener,ex
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1477661122;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			try {_				listener.onApplicationEvent(event)__			}_			catch (ClassCastException ex) {_				if (ex.getMessage().startsWith(event.getClass().getName())) {_					_					LogFactory.getLog(getClass()).debug("Non-matching event type for listener: " + listener, ex)__				}_				else {_					throw ex__				}_			}_		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,try,listener,on,application,event,event,catch,class,cast,exception,ex,if,ex,get,message,starts,with,event,get,class,get,name,log,factory,get,log,get,class,debug,non,matching,event,type,for,listener,listener,ex,else,throw,ex
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1484577318;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			try {_				listener.onApplicationEvent(event)__			}_			catch (ClassCastException ex) {_				String msg = ex.getMessage()__				if (msg != null && msg.startsWith(event.getClass().getName())) {_					_					Log logger = LogFactory.getLog(getClass())__					if (logger.isDebugEnabled()) {_						logger.debug("Non-matching event type for listener: " + listener, ex)__					}_				}_				else {_					throw ex__				}_			}_		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,try,listener,on,application,event,event,catch,class,cast,exception,ex,string,msg,ex,get,message,if,msg,null,msg,starts,with,event,get,class,get,name,log,logger,log,factory,get,log,get,class,if,logger,is,debug,enabled,logger,debug,non,matching,event,type,for,listener,listener,ex,else,throw,ex
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1484681840;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			try {_				listener.onApplicationEvent(event)__			}_			catch (ClassCastException ex) {_				String msg = ex.getMessage()__				if (msg == null || msg.startsWith(event.getClass().getName())) {_					_					Log logger = LogFactory.getLog(getClass())__					if (logger.isDebugEnabled()) {_						logger.debug("Non-matching event type for listener: " + listener, ex)__					}_				}_				else {_					throw ex__				}_			}_		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,try,listener,on,application,event,event,catch,class,cast,exception,ex,string,msg,ex,get,message,if,msg,null,msg,starts,with,event,get,class,get,name,log,logger,log,factory,get,log,get,class,if,logger,is,debug,enabled,logger,debug,non,matching,event,type,for,listener,listener,ex,else,throw,ex
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1496242568;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			try {_				listener.onApplicationEvent(event)__			}_			catch (ClassCastException ex) {_				String msg = ex.getMessage()__				if (msg == null || msg.startsWith(event.getClass().getName())) {_					_					Log logger = LogFactory.getLog(getClass())__					if (logger.isDebugEnabled()) {_						logger.debug("Non-matching event type for listener: " + listener, ex)__					}_				}_				else {_					throw ex__				}_			}_		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,try,listener,on,application,event,event,catch,class,cast,exception,ex,string,msg,ex,get,message,if,msg,null,msg,starts,with,event,get,class,get,name,log,logger,log,factory,get,log,get,class,if,logger,is,debug,enabled,logger,debug,non,matching,event,type,for,listener,listener,ex,else,throw,ex
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1496837955;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			try {_				listener.onApplicationEvent(event)__			}_			catch (ClassCastException ex) {_				String msg = ex.getMessage()__				if (msg == null || msg.startsWith(event.getClass().getName())) {_					_					Log logger = LogFactory.getLog(getClass())__					if (logger.isDebugEnabled()) {_						logger.debug("Non-matching event type for listener: " + listener, ex)__					}_				}_				else {_					throw ex__				}_			}_		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,try,listener,on,application,event,event,catch,class,cast,exception,ex,string,msg,ex,get,message,if,msg,null,msg,starts,with,event,get,class,get,name,log,logger,log,factory,get,log,get,class,if,logger,is,debug,enabled,logger,debug,non,matching,event,type,for,listener,listener,ex,else,throw,ex
SimpleApplicationEventMulticaster -> @SuppressWarnings({"unchecked", "rawtypes"}) 	protected void invokeListener(ApplicationListener listener, ApplicationEvent event);1498780456;Invoke the given listener with the given event._@param listener the ApplicationListener to invoke_@param event the current event to propagate_@since 4.1;@SuppressWarnings({"unchecked", "rawtypes"})_	protected void invokeListener(ApplicationListener listener, ApplicationEvent event) {_		ErrorHandler errorHandler = getErrorHandler()__		if (errorHandler != null) {_			try {_				listener.onApplicationEvent(event)__			}_			catch (Throwable err) {_				errorHandler.handleError(err)__			}_		}_		else {_			try {_				listener.onApplicationEvent(event)__			}_			catch (ClassCastException ex) {_				String msg = ex.getMessage()__				if (msg == null || msg.startsWith(event.getClass().getName())) {_					_					Log logger = LogFactory.getLog(getClass())__					if (logger.isDebugEnabled()) {_						logger.debug("Non-matching event type for listener: " + listener, ex)__					}_				}_				else {_					throw ex__				}_			}_		}_	};invoke,the,given,listener,with,the,given,event,param,listener,the,application,listener,to,invoke,param,event,the,current,event,to,propagate,since,4,1;suppress,warnings,unchecked,rawtypes,protected,void,invoke,listener,application,listener,listener,application,event,event,error,handler,error,handler,get,error,handler,if,error,handler,null,try,listener,on,application,event,event,catch,throwable,err,error,handler,handle,error,err,else,try,listener,on,application,event,event,catch,class,cast,exception,ex,string,msg,ex,get,message,if,msg,null,msg,starts,with,event,get,class,get,name,log,logger,log,factory,get,log,get,class,if,logger,is,debug,enabled,logger,debug,non,matching,event,type,for,listener,listener,ex,else,throw,ex
SimpleApplicationEventMulticaster -> @Nullable 	protected ErrorHandler getErrorHandler();1496837955;Return the current error handler for this multicaster._@since 4.1;@Nullable_	protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;nullable,protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> @Nullable 	protected ErrorHandler getErrorHandler();1498780456;Return the current error handler for this multicaster._@since 4.1;@Nullable_	protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;nullable,protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> @Nullable 	protected ErrorHandler getErrorHandler();1501582001;Return the current error handler for this multicaster._@since 4.1;@Nullable_	protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;nullable,protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> @Nullable 	protected ErrorHandler getErrorHandler();1517324038;Return the current error handler for this multicaster._@since 4.1;@Nullable_	protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;nullable,protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> @Nullable 	protected ErrorHandler getErrorHandler();1532608913;Return the current error handler for this multicaster._@since 4.1;@Nullable_	protected ErrorHandler getErrorHandler() {_		return this.errorHandler__	};return,the,current,error,handler,for,this,multicaster,since,4,1;nullable,protected,error,handler,get,error,handler,return,this,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1397163985;Set the {@link ErrorHandler} to invoke in case of an exception thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._In case of a {@link #setTaskExecutor task executor} specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_({@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,of,an,exception,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,in,case,of,a,link,set,task,executor,task,executor,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1397224641;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g.,_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1409784938;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1423555692;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1433840251;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1459774478;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1477661122;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1484577318;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1484681840;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(ErrorHandler errorHandler);1496242568;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1328020251;Return the current TaskExecutor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1356735495;Return the current TaskExecutor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1357119239;Return the current TaskExecutor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1362408075;Return the current TaskExecutor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1368482696;Return the current TaskExecutor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1385412762;Return the current TaskExecutor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1397163985;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1397224641;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1409784938;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1423555692;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1433840251;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1459774478;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1477661122;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1484577318;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1484681840;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> protected Executor getTaskExecutor();1496242568;Return the current task executor for this multicaster.;protected Executor getTaskExecutor() {_		return this.taskExecutor__	};return,the,current,task,executor,for,this,multicaster;protected,executor,get,task,executor,return,this,task,executor
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1328020251;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1356735495;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1357119239;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1362408075;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1368482696;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1385412762;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1397163985;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1397224641;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1409784938;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1423555692;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1433840251;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1459774478;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1477661122;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1484577318;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1484681840;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1496242568;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1496837955;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1498780456;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1501582001;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1517324038;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public SimpleApplicationEventMulticaster();1532608913;Create a new SimpleApplicationEventMulticaster.;public SimpleApplicationEventMulticaster() {_	};create,a,new,simple,application,event,multicaster;public,simple,application,event,multicaster
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1328020251;Set the TaskExecutor to execute application listeners with._<p>Default is a SyncTaskExecutor, executing the listeners synchronously_in the calling thread._<p>Consider specifying an asynchronous TaskExecutor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,to,execute,application,listeners,with,p,default,is,a,sync,task,executor,executing,the,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1356735495;Set the TaskExecutor to execute application listeners with._<p>Default is a SyncTaskExecutor, executing the listeners synchronously_in the calling thread._<p>Consider specifying an asynchronous TaskExecutor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,to,execute,application,listeners,with,p,default,is,a,sync,task,executor,executing,the,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1357119239;Set the TaskExecutor to execute application listeners with._<p>Default is a SyncTaskExecutor, executing the listeners synchronously_in the calling thread._<p>Consider specifying an asynchronous TaskExecutor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,to,execute,application,listeners,with,p,default,is,a,sync,task,executor,executing,the,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1362408075;Set the TaskExecutor to execute application listeners with._<p>Default is a SyncTaskExecutor, executing the listeners synchronously_in the calling thread._<p>Consider specifying an asynchronous TaskExecutor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,to,execute,application,listeners,with,p,default,is,a,sync,task,executor,executing,the,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1368482696;Set the TaskExecutor to execute application listeners with._<p>Default is a SyncTaskExecutor, executing the listeners synchronously_in the calling thread._<p>Consider specifying an asynchronous TaskExecutor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,to,execute,application,listeners,with,p,default,is,a,sync,task,executor,executing,the,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1385412762;Set the TaskExecutor to execute application listeners with._<p>Default is a SyncTaskExecutor, executing the listeners synchronously_in the calling thread._<p>Consider specifying an asynchronous TaskExecutor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,the,task,executor,to,execute,application,listeners,with,p,default,is,a,sync,task,executor,executing,the,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1397163985;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1397224641;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1409784938;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1423555692;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1433840251;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1459774478;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1477661122;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1484577318;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1484681840;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setTaskExecutor(Executor taskExecutor);1496242568;Set a custom executor (typically a {@link org.springframework.core.task.TaskExecutor})_to invoke each listener with._<p>Default is equivalent to {@link org.springframework.core.task.SyncTaskExecutor},_executing all listeners synchronously in the calling thread._<p>Consider specifying an asynchronous task executor here to not block the_caller until all listeners have been executed. However, note that asynchronous_execution will not participate in the caller's thread context (class loader,_transaction association) unless the TaskExecutor explicitly supports this._@see org.springframework.core.task.SyncTaskExecutor_@see org.springframework.core.task.SimpleAsyncTaskExecutor;public void setTaskExecutor(Executor taskExecutor) {_		this.taskExecutor = taskExecutor__	};set,a,custom,executor,typically,a,link,org,springframework,core,task,task,executor,to,invoke,each,listener,with,p,default,is,equivalent,to,link,org,springframework,core,task,sync,task,executor,executing,all,listeners,synchronously,in,the,calling,thread,p,consider,specifying,an,asynchronous,task,executor,here,to,not,block,the,caller,until,all,listeners,have,been,executed,however,note,that,asynchronous,execution,will,not,participate,in,the,caller,s,thread,context,class,loader,transaction,association,unless,the,task,executor,explicitly,supports,this,see,org,springframework,core,task,sync,task,executor,see,org,springframework,core,task,simple,async,task,executor;public,void,set,task,executor,executor,task,executor,this,task,executor,task,executor
SimpleApplicationEventMulticaster -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1496837955;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1498780456;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1501582001;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1517324038;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
SimpleApplicationEventMulticaster -> public void setErrorHandler(@Nullable ErrorHandler errorHandler);1532608913;Set the {@link ErrorHandler} to invoke in case an exception is thrown_from a listener._<p>Default is none, with a listener exception stopping the current_multicast and getting propagated to the publisher of the current event._If a {@linkplain #setTaskExecutor task executor} is specified, each_individual listener exception will get propagated to the executor but_won't necessarily stop execution of other listeners._<p>Consider setting an {@link ErrorHandler} implementation that catches_and logs exceptions (a la_{@link org.springframework.scheduling.support.TaskUtils#LOG_AND_SUPPRESS_ERROR_HANDLER})_or an implementation that logs exceptions while nevertheless propagating them_(e.g. {@link org.springframework.scheduling.support.TaskUtils#LOG_AND_PROPAGATE_ERROR_HANDLER})._@since 4.1;public void setErrorHandler(@Nullable ErrorHandler errorHandler) {_		this.errorHandler = errorHandler__	};set,the,link,error,handler,to,invoke,in,case,an,exception,is,thrown,from,a,listener,p,default,is,none,with,a,listener,exception,stopping,the,current,multicast,and,getting,propagated,to,the,publisher,of,the,current,event,if,a,linkplain,set,task,executor,task,executor,is,specified,each,individual,listener,exception,will,get,propagated,to,the,executor,but,won,t,necessarily,stop,execution,of,other,listeners,p,consider,setting,an,link,error,handler,implementation,that,catches,and,logs,exceptions,a,la,link,org,springframework,scheduling,support,task,utils,or,an,implementation,that,logs,exceptions,while,nevertheless,propagating,them,e,g,link,org,springframework,scheduling,support,task,utils,since,4,1;public,void,set,error,handler,nullable,error,handler,error,handler,this,error,handler,error,handler
