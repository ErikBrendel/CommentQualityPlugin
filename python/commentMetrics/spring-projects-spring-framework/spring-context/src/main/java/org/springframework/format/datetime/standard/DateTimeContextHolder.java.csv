commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Reset the DateTimeContext for the current thread.  */ ;/**  * Reset the DateTimeContext for the current thread.  */ public static void resetDateTimeContext() {     dateTimeContextHolder.remove(). }
true;public,static;1;8;/**  * Associate the given DateTimeContext with the current thread.  * @param dateTimeContext the current DateTimeContext,  * or {@code null} to reset the thread-bound context  */ ;/**  * Associate the given DateTimeContext with the current thread.  * @param dateTimeContext the current DateTimeContext,  * or {@code null} to reset the thread-bound context  */ public static void setDateTimeContext(@Nullable DateTimeContext dateTimeContext) {     if (dateTimeContext == null) {         resetDateTimeContext().     } else {         dateTimeContextHolder.set(dateTimeContext).     } }
true;public,static;0;4;/**  * Return the DateTimeContext associated with the current thread, if any.  * @return the current DateTimeContext, or {@code null} if none  */ ;/**  * Return the DateTimeContext associated with the current thread, if any.  * @return the current DateTimeContext, or {@code null} if none  */ @Nullable public static DateTimeContext getDateTimeContext() {     return dateTimeContextHolder.get(). }
true;public,static;2;5;/**  * Obtain a DateTimeFormatter with user-specific settings applied to the given base Formatter.  * @param formatter the base formatter that establishes default formatting rules  * (generally user independent)  * @param locale the current user locale (may be {@code null} if not known)  * @return the user-specific DateTimeFormatter  */ ;/**  * Obtain a DateTimeFormatter with user-specific settings applied to the given base Formatter.  * @param formatter the base formatter that establishes default formatting rules  * (generally user independent)  * @param locale the current user locale (may be {@code null} if not known)  * @return the user-specific DateTimeFormatter  */ public static DateTimeFormatter getFormatter(DateTimeFormatter formatter, @Nullable Locale locale) {     DateTimeFormatter formatterToUse = (locale != null ? formatter.withLocale(locale) : formatter).     DateTimeContext context = getDateTimeContext().     return (context != null ? context.getFormatter(formatterToUse) : formatterToUse). }
