commented;modifiers;parameterAmount;loc;comment;code
true;public;1;27;/**  * This implementation looks up and returns the value associated with the given  * name from the underlying {@link JndiLocatorDelegate}. If a {@link NamingException}  * is thrown during the call to {@link JndiLocatorDelegate#lookup(String)}, returns  * {@code null} and issues a DEBUG-level log statement with the exception message.  */ ;/**  * This implementation looks up and returns the value associated with the given  * name from the underlying {@link JndiLocatorDelegate}. If a {@link NamingException}  * is thrown during the call to {@link JndiLocatorDelegate#lookup(String)}, returns  * {@code null} and issues a DEBUG-level log statement with the exception message.  */ @Override @Nullable public Object getProperty(String name) {     if (getSource().isResourceRef() && name.indexOf(':') != -1) {         // JNDI where a colon indicates a separator between JNDI scheme and actual name.         return null.     }     try {         Object value = this.source.lookup(name).         if (logger.isDebugEnabled()) {             logger.debug("JNDI lookup for name [" + name + "] returned: [" + value + "]").         }         return value.     } catch (NamingException ex) {         if (logger.isDebugEnabled()) {             logger.debug("JNDI lookup for name [" + name + "] threw NamingException " + "with message: " + ex.getMessage() + ". Returning null.").         }         return null.     } }
