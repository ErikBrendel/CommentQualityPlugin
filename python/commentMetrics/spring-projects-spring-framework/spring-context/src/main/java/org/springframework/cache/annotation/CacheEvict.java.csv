# id;timestamp;commentText;codeText;commentWords;codeWords
CacheEvict -> String cacheManager() default ""_;1396268274;The bean name of the custom {@link org.springframework.cache.CacheManager} to use.;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1396272050;The bean name of the custom {@link org.springframework.cache.CacheManager} to use.;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1396878069;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver()}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1429832293;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver()}  attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1433105513;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver} attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1433105521;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver} attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1438176426;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver} attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1449656693;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver} attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1449663004;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver} attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1450368333;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver} attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1459274683;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver} attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
CacheEvict -> String cacheManager() default ""_;1471347910;The bean name of the custom {@link org.springframework.cache.CacheManager} to use to_create a default {@link org.springframework.cache.interceptor.CacheResolver} if none_is set already._<p>Mutually exclusive with the {@link #cacheResolver} attribute._@see org.springframework.cache.interceptor.SimpleCacheResolver_@see CacheConfig#cacheManager;String cacheManager() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,cache,manager,to,use,to,create,a,default,link,org,springframework,cache,interceptor,cache,resolver,if,none,is,set,already,p,mutually,exclusive,with,the,link,cache,resolver,attribute,see,org,springframework,cache,interceptor,simple,cache,resolver,see,cache,config,cache,manager;string,cache,manager,default
CacheEvict -> boolean beforeInvocation() default false_;1328020251;Whether the eviction should occur after the method is successfully invoked (default)_or before. The latter causes the eviction to occur irrespective of the method outcome (whether_it threw an exception or not) while the former does not.;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,after,the,method,is,successfully,invoked,default,or,before,the,latter,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,whether,it,threw,an,exception,or,not,while,the,former,does,not;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1355313310;Whether the eviction should occur after the method is successfully invoked (default)_or before. The latter causes the eviction to occur irrespective of the method outcome (whether_it threw an exception or not) while the former does not.;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,after,the,method,is,successfully,invoked,default,or,before,the,latter,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,whether,it,threw,an,exception,or,not,while,the,former,does,not;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1356735495;Whether the eviction should occur after the method is successfully invoked (default)_or before. The latter causes the eviction to occur irrespective of the method outcome (whether_it threw an exception or not) while the former does not.;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,after,the,method,is,successfully,invoked,default,or,before,the,latter,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,whether,it,threw,an,exception,or,not,while,the,former,does,not;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1396268127;Whether the eviction should occur after the method is successfully invoked (default)_or before. The latter causes the eviction to occur irrespective of the method outcome (whether_it threw an exception or not) while the former does not.;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,after,the,method,is,successfully,invoked,default,or,before,the,latter,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,whether,it,threw,an,exception,or,not,while,the,former,does,not;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1396268274;Whether the eviction should occur after the method is successfully invoked (default)_or before. The latter causes the eviction to occur irrespective of the method outcome (whether_it threw an exception or not) while the former does not.;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,after,the,method,is,successfully,invoked,default,or,before,the,latter,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,whether,it,threw,an,exception,or,not,while,the,former,does,not;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1396272050;Whether the eviction should occur after the method is successfully invoked (default)_or before. The latter causes the eviction to occur irrespective of the method outcome (whether_it threw an exception or not) while the former does not.;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,after,the,method,is,successfully,invoked,default,or,before,the,latter,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,whether,it,threw,an,exception,or,not,while,the,former,does,not;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1396878069;Whether the eviction should occur after the method is successfully invoked (default)_or before. The latter causes the eviction to occur irrespective of the method outcome (whether_it threw an exception or not) while the former does not.;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,after,the,method,is,successfully,invoked,default,or,before,the,latter,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,whether,it,threw,an,exception,or,not,while,the,former,does,not;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1429832293;Whether the eviction should occur after the method is successfully invoked (default)_or before. The latter causes the eviction to occur irrespective of the method outcome (whether_it threw an exception or not) while the former does not.;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,after,the,method,is,successfully,invoked,default,or,before,the,latter,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,whether,it,threw,an,exception,or,not,while,the,former,does,not;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1433105513;Whether the eviction should occur before the method is invoked._<p>Setting this attribute to {@code true}, causes the eviction to_occur irrespective of the method outcome (i.e., whether it threw an_exception or not)._<p>Defaults to {@code false}, meaning that the cache eviction operation_will occur <em>after</em> the advised method is invoked successfully (i.e.,_only if the invocation did not throw an exception).;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,before,the,method,is,invoked,p,setting,this,attribute,to,code,true,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,i,e,whether,it,threw,an,exception,or,not,p,defaults,to,code,false,meaning,that,the,cache,eviction,operation,will,occur,em,after,em,the,advised,method,is,invoked,successfully,i,e,only,if,the,invocation,did,not,throw,an,exception;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1433105521;Whether the eviction should occur before the method is invoked._<p>Setting this attribute to {@code true}, causes the eviction to_occur irrespective of the method outcome (i.e., whether it threw an_exception or not)._<p>Defaults to {@code false}, meaning that the cache eviction operation_will occur <em>after</em> the advised method is invoked successfully (i.e.,_only if the invocation did not throw an exception).;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,before,the,method,is,invoked,p,setting,this,attribute,to,code,true,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,i,e,whether,it,threw,an,exception,or,not,p,defaults,to,code,false,meaning,that,the,cache,eviction,operation,will,occur,em,after,em,the,advised,method,is,invoked,successfully,i,e,only,if,the,invocation,did,not,throw,an,exception;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1438176426;Whether the eviction should occur before the method is invoked._<p>Setting this attribute to {@code true}, causes the eviction to_occur irrespective of the method outcome (i.e., whether it threw an_exception or not)._<p>Defaults to {@code false}, meaning that the cache eviction operation_will occur <em>after</em> the advised method is invoked successfully (i.e.,_only if the invocation did not throw an exception).;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,before,the,method,is,invoked,p,setting,this,attribute,to,code,true,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,i,e,whether,it,threw,an,exception,or,not,p,defaults,to,code,false,meaning,that,the,cache,eviction,operation,will,occur,em,after,em,the,advised,method,is,invoked,successfully,i,e,only,if,the,invocation,did,not,throw,an,exception;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1449656693;Whether the eviction should occur before the method is invoked._<p>Setting this attribute to {@code true}, causes the eviction to_occur irrespective of the method outcome (i.e., whether it threw an_exception or not)._<p>Defaults to {@code false}, meaning that the cache eviction operation_will occur <em>after</em> the advised method is invoked successfully (i.e.,_only if the invocation did not throw an exception).;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,before,the,method,is,invoked,p,setting,this,attribute,to,code,true,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,i,e,whether,it,threw,an,exception,or,not,p,defaults,to,code,false,meaning,that,the,cache,eviction,operation,will,occur,em,after,em,the,advised,method,is,invoked,successfully,i,e,only,if,the,invocation,did,not,throw,an,exception;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1449663004;Whether the eviction should occur before the method is invoked._<p>Setting this attribute to {@code true}, causes the eviction to_occur irrespective of the method outcome (i.e., whether it threw an_exception or not)._<p>Defaults to {@code false}, meaning that the cache eviction operation_will occur <em>after</em> the advised method is invoked successfully (i.e.,_only if the invocation did not throw an exception).;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,before,the,method,is,invoked,p,setting,this,attribute,to,code,true,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,i,e,whether,it,threw,an,exception,or,not,p,defaults,to,code,false,meaning,that,the,cache,eviction,operation,will,occur,em,after,em,the,advised,method,is,invoked,successfully,i,e,only,if,the,invocation,did,not,throw,an,exception;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1450368333;Whether the eviction should occur before the method is invoked._<p>Setting this attribute to {@code true}, causes the eviction to_occur irrespective of the method outcome (i.e., whether it threw an_exception or not)._<p>Defaults to {@code false}, meaning that the cache eviction operation_will occur <em>after</em> the advised method is invoked successfully (i.e.,_only if the invocation did not throw an exception).;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,before,the,method,is,invoked,p,setting,this,attribute,to,code,true,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,i,e,whether,it,threw,an,exception,or,not,p,defaults,to,code,false,meaning,that,the,cache,eviction,operation,will,occur,em,after,em,the,advised,method,is,invoked,successfully,i,e,only,if,the,invocation,did,not,throw,an,exception;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1459274683;Whether the eviction should occur before the method is invoked._<p>Setting this attribute to {@code true}, causes the eviction to_occur irrespective of the method outcome (i.e., whether it threw an_exception or not)._<p>Defaults to {@code false}, meaning that the cache eviction operation_will occur <em>after</em> the advised method is invoked successfully (i.e.,_only if the invocation did not throw an exception).;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,before,the,method,is,invoked,p,setting,this,attribute,to,code,true,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,i,e,whether,it,threw,an,exception,or,not,p,defaults,to,code,false,meaning,that,the,cache,eviction,operation,will,occur,em,after,em,the,advised,method,is,invoked,successfully,i,e,only,if,the,invocation,did,not,throw,an,exception;boolean,before,invocation,default,false
CacheEvict -> boolean beforeInvocation() default false_;1471347910;Whether the eviction should occur before the method is invoked._<p>Setting this attribute to {@code true}, causes the eviction to_occur irrespective of the method outcome (i.e., whether it threw an_exception or not)._<p>Defaults to {@code false}, meaning that the cache eviction operation_will occur <em>after</em> the advised method is invoked successfully (i.e.,_only if the invocation did not throw an exception).;boolean beforeInvocation() default false_;whether,the,eviction,should,occur,before,the,method,is,invoked,p,setting,this,attribute,to,code,true,causes,the,eviction,to,occur,irrespective,of,the,method,outcome,i,e,whether,it,threw,an,exception,or,not,p,defaults,to,code,false,meaning,that,the,cache,eviction,operation,will,occur,em,after,em,the,advised,method,is,invoked,successfully,i,e,only,if,the,invocation,did,not,throw,an,exception;boolean,before,invocation,default,false
CacheEvict -> String condition() default ""_;1328020251;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
CacheEvict -> String condition() default ""_;1355313310;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
CacheEvict -> String condition() default ""_;1356735495;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
CacheEvict -> String condition() default ""_;1396268127;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
CacheEvict -> String condition() default ""_;1396268274;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
CacheEvict -> String condition() default ""_;1396272050;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
CacheEvict -> String condition() default ""_;1396878069;Spring Expression Language (SpEL) attribute used for conditioning the method caching._<p>Default is "", meaning the method is always cached.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,conditioning,the,method,caching,p,default,is,meaning,the,method,is,always,cached;string,condition,default
CacheEvict -> String condition() default ""_;1429832293;Spring Expression Language (SpEL) attribute used for making the cache_eviction operation conditional._<p>Default is "", meaning the cache eviction is always performed.;String condition() default ""_;spring,expression,language,sp,el,attribute,used,for,making,the,cache,eviction,operation,conditional,p,default,is,meaning,the,cache,eviction,is,always,performed;string,condition,default
CacheEvict -> String condition() default ""_;1433105513;Spring Expression Language (SpEL) expression used for making the cache_eviction operation conditional._<p>Default is {@code ""}, meaning the cache eviction is always performed.;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,cache,eviction,operation,conditional,p,default,is,code,meaning,the,cache,eviction,is,always,performed;string,condition,default
CacheEvict -> String condition() default ""_;1433105521;Spring Expression Language (SpEL) expression used for making the cache_eviction operation conditional._<p>Default is {@code ""}, meaning the cache eviction is always performed.;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,cache,eviction,operation,conditional,p,default,is,code,meaning,the,cache,eviction,is,always,performed;string,condition,default
CacheEvict -> String condition() default ""_;1438176426;Spring Expression Language (SpEL) expression used for making the cache_eviction operation conditional._<p>Default is {@code ""}, meaning the cache eviction is always performed.;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,cache,eviction,operation,conditional,p,default,is,code,meaning,the,cache,eviction,is,always,performed;string,condition,default
CacheEvict -> String condition() default ""_;1449656693;Spring Expression Language (SpEL) expression used for making the cache_eviction operation conditional._<p>Default is {@code ""}, meaning the cache eviction is always performed._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,cache,eviction,operation,conditional,p,default,is,code,meaning,the,cache,eviction,is,always,performed,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
CacheEvict -> String condition() default ""_;1449663004;Spring Expression Language (SpEL) expression used for making the cache_eviction operation conditional._<p>Default is {@code ""}, meaning the cache eviction is always performed._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,cache,eviction,operation,conditional,p,default,is,code,meaning,the,cache,eviction,is,always,performed,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
CacheEvict -> String condition() default ""_;1450368333;Spring Expression Language (SpEL) expression used for making the cache_eviction operation conditional._<p>Default is {@code ""}, meaning the cache eviction is always performed._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,cache,eviction,operation,conditional,p,default,is,code,meaning,the,cache,eviction,is,always,performed,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
CacheEvict -> String condition() default ""_;1459274683;Spring Expression Language (SpEL) expression used for making the cache_eviction operation conditional._<p>Default is {@code ""}, meaning the cache eviction is always performed._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,cache,eviction,operation,conditional,p,default,is,code,meaning,the,cache,eviction,is,always,performed,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
CacheEvict -> String condition() default ""_;1471347910;Spring Expression Language (SpEL) expression used for making the cache_eviction operation conditional._<p>Default is {@code ""}, meaning the cache eviction is always performed._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String condition() default ""_;spring,expression,language,sp,el,expression,used,for,making,the,cache,eviction,operation,conditional,p,default,is,code,meaning,the,cache,eviction,is,always,performed,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,condition,default
CacheEvict -> @AliasFor("value") 	String[] cacheNames() default {}_;1438176426;Names of the caches to use for the cache eviction operation._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,to,use,for,the,cache,eviction,operation,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
CacheEvict -> @AliasFor("value") 	String[] cacheNames() default {}_;1449656693;Names of the caches to use for the cache eviction operation._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,to,use,for,the,cache,eviction,operation,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
CacheEvict -> @AliasFor("value") 	String[] cacheNames() default {}_;1449663004;Names of the caches to use for the cache eviction operation._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,to,use,for,the,cache,eviction,operation,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
CacheEvict -> @AliasFor("value") 	String[] cacheNames() default {}_;1450368333;Names of the caches to use for the cache eviction operation._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,to,use,for,the,cache,eviction,operation,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
CacheEvict -> @AliasFor("value") 	String[] cacheNames() default {}_;1459274683;Names of the caches to use for the cache eviction operation._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,to,use,for,the,cache,eviction,operation,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
CacheEvict -> @AliasFor("value") 	String[] cacheNames() default {}_;1471347910;Names of the caches to use for the cache eviction operation._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition._@since 4.2_@see #value_@see CacheConfig#cacheNames;@AliasFor("value")_	String[] cacheNames() default {}_;names,of,the,caches,to,use,for,the,cache,eviction,operation,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition,since,4,2,see,value,see,cache,config,cache,names;alias,for,value,string,cache,names,default
CacheEvict -> String keyGenerator() default ""_;1396268127;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1396268274;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1396272050;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1396878069;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1429832293;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key()} attribute.;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1433105513;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1433105521;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1438176426;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1449656693;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator} to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1449663004;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1450368333;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1459274683;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
CacheEvict -> String keyGenerator() default ""_;1471347910;The bean name of the custom {@link org.springframework.cache.interceptor.KeyGenerator}_to use._<p>Mutually exclusive with the {@link #key} attribute._@see CacheConfig#keyGenerator;String keyGenerator() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,key,generator,to,use,p,mutually,exclusive,with,the,link,key,attribute,see,cache,config,key,generator;string,key,generator,default
CacheEvict -> String[] value()_;1328020251;Qualifier value for the specified cached operation._<p>May be used to determine the target cache (or caches), matching the qualifier_value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;qualifier,value,for,the,specified,cached,operation,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
CacheEvict -> String[] value()_;1355313310;Qualifier value for the specified cached operation._<p>May be used to determine the target cache (or caches), matching the qualifier_value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;qualifier,value,for,the,specified,cached,operation,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
CacheEvict -> String[] value()_;1356735495;Qualifier value for the specified cached operation._<p>May be used to determine the target cache (or caches), matching the qualifier_value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;qualifier,value,for,the,specified,cached,operation,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
CacheEvict -> String[] value()_;1396268127;Qualifier value for the specified cached operation._<p>May be used to determine the target cache (or caches), matching the qualifier_value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;qualifier,value,for,the,specified,cached,operation,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
CacheEvict -> String[] value()_;1396268274;Qualifier value for the specified cached operation._<p>May be used to determine the target cache (or caches), matching the qualifier_value (or the bean name(s)) of (a) specific bean definition.;String[] value()_;qualifier,value,for,the,specified,cached,operation,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value
CacheEvict -> String key() default ""_;1328020251;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key;string,key,default
CacheEvict -> String key() default ""_;1355313310;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key;string,key,default
CacheEvict -> String key() default ""_;1356735495;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key;string,key,default
CacheEvict -> String key() default ""_;1396268127;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
CacheEvict -> String key() default ""_;1396268274;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
CacheEvict -> String key() default ""_;1396272050;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
CacheEvict -> String key() default ""_;1396878069;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
CacheEvict -> String key() default ""_;1429832293;Spring Expression Language (SpEL) attribute for computing the key dynamically._<p>Default is "", meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator()} has been set.;String key() default ""_;spring,expression,language,sp,el,attribute,for,computing,the,key,dynamically,p,default,is,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
CacheEvict -> String key() default ""_;1433105513;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator} has been set.;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
CacheEvict -> String key() default ""_;1433105521;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator} has been set.;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
CacheEvict -> String key() default ""_;1438176426;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator} has been set.;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set;string,key,default
CacheEvict -> String key() default ""_;1449656693;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key, unless_a custom {@link #keyGenerator} has been set._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation, which_can only be used if {@link #beforeInvocation()} is {@code false}.</li>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,which,can,only,be,used,if,link,before,invocation,is,code,false,li,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
CacheEvict -> String key() default ""_;1449663004;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been set._<p>The SpEL expression evaluates again a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation, which_can only be used if {@link #beforeInvocation()} is {@code false}.</li>_<li>{@code #root.method}, {@code #root.target} and {@code #root.caches} for a_reference to the {@link java.lang.reflect.Method method}, target object and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be access via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set,p,the,sp,el,expression,evaluates,again,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,which,can,only,be,used,if,link,before,invocation,is,code,false,li,li,code,root,method,code,root,target,and,code,root,caches,for,a,reference,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,access,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
CacheEvict -> String key() default ""_;1450368333;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been set._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation, which_can only be used if {@link #beforeInvocation()} is {@code false}.</li>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,which,can,only,be,used,if,link,before,invocation,is,code,false,li,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
CacheEvict -> String key() default ""_;1459274683;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been set._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation, which_can only be used if {@link #beforeInvocation()} is {@code false}.</li>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,which,can,only,be,used,if,link,before,invocation,is,code,false,li,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
CacheEvict -> String key() default ""_;1471347910;Spring Expression Language (SpEL) expression for computing the key dynamically._<p>Default is {@code ""}, meaning all method parameters are considered as a key,_unless a custom {@link #keyGenerator} has been set._<p>The SpEL expression evaluates against a dedicated context that provides the_following meta-data:_<ul>_<li>{@code #result} for a reference to the result of the method invocation, which_can only be used if {@link #beforeInvocation()} is {@code false}. For supported_wrappers such as {@code Optional}, {@code #result} refers to the actual object,_not the wrapper</li>_<li>{@code #root.method}, {@code #root.target}, and {@code #root.caches} for_references to the {@link java.lang.reflect.Method method}, target object, and_affected cache(s) respectively.</li>_<li>Shortcuts for the method name ({@code #root.methodName}) and target class_({@code #root.targetClass}) are also available._<li>Method arguments can be accessed by index. For instance the second argument_can be accessed via {@code #root.args[1]}, {@code #p1} or {@code #a1}. Arguments_can also be accessed by name if that information is available.</li>_</ul>;String key() default ""_;spring,expression,language,sp,el,expression,for,computing,the,key,dynamically,p,default,is,code,meaning,all,method,parameters,are,considered,as,a,key,unless,a,custom,link,key,generator,has,been,set,p,the,sp,el,expression,evaluates,against,a,dedicated,context,that,provides,the,following,meta,data,ul,li,code,result,for,a,reference,to,the,result,of,the,method,invocation,which,can,only,be,used,if,link,before,invocation,is,code,false,for,supported,wrappers,such,as,code,optional,code,result,refers,to,the,actual,object,not,the,wrapper,li,li,code,root,method,code,root,target,and,code,root,caches,for,references,to,the,link,java,lang,reflect,method,method,target,object,and,affected,cache,s,respectively,li,li,shortcuts,for,the,method,name,code,root,method,name,and,target,class,code,root,target,class,are,also,available,li,method,arguments,can,be,accessed,by,index,for,instance,the,second,argument,can,be,accessed,via,code,root,args,1,code,p1,or,code,a1,arguments,can,also,be,accessed,by,name,if,that,information,is,available,li,ul;string,key,default
CacheEvict -> String[] value() default {}_;1396272050;Qualifier value for the specified cached operation._<p>May be used to determine the target cache (or caches), matching the qualifier_value (or the bean name(s)) of (a) specific bean definition.;String[] value() default {}_;qualifier,value,for,the,specified,cached,operation,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value,default
CacheEvict -> String[] value() default {}_;1396878069;Qualifier value for the specified cached operation._<p>May be used to determine the target cache (or caches), matching the qualifier_value (or the bean name(s)) of (a) specific bean definition.;String[] value() default {}_;qualifier,value,for,the,specified,cached,operation,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value,default
CacheEvict -> String[] value() default {}_;1429832293;Qualifier value for the specified cached operation._<p>May be used to determine the target cache (or caches), matching the qualifier_value (or the bean name(s)) of (a) specific bean definition.;String[] value() default {}_;qualifier,value,for,the,specified,cached,operation,p,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,the,bean,name,s,of,a,specific,bean,definition;string,value,default
CacheEvict -> String[] value() default {}_;1433105513;Names of the caches to use for the cache eviction operation._<p>Names may be used to determine the target cache (or caches), matching_the qualifier value or bean name of a specific bean definition.;String[] value() default {}_;names,of,the,caches,to,use,for,the,cache,eviction,operation,p,names,may,be,used,to,determine,the,target,cache,or,caches,matching,the,qualifier,value,or,bean,name,of,a,specific,bean,definition;string,value,default
CacheEvict -> String cacheResolver() default ""_;1396878069;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use.;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1429832293;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use.;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1433105513;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1433105521;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1438176426;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1449656693;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver} to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1449663004;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1450368333;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1459274683;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
CacheEvict -> String cacheResolver() default ""_;1471347910;The bean name of the custom {@link org.springframework.cache.interceptor.CacheResolver}_to use._@see CacheConfig#cacheResolver;String cacheResolver() default ""_;the,bean,name,of,the,custom,link,org,springframework,cache,interceptor,cache,resolver,to,use,see,cache,config,cache,resolver;string,cache,resolver,default
CacheEvict -> @AliasFor("cacheNames") 	String[] value() default {}_;1438176426;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
CacheEvict -> @AliasFor("cacheNames") 	String[] value() default {}_;1449656693;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
CacheEvict -> @AliasFor("cacheNames") 	String[] value() default {}_;1449663004;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
CacheEvict -> @AliasFor("cacheNames") 	String[] value() default {}_;1450368333;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
CacheEvict -> @AliasFor("cacheNames") 	String[] value() default {}_;1459274683;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
CacheEvict -> @AliasFor("cacheNames") 	String[] value() default {}_;1471347910;Alias for {@link #cacheNames}.;@AliasFor("cacheNames")_	String[] value() default {}_;alias,for,link,cache,names;alias,for,cache,names,string,value,default
CacheEvict -> boolean allEntries() default false_;1328020251;Whether or not all the entries inside the cache(s) are removed or not. By_default, only the value under the associated key is removed._<p>Note that specifying setting this parameter to true and specifying a_{@link CacheKey key} is not allowed.;boolean allEntries() default false_;whether,or,not,all,the,entries,inside,the,cache,s,are,removed,or,not,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,specifying,setting,this,parameter,to,true,and,specifying,a,link,cache,key,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1355313310;Whether or not all the entries inside the cache(s) are removed or not. By_default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a {@link #key()}_is not allowed.;boolean allEntries() default false_;whether,or,not,all,the,entries,inside,the,cache,s,are,removed,or,not,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1356735495;Whether or not all the entries inside the cache(s) are removed or not. By_default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a {@link #key()}_is not allowed.;boolean allEntries() default false_;whether,or,not,all,the,entries,inside,the,cache,s,are,removed,or,not,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1396268127;Whether or not all the entries inside the cache(s) are removed or not. By_default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a {@link #key()}_is not allowed.;boolean allEntries() default false_;whether,or,not,all,the,entries,inside,the,cache,s,are,removed,or,not,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1396268274;Whether or not all the entries inside the cache(s) are removed or not. By_default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a {@link #key()}_is not allowed.;boolean allEntries() default false_;whether,or,not,all,the,entries,inside,the,cache,s,are,removed,or,not,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1396272050;Whether or not all the entries inside the cache(s) are removed or not. By_default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a {@link #key()}_is not allowed.;boolean allEntries() default false_;whether,or,not,all,the,entries,inside,the,cache,s,are,removed,or,not,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1396878069;Whether or not all the entries inside the cache(s) are removed or not. By_default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a {@link #key()}_is not allowed.;boolean allEntries() default false_;whether,or,not,all,the,entries,inside,the,cache,s,are,removed,or,not,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1429832293;Whether or not all the entries inside the cache(s) are removed or not. By_default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a {@link #key()}_is not allowed.;boolean allEntries() default false_;whether,or,not,all,the,entries,inside,the,cache,s,are,removed,or,not,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1433105513;Whether all the entries inside the cache(s) are removed._<p>By default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a_{@link #key} is not allowed.;boolean allEntries() default false_;whether,all,the,entries,inside,the,cache,s,are,removed,p,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1433105521;Whether all the entries inside the cache(s) are removed._<p>By default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a_{@link #key} is not allowed.;boolean allEntries() default false_;whether,all,the,entries,inside,the,cache,s,are,removed,p,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1438176426;Whether all the entries inside the cache(s) are removed._<p>By default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a_{@link #key} is not allowed.;boolean allEntries() default false_;whether,all,the,entries,inside,the,cache,s,are,removed,p,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1449656693;Whether all the entries inside the cache(s) are removed._<p>By default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a_{@link #key} is not allowed.;boolean allEntries() default false_;whether,all,the,entries,inside,the,cache,s,are,removed,p,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1449663004;Whether all the entries inside the cache(s) are removed._<p>By default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a_{@link #key} is not allowed.;boolean allEntries() default false_;whether,all,the,entries,inside,the,cache,s,are,removed,p,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1450368333;Whether all the entries inside the cache(s) are removed._<p>By default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a_{@link #key} is not allowed.;boolean allEntries() default false_;whether,all,the,entries,inside,the,cache,s,are,removed,p,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1459274683;Whether all the entries inside the cache(s) are removed._<p>By default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a_{@link #key} is not allowed.;boolean allEntries() default false_;whether,all,the,entries,inside,the,cache,s,are,removed,p,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
CacheEvict -> boolean allEntries() default false_;1471347910;Whether all the entries inside the cache(s) are removed._<p>By default, only the value under the associated key is removed._<p>Note that setting this parameter to {@code true} and specifying a_{@link #key} is not allowed.;boolean allEntries() default false_;whether,all,the,entries,inside,the,cache,s,are,removed,p,by,default,only,the,value,under,the,associated,key,is,removed,p,note,that,setting,this,parameter,to,code,true,and,specifying,a,link,key,is,not,allowed;boolean,all,entries,default,false
