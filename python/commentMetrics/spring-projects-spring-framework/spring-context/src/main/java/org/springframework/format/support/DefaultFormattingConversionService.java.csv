commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;25;/**  * Add formatters appropriate for most environments: including number formatters,  * JSR-354 Money & Currency formatters, JSR-310 Date-Time and/or Joda-Time formatters,  * depending on the presence of the corresponding API on the classpath.  * @param formatterRegistry the service to register default formatters with  */ ;/**  * Add formatters appropriate for most environments: including number formatters,  * JSR-354 Money & Currency formatters, JSR-310 Date-Time and/or Joda-Time formatters,  * depending on the presence of the corresponding API on the classpath.  * @param formatterRegistry the service to register default formatters with  */ public static void addDefaultFormatters(FormatterRegistry formatterRegistry) {     // Default handling of number values     formatterRegistry.addFormatterForFieldAnnotation(new NumberFormatAnnotationFormatterFactory()).     // Default handling of monetary values     if (jsr354Present) {         formatterRegistry.addFormatter(new CurrencyUnitFormatter()).         formatterRegistry.addFormatter(new MonetaryAmountFormatter()).         formatterRegistry.addFormatterForFieldAnnotation(new Jsr354NumberFormatAnnotationFormatterFactory()).     }     // Default handling of date-time values     // just handling JSR-310 specific date and time types     new DateTimeFormatterRegistrar().registerFormatters(formatterRegistry).     if (jodaTimePresent) {         // handles Joda-specific types as well as Date, Calendar, Long         new JodaTimeFormatterRegistrar().registerFormatters(formatterRegistry).     } else {         // regular DateFormat-based Date, Calendar, Long converters         new DateFormatterRegistrar().registerFormatters(formatterRegistry).     } }
