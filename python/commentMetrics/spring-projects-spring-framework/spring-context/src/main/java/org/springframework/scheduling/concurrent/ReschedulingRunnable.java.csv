commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Nullable public ScheduledFuture<?> schedule() {     synchronized (this.triggerContextMonitor) {         this.scheduledExecutionTime = this.trigger.nextExecutionTime(this.triggerContext).         if (this.scheduledExecutionTime == null) {             return null.         }         long initialDelay = this.scheduledExecutionTime.getTime() - System.currentTimeMillis().         this.currentFuture = this.executor.schedule(this, initialDelay, TimeUnit.MILLISECONDS).         return this.     } }
false;private;0;4;;private ScheduledFuture<?> obtainCurrentFuture() {     Assert.state(this.currentFuture != null, "No scheduled future").     return this.currentFuture. }
false;public;0;13;;@Override public void run() {     Date actualExecutionTime = new Date().     super.run().     Date completionTime = new Date().     synchronized (this.triggerContextMonitor) {         Assert.state(this.scheduledExecutionTime != null, "No scheduled execution").         this.triggerContext.update(this.scheduledExecutionTime, actualExecutionTime, completionTime).         if (!obtainCurrentFuture().isCancelled()) {             schedule().         }     } }
false;public;1;6;;@Override public boolean cancel(boolean mayInterruptIfRunning) {     synchronized (this.triggerContextMonitor) {         return obtainCurrentFuture().cancel(mayInterruptIfRunning).     } }
false;public;0;6;;@Override public boolean isCancelled() {     synchronized (this.triggerContextMonitor) {         return obtainCurrentFuture().isCancelled().     } }
false;public;0;6;;@Override public boolean isDone() {     synchronized (this.triggerContextMonitor) {         return obtainCurrentFuture().isDone().     } }
false;public;0;8;;@Override public Object get() throws InterruptedException, ExecutionException {     ScheduledFuture<?> curr.     synchronized (this.triggerContextMonitor) {         curr = obtainCurrentFuture().     }     return curr.get(). }
false;public;2;8;;@Override public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {     ScheduledFuture<?> curr.     synchronized (this.triggerContextMonitor) {         curr = obtainCurrentFuture().     }     return curr.get(timeout, unit). }
false;public;1;8;;@Override public long getDelay(TimeUnit unit) {     ScheduledFuture<?> curr.     synchronized (this.triggerContextMonitor) {         curr = obtainCurrentFuture().     }     return curr.getDelay(unit). }
false;public;1;8;;@Override public int compareTo(Delayed other) {     if (this == other) {         return 0.     }     long diff = getDelay(TimeUnit.MILLISECONDS) - other.getDelay(TimeUnit.MILLISECONDS).     return (diff == 0 ? 0 : ((diff < 0) ? -1 : 1)). }
