commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Add the name of a shareable JNDI resource,  * which this factory is allowed to cache once obtained.  * @param shareableResource the JNDI name  * (typically within the "java:comp/env/" namespace)  */ ;/**  * Add the name of a shareable JNDI resource,  * which this factory is allowed to cache once obtained.  * @param shareableResource the JNDI name  * (typically within the "java:comp/env/" namespace)  */ public void addShareableResource(String shareableResource) {     this.shareableResources.add(shareableResource). }
true;public;1;3;/**  * Set a list of names of shareable JNDI resources,  * which this factory is allowed to cache once obtained.  * @param shareableResources the JNDI names  * (typically within the "java:comp/env/" namespace)  */ ;/**  * Set a list of names of shareable JNDI resources,  * which this factory is allowed to cache once obtained.  * @param shareableResources the JNDI names  * (typically within the "java:comp/env/" namespace)  */ public void setShareableResources(String... shareableResources) {     Collections.addAll(this.shareableResources, shareableResources). }
false;public;1;4;;// --------------------------------------------------------------------- // Implementation of BeanFactory interface // --------------------------------------------------------------------- @Override public Object getBean(String name) throws BeansException {     return getBean(name, Object.class). }
false;public;2;20;;@Override public <T> T getBean(String name, Class<T> requiredType) throws BeansException {     try {         if (isSingleton(name)) {             return doGetSingleton(name, requiredType).         } else {             return lookup(name, requiredType).         }     } catch (NameNotFoundException ex) {         throw new NoSuchBeanDefinitionException(name, "not found in JNDI environment").     } catch (TypeMismatchNamingException ex) {         throw new BeanNotOfRequiredTypeException(name, ex.getRequiredType(), ex.getActualType()).     } catch (NamingException ex) {         throw new BeanDefinitionStoreException("JNDI environment", name, "JNDI lookup failed", ex).     } }
false;public;2;8;;@Override public Object getBean(String name, @Nullable Object... args) throws BeansException {     if (args != null) {         throw new UnsupportedOperationException("SimpleJndiBeanFactory does not support explicit bean creation arguments").     }     return getBean(name). }
false;public;1;4;;@Override public <T> T getBean(Class<T> requiredType) throws BeansException {     return getBean(requiredType.getSimpleName(), requiredType). }
false;public;2;8;;@Override public <T> T getBean(Class<T> requiredType, @Nullable Object... args) throws BeansException {     if (args != null) {         throw new UnsupportedOperationException("SimpleJndiBeanFactory does not support explicit bean creation arguments").     }     return getBean(requiredType). }
false;public;0;4;;@Override public T getObject() throws BeansException {     return getBean(requiredType). }
false;public;1;4;;@Override public T getObject(Object... args) throws BeansException {     return getBean(requiredType, args). }
false;public;0;13;;@Override @Nullable public T getIfAvailable() throws BeansException {     try {         return getBean(requiredType).     } catch (NoUniqueBeanDefinitionException ex) {         throw ex.     } catch (NoSuchBeanDefinitionException ex) {         return null.     } }
false;public;0;10;;@Override @Nullable public T getIfUnique() throws BeansException {     try {         return getBean(requiredType).     } catch (NoSuchBeanDefinitionException ex) {         return null.     } }
false;public;1;36;;@Override public <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType) {     return new ObjectProvider<T>() {          @Override         public T getObject() throws BeansException {             return getBean(requiredType).         }          @Override         public T getObject(Object... args) throws BeansException {             return getBean(requiredType, args).         }          @Override         @Nullable         public T getIfAvailable() throws BeansException {             try {                 return getBean(requiredType).             } catch (NoUniqueBeanDefinitionException ex) {                 throw ex.             } catch (NoSuchBeanDefinitionException ex) {                 return null.             }         }          @Override         @Nullable         public T getIfUnique() throws BeansException {             try {                 return getBean(requiredType).             } catch (NoSuchBeanDefinitionException ex) {                 return null.             }         }     }. }
false;public;1;5;;@Override public <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType) {     throw new UnsupportedOperationException("SimpleJndiBeanFactory does not support resolution by ResolvableType"). }
false;public;1;13;;@Override public boolean containsBean(String name) {     if (this.singletonObjects.containsKey(name) || this.resourceTypes.containsKey(name)) {         return true.     }     try {         doGetType(name).         return true.     } catch (NamingException ex) {         return false.     } }
false;public;1;4;;@Override public boolean isSingleton(String name) throws NoSuchBeanDefinitionException {     return this.shareableResources.contains(name). }
false;public;1;4;;@Override public boolean isPrototype(String name) throws NoSuchBeanDefinitionException {     return !this.shareableResources.contains(name). }
false;public;2;5;;@Override public boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException {     Class<?> type = getType(name).     return (type != null && typeToMatch.isAssignableFrom(type)). }
false;public;2;5;;@Override public boolean isTypeMatch(String name, @Nullable Class<?> typeToMatch) throws NoSuchBeanDefinitionException {     Class<?> type = getType(name).     return (typeToMatch == null || (type != null && typeToMatch.isAssignableFrom(type))). }
false;public;1;13;;@Override @Nullable public Class<?> getType(String name) throws NoSuchBeanDefinitionException {     try {         return doGetType(name).     } catch (NameNotFoundException ex) {         throw new NoSuchBeanDefinitionException(name, "not found in JNDI environment").     } catch (NamingException ex) {         return null.     } }
false;public;1;4;;@Override public String[] getAliases(String name) {     return new String[0]. }
false;private;2;16;;@SuppressWarnings("unchecked") private <T> T doGetSingleton(String name, @Nullable Class<T> requiredType) throws NamingException {     synchronized (this.singletonObjects) {         if (this.singletonObjects.containsKey(name)) {             Object jndiObject = this.singletonObjects.get(name).             if (requiredType != null && !requiredType.isInstance(jndiObject)) {                 throw new TypeMismatchNamingException(convertJndiName(name), requiredType, (jndiObject != null ? jndiObject.getClass() : null)).             }             return (T) jndiObject.         }         T jndiObject = lookup(name, requiredType).         this.singletonObjects.put(name, jndiObject).         return jndiObject.     } }
false;private;1;17;;private Class<?> doGetType(String name) throws NamingException {     if (isSingleton(name)) {         return doGetSingleton(name, null).getClass().     } else {         synchronized (this.resourceTypes) {             if (this.resourceTypes.containsKey(name)) {                 return this.resourceTypes.get(name).             } else {                 Class<?> type = lookup(name, null).getClass().                 this.resourceTypes.put(name, type).                 return type.             }         }     } }
