# id;timestamp;commentText;codeText;commentWords;codeWords
CachingConfigurationSelector -> public String[] selectImports(AdviceMode adviceMode);1328020251;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return new String[] { AutoProxyRegistrar.class.getName(), ProxyCachingConfiguration.class.getName() }__			case ASPECTJ:_				return new String[] { AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME }__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,new,string,auto,proxy,registrar,class,get,name,proxy,caching,configuration,class,get,name,case,aspectj,return,new,string,annotation,config,utils,default,return,null
CachingConfigurationSelector -> public String[] selectImports(AdviceMode adviceMode);1335774711;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return new String[] { AutoProxyRegistrar.class.getName(), ProxyCachingConfiguration.class.getName() }__			case ASPECTJ:_				return new String[] { AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME }__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,new,string,auto,proxy,registrar,class,get,name,proxy,caching,configuration,class,get,name,case,aspectj,return,new,string,annotation,config,utils,default,return,null
CachingConfigurationSelector -> public String[] selectImports(AdviceMode adviceMode);1357119239;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return new String[] { AutoProxyRegistrar.class.getName(), ProxyCachingConfiguration.class.getName() }__			case ASPECTJ:_				return new String[] { AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME }__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,new,string,auto,proxy,registrar,class,get,name,proxy,caching,configuration,class,get,name,case,aspectj,return,new,string,annotation,config,utils,default,return,null
CachingConfigurationSelector -> private String[] getProxyImports();1396865240;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getProxyImports() {_		List<String> result = new ArrayList<String>()__		result.add(AutoProxyRegistrar.class.getName())__		result.add(ProxyCachingConfiguration.class.getName())__		if (isJCacheAvailable()) {_			result.add(PROXY_JCACHE_CONFIGURATION_CLASS)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,proxy,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,proxy,imports,list,string,result,new,array,list,string,result,add,auto,proxy,registrar,class,get,name,result,add,proxy,caching,configuration,class,get,name,if,is,jcache,available,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getProxyImports();1406577501;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getProxyImports() {_		List<String> result = new ArrayList<String>()__		result.add(AutoProxyRegistrar.class.getName())__		result.add(ProxyCachingConfiguration.class.getName())__		if (jsr107Present && jCacheImplPresent) {_			result.add(PROXY_JCACHE_CONFIGURATION_CLASS)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,proxy,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,proxy,imports,list,string,result,new,array,list,string,result,add,auto,proxy,registrar,class,get,name,result,add,proxy,caching,configuration,class,get,name,if,jsr107present,j,cache,impl,present,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getProxyImports();1406581508;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getProxyImports() {_		List<String> result = new ArrayList<String>()__		result.add(AutoProxyRegistrar.class.getName())__		result.add(ProxyCachingConfiguration.class.getName())__		if (jsr107Present && jCacheImplPresent) {_			result.add(PROXY_JCACHE_CONFIGURATION_CLASS)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,proxy,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,proxy,imports,list,string,result,new,array,list,string,result,add,auto,proxy,registrar,class,get,name,result,add,proxy,caching,configuration,class,get,name,if,jsr107present,j,cache,impl,present,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getProxyImports();1467677340;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getProxyImports() {_		List<String> result = new ArrayList<String>()__		result.add(AutoProxyRegistrar.class.getName())__		result.add(ProxyCachingConfiguration.class.getName())__		if (jsr107Present && jcacheImplPresent) {_			result.add(PROXY_JCACHE_CONFIGURATION_CLASS)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,proxy,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,proxy,imports,list,string,result,new,array,list,string,result,add,auto,proxy,registrar,class,get,name,result,add,proxy,caching,configuration,class,get,name,if,jsr107present,jcache,impl,present,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getProxyImports();1467730834;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getProxyImports() {_		List<String> result = new ArrayList<>()__		result.add(AutoProxyRegistrar.class.getName())__		result.add(ProxyCachingConfiguration.class.getName())__		if (jsr107Present && jcacheImplPresent) {_			result.add(PROXY_JCACHE_CONFIGURATION_CLASS)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,proxy,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,proxy,imports,list,string,result,new,array,list,result,add,auto,proxy,registrar,class,get,name,result,add,proxy,caching,configuration,class,get,name,if,jsr107present,jcache,impl,present,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getProxyImports();1518810557;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getProxyImports() {_		List<String> result = new ArrayList<>()__		result.add(AutoProxyRegistrar.class.getName())__		result.add(ProxyCachingConfiguration.class.getName())__		if (jsr107Present && jcacheImplPresent) {_			result.add(PROXY_JCACHE_CONFIGURATION_CLASS)__		}_		return StringUtils.toStringArray(result)__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,proxy,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,proxy,imports,list,string,result,new,array,list,result,add,auto,proxy,registrar,class,get,name,result,add,proxy,caching,configuration,class,get,name,if,jsr107present,jcache,impl,present,result,add,return,string,utils,to,string,array,result
CachingConfigurationSelector -> private String[] getProxyImports();1532509782;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getProxyImports() {_		List<String> result = new ArrayList<>()__		result.add(AutoProxyRegistrar.class.getName())__		result.add(ProxyCachingConfiguration.class.getName())__		if (jsr107Present && jcacheImplPresent) {_			result.add(PROXY_JCACHE_CONFIGURATION_CLASS)__		}_		return StringUtils.toStringArray(result)__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,proxy,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,proxy,imports,list,string,result,new,array,list,result,add,auto,proxy,registrar,class,get,name,result,add,proxy,caching,configuration,class,get,name,if,jsr107present,jcache,impl,present,result,add,return,string,utils,to,string,array,result
CachingConfigurationSelector -> private String[] getProxyImports();1532640050;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#PROXY}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getProxyImports() {_		List<String> result = new ArrayList<>(3)__		result.add(AutoProxyRegistrar.class.getName())__		result.add(ProxyCachingConfiguration.class.getName())__		if (jsr107Present && jcacheImplPresent) {_			result.add(PROXY_JCACHE_CONFIGURATION_CLASS)__		}_		return StringUtils.toStringArray(result)__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,proxy,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,proxy,imports,list,string,result,new,array,list,3,result,add,auto,proxy,registrar,class,get,name,result,add,proxy,caching,configuration,class,get,name,if,jsr107present,jcache,impl,present,result,add,return,string,utils,to,string,array,result
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1356735495;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return new String[] { AutoProxyRegistrar.class.getName(), ProxyCachingConfiguration.class.getName() }__			case ASPECTJ:_				return new String[] { AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME }__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,new,string,auto,proxy,registrar,class,get,name,proxy,caching,configuration,class,get,name,case,aspectj,return,new,string,annotation,config,utils,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1368482696;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return new String[] { AutoProxyRegistrar.class.getName(), ProxyCachingConfiguration.class.getName() }__			case ASPECTJ:_				return new String[] { AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME }__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,new,string,auto,proxy,registrar,class,get,name,proxy,caching,configuration,class,get,name,case,aspectj,return,new,string,annotation,config,utils,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1396865240;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return getProxyImports()__			case ASPECTJ:_				return getAspectJImports()__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,get,proxy,imports,case,aspectj,return,get,aspect,jimports,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1406577501;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return getProxyImports()__			case ASPECTJ:_				return getAspectJImports()__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,get,proxy,imports,case,aspectj,return,get,aspect,jimports,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1406581508;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return getProxyImports()__			case ASPECTJ:_				return getAspectJImports()__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,get,proxy,imports,case,aspectj,return,get,aspect,jimports,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1467677340;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return getProxyImports()__			case ASPECTJ:_				return getAspectJImports()__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,get,proxy,imports,case,aspectj,return,get,aspect,jimports,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1467730834;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return getProxyImports()__			case ASPECTJ:_				return getAspectJImports()__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,get,proxy,imports,case,aspectj,return,get,aspect,jimports,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1518810557;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return getProxyImports()__			case ASPECTJ:_				return getAspectJImports()__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,get,proxy,imports,case,aspectj,return,get,aspect,jimports,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1532509782;{@inheritDoc}_@return {@link ProxyCachingConfiguration} or {@code AspectJCacheConfiguration} for_{@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()}, respectively;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return getProxyImports()__			case ASPECTJ:_				return getAspectJImports()__			default:_				return null__		}_	};inherit,doc,return,link,proxy,caching,configuration,or,code,aspect,jcache,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,get,proxy,imports,case,aspectj,return,get,aspect,jimports,default,return,null
CachingConfigurationSelector -> @Override 	public String[] selectImports(AdviceMode adviceMode);1532640050;Returns {@link ProxyCachingConfiguration} or {@code AspectJCachingConfiguration}_for {@code PROXY} and {@code ASPECTJ} values of {@link EnableCaching#mode()},_respectively. Potentially includes corresponding JCache configuration as well.;@Override_	public String[] selectImports(AdviceMode adviceMode) {_		switch (adviceMode) {_			case PROXY:_				return getProxyImports()__			case ASPECTJ:_				return getAspectJImports()__			default:_				return null__		}_	};returns,link,proxy,caching,configuration,or,code,aspect,jcaching,configuration,for,code,proxy,and,code,aspectj,values,of,link,enable,caching,mode,respectively,potentially,includes,corresponding,jcache,configuration,as,well;override,public,string,select,imports,advice,mode,advice,mode,switch,advice,mode,case,proxy,return,get,proxy,imports,case,aspectj,return,get,aspect,jimports,default,return,null
CachingConfigurationSelector -> private String[] getAspectJImports();1396865240;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#ASPECTJ}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getAspectJImports() {_		List<String> result = new ArrayList<String>()__		result.add(AnnotationConfigUtils.CACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		if (isJCacheAvailable()) {_			result.add(AnnotationConfigUtils.JCACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,aspectj,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,aspect,jimports,list,string,result,new,array,list,string,result,add,annotation,config,utils,if,is,jcache,available,result,add,annotation,config,utils,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getAspectJImports();1406577501;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#ASPECTJ}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getAspectJImports() {_		List<String> result = new ArrayList<String>()__		result.add(CACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		if (jsr107Present && jCacheImplPresent) {_			result.add(JCACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,aspectj,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,aspect,jimports,list,string,result,new,array,list,string,result,add,if,jsr107present,j,cache,impl,present,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getAspectJImports();1406581508;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#ASPECTJ}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getAspectJImports() {_		List<String> result = new ArrayList<String>()__		result.add(CACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		if (jsr107Present && jCacheImplPresent) {_			result.add(JCACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,aspectj,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,aspect,jimports,list,string,result,new,array,list,string,result,add,if,jsr107present,j,cache,impl,present,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getAspectJImports();1467677340;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#ASPECTJ}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getAspectJImports() {_		List<String> result = new ArrayList<String>()__		result.add(CACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		if (jsr107Present && jcacheImplPresent) {_			result.add(JCACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,aspectj,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,aspect,jimports,list,string,result,new,array,list,string,result,add,if,jsr107present,jcache,impl,present,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getAspectJImports();1467730834;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#ASPECTJ}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getAspectJImports() {_		List<String> result = new ArrayList<>()__		result.add(CACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		if (jsr107Present && jcacheImplPresent) {_			result.add(JCACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		}_		return result.toArray(new String[result.size()])__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,aspectj,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,aspect,jimports,list,string,result,new,array,list,result,add,if,jsr107present,jcache,impl,present,result,add,return,result,to,array,new,string,result,size
CachingConfigurationSelector -> private String[] getAspectJImports();1518810557;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#ASPECTJ}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getAspectJImports() {_		List<String> result = new ArrayList<>()__		result.add(CACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		if (jsr107Present && jcacheImplPresent) {_			result.add(JCACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		}_		return StringUtils.toStringArray(result)__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,aspectj,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,aspect,jimports,list,string,result,new,array,list,result,add,if,jsr107present,jcache,impl,present,result,add,return,string,utils,to,string,array,result
CachingConfigurationSelector -> private String[] getAspectJImports();1532509782;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#ASPECTJ}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getAspectJImports() {_		List<String> result = new ArrayList<>()__		result.add(CACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		if (jsr107Present && jcacheImplPresent) {_			result.add(JCACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		}_		return StringUtils.toStringArray(result)__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,aspectj,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,aspect,jimports,list,string,result,new,array,list,result,add,if,jsr107present,jcache,impl,present,result,add,return,string,utils,to,string,array,result
CachingConfigurationSelector -> private String[] getAspectJImports();1532640050;Return the imports to use if the {@link AdviceMode} is set to {@link AdviceMode#ASPECTJ}._<p>Take care of adding the necessary JSR-107 import if it is available.;private String[] getAspectJImports() {_		List<String> result = new ArrayList<>(2)__		result.add(CACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		if (jsr107Present && jcacheImplPresent) {_			result.add(JCACHE_ASPECT_CONFIGURATION_CLASS_NAME)__		}_		return StringUtils.toStringArray(result)__	};return,the,imports,to,use,if,the,link,advice,mode,is,set,to,link,advice,mode,aspectj,p,take,care,of,adding,the,necessary,jsr,107,import,if,it,is,available;private,string,get,aspect,jimports,list,string,result,new,array,list,2,result,add,if,jsr107present,jcache,impl,present,result,add,return,string,utils,to,string,array,result
