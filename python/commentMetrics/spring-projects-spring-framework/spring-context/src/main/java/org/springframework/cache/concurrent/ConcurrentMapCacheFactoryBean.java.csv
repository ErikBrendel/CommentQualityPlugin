commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the name of the cache.  * <p>Default is "" (empty String).  */ ;/**  * Specify the name of the cache.  * <p>Default is "" (empty String).  */ public void setName(String name) {     this.name = name. }
true;public;1;3;/**  * Specify the ConcurrentMap to use as an internal store  * (possibly pre-populated).  * <p>Default is a standard {@link java.util.concurrent.ConcurrentHashMap}.  */ ;/**  * Specify the ConcurrentMap to use as an internal store  * (possibly pre-populated).  * <p>Default is a standard {@link java.util.concurrent.ConcurrentHashMap}.  */ public void setStore(ConcurrentMap<Object, Object> store) {     this.store = store. }
true;public;1;3;/**  * Set whether to allow {@code null} values  * (adapting them to an internal null holder value).  * <p>Default is "true".  */ ;/**  * Set whether to allow {@code null} values  * (adapting them to an internal null holder value).  * <p>Default is "true".  */ public void setAllowNullValues(boolean allowNullValues) {     this.allowNullValues = allowNullValues. }
false;public;1;6;;@Override public void setBeanName(String beanName) {     if (!StringUtils.hasLength(this.name)) {         setName(beanName).     } }
false;public;0;5;;@Override public void afterPropertiesSet() {     this.cache = (this.store != null ? new ConcurrentMapCache(this.name, this.store, this.allowNullValues) : new ConcurrentMapCache(this.name, this.allowNullValues)). }
false;public;0;5;;@Override @Nullable public ConcurrentMapCache getObject() {     return this.cache. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return ConcurrentMapCache.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
