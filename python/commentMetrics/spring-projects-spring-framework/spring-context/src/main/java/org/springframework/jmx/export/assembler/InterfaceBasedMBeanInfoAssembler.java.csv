# id;timestamp;commentText;codeText;commentWords;codeWords
InterfaceBasedMBeanInfoAssembler -> private Class[] resolveClassNames(String[] classNames, String beanKey);1328020251;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class[] resolveClassNames(String[] classNames, String beanKey) {_		Class[] classes = new Class[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> private Class[] resolveClassNames(String[] classNames, String beanKey);1356735495;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class[] resolveClassNames(String[] classNames, String beanKey) {_		Class[] classes = new Class[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> private Class[] resolveClassNames(String[] classNames, String beanKey);1357119239;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class[] resolveClassNames(String[] classNames, String beanKey) {_		Class[] classes = new Class[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> private Class[] resolveClassNames(String[] classNames, String beanKey);1368482696;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class[] resolveClassNames(String[] classNames, String beanKey) {_		Class[] classes = new Class[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1328020251;Check to see if the <code>Method</code> is declared in_one of the configured interfaces and that it is public._@param method the mutator <code>Method</code>._@param beanKey the key associated with the MBean in the_<code>beans</code> <code>Map</code>._@return <code>true</code> if the <code>Method</code> is declared in one of the_configured interfaces, otherwise <code>false</code>.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,code,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,code,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,code,map,code,return,code,true,code,if,the,code,method,code,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false,code;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1356735495;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1357119239;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1368482696;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1385412762;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1467730834;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1496242568;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1496837955;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1498780456;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeWriteAttribute(Method method, String beanKey);1530174524;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the mutator {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeWriteAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,mutator,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,write,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1328020251;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		if (ifaces != null) {_			for (Class ifc : ifaces) {_				for (Method ifcMethod : ifc.getMethods()) {_					if (ifcMethod.getName().equals(method.getName()) &&_							Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_						return true__					}_				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,if,ifaces,null,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1356735495;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		if (ifaces != null) {_			for (Class ifc : ifaces) {_				for (Method ifcMethod : ifc.getMethods()) {_					if (ifcMethod.getName().equals(method.getName()) &&_							Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_						return true__					}_				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,if,ifaces,null,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1357119239;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		if (ifaces != null) {_			for (Class ifc : ifaces) {_				for (Method ifcMethod : ifc.getMethods()) {_					if (ifcMethod.getName().equals(method.getName()) &&_							Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_						return true__					}_				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,if,ifaces,null,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1368482696;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		if (ifaces != null) {_			for (Class ifc : ifaces) {_				for (Method ifcMethod : ifc.getMethods()) {_					if (ifcMethod.getName().equals(method.getName()) &&_							Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_						return true__					}_				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,if,ifaces,null,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1385412762;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class<?>[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		if (ifaces != null) {_			for (Class<?> ifc : ifaces) {_				for (Method ifcMethod : ifc.getMethods()) {_					if (ifcMethod.getName().equals(method.getName()) &&_							Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_						return true__					}_				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,if,ifaces,null,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1467730834;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class<?>[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		if (ifaces != null) {_			for (Class<?> ifc : ifaces) {_				for (Method ifcMethod : ifc.getMethods()) {_					if (ifcMethod.getName().equals(method.getName()) &&_							Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_						return true__					}_				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,if,ifaces,null,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1496242568;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class<?>[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		if (ifaces != null) {_			for (Class<?> ifc : ifaces) {_				for (Method ifcMethod : ifc.getMethods()) {_					if (ifcMethod.getName().equals(method.getName()) &&_							Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_						return true__					}_				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,if,ifaces,null,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1496837955;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class<?>[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		for (Class<?> ifc : ifaces) {_			for (Method ifcMethod : ifc.getMethods()) {_				if (ifcMethod.getName().equals(method.getName()) &&_						Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_					return true__				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1498780456;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class<?>[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		for (Class<?> ifc : ifaces) {_			for (Method ifcMethod : ifc.getMethods()) {_				if (ifcMethod.getName().equals(method.getName()) &&_						Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_					return true__				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> private boolean isDeclaredInInterface(Method method, String beanKey);1530174524;Checks to see if the given method is declared in a managed_interface for the given bean.;private boolean isDeclaredInInterface(Method method, String beanKey) {_		Class<?>[] ifaces = null___		if (this.resolvedInterfaceMappings != null) {_			ifaces = this.resolvedInterfaceMappings.get(beanKey)__		}__		if (ifaces == null) {_			ifaces = this.managedInterfaces__			if (ifaces == null) {_				ifaces = ClassUtils.getAllInterfacesForClass(method.getDeclaringClass())__			}_		}__		for (Class<?> ifc : ifaces) {_			for (Method ifcMethod : ifc.getMethods()) {_				if (ifcMethod.getName().equals(method.getName()) &&_						Arrays.equals(ifcMethod.getParameterTypes(), method.getParameterTypes())) {_					return true__				}_			}_		}__		return false__	};checks,to,see,if,the,given,method,is,declared,in,a,managed,interface,for,the,given,bean;private,boolean,is,declared,in,interface,method,method,string,bean,key,class,ifaces,null,if,this,resolved,interface,mappings,null,ifaces,this,resolved,interface,mappings,get,bean,key,if,ifaces,null,ifaces,this,managed,interfaces,if,ifaces,null,ifaces,class,utils,get,all,interfaces,for,class,method,get,declaring,class,for,class,ifc,ifaces,for,method,ifc,method,ifc,get,methods,if,ifc,method,get,name,equals,method,get,name,arrays,equals,ifc,method,get,parameter,types,method,get,parameter,types,return,true,return,false
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(Properties mappings);1328020251;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappins of bean keys to interface names;public void setInterfaceMappings(Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappins,of,bean,keys,to,interface,names;public,void,set,interface,mappings,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(Properties mappings);1356735495;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappins of bean keys to interface names;public void setInterfaceMappings(Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappins,of,bean,keys,to,interface,names;public,void,set,interface,mappings,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(Properties mappings);1357119239;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappins of bean keys to interface names;public void setInterfaceMappings(Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappins,of,bean,keys,to,interface,names;public,void,set,interface,mappings,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(Properties mappings);1368482696;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappins of bean keys to interface names;public void setInterfaceMappings(Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappins,of,bean,keys,to,interface,names;public,void,set,interface,mappings,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(Properties mappings);1385412762;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappins of bean keys to interface names;public void setInterfaceMappings(Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappins,of,bean,keys,to,interface,names;public,void,set,interface,mappings,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(Properties mappings);1467730834;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappins of bean keys to interface names;public void setInterfaceMappings(Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappins,of,bean,keys,to,interface,names;public,void,set,interface,mappings,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(Properties mappings);1496242568;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappins of bean keys to interface names;public void setInterfaceMappings(Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappins,of,bean,keys,to,interface,names;public,void,set,interface,mappings,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings);1385412762;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class<?>[]> resolvedMappings = new HashMap<String, Class<?>[]>(mappings.size())__		for (Enumeration<?> en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class<?>[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,string,class,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings);1467730834;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class<?>[]> resolvedMappings = new HashMap<>(mappings.size())__		for (Enumeration<?> en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class<?>[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings);1496242568;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class<?>[]> resolvedMappings = new HashMap<>(mappings.size())__		for (Enumeration<?> en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class<?>[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings);1496837955;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class<?>[]> resolvedMappings = new HashMap<>(mappings.size())__		for (Enumeration<?> en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class<?>[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings);1498780456;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class<?>[]> resolvedMappings = new HashMap<>(mappings.size())__		for (Enumeration<?> en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class<?>[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings);1530174524;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class<?>[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class<?>[]> resolvedMappings = new HashMap<>(mappings.size())__		for (Enumeration<?> en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class<?>[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1328020251;Check to see if the <code>Method</code> is both public and declared in_one of the configured interfaces._@param method the <code>Method</code> to check._@param beanKey the key associated with the MBean in the beans map_@return <code>true</code> if the <code>Method</code> is declared in one of the_configured interfaces and is public, otherwise <code>false</code>.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,code,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,code,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,code,if,the,code,method,code,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false,code;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1356735495;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1357119239;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1368482696;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1385412762;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1467730834;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1496242568;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1496837955;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1498780456;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> private boolean isPublicInInterface(Method method, String beanKey);1530174524;Check to see if the {@code Method} is both public and declared in_one of the configured interfaces._@param method the {@code Method} to check._@param beanKey the key associated with the MBean in the beans map_@return {@code true} if the {@code Method} is declared in one of the_configured interfaces and is public, otherwise {@code false}.;private boolean isPublicInInterface(Method method, String beanKey) {_		return ((method.getModifiers() & Modifier.PUBLIC) > 0) && isDeclaredInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,both,public,and,declared,in,one,of,the,configured,interfaces,param,method,the,code,method,to,check,param,bean,key,the,key,associated,with,the,mbean,in,the,beans,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,is,public,otherwise,code,false;private,boolean,is,public,in,interface,method,method,string,bean,key,return,method,get,modifiers,modifier,public,0,is,declared,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1328020251;Check to see if the <code>Method</code> is declared in_one of the configured interfaces and that it is public._@param method the accessor <code>Method</code>._@param beanKey the key associated with the MBean in the_<code>beans</code> <code>Map</code>._@return <code>true</code> if the <code>Method</code> is declared in one of the_configured interfaces, otherwise <code>false</code>.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,code,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,code,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,code,map,code,return,code,true,code,if,the,code,method,code,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false,code;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1356735495;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1357119239;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1368482696;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1385412762;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1467730834;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1496242568;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1496837955;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1498780456;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeReadAttribute(Method method, String beanKey);1530174524;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the accessor {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeReadAttribute(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,accessor,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,read,attribute,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1328020251;Check to see if the <code>Method</code> is declared in_one of the configured interfaces and that it is public._@param method the operation <code>Method</code>._@param beanKey the key associated with the MBean in the_<code>beans</code> <code>Map</code>._@return <code>true</code> if the <code>Method</code> is declared in one of the_configured interfaces, otherwise <code>false</code>.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,code,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,code,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,code,map,code,return,code,true,code,if,the,code,method,code,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false,code;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1356735495;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1357119239;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1368482696;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1385412762;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1467730834;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1496242568;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1496837955;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1498780456;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> @Override 	protected boolean includeOperation(Method method, String beanKey);1530174524;Check to see if the {@code Method} is declared in_one of the configured interfaces and that it is public._@param method the operation {@code Method}._@param beanKey the key associated with the MBean in the_{@code beans} {@code Map}._@return {@code true} if the {@code Method} is declared in one of the_configured interfaces, otherwise {@code false}.;@Override_	protected boolean includeOperation(Method method, String beanKey) {_		return isPublicInInterface(method, beanKey)__	};check,to,see,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,and,that,it,is,public,param,method,the,operation,code,method,param,bean,key,the,key,associated,with,the,mbean,in,the,code,beans,code,map,return,code,true,if,the,code,method,is,declared,in,one,of,the,configured,interfaces,otherwise,code,false;override,protected,boolean,include,operation,method,method,string,bean,key,return,is,public,in,interface,method,bean,key
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(@Nullable Class<?>... managedInterfaces);1496837955;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(@Nullable Class<?>... managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,nullable,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(@Nullable Class<?>... managedInterfaces);1498780456;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(@Nullable Class<?>... managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,nullable,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(@Nullable Class<?>... managedInterfaces);1530174524;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(@Nullable Class<?>... managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,nullable,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(Class[] managedInterfaces);1328020251;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the <code>interfaceMappings</code> property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(Class[] managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,code,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(Class[] managedInterfaces);1356735495;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(Class[] managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(Class[] managedInterfaces);1357119239;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(Class[] managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(Class[] managedInterfaces);1368482696;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(Class[] managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class[]> resolveInterfaceMappings(Properties mappings);1328020251;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class[]> resolvedMappings = new HashMap<String, Class[]>(mappings.size())__		for (Enumeration en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,string,class,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class[]> resolveInterfaceMappings(Properties mappings);1356735495;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class[]> resolvedMappings = new HashMap<String, Class[]>(mappings.size())__		for (Enumeration en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,string,class,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class[]> resolveInterfaceMappings(Properties mappings);1357119239;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class[]> resolvedMappings = new HashMap<String, Class[]>(mappings.size())__		for (Enumeration en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,string,class,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> private Map<String, Class[]> resolveInterfaceMappings(Properties mappings);1368482696;Resolve the given interface mappings, turning class names into Class objects._@param mappings the specified interface mappings_@return the resolved interface mappings (with Class objects as values);private Map<String, Class[]> resolveInterfaceMappings(Properties mappings) {_		Map<String, Class[]> resolvedMappings = new HashMap<String, Class[]>(mappings.size())__		for (Enumeration en = mappings.propertyNames()_ en.hasMoreElements()_) {_			String beanKey = (String) en.nextElement()__			String[] classNames = StringUtils.commaDelimitedListToStringArray(mappings.getProperty(beanKey))__			Class[] classes = resolveClassNames(classNames, beanKey)__			resolvedMappings.put(beanKey, classes)__		}_		return resolvedMappings__	};resolve,the,given,interface,mappings,turning,class,names,into,class,objects,param,mappings,the,specified,interface,mappings,return,the,resolved,interface,mappings,with,class,objects,as,values;private,map,string,class,resolve,interface,mappings,properties,mappings,map,string,class,resolved,mappings,new,hash,map,string,class,mappings,size,for,enumeration,en,mappings,property,names,en,has,more,elements,string,bean,key,string,en,next,element,string,class,names,string,utils,comma,delimited,list,to,string,array,mappings,get,property,bean,key,class,classes,resolve,class,names,class,names,bean,key,resolved,mappings,put,bean,key,classes,return,resolved,mappings
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(Class<?>[] managedInterfaces);1385412762;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(Class<?>[] managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(Class<?>[] managedInterfaces);1467730834;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(Class<?>[] managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setManagedInterfaces(Class<?>[] managedInterfaces);1496242568;Set the array of interfaces to use for creating the management info._These interfaces will be used for a bean if no entry corresponding to_that bean is found in the {@code interfaceMappings} property._@param managedInterfaces an array of classes indicating the interfaces to use._Each entry <strong>MUST</strong> be an interface._@see #setInterfaceMappings;public void setManagedInterfaces(Class<?>[] managedInterfaces) {_		if (managedInterfaces != null) {_			for (Class<?> ifc : managedInterfaces) {_				if (!ifc.isInterface()) {_					throw new IllegalArgumentException(_							"Management interface [" + ifc.getName() + "] is not an interface")__				}_			}_		}_		this.managedInterfaces = managedInterfaces__	};set,the,array,of,interfaces,to,use,for,creating,the,management,info,these,interfaces,will,be,used,for,a,bean,if,no,entry,corresponding,to,that,bean,is,found,in,the,code,interface,mappings,property,param,managed,interfaces,an,array,of,classes,indicating,the,interfaces,to,use,each,entry,strong,must,strong,be,an,interface,see,set,interface,mappings;public,void,set,managed,interfaces,class,managed,interfaces,if,managed,interfaces,null,for,class,ifc,managed,interfaces,if,ifc,is,interface,throw,new,illegal,argument,exception,management,interface,ifc,get,name,is,not,an,interface,this,managed,interfaces,managed,interfaces
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(@Nullable Properties mappings);1496837955;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappings of bean keys to interface names;public void setInterfaceMappings(@Nullable Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappings,of,bean,keys,to,interface,names;public,void,set,interface,mappings,nullable,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(@Nullable Properties mappings);1498780456;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappings of bean keys to interface names;public void setInterfaceMappings(@Nullable Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappings,of,bean,keys,to,interface,names;public,void,set,interface,mappings,nullable,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> public void setInterfaceMappings(@Nullable Properties mappings);1530174524;Set the mappings of bean keys to a comma-separated list of interface names._<p>The property key should match the bean key and the property value should match_the list of interface names. When searching for interfaces for a bean, Spring_will check these mappings first._@param mappings the mappings of bean keys to interface names;public void setInterfaceMappings(@Nullable Properties mappings) {_		this.interfaceMappings = mappings__	};set,the,mappings,of,bean,keys,to,a,comma,separated,list,of,interface,names,p,the,property,key,should,match,the,bean,key,and,the,property,value,should,match,the,list,of,interface,names,when,searching,for,interfaces,for,a,bean,spring,will,check,these,mappings,first,param,mappings,the,mappings,of,bean,keys,to,interface,names;public,void,set,interface,mappings,nullable,properties,mappings,this,interface,mappings,mappings
InterfaceBasedMBeanInfoAssembler -> private Class<?>[] resolveClassNames(String[] classNames, String beanKey);1385412762;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class<?>[] resolveClassNames(String[] classNames, String beanKey) {_		Class<?>[] classes = new Class<?>[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class<?> cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> private Class<?>[] resolveClassNames(String[] classNames, String beanKey);1467730834;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class<?>[] resolveClassNames(String[] classNames, String beanKey) {_		Class<?>[] classes = new Class<?>[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class<?> cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> private Class<?>[] resolveClassNames(String[] classNames, String beanKey);1496242568;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class<?>[] resolveClassNames(String[] classNames, String beanKey) {_		Class<?>[] classes = new Class<?>[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class<?> cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> private Class<?>[] resolveClassNames(String[] classNames, String beanKey);1496837955;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class<?>[] resolveClassNames(String[] classNames, String beanKey) {_		Class<?>[] classes = new Class<?>[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class<?> cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> private Class<?>[] resolveClassNames(String[] classNames, String beanKey);1498780456;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class<?>[] resolveClassNames(String[] classNames, String beanKey) {_		Class<?>[] classes = new Class<?>[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class<?> cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
InterfaceBasedMBeanInfoAssembler -> private Class<?>[] resolveClassNames(String[] classNames, String beanKey);1530174524;Resolve the given class names into Class objects._@param classNames the class names to resolve_@param beanKey the bean key that the class names are associated with_@return the resolved Class;private Class<?>[] resolveClassNames(String[] classNames, String beanKey) {_		Class<?>[] classes = new Class<?>[classNames.length]__		for (int x = 0_ x < classes.length_ x++) {_			Class<?> cls = ClassUtils.resolveClassName(classNames[x].trim(), this.beanClassLoader)__			if (!cls.isInterface()) {_				throw new IllegalArgumentException(_						"Class [" + classNames[x] + "] mapped to bean key [" + beanKey + "] is no interface")__			}_			classes[x] = cls__		}_		return classes__	};resolve,the,given,class,names,into,class,objects,param,class,names,the,class,names,to,resolve,param,bean,key,the,bean,key,that,the,class,names,are,associated,with,return,the,resolved,class;private,class,resolve,class,names,string,class,names,string,bean,key,class,classes,new,class,class,names,length,for,int,x,0,x,classes,length,x,class,cls,class,utils,resolve,class,name,class,names,x,trim,this,bean,class,loader,if,cls,is,interface,throw,new,illegal,argument,exception,class,class,names,x,mapped,to,bean,key,bean,key,is,no,interface,classes,x,cls,return,classes
