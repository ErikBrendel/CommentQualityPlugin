# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1337516454;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotationUtils.findAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Async.class)__		}_		return async == null ? null : async.value()__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotation,utils,find,annotation,method,async,class,if,async,null,async,annotation,utils,find,annotation,method,get,declaring,class,async,class,return,async,null,null,async,value
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1340831065;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotationUtils.findAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Async.class)__		}_		return async == null ? null : async.value()__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotation,utils,find,annotation,method,async,class,if,async,null,async,annotation,utils,find,annotation,method,get,declaring,class,async,class,return,async,null,null,async,value
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1362408075;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotationUtils.findAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Async.class)__		}_		return (async != null ? async.value() : null)__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotation,utils,find,annotation,method,async,class,if,async,null,async,annotation,utils,find,annotation,method,get,declaring,class,async,class,return,async,null,async,value,null
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1396443880;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotationUtils.findAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Async.class)__		}_		return (async != null ? async.value() : null)__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotation,utils,find,annotation,method,async,class,if,async,null,async,annotation,utils,find,annotation,method,get,declaring,class,async,class,return,async,null,async,value,null
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1398721027;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotationUtils.findAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Async.class)__		}_		return (async != null ? async.value() : null)__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotation,utils,find,annotation,method,async,class,if,async,null,async,annotation,utils,find,annotation,method,get,declaring,class,async,class,return,async,null,async,value,null
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1408351881;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotationUtils.findAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Async.class)__		}_		return (async != null ? async.value() : null)__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotation,utils,find,annotation,method,async,class,if,async,null,async,annotation,utils,find,annotation,method,get,declaring,class,async,class,return,async,null,async,value,null
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1408352638;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotationUtils.findAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Async.class)__		}_		return (async != null ? async.value() : null)__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotation,utils,find,annotation,method,async,class,if,async,null,async,annotation,utils,find,annotation,method,get,declaring,class,async,class,return,async,null,async,value,null
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1457735038;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotationUtils.findAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotationUtils.findAnnotation(method.getDeclaringClass(), Async.class)__		}_		return (async != null ? async.value() : null)__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotation,utils,find,annotation,method,async,class,if,async,null,async,annotation,utils,find,annotation,method,get,declaring,class,async,class,return,async,null,async,value,null
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1458754760;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotatedElementUtils.findMergedAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotatedElementUtils.findMergedAnnotation(method.getDeclaringClass(), Async.class)__		}_		return (async != null ? async.value() : null)__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotated,element,utils,find,merged,annotation,method,async,class,if,async,null,async,annotated,element,utils,find,merged,annotation,method,get,declaring,class,async,class,return,async,null,async,value,null
AnnotationAsyncExecutionInterceptor -> @Override 	protected String getExecutorQualifier(Method method);1496837955;Return the qualifier or bean name of the executor to be used when executing the_given method, specified via {@link Async#value} at the method or declaring_class level. If {@code @Async} is specified at both the method and class level, the_method's {@code #value} takes precedence (even if empty string, indicating that_the default executor should be used preferentially)._@param method the method to inspect for executor qualifier metadata_@return the qualifier if specified, otherwise empty string indicating that the_{@linkplain #setExecutor(Executor) default executor} should be used_@see #determineAsyncExecutor(Method);@Override_	protected String getExecutorQualifier(Method method) {_		_		_		Async async = AnnotatedElementUtils.findMergedAnnotation(method, Async.class)__		if (async == null) {_			async = AnnotatedElementUtils.findMergedAnnotation(method.getDeclaringClass(), Async.class)__		}_		return (async != null ? async.value() : null)__	};return,the,qualifier,or,bean,name,of,the,executor,to,be,used,when,executing,the,given,method,specified,via,link,async,value,at,the,method,or,declaring,class,level,if,code,async,is,specified,at,both,the,method,and,class,level,the,method,s,code,value,takes,precedence,even,if,empty,string,indicating,that,the,default,executor,should,be,used,preferentially,param,method,the,method,to,inspect,for,executor,qualifier,metadata,return,the,qualifier,if,specified,otherwise,empty,string,indicating,that,the,linkplain,set,executor,executor,default,executor,should,be,used,see,determine,async,executor,method;override,protected,string,get,executor,qualifier,method,method,async,async,annotated,element,utils,find,merged,annotation,method,async,class,if,async,null,async,annotated,element,utils,find,merged,annotation,method,get,declaring,class,async,class,return,async,null,async,value,null
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(@Nullable Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler);1496837955;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}__as of 4.2.6, a local executor for this interceptor will be built otherwise_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle exceptions thrown by asynchronous method executions with {@code void}_return type;public AnnotationAsyncExecutionInterceptor(@Nullable Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {_		super(defaultExecutor, exceptionHandler)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,as,of,4,2,6,a,local,executor,for,this,interceptor,will,be,built,otherwise,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,exceptions,thrown,by,asynchronous,method,executions,with,code,void,return,type;public,annotation,async,execution,interceptor,nullable,executor,default,executor,async,uncaught,exception,handler,exception,handler,super,default,executor,exception,handler
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(@Nullable Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler);1502974979;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}__as of 4.2.6, a local executor for this interceptor will be built otherwise_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle exceptions thrown by asynchronous method executions with {@code void}_return type;public AnnotationAsyncExecutionInterceptor(@Nullable Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {_		super(defaultExecutor, exceptionHandler)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,as,of,4,2,6,a,local,executor,for,this,interceptor,will,be,built,otherwise,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,exceptions,thrown,by,asynchronous,method,executions,with,code,void,return,type;public,annotation,async,execution,interceptor,nullable,executor,default,executor,async,uncaught,exception,handler,exception,handler,super,default,executor,exception,handler
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(@Nullable Executor defaultExecutor);1496837955;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor_and a simple {@link AsyncUncaughtExceptionHandler}._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}__as of 4.2.6, a local executor for this interceptor will be built otherwise;public AnnotationAsyncExecutionInterceptor(@Nullable Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,and,a,simple,link,async,uncaught,exception,handler,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,as,of,4,2,6,a,local,executor,for,this,interceptor,will,be,built,otherwise;public,annotation,async,execution,interceptor,nullable,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(@Nullable Executor defaultExecutor);1502974979;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor_and a simple {@link AsyncUncaughtExceptionHandler}._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}__as of 4.2.6, a local executor for this interceptor will be built otherwise;public AnnotationAsyncExecutionInterceptor(@Nullable Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,and,a,simple,link,async,uncaught,exception,handler,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,as,of,4,2,6,a,local,executor,for,this,interceptor,will,be,built,otherwise;public,annotation,async,execution,interceptor,nullable,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1337516454;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}.;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value;public,annotation,async,execution,interceptor,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1340831065;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}.;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value;public,annotation,async,execution,interceptor,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1362408075;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()};public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value;public,annotation,async,execution,interceptor,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1396443880;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor_and a simple {@link AsyncUncaughtExceptionHandler}._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()};public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		this(defaultExecutor, new SimpleAsyncUncaughtExceptionHandler())__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,and,a,simple,link,async,uncaught,exception,handler,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value;public,annotation,async,execution,interceptor,executor,default,executor,this,default,executor,new,simple,async,uncaught,exception,handler
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1398721027;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor_and a simple {@link AsyncUncaughtExceptionHandler}._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()};public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		this(defaultExecutor, new SimpleAsyncUncaughtExceptionHandler())__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,and,a,simple,link,async,uncaught,exception,handler,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value;public,annotation,async,execution,interceptor,executor,default,executor,this,default,executor,new,simple,async,uncaught,exception,handler
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1408351881;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor_and a simple {@link AsyncUncaughtExceptionHandler}._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()};public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,and,a,simple,link,async,uncaught,exception,handler,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value;public,annotation,async,execution,interceptor,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1408352638;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor_and a simple {@link AsyncUncaughtExceptionHandler}._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()};public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,and,a,simple,link,async,uncaught,exception,handler,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value;public,annotation,async,execution,interceptor,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1457735038;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor_and a simple {@link AsyncUncaughtExceptionHandler}._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}__as of 4.2.6, a local executor for this interceptor will be built otherwise;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,and,a,simple,link,async,uncaught,exception,handler,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,as,of,4,2,6,a,local,executor,for,this,interceptor,will,be,built,otherwise;public,annotation,async,execution,interceptor,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor);1458754760;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor_and a simple {@link AsyncUncaughtExceptionHandler}._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}__as of 4.2.6, a local executor for this interceptor will be built otherwise;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor) {_		super(defaultExecutor)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,and,a,simple,link,async,uncaught,exception,handler,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,as,of,4,2,6,a,local,executor,for,this,interceptor,will,be,built,otherwise;public,annotation,async,execution,interceptor,executor,default,executor,super,default,executor
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler);1398721027;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle exceptions thrown by asynchronous method executions with {@code void}_return type;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {_		super(defaultExecutor, exceptionHandler)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,exceptions,thrown,by,asynchronous,method,executions,with,code,void,return,type;public,annotation,async,execution,interceptor,executor,default,executor,async,uncaught,exception,handler,exception,handler,super,default,executor,exception,handler
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler);1408351881;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle exceptions thrown by asynchronous method executions with {@code void}_return type;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {_		super(defaultExecutor, exceptionHandler)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,exceptions,thrown,by,asynchronous,method,executions,with,code,void,return,type;public,annotation,async,execution,interceptor,executor,default,executor,async,uncaught,exception,handler,exception,handler,super,default,executor,exception,handler
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler);1408352638;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle exceptions thrown by asynchronous method executions with {@code void}_return type;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {_		super(defaultExecutor, exceptionHandler)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,exceptions,thrown,by,asynchronous,method,executions,with,code,void,return,type;public,annotation,async,execution,interceptor,executor,default,executor,async,uncaught,exception,handler,exception,handler,super,default,executor,exception,handler
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler);1457735038;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}__as of 4.2.6, a local executor for this interceptor will be built otherwise_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle exceptions thrown by asynchronous method executions with {@code void}_return type;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {_		super(defaultExecutor, exceptionHandler)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,as,of,4,2,6,a,local,executor,for,this,interceptor,will,be,built,otherwise,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,exceptions,thrown,by,asynchronous,method,executions,with,code,void,return,type;public,annotation,async,execution,interceptor,executor,default,executor,async,uncaught,exception,handler,exception,handler,super,default,executor,exception,handler
AnnotationAsyncExecutionInterceptor -> public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler);1458754760;Create a new {@code AnnotationAsyncExecutionInterceptor} with the given executor._@param defaultExecutor the executor to be used by default if no more specific_executor has been qualified at the method level using {@link Async#value()}__as of 4.2.6, a local executor for this interceptor will be built otherwise_@param exceptionHandler the {@link AsyncUncaughtExceptionHandler} to use to_handle exceptions thrown by asynchronous method executions with {@code void}_return type;public AnnotationAsyncExecutionInterceptor(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler) {_		super(defaultExecutor, exceptionHandler)__	};create,a,new,code,annotation,async,execution,interceptor,with,the,given,executor,param,default,executor,the,executor,to,be,used,by,default,if,no,more,specific,executor,has,been,qualified,at,the,method,level,using,link,async,value,as,of,4,2,6,a,local,executor,for,this,interceptor,will,be,built,otherwise,param,exception,handler,the,link,async,uncaught,exception,handler,to,use,to,handle,exceptions,thrown,by,asynchronous,method,executions,with,code,void,return,type;public,annotation,async,execution,interceptor,executor,default,executor,async,uncaught,exception,handler,exception,handler,super,default,executor,exception,handler
