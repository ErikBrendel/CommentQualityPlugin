commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected String resolveCodeWithoutArguments(String code, Locale locale) {     return this.messages.get(code + '_' + locale.toString()). }
false;protected;2;17;;@Override @Nullable protected MessageFormat resolveCode(String code, Locale locale) {     String key = code + '_' + locale.toString().     String msg = this.messages.get(key).     if (msg == null) {         return null.     }     synchronized (this.cachedMessageFormats) {         MessageFormat messageFormat = this.cachedMessageFormats.get(key).         if (messageFormat == null) {             messageFormat = createMessageFormat(msg, locale).             this.cachedMessageFormats.put(key, messageFormat).         }         return messageFormat.     } }
true;public;3;9;/**  * Associate the given message with the given code.  * @param code the lookup code  * @param locale the locale that the message should be found within  * @param msg the message associated with this lookup code  */ ;/**  * Associate the given message with the given code.  * @param code the lookup code  * @param locale the locale that the message should be found within  * @param msg the message associated with this lookup code  */ public void addMessage(String code, Locale locale, String msg) {     Assert.notNull(code, "Code must not be null").     Assert.notNull(locale, "Locale must not be null").     Assert.notNull(msg, "Message must not be null").     this.messages.put(code + '_' + locale.toString(), msg).     if (logger.isDebugEnabled()) {         logger.debug("Added message [" + msg + "] for code [" + code + "] and Locale [" + locale + "]").     } }
true;public;2;4;/**  * Associate the given message values with the given keys as codes.  * @param messages the messages to register, with messages codes  * as keys and message texts as values  * @param locale the locale that the messages should be found within  */ ;/**  * Associate the given message values with the given keys as codes.  * @param messages the messages to register, with messages codes  * as keys and message texts as values  * @param locale the locale that the messages should be found within  */ public void addMessages(Map<String, String> messages, Locale locale) {     Assert.notNull(messages, "Messages Map must not be null").     messages.forEach((code, msg) -> addMessage(code, locale, msg)). }
false;public;0;4;;@Override public String toString() {     return getClass().getName() + ": " + this.messages. }
