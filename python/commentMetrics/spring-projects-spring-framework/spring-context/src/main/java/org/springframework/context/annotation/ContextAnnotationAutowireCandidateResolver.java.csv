commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override @Nullable public Object getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, @Nullable String beanName) {     return (isLazy(descriptor) ? buildLazyResolutionProxy(descriptor, beanName) : null). }
false;protected;1;19;;protected boolean isLazy(DependencyDescriptor descriptor) {     for (Annotation ann : descriptor.getAnnotations()) {         Lazy lazy = AnnotationUtils.getAnnotation(ann, Lazy.class).         if (lazy != null && lazy.value()) {             return true.         }     }     MethodParameter methodParam = descriptor.getMethodParameter().     if (methodParam != null) {         Method method = methodParam.getMethod().         if (method == null || void.class == method.getReturnType()) {             Lazy lazy = AnnotationUtils.getAnnotation(methodParam.getAnnotatedElement(), Lazy.class).             if (lazy != null && lazy.value()) {                 return true.             }         }     }     return false. }
false;public;0;4;;@Override public Class<?> getTargetClass() {     return descriptor.getDependencyType(). }
false;public;0;4;;@Override public boolean isStatic() {     return false. }
false;public;0;19;;@Override public Object getTarget() {     Object target = beanFactory.doResolveDependency(descriptor, beanName, null, null).     if (target == null) {         Class<?> type = getTargetClass().         if (Map.class == type) {             return Collections.emptyMap().         } else if (List.class == type) {             return Collections.emptyList().         } else if (Set.class == type || Collection.class == type) {             return Collections.emptySet().         }         throw new NoSuchBeanDefinitionException(descriptor.getResolvableType(), "Optional dependency not present for lazy injection point").     }     return target. }
false;public;1;3;;@Override public void releaseTarget(Object target) { }
false;protected;2;44;;protected Object buildLazyResolutionProxy(final DependencyDescriptor descriptor, @Nullable final String beanName) {     Assert.state(getBeanFactory() instanceof DefaultListableBeanFactory, "BeanFactory needs to be a DefaultListableBeanFactory").     final DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) getBeanFactory().     TargetSource ts = new TargetSource() {          @Override         public Class<?> getTargetClass() {             return descriptor.getDependencyType().         }          @Override         public boolean isStatic() {             return false.         }          @Override         public Object getTarget() {             Object target = beanFactory.doResolveDependency(descriptor, beanName, null, null).             if (target == null) {                 Class<?> type = getTargetClass().                 if (Map.class == type) {                     return Collections.emptyMap().                 } else if (List.class == type) {                     return Collections.emptyList().                 } else if (Set.class == type || Collection.class == type) {                     return Collections.emptySet().                 }                 throw new NoSuchBeanDefinitionException(descriptor.getResolvableType(), "Optional dependency not present for lazy injection point").             }             return target.         }          @Override         public void releaseTarget(Object target) {         }     }.     ProxyFactory pf = new ProxyFactory().     pf.setTargetSource(ts).     Class<?> dependencyType = descriptor.getDependencyType().     if (dependencyType.isInterface()) {         pf.addInterface(dependencyType).     }     return pf.getProxy(beanFactory.getBeanClassLoader()). }
